<article title='APL_%28programming_language%29'><paragraph><template><target>distinguish</target><arg><space/>Address programming language</arg></template><template><target>redirects here</target><arg>APL programming language family</arg><arg>programming languages that were influenced by APL</arg><arg>Category:APL programming language family</arg></template><template><target>infobox programming language</target><arg name="name"><space/>APL
</arg><arg name="paradigm"><space/>[[array programming|array]], [[functional programming|functional]], [[structured programming|structured]], [[modular programming|modular]]
</arg><arg name="year"><space/>1964
</arg><arg name="designer"><space/>[[Kenneth E. Iverson]]
</arg><arg name="developer"><space/>[[Kenneth E. Iverson]]
</arg><arg name="latest release version">
</arg><arg name="latest release date">
</arg><arg name="typing"><space/>[[dynamic typing|dynamic]]
</arg><arg name="standards"><space/>ISO8485 (1989), ISO/IEC13751 (2001)
</arg><arg name="implementations"><space/>Dyalog APL, IBM APL2, APL2000, Sharp APL, [[APLX]], NARS2000,<ref>{{cite web|title</arg><arg name="dialects"><space/>[[A+ (programming language)|A+]], Dyalog APL, APLNext, [[ELI (programming language)|ELI]], [[J (programming language)|J]]
</arg><arg name="influenced_by"><space/>[[mathematical notation]]
</arg><arg name="influenced"><space/>[[J (programming language)|J]],<ref name</arg></template><template><target>APLcode</target></template><link><target>File:I like APL graphic.jpg</target><part>thumb</part><part>Promotional material for APL from 1976</part></link><bold>APL</bold><space/>(named after the book<space/><italics>A Programming Language</italics>)<extension extension_name='ref' name="aplbook"><template><target>cite book</target><arg name="last">Iverson<space/></arg><arg name="first">Kenneth E.<space/></arg><arg name="title">A Programming Language<space/></arg><arg name="publisher">Wiley<space/></arg><arg name="year">1962<space/></arg><arg name="isbn">0-471-43014-5<space/></arg><arg name="url">http://www.softwarepreservation.org/projects/apl/Books/APROGRAMMING%20LANGUAGE/view</arg></template></extension><space/>is a<space/><link><target>programming language</target></link><space/>developed in the 1960s by<space/><link><target>Kenneth E. Iverson</target></link>. Its central datatype is the<space/><link><target>Array data type#Multi-dimensional arrays</target><part>multidimensional array</part></link>. It uses a large range of special graphic symbols<extension extension_name='ref'><template><target>cite journal</target><arg name="last1">McIntyre</arg><arg name="first1">Donald B.</arg><arg name="title">Language as an Intellectual Tool: From Hieroglyphics to APL</arg><arg name="journal">IBM Systems Journal</arg><arg name="date">1991</arg><arg name="volume">30</arg><arg name="issue">4</arg><arg name="pages">554–581</arg><arg name="doi">10.1147/sj.304.0554</arg><arg name="url">http://domino.research.ibm.com/tchjr/journalindex.nsf/e90fc5d047e64ebf85256bc80066919c/9c834f5a16efa82085256bfa00685c72!OpenDocument</arg><arg name="accessdate">9 January 2015</arg></template></extension><space/>to represent most operators, leading to very concise code. It has been an important influence on the development of concept modeling,<space/><link><target>spreadsheet</target><trail>s</trail></link>,<space/><link><target>functional programming</target></link>,<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://awards.acm.org/citation.cfm?id</arg><arg name="title">ACM Award Citation&nbsp;– John Backus. 1977<space/></arg><arg name="publisher">Awards.acm.org<space/></arg><arg name="date"><space/>1924-12-03<space/></arg><arg name="accessdate">2010-02-03</arg></template></extension><space/>and computer math packages.<extension extension_name='ref' name="mworks"></extension><space/>It has also inspired several other programming languages.<extension extension_name='ref' name="jinsp"></extension><extension extension_name='ref' name="kinsp"></extension><extension extension_name='ref' name="qinsp"></extension><space/>It is still used today for certain applications.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.vector.org.uk/archive/v233/webber.htm<space/></arg><arg name="title">APLX version 4&nbsp;– from the viewpoint of an experimental physicist. Vector 23.3<space/></arg><arg name="publisher">Vector.org.uk<space/></arg><arg name="date"><space/>2008-05-20<space/></arg><arg name="accessdate">2010-02-03<space/></arg><arg name="archiveurl"><space/>http://web.archive.org/web/20100125164250/http://www.vector.org.uk/archive/v233/webber.htm<space/></arg><arg name="archivedate"><space/>25 January 2010<space/></arg></template></extension><extension extension_name='ref' name="prod"><template><target>Cite journal</target><arg name="title"><space/>The future of APL in the insurance world<space/></arg><arg name="year"><space/>1999<space/></arg><arg name="journal"><space/>ACM SIGAPL APL Quote Quad<space/></arg><arg name="issn"><space/>0163–6006<space/></arg><arg name="volume"><space/>30<space/></arg><arg name="issue"><space/>1<space/></arg><arg name="doi"><space/>10.1145/347194.347203<space/></arg><arg name="last1"><space/>Bergquist<space/></arg><arg name="first1"><space/>Gary A.<space/></arg><arg name="location"><space/>New York, N.Y.<space/></arg><arg name="pages"><space/>16–21<space/></arg></template></extension></paragraph><heading level='2'>History</heading><paragraph>The<space/><link><target>mathematical notation</target></link><space/>for manipulating arrays which developed into the APL programming language was developed by Iverson at<space/><link><target>Harvard University</target></link><space/>starting in 1957, and published in his<space/><italics>A Programming Language</italics><space/>in 1962.<extension extension_name='ref' name="aplbook"></extension>The preface states its premise:<extension extension_name='blockquote'>Applied mathematics is largely concerned with the design and analysis of explicit procedures for calculating the exact or approximate values of various functions. Such explicit procedures are called algorithms or<space/><italics>programs</italics>. Because an effective notation for the description of programs exhibits considerable syntactic structure, it is called a<space/><italics>programming language</italics>.</extension></paragraph><paragraph>In 1960, he began work for<space/><link><target>IBM</target></link><space/>and, working with<space/><link><target>Adin Falkoff</target></link>, created APL based on the notation he had developed. This notation was used inside IBM for short research reports on computer systems, such as the<space/><link><target>Burroughs B5000</target></link><space/>and its stack mechanism when stack machines versus<space/><link><target>register machine</target><trail>s</trail></link><space/>were being evaluated by IBM for upcoming computers.</paragraph><paragraph>Also in 1960, Iverson used his notation in a draft of the chapter &quot;A Programming Language&quot;, written for a book he was writing with<space/><link><target>Fred Brooks</target></link>,<space/><italics>Automatic Data Processing</italics>, which would be published in 1963.<extension extension_name='ref'>Iverson, Kenneth E.,<space/><link type='external' href='http://www.softwarepreservation.org/projects/apl/book/Iverson-AutomaticDataProcessing-color.pdf/view'>&quot;Automatic Data Processing: Chapter 6: A programming language&quot;</link>, 1960, DRAFT copy for Brooks and Iverson 1963 book, &quot;Automatic Data Processing&quot;.</extension><extension extension_name='ref'><link><target>Fred Brooks</target><part>Brooks, Fred</part></link>; Iverson, Kenneth, (1963),<space/><italics>Automatic Data Processing</italics>, John Wiley &amp; Sons Inc.</extension></paragraph><paragraph>As early as 1962, the first attempt to use the notation to describe a complete computer system happened after Falkoff discussed with Dr. William C. Carter his work in the standardization of the instruction set for the machines that later became the<space/><link><target>IBM System/360</target></link><space/>family.</paragraph><paragraph>In 1963, Herbert Hellerman, working at the IBM Systems Research Institute, implemented a part of the notation on an<space/><link><target>IBM 1620</target></link><space/>computer, and it was used by students in a special high school course on calculating transcendental functions by series summation. Students tested their code in Hellerman's lab. This implementation of a portion of the notation was called PAT (Personalized Array Translator).<extension extension_name='ref'>Hellerman, H., &quot;Experimental Personalized Array Translator System&quot;,<space/><italics>Communications of the ACM</italics>, 7, 433 (July, 1964).</extension></paragraph><paragraph>In 1963, Falkoff, Iverson, and<space/><link><target>Edward H. Sussenguth Jr.</target></link>, all working at IBM, used the notation for a formal description of the<space/><link><target>IBM System/360</target></link><space/>series machine architecture and functionality, which resulted in a paper published in<space/><italics><link><target>IBM Systems Journal</target></link></italics><space/>in 1964. After this was published, the team turned their attention to an implementation of the notation on a computer system. One of the motivations for this focus of implementation was the interest of John L. Lawrence who had new duties with<space/><link><target>Science Research Associates</target></link>, an educational company bought by IBM in 1964. Lawrence asked Iverson and his group to help utilize the language as a tool for the development and use of computers in education.<extension extension_name='ref'>Falkoff, Adin D.; Iverson, Kenneth E.,<space/><link type='external' href='http://www.jsoftware.com/papers/APLEvol.htm'>&quot;The Evolution of APL&quot;</link>, ACM SIGPLAN Notices 13, 1978-08.</extension></paragraph><paragraph>After<space/><link><target>Lawrence M. Breed</target></link><space/>and<space/><link><target>Philip S. Abrams</target></link><space/>of Stanford University joined the team at IBM Research, they continued their prior work on an implementation programmed in<space/><link><target>FORTRAN IV</target></link><space/>for a portion of the notation which had been done for the<space/><link><target>IBM 7090</target></link><space/>computer running under the<space/><link><target>IBM 7090/94 IBSYS</target><part>IBSYS</part></link><space/>operating system. This work was finished in late 1965 and later known as IVSYS (Iverson System). The basis of this implementation was described in detail by Abrams in a Stanford University Technical Report, &quot;An Interpreter for Iverson Notation&quot; in 1966.<extension extension_name='ref'>Abrams, Philip S.,<space/><link type='external' href='http://infolab.stanford.edu/TR/CS-TR-66-47.html'>''An interpreter for &quot;Iverson notation&quot;''</link>, Technical Report: CS-TR-66-47, Department of Computer Science, Stanford University, August 1966;</extension><space/>this was formally supervised by<space/><link><target>Niklaus Wirth</target></link>. Like Hellerman's PAT system earlier, this implementation did not include the APL character set but used special English reserved words for functions and operators. The system was later adapted for a<space/><link><target>time-sharing</target></link><space/>system and, by November 1966, it had been reprogrammed for the<space/><link><target>IBM System/360 Model 50</target></link><space/>computer running in a time sharing mode and was used internally at IBM.<extension extension_name='ref'>Haigh, Thomas, &quot;Biographies: Kenneth E. Iverson&quot;,<space/><italics>IEEE Annals of the History of Computing</italics>, 2005</extension></paragraph><paragraph><link><target>File:IBM Selectric Globe Wiki.jpg</target><part>thumb</part><part>IBM typeballs (one OCR) with clip,<space/><template><target></target><arg>2</arg></template><space/>coin for scale</part></link></paragraph><paragraph>A key development in the ability to use APL effectively, before the widespread use of<space/><link><target>Computer monitor#Cathode ray tube</target><part>CRT</part></link><space/>terminals, was the development of a special<space/><link><target>IBM Selectric typewriter</target></link><space/>interchangeable typeball with all the special APL characters on it. This was used on paper printing terminal workstations using the Selectric typewriter and typeball mechanism, such as the<space/><link><target>IBM 1050</target></link><space/>and<space/><link><target>IBM 2741</target></link><space/>terminal. Keycaps could be placed over the normal keys to show which APL characters would be entered and typed when that key was struck. For the first time, a programmer could actually type in and see real APL characters as used in Iverson's notation and not be forced to use awkward English keyword representations of them. Falkoff and Iverson had the special APL Selectric typeballs, 987 and 988, designed in late 1964, although no APL computer system was available to use them.<extension extension_name='ref' name="APLQQ91">Breed, Larry,<space/><link type='external' href='http://portal.acm.org/citation.cfm?id=138094.140933'>&quot;The First APL Terminal Session&quot;</link>,<space/><italics>APL Quote Quad</italics>, Association for Computing Machinery, Volume 22, Number 1, September 1991, p.2-4.</extension><space/>Iverson cited Falkoff as the inspiration for the idea of using an IBM Selectric typeball for the APL character set.<extension extension_name='ref'><link type='external' href='http://www.computerhistory.org/tdih/?setdate=19/12/2009'>Adin Falkoff</link><space/>- Computer History Museum. &quot;Iverson credited him for choosing the name APL and the introduction of the IBM golf-ball typewriter with the replacement typehead, which provided the famous character set to represent programs.&quot;</extension></paragraph><paragraph><link><target>File:APL-keybd2.svg</target><part>thumb</part><part>center</part><part>600px</part><part>A programmer's view of the IBM 2741 keyboard layout with the APL typeball print head inserted</part></link></paragraph><paragraph>Some APL symbols, even with the APL characters on the typeball, still had to be typed in by over-striking two existing typeball characters. An example would be the &quot;grade up&quot; character, which had to be made from a &quot;delta&quot; (shift-H) and a &quot;<link><target>Sheffer stroke</target></link>&quot; (shift-M). This was necessary because the APL character set was larger than the 88 characters allowed on the Selectric typeball.</paragraph><paragraph>The first APL interactive login and creation of an APL workspace was in 1966 by Larry Breed using an IBM 1050 terminal at the IBM Mohansic Labs near<space/><link><target>Thomas J. Watson Research Center</target></link>, the home of APL, in<space/><link><target>Yorktown Heights, New York</target></link>.<extension extension_name='ref' name="APLQQ91"></extension></paragraph><paragraph>IBM was chiefly responsible for the introduction of APL to the marketplace. APL was first available in 1967 for the<space/><link><target>IBM 1130</target></link><space/>as<space/><italics>APL\1130</italics>.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://www.vector.org.uk/archive/v223/APL_1130.htm<space/></arg><arg name="title">How We Got to APL\1130<space/></arg><arg name="author">Larry Breed<space/></arg><arg name="authorlink">Larry Breed<space/></arg><arg name="journal">Vector (British APL Association)<space/></arg><arg name="volume">22<space/></arg><arg name="issue">3<space/></arg><arg name="date">August 2006<space/></arg><arg name="issn">0955-1433<space/></arg></template></extension><extension extension_name='ref'><link type='external' href='http://bitsavers.org/pdf/ibm/1130/lang/1130-03.3.001_APL_1130_May69.pdf'>APL\1130 Manual</link>, May 1969</extension><space/>It would run in as little as 8k 16-bit words of memory, and used a dedicated 1 megabyte hard disk.</paragraph><paragraph>APL gained its foothold on mainframe timesharing systems from the late 1960s through the early 1980s, in part because it would run on lower-specification systems that were not equipped with<space/><link><target>Memory management unit</target><part>Dynamic Address Translation</part></link><space/>hardware.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.quadibloc.com/comp/aplint.htm<space/></arg><arg name="title">Remembering APL<space/></arg><arg name="publisher">Quadibloc.com<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-06-17</arg></template></extension><space/>Additional improvements in performance for selected<space/><link><target>IBM System/370</target></link><space/>mainframe systems included the &quot;APL Assist Microcode&quot; in which some support for APL execution was included in the actual firmware as opposed to APL being exclusively a software product. Somewhat later, as suitably performing hardware was finally becoming available in the mid- to late-1980s, many users migrated their applications to the personal computer environment.</paragraph><paragraph>Early IBM APL interpreters for IBM 360 and IBM 370 hardware implemented their own multi-user management instead of relying on the host services, thus they were timesharing systems in their own right. First introduced in 1966, the<space/><italics>APL\360</italics><extension extension_name='ref' name="IBM APL\360 1968">Falkoff, Adin; Iverson, Kenneth E.,<space/><link type='external' href='http://bitsavers.org/pdf/ibm/apl/APL_360_Users_Manual_Aug68.pdf'>&quot;APL\360 Users Guide&quot;</link>, IBM Research, Thomas J. Watson Research Center, Yorktown Heights, NY, August 1968.</extension><extension extension_name='ref'><link type='external' href='http://bitsavers.org/pdf/ibm/apl/APL_360_Terminal_System_Mar67.pdf'>&quot;APL\360 Terminal System&quot;</link>, IBM Research, Thomas J. Watson Research Center, March 1967.</extension><extension extension_name='ref' name="apl360"><template><target>cite book</target><arg name="last">Pakin<space/></arg><arg name="first">Sandra<space/></arg><arg name="title">APL\360 Reference Manual<space/></arg><arg name="publisher">Science Research Associates, Inc.<space/></arg><arg name="year">1968<space/></arg><arg name="isbn">0-574-16135-X</arg></template></extension><space/>system was a multi-user interpreter. The ability to programmatically communicate with the operating system for information and setting interpreter system variables was done through special privileged &quot;I-beam&quot; functions, using both<space/><link><target>Monad (functional programming)</target><part>monadic</part></link><space/>and<space/><link><target>Dyadics</target><part>dyadic</part></link><space/>operations.<extension extension_name='ref'>Falkoff, Adin D.; Iverson, Kenneth E.,<link type='external' href='http://www.research.ibm.com/journal/rd/174/ibmrd1704F.pdf'>''The Design of APL''</link>,<space/><italics>IBM Journal of Research and Development</italics>, Volume 17, Number 4, July 1973. &quot;These environmental defined functions were based on the use of still another class of functionscalled &quot;I-beams&quot; because of the shape of the symbol used for themwhich provide a more general facility for communication between APL programs and the less abstract parts of the system. The I-beam functions were first introduced by the system programmers to allow them to execute System/360 instructions from within APL programs, and thus use APL as a direct aid in their programming activity. The obvious convenience of functions of this kind, which appeared to be part of the language, led to the introduction of the monadic I-beam function for direct use by anyone. Various arguments to this function yielded information about the environment such as available space and time of day.&quot;</extension></paragraph><paragraph>In 1973, IBM released<space/><italics>APL.SV</italics>, which was a continuation of the same product, but which offered<space/><link><target>shared variable</target><trail>s</trail></link><space/>as a means to access facilities outside of the APL system, such as operating system files. In the mid-1970s, the IBM mainframe interpreter was even adapted for use on the<space/><link><target>IBM 5100</target></link><space/>desktop computer, which had a small CRT and an APL keyboard, when most other small computers of the time only offered<space/><link><target>BASIC</target></link>. In the 1980s, the<space/><italics>VSAPL</italics><space/>program product enjoyed widespread usage with<space/><link><target>Conversational Monitor System</target><part>CMS</part></link>,<space/><link><target>Time Sharing Option</target><part>TSO</part></link>,<space/><link><target>VSPC</target></link>,<space/><link><target>MUSIC/SP</target></link><space/>and<space/><link><target>CICS</target></link><space/>users.</paragraph><paragraph>In 1973-1974, Dr. Patrick E. Hagerty directed the implementation of the University of Maryland APL interpreter for the<space/><link><target>UNIVAC 1100/2200 series</target><part>Sperry Univac 1100</part></link><space/>Series mainframe computers.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Minker<space/></arg><arg name="first">Jack<space/></arg><arg name="title">Beginning of Computing and Computer Sciences at the University of Maryland<space/></arg><arg name="url">http://www.cs.umd.edu/department/dept-history/minker-report.pdf<space/></arg><arg name="publisher">University of Maryland<space/></arg><arg name="accessdate">23 May 2011<space/></arg><arg name="location">Section 2.3.4<space/></arg><arg name="page">38<space/></arg><arg name="format">PDF<space/></arg><arg name="date">January 2004<space/></arg><arg name="archiveurl"><space/>http://web.archive.org/web/20110610064807/http://www.cs.umd.edu/department/dept-history/minker-report.pdf<space/></arg><arg name="archivedate"><space/>10 June 2011<space/></arg></template></extension><space/>At the time, Sperry had nothing. In 1974, student Alan Stebbens was assigned the task of implementing an internal function.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Stebbens<space/></arg><arg name="first">Alan<space/></arg><arg name="title">How it all began<space/></arg><arg name="url">http://lathwellproductions.ca/wordpress/film</arg></template></extension></paragraph><paragraph>Several timesharing firms sprang up in the 1960s and 1970s that sold APL services using modified versions of the IBM APL\360<extension extension_name='ref' name="apl360"></extension><space/>interpreter. In North America, the better-known ones were<space/><link><target>I. P. Sharp Associates</target></link>,<space/><link><target>Scientific Time Sharing Corporation</target><part>STSC</part></link>,<space/><link><target>Time Sharing Resources</target></link><space/>(TSR) and<space/><link><target>The Computer Company</target></link><space/>(TCC). CompuServe also entered the fray in 1978 with an APL Interpreter based on a modified version of Digital Equipment Corp and Carnegie Mellon's which ran on DEC's KI and KL 36 bit machines. CompuServe's APL was available both to its commercial market and the consumer information service. With the advent first of less expensive mainframes such as the<space/><link><target>IBM 4300</target></link><space/>and later the personal computer, the timesharing industry had all but disappeared by the mid-1980s.</paragraph><paragraph><italics>Sharp APL</italics><space/>was available from<space/><link><target>I. P. Sharp Associates</target></link>, first on a timesharing basis in the 1960s, and later as a program product starting around 1979.<space/><italics>Sharp APL</italics><space/>was an advanced APL implementation with many language extensions, such as<space/><italics>packages</italics><space/>(the ability to put one or more objects into a single variable), file system, nested arrays, and<space/><link><target>shared variable</target><trail>s</trail></link>.</paragraph><paragraph>APL interpreters were available from other mainframe and mini-computer manufacturers as well, notably<space/><link><target>Burroughs Corporation</target><part>Burroughs</part></link>,<space/><link><target>Control Data Corporation</target><part>CDC</part></link>,<space/><link><target>Data General</target></link>,<space/><link><target>Digital Equipment Corporation</target><part>DEC</part></link>,<space/><link><target>Harris Corporation</target><part>Harris</part></link>,<space/><link><target>Hewlett-Packard</target></link>,<space/><link><target>Siemens AG</target></link>,<space/><link><target>Xerox</target></link>, and others.</paragraph><paragraph><link><target>Garth Foster</target></link><space/>of<space/><link><target>Syracuse University</target></link><space/>sponsored regular meetings of the APL implementers' community at Syracuse's Minnowbrook Conference Center in rural upstate<space/><link><target>New York</target></link>. In later years, Eugene McDonnell organized similar meetings at the<space/><link><target>Asilomar Conference Grounds</target></link><space/>near Monterey, California, and at Pajaro Dunes near Watsonville, California. The SIGAPL special interest group of the<space/><link><target>Association for Computing Machinery</target></link><space/>continues to support the APL community.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.sigapl.org/<space/></arg><arg name="title">SIGAPL Home Page<space/></arg><arg name="publisher">Sigapl.org<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-06-17</arg></template></extension></paragraph><paragraph>In 1979, Iverson received the<space/><link><target>Turing Award</target></link><space/>for his work on APL.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://awards.acm.org/citation.cfm?id</arg><arg name="title">Turing Award Citation 1979<space/></arg><arg name="publisher">Awards.acm.org<space/></arg><arg name="accessdate">2010-02-03</arg></template></extension></paragraph><paragraph><xhtml:u>Filmography</xhtml:u>, Videos: Over the years APL has been the subject of more than a few films and videos. Some of these include:</paragraph><list type='bullet'><listitem>&quot;Chasing Men Who Stare at Arrays&quot; Catherine Lathwell's Film Diaries; 2014, film synopsis - &quot;people who accept significantly different ways of thinking, challenge the status quo and as a result, created an invention that subtly changes the world. And no one knows about it. And a Canadian started it all I want everyone to know about it.&quot;<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Lathwell</arg><arg name="first1">Catherine</arg><arg name="title">Chasing Men Who Stare at Arrays</arg><arg name="url">http://www.aprogramminglanguage.com/</arg><arg name="website">http://www.aprogramminglanguage.com/</arg><arg name="publisher">Catherine Lathwell</arg><arg name="accessdate">8 January 2015</arg></template></extension></listitem><listitem>&quot;The Origins of APL - 1974 - YouTube&quot;, YouTube video, 2012, uploaded by Catherine Lathwell; a talk show style interview with the original developers of APL.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Lathwell</arg><arg name="first1">Catherine</arg><arg name="title">The Origins of APL - 1974 - YouTube</arg><arg name="url">https://www.youtube.com/watch?v</arg><arg name="website">https://www.youtube.com</arg><arg name="publisher">Catherine Lathwell on YouTube</arg><arg name="accessdate">8 January 2015</arg></template></extension></listitem><listitem>&quot;50 Years of APL&quot;, YouTube, 2009, by Graeme Robertson, uploaded by MindofZiggi, history of APL, quick introduction to APL, a powerful programming language currently finding new life due to its ability to create and implement systems, web-based or otherwise.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Robertson</arg><arg name="first1">Graeme</arg><arg name="title">50 Years of APL - Video</arg><arg name="url">https://www.youtube.com/watch?v</arg><arg name="website">https://www.youtube.com</arg><arg name="publisher">Graeme Robertson/YouTube</arg><arg name="accessdate">8 January 2015</arg></template></extension></listitem><listitem>&quot;APL demonstration 1975&quot;, YouTube, 2013, uploaded by Imperial College London; 1975 live demonstration of the computer language APL (A Programming Language) by Professor Bob Spence, Imperial College London.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Spence</arg><arg name="first1">Bob</arg><arg name="title">APL demonstration 1975</arg><arg name="url">https://www.youtube.com/watch?v</arg><arg name="website">https://www.youtube.com</arg><arg name="publisher">Imperial College London</arg><arg name="accessdate">8 January 2015</arg></template></extension></listitem></list><heading level='3'>APL2</heading><paragraph>Starting in the early 1980s, IBM APL development, under the leadership of Dr<space/><link><target>Jim Brown (Computer Scientist)</target><part>Jim Brown</part></link>, implemented a new version of the APL language that contained as its primary enhancement the concept of<space/><italics>nested arrays</italics>, where an array can contain other arrays, as well as new language features which facilitated the integration of nested arrays into program workflow. Ken Iverson, no longer in control of the development of the APL language, left IBM and joined<space/><link><target>I. P. Sharp Associates</target></link>, where one of his major contributions was directing the evolution of Sharp APL to be more in accordance with his vision.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Hui</arg><arg name="first1">Roger</arg><arg name="title">Remembering Ken Iverson</arg><arg name="url">http://keiapl.org/rhui/remember.htm</arg><arg name="website">http://keiapl.org</arg><arg name="publisher">KEIAPL</arg><arg name="accessdate">10 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">ACM A.M. Turing Award</arg><arg name="title">Kenneth E. Iverson - Citation</arg><arg name="url">http://amturing.acm.org/award_winners/iverson_9147499.cfm</arg><arg name="website">http://amturing.acm.org</arg><arg name="publisher">ACM</arg><arg name="accessdate">10 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">ACM SIGPLAN</arg><arg name="title">APL2: the Early Years</arg><arg name="url">http://www.sigapl.org/Articles/JimBrown-TechCompromise.php</arg><arg name="website">http://www.sigapl.org</arg><arg name="publisher">ACM</arg><arg name="accessdate">10 January 2015</arg></template></extension></paragraph><paragraph>As other vendors were busy developing APL interpreters for new hardware, notably<space/><link><target>Unix</target></link>-based<space/><link><target>microcomputer</target><trail>s</trail></link>, APL2 was almost always the standard chosen for new APL interpreter developments. Even today, most APL vendors or their users cite APL2 compatibility, as a selling point for those products.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Micro APL</arg><arg name="title">Overview of the APL System</arg><arg name="url">http://www.microapl.co.uk/apl/apl_concepts_chapter1.html</arg><arg name="website">http://www.microapl.co.uk</arg><arg name="publisher">Micro APL</arg><arg name="accessdate">10 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Robertson</arg><arg name="first1">Graeme</arg><arg name="title">A Personal View of APL2010</arg><arg name="url">http://archive.vector.org.uk/art10500450</arg><arg name="website">http://archive.vector.org.uk</arg><arg name="publisher">Vector - Journal of the British APL Association</arg><arg name="accessdate">10 January 2015</arg></template></extension></paragraph><paragraph><italics>APL2</italics><space/>for IBM mainframe computers is still available. IBM cites its use for problem solving, system design, prototyping, engineering and scientific computations, expert systems,<extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Rodriguez</arg><arg name="first1">P.</arg><arg name="last2">Rojas</arg><arg name="first2">J.</arg><arg name="last3">Alfonseca</arg><arg name="first3">M.</arg><arg name="last4">Burgos</arg><arg name="first4">J. I.</arg><arg name="title">An Expert System in Chemical Synthesis written in APL2/PC</arg><arg name="journal">ACM SIGAPL APL Quote Quad</arg><arg name="date">1989</arg><arg name="volume">19</arg><arg name="issue">4</arg><arg name="pages">299–303</arg><arg name="doi">10.1145/75144.75185</arg><arg name="url">http://dl.acm.org/citation.cfm?id</arg><arg name="accessdate">10 January 2015</arg></template></extension><space/>for teaching mathematics and other subjects, visualization and database access<extension extension_name='ref'><template><target>cite web</target><arg name="last1">IBM</arg><arg name="title">APL2: A Programming Language for Problem Solving, Visualization and Database Access</arg><arg name="url">http://www-03.ibm.com/software/products/en/apl2</arg><arg name="website">http://www-03.ibm.com</arg><arg name="publisher">IBM</arg><arg name="accessdate">10 January 2015</arg></template></extension><space/>and was first available for<space/><link><target>Conversational Monitor System</target><part>CMS</part></link><space/>and<space/><link><target>Time Sharing Option</target><part>TSO</part></link><space/>in 1984.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://www.research.ibm.com/journal/sj/304/ibmsj3004C.pdf<space/></arg><arg name="title">The IBM family of APL systems<space/></arg><arg name="first">Adin D.<space/></arg><arg name="last">Falkoff<space/></arg><arg name="year">1991<space/></arg><arg name="journal">IBM Systems Journal<space/></arg><arg name="volume">30<space/></arg><arg name="issue">4<space/></arg><arg name="pages">416–432<space/></arg><arg name="publisher">[[IBM]]<space/></arg><arg name="format">PDF<space/></arg><arg name="accessdate">2009-06-13<space/></arg><arg name="doi">10.1147/sj.304.0416</arg></template></extension><space/>The APL2 Workstation edition (Windows, OS/2, AIX, Linux, and Solaris) followed much later in the early 1990s.<template><target>Citation needed</target><arg name="date">April 2010</arg></template></paragraph><heading level='3'>Microcomputers</heading><paragraph>The first microcomputer implementation of APL was on the<space/><link><target>Intel 8008</target></link>-based<space/><link><target>MCM/70</target></link>, the first general purpose personal computer, in 1973.</paragraph><paragraph>IBM's own<space/><link><target>IBM 5100</target></link><space/>microcomputer (1975) offered APL as one of two built-in ROM-based interpreted languages for the computer, complete with a keyboard and display that supported all the special symbols used in the language.</paragraph><paragraph>In 1976 DNA Systems introduced an APL interpreter for their TSO Operating System, which ran timesharing on the IBM 1130, Digital Scientific Meta-4, General Automation GA 18/30 and Computer Hardware CHI 21/30.</paragraph><paragraph>The<space/><link><target>VideoBrain Family Computer</target></link>, released in 1977, only had one programming language available for it, and that was a dialect of APL called APL/S.<extension extension_name='ref'><link type='external' href='http://books.google.com/books?id=OQEAAAAAMBAJ&amp;amp;pg=PA133&amp;amp;lpg=PA133&amp;amp;dq=videobrain+family+computer+apl/s&amp;amp;source=bl&amp;amp;ots=_tmStYA0UG&amp;amp;sig=mxb5bqgWuA_NBVww1ywhpA1iNWY&amp;amp;hl=en&amp;amp;ei=rleIS8_hPN2mtgez8vi0DQ&amp;amp;sa=X&amp;amp;oi=book_result&amp;amp;ct=result&amp;amp;resnum=5&amp;amp;ved=0CBQQ6AEwBA#v=onepage&amp;amp;q=videobrain%20family%20computer%20apl%2Fs&amp;amp;f=false'>&quot;VideoBrain Family Computer&quot;</link>,<space/><italics><link><target>Popular Science</target></link></italics>, November 1978, advertisement.</extension></paragraph><paragraph>A Small APL for the<space/><link><target>Intel</target></link><space/>8080 called EMPL was released in 1977, and Softronics APL, with most of the functions of full APL, for 8080-based CP/M systems was released in 1979.</paragraph><paragraph>In 1977, the Canadian firm Telecompute Integrated Systems, Inc. released a business-oriented APL interpreter known as TIS APL, for Z80-based systems. It featured the full set of file functions for APL, plus a full screen input and switching of right and left arguments for most dyadic operators by introducing the<space/><xhtml:code>~.</xhtml:code><space/>prefix to all single character dyadic functions such as<space/><xhtml:code>-</xhtml:code><space/>or<space/><xhtml:code>/</xhtml:code>.</paragraph><paragraph>Vanguard APL was available for<space/><link><target>Z80</target></link><space/><link><target>CP/M</target></link>-based processors in the late 1970s.<space/><link><target>The Computer Company</target><part>TCC</part></link><space/>released APL.68000 in the early 1980s for Motorola<space/><link><target>68000</target></link>-based processors, this system being the basis for MicroAPL Limited's<space/><link><target>APLX</target></link><space/>product. I. P. Sharp Associates released a version of their APL interpreter for the<space/><link><target>IBM PC</target></link><space/>and<space/><link><target>PC-XT/370</target></link>.<extension extension_name='ref'>Higgins, Donald S.,<space/><link type='external' href='http://portal.acm.org/citation.cfm?id=382167.383025'>&quot;PC/370 virtual machine&quot;</link>,<space/><italics>ACM SIGSMALL/PC Notes</italics>, Volume 11, Issue 3 (August 1985), pp.23 - 28, 1985.</extension><space/>For the IBM PC, an<space/><link><target>emulator</target></link><space/>was written that facilitated reusing much of the IBM 370 mainframe code. Arguably, the best known APL interpreter for the IBM Personal Computer was<space/><link><target>Scientific Time Sharing Corporation</target><part>STSC</part></link>'s APL*Plus/PC.<template><target>citation needed</target><arg name="date">December 2012</arg></template></paragraph><paragraph>The<space/><link><target>Commodore SuperPET</target></link>, introduced in 1981, included an APL interpreter developed by the<space/><link><target>University of Waterloo</target></link>.</paragraph><paragraph>In the early 1980s, the Analogic Corporation developed<space/><italics>The APL Machine</italics>, which was an<space/><link><target>vector processor</target><part>array processing</part></link><space/>computer designed to be programmed only in APL. There were actually three processing units, the user's workstation, an<space/><link><target>IBM PC</target></link>, where programs were entered and edited, a<space/><link><target>Motorola 68000</target></link><space/>processor that ran the APL interpreter, and the Analogic array processor that executed the primitives.<extension extension_name='ref'><link type='external' href='http://groups.yahoo.com/group/apl-l/message/8180'></link>,<italics>Yahoo! Group APL-L</italics>, April, 2003</extension><space/>At the time of its introduction, The APL Machine was likely the fastest APL system available. Although a technological success, The APL Machine was a marketing failure. The initial version supported a single process at a time. At the time the project was discontinued, the design had been completed to allow multiple users. As an aside, an unusual aspect of The APL Machine was that the library of workspaces was organized such that a single function or variable that was shared by many workspaces existed only once in the library. Several of the members of The APL Machine project had previously spent a number of years with Burroughs implementing<space/><italics>APL\700</italics>.</paragraph><paragraph>At one stage, it was claimed by Bill Gates in his<space/><link><target>Open Letter to Hobbyists</target></link>,<space/><link><target>Microsoft Corporation</target></link><space/>planned to release a version of APL, but these plans never materialized.</paragraph><paragraph>An early 1978 publication of<space/><link><target>Rodnay Zaks</target></link><space/>from<space/><link><target>Sybex</target></link><space/>was<space/><italics>A microprogrammed APL implementation</italics><space/>ISBN 0-89588-005-9, which is the complete source listing for the microcode for a Digital Scientific Corporation Meta 4 microprogrammable processor implementing APL. This topic was also the subject of his PhD thesis.<extension extension_name='ref'>Zaks, Rodnay, &quot;A Microprogrammed APL Implementation,&quot;, Ph.D. Thesis, University of California, Berkeley, June 1972.</extension><extension extension_name='ref'>Zaks, Rodnay, &quot;Microprogrammed APL,&quot;, Fifth IEEE Computer Conference Proceedings, Sep. 1971 p 193</extension></paragraph><paragraph>In 1979,<space/><link><target>William Yerazunis</target></link><space/>wrote a partial version of APL in<space/><link><target>Prime Computer</target></link><space/>FORTRAN, extended it with graphics primitives, and released it. This was also the subject of his Masters thesis.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://opac.lib.rpi.edu/search~S6?/Xa:%28yerazunis%29&m</arg><arg name="title">A Partial Implementation of APL with Graphics Primitives for PRIME Computers<space/></arg><arg name="author">William Yerazunis<space/></arg><arg name="accessdate">2013-08-14<space/></arg></template></extension></paragraph><heading level='3'>Extensions</heading><paragraph>Various implementations of APL by APLX, Dyalog, et al., include extensions for<space/><link><target>object-oriented programming</target></link>, support for<space/><link><target>.NET Framework</target><part>.NET</part></link>, XML-array conversion primitives, graphing, operating system interfaces, and<space/><link><target>lambda expressions</target></link>.</paragraph><heading level='2'>Design</heading><paragraph>Unlike traditionally structured programming languages, APL code is typically structured as chains of<space/><link><target>unary operation</target><part>monadic</part></link><space/>or<space/><link><target>binary operation</target><part>dyadic</part></link><space/><link><target>function (programming)</target><part>functions</part></link>, and<space/><link><target>higher-order function</target><part>operators</part></link><extension extension_name='ref' name="MicroAOL_Operators"><template><target>cite web</target><arg name="last1">MicroAPL</arg><arg name="title">Operators</arg><arg name="url">http://www.microapl.co.uk/apl/apl_concepts_chapter5.html</arg><arg name="website">http://www.microapl.co.uk</arg><arg name="publisher">MicroAPL</arg><arg name="accessdate">12 January 2015</arg></template></extension><space/>acting on<space/><link><target>array data type</target><part>arrays</part></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Primitive Functions</arg><arg name="title">Primitive Functions</arg><arg name="url">http://www.microapl.co.uk/apl_help/ch_020_010_140.htm</arg><arg name="website">http://www.microapl.co.uk/</arg><arg name="accessdate">1 January 2015</arg></template></extension><space/>APL has many nonstandard<space/><italics>primitives</italics><space/>(functions and operators) that are indicated by a single symbol or a combination of a few symbols. All primitives are defined to have the same<space/><link><target>operator precedence</target><part>precedence</part></link>, and always associate to the right; hence APL is<space/><italics>read</italics><space/>or best understood from<space/><link><target>APL syntax and symbols#Syntax rules</target><part>right-to-left</part></link>.</paragraph><paragraph><italics>Early</italics><space/>APL implementations (circa 1970 or so) did not have programming loop-<link><target>control flow</target><part>flow control structures</part></link>, such as &quot;do&quot; or &quot;while&quot; loops, and &quot;if-then-else&quot; constructions. Instead, they used array operations, and use of<space/><link><target>structured programming</target></link><space/>constructs was often not necessary, since an operation could be carried out on an entire array in a single statement. For example, the<space/><italics>iota</italics><space/>function (<italics></italics>) can replace for-loop<space/><link><target>iteration</target></link>: N when applied to a scalar positive integer yields a one-dimensional array (vector), 1 2 3 ... N. More recent implementations of APL generally include comprehensive control structures, so that data structure and program control flow can be clearly and cleanly separated.</paragraph><paragraph>The APL environment is called a<space/><italics>workspace</italics>. In a workspace the user can define programs and data, i.e. the data values exist also outside the programs, and the user can also manipulate the data without having to define a program.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Workspace</arg><arg name="title">The Workspace</arg><arg name="url">http://www.microapl.co.uk/apl/apl_concepts_chapter2.html</arg><arg name="website">http://www.microapl.co.uk</arg><arg name="accessdate">1 January 2015</arg></template></extension><space/>For example,</paragraph><table class="wikitable"><tablerow><tablecell width="200pt"><extension extension_name='source' lang="apl"><preblock><preline><space/><space/><space/><space/><space/><space/><space/>n 4 5 6 7</preline></preblock></extension></tablecell><tablecell>Assigns<space/><link><target>coordinate vector</target><part>vector</part></link><space/>values {4 5 6 7} to variable<space/><xhtml:tt>n</xhtml:tt>, an array create operation; an equivalent yet more concise APL expression would be<space/><extension extension_name='source' lang="apl">n 3 + 4</extension>. Multiple store in var<space/><bold>n</bold><space/>ops performed<space/><bold>without formal loops or control flow language</bold>.</tablecell></tablerow><tablerow><tablecell><paragraph><extension extension_name='source' lang="apl"><preblock><preline><space/><space/><space/><space/><space/><space/><space/>n<space/></preline></preblock><paragraph>4 5 6 7</paragraph></extension></paragraph></tablecell><tablecell>Display contents of variable/vector<space/><xhtml:tt>n</xhtml:tt>.</tablecell></tablerow><tablerow><tablecell><paragraph><extension extension_name='source' lang="apl"><preblock><preline><space/><space/><space/><space/><space/><space/><space/>n+4</preline></preblock><paragraph>8 9 10 11</paragraph></extension></paragraph></tablecell><tablecell>4 is now added to all elements of vector<space/><xhtml:tt>n</xhtml:tt>, creating 4-element vector {8 9 10 11}.<xhtml:br></xhtml:br><space/>APL's interpreter displays the result because the return value was not assigned (with a<space/><xhtml:tt></xhtml:tt>).</tablecell></tablerow><tablerow><tablecell><paragraph><extension extension_name='source' lang="apl"><preblock><preline><space/><space/><space/><space/><space/><space/><space/>+/n</preline></preblock><paragraph>22</paragraph></extension></paragraph></tablecell><tablecell>APL displays the sum of components of the vector<space/><xhtml:tt>n</xhtml:tt>, i.e.<space/><xhtml:tt>22=(4+5+6+7)</xhtml:tt><space/>using a very compact notation.</tablecell></tablerow><tablerow><tablecell><paragraph><extension extension_name='source' lang="apl"><preblock><preline><space/><space/><space/><space/><space/><space/><space/>m +/(3+4)</preline><preline><space/><space/><space/><space/><space/><space/><space/>m</preline></preblock><paragraph>22</paragraph></extension></paragraph></tablecell><tablecell>These operations can be combined into a single statement. APL evaluates expressions right to left: first the array<space/><extension extension_name='source' lang="apl">4=[1,2,3,4]</extension><space/>is created, then 3 is added to each component, which are summed together and stored in variable<space/><xhtml:tt>m</xhtml:tt>, finally displayed.It's equivalent to the following, in conventional<space/><italics>mathematical notation</italics>:<space/><extension extension_name='math'>\displaystyle m = \sum\limits_{i=1}^4 i+3</extension>.</tablecell></tablerow></table><paragraph>The user can save the workspace with all values, programs, and execution status.</paragraph><paragraph>APL is well known for its use of a set of non-<link><target>ASCII</target></link><space/>symbols, which are an extension of traditional arithmetic and algebraic notation. Having single character names for<space/><link><target>SIMD</target></link><space/>vector functions is one way that APL enables compact formulation of algorithms for data transformation such as computing<space/><link><target>Conway's Game of Life</target></link><space/>in one line of code.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://catpad.net/michael/apl<space/></arg><arg name="title">example<space/></arg><arg name="publisher">Catpad.net<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-06-17</arg></template></extension><space/>In nearly all versions of APL, it is theoretically possible to express any computable function in one expression, that is, in one line of code.</paragraph><paragraph>Because of the unusual<space/><link><target>character set</target></link>, many programmers use special<space/><link><target>computer keyboard</target><part>keyboards</part></link><space/>with APL keytops to write APL code.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">APL Symbols</arg><arg name="title">Entering APL Symbols</arg><arg name="url">http://www.microapl.co.uk/apl/introduction_chapter2.html</arg><arg name="website">http://www.microapl.co.uk</arg><arg name="accessdate">1 January 2015</arg></template></extension><space/>Although there are various ways to write APL code using only ASCII characters,<extension extension_name='ref'><link type='external' href='http://www.math.uwaterloo.ca/apl_archives/apl/translit.schemes'>Dickey, Lee, A list of APL Transliteration Schemes</link>, 1993</extension><space/>in practice it is almost never done. (This may be thought to support Iverson's thesis about<space/><link><target>Linguistic relativity</target><part>notation as a tool of thought</part></link>.<extension extension_name='ref'>Iverson K.E.,&quot;<link type='external' href='http://www.jsoftware.com/papers/tot.htm'>Notation as a Tool of Thought</link>&quot;,<space/><italics>Communications of the ACM</italics>, 23: 444-465 (August 1980).</extension>) Most if not all modern implementations use standard keyboard layouts, with special mappings or<space/><link><target>input method editor</target><trail>s</trail></link><space/>to access non-ASCII characters. Historically, the APL font has been distinctive, with uppercase italic alphabetic characters and upright numerals and symbols. Most vendors continue to display the APL character set in a custom font.</paragraph><paragraph>Advocates of APL<template><target>Who</target><arg name="date">March 2015</arg></template><space/>claim that the examples of so-called &quot;write-only code&quot; (badly written and almost incomprehensible code) are almost invariably examples of poor programming practice or novice mistakes, which can occur in any language. Advocates of APL also claim that they are far more productive with APL than with more conventional computer languages, and that working software can be implemented in far less time and with far fewer programmers than using other technology. APL lets an individual solve harder problems faster.</paragraph><paragraph>They also may claim that because it is compact and terse, APL lends itself well to larger-scale software development and complexity, because the number of lines of code can be dramatically reduced. Many APL advocates and practitioners also view standard programming languages such as<space/><link><target>COBOL</target></link><space/>and<space/><link><target>Java (programming language)</target><part>Java</part></link><space/>as being comparatively tedious. APL is often found where time-to-market is important, such as with trading systems.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Batenburg</arg><arg name="title">APL Efficiency</arg><arg name="url">http://www.ekevanbatenburg.nl/PRVAPL.HTML</arg><arg name="website">http://www.ekevanbatenburg.nl</arg><arg name="accessdate">1 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Vaxman</arg><arg name="title">APL Great Programming</arg><arg name="url">http://www.vaxman.de/publications/apl_slides.pdf</arg><arg name="website">http://www.vaxman.de</arg><arg name="accessdate">1 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Janko</arg><arg name="first1">Wolfgang</arg><arg name="title">Investigation into the efficiency of using APL for the programming of an inference machine</arg><arg name="journal">ACM Digital Library</arg><arg name="date">May 1987</arg><arg name="volume">17</arg><arg name="issue">4</arg><arg name="pages">450–456</arg><arg name="url">http://dl.acm.org/citation.cfm?id</arg><arg name="accessdate">1 January 2015</arg><arg name="doi">10.1145/384282.28372</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Borealis</arg><arg name="title">Why APL?</arg><arg name="url">http://www.aplborealis.com/whyapl.html</arg><arg name="website">http://www.aplborealis.com</arg><arg name="accessdate">1 January 2015</arg></template></extension></paragraph><paragraph>Iverson later designed the<space/><italics><link><target>J programming language</target></link></italics>, which uses<space/><link><target>ASCII</target></link><space/>with<space/><link><target>digraph (computing)</target><part>digraphs</part></link><space/>instead of special symbols.</paragraph><heading level='2'>Execution</heading><paragraph>Because APL's core object are arrays,<extension extension_name='ref'><template><target>cite web</target><arg name="last1">SIGAPL</arg><arg name="title">What is APL?</arg><arg name="url">http://www.sigapl.org/about.php</arg><arg name="website">http://www.sigapl.org</arg><arg name="publisher">SIGAPL</arg><arg name="accessdate">20 January 2015</arg></template></extension><space/>it lends itself well to<space/><link><target>Data parallelism</target><part>parallelism</part></link>,<extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Ju</arg><arg name="first1">Dz-Ching</arg><arg name="last2">Ching</arg><arg name="first2">Wai-Mee</arg><arg name="title">Exploitation of APL data parallelism on a shared-memory MIMD machine</arg><arg name="journal">Newsletter ACM SIGPLAN Notices</arg><arg name="date">1991</arg><arg name="volume">26</arg><arg name="issue">7</arg><arg name="pages">61–72</arg><arg name="doi">10.1145/109625.109633</arg><arg name="url">http://dl.acm.org/citation.cfm?id</arg><arg name="accessdate">20 January 2015</arg></template></extension><space/><link><target>parallel computing</target></link>,<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Hsu</arg><arg name="first1">Aaron W.</arg><arg name="last2">Bowman</arg><arg name="first2">William J.</arg><arg name="title">Revisiting APL in the Modern Era</arg><arg name="url">http://www.cs.princeton.edu/~dpw/obt/abstracts/obt12_submission_11.pdf</arg><arg name="website">http://www.cs.princeton.edu</arg><arg name="publisher">Indiana University / Princeton</arg><arg name="accessdate">20 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Ching</arg><arg name="first1">W.-M.</arg><arg name="last2">Ju</arg><arg name="first2">D.</arg><arg name="title">Execution of automatically parallelized APL programs on RP3</arg><arg name="journal">IBM Journal of Research & Development</arg><arg name="date">1991</arg><arg name="volume">35</arg><arg name="issue">5/6</arg><arg name="page">767</arg><arg name="url">http://domino.research.ibm.com/tchjr/journalindex.nsf/c469af92ea9eceac85256bd50048567c/f892e104dfc4d0fd85256bfa0067fb42!OpenDocument</arg><arg name="accessdate">20 January 2015</arg></template></extension><space/><link><target>Massively parallel (computing)</target><part>massively parallel</part></link><space/>applications,<extension extension_name='ref'><template><target>cite paper</target><arg name="last1">Blelloch</arg><arg name="first1">Guy E.</arg><arg name="last2">Sabot</arg><arg name="first2">Gary W.</arg><arg name="title">Compiling Collection-Oriented Languages onto Massively Parallel Computers</arg><arg name="id"><space/>{{citeseerx|10.1.1.51.5088}}</arg><arg name="publisher">Carnegie Mellon University / Thinking Machines Corp.</arg><arg name="pages">1–31</arg><arg name="quote">Collection oriented languages include APL, APL2</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Jendrsczok</arg><arg name="first1">Johannes</arg><arg name="last2">Hoffmann</arg><arg name="first2">Rolf</arg><arg name="last3">Ediger</arg><arg name="first3">Patrick</arg><arg name="last4">Keller</arg><arg name="first4">J ̈org</arg><arg name="title">Implementing APL-like data parallel functions on a GCA machine</arg><arg name="url">https://www.fernuni-hagen.de/imperia/md/content/fakultaetfuermathematikundinformatik/pv/97-08/papergca_09_1_.pdf</arg><arg name="website">https://www.fernuni-hagen.de</arg><arg name="publisher">Fernuni-Hagen.De</arg><arg name="accessdate">22 January 2015</arg><arg name="pages">1–6</arg><arg name="quote">GCA - Global Cellular Automation. Inherently massively parallel. 'APL has been chosen because of the ability to express matrix and vector' structures.</arg></template></extension><space/>and<space/><link><target>Very-large-scale integration</target><part>very-large-scale integration or VLSI</part></link>.<extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Brenner of IBM T.J.Watson Research Center</arg><arg name="first1">Norman</arg><arg name="title">VLSI circuit design using APL with fortran subroutines</arg><arg name="journal">ACM SIGAPL APL Quote Quad</arg><arg name="date">1984</arg><arg name="volume">14</arg><arg name="issue">4</arg><arg name="pages">77–79</arg><arg name="doi">10.1145/800058.801079</arg><arg name="url">http://dl.acm.org/citation.cfm?id</arg><arg name="accessdate">22 January 2015</arg><arg name="publisher">ACM SIGAPL</arg><arg name="quote">APL for interactiveness and ease of coding</arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Gamble</arg><arg name="first1">D.J.</arg><arg name="last2">Hobson</arg><arg name="first2">R.F.</arg><arg name="title">Towards a graphics/procedural environment for constructing VLSI module generators</arg><arg name="journal">Communications, Computers and Signal Processing, 1989. Conference Proceeding., IEEE Pacific Rim Conference on</arg><arg name="date">1989</arg><arg name="pages">606–611</arg><arg name="doi">10.1109/PACRIM.1989.48437</arg><arg name="url">http://ieeexplore.ieee.org/xpl/login.jsp?tp</arg><arg name="publisher">IEEE</arg><arg name="location">Victoria, BC, Canada</arg><arg name="quote">VLSI module generators are described. APL and C, as examples of interpreted and compiled languages, can be interfaced to an advanced graphics display</arg></template></extension></paragraph><heading level='3'>Interpreters</heading><paragraph>APLNext (formerly APL2000) offers an advanced APL interpreter that operates under Linux, Unix, and Windows. It supports Windows automation, supports calls to operating system and user defined DLLs, has an advanced APL File System, and represents the current level of APL language development. APL2000's product is an advanced continuation of<space/><link><target>Scientific Time Sharing Corporation</target><part>STSC</part></link>'s successful APL*Plus/PC and APL*Plus/386 product line.</paragraph><paragraph><italics>Dyalog APL</italics><space/>is an advanced APL interpreter that operates under AIX, Linux (including on the Raspberry Pi), Mac OS and Microsoft Windows.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Dyalog Ltd's website</arg><arg name="url">http://www.dyalog.com/dyalog/current-platforms.htm</arg></template></extension><space/>Dyalog has extensions to the APL language, which include new<space/><link><target>Object-oriented programming</target><part>object-oriented</part></link><space/>features, numerous language enhancements, plus a consistent<space/><link><target>namespace</target></link><space/>model used for both its Microsoft Automation interface, as well as native<space/><link><target>namespace</target><trail>s</trail></link>. For the Windows platform, Dyalog APL offers tight integration with .NET, plus limited integration with the Microsoft Visual Studio development platform.</paragraph><paragraph>IBM offers a version of IBM APL2 for IBM AIX, Linux, Sun Solaris and Windows systems. This product is a continuation of APL2 offered for IBM mainframes. IBM APL2 was arguably the most influential APL system, which provided a solid implementation standard for the next set of extensions to the language, focusing on nested arrays.</paragraph><paragraph>NARS2000 is an open-source APL interpreter written by Bob Smith, a well-known APL developer and implementor from<space/><link><target>STSC</target></link><space/>in the 1970s and 1980s. NARS2000 contains advanced features and new datatypes, runs natively under Windows (32- and 64-bit versions), and runs under<space/><link><target>Linux</target></link><space/>and Apple<space/><link><target>Mac OS</target></link><space/>with<space/><link><target>Wine (software)</target><part>Wine</part></link>.</paragraph><paragraph>MicroAPL Limited offers<space/><link><target>APLX</target></link>, a full-featured 64 bit interpreter for<space/><link><target>Linux</target></link>,<space/><link><target>Microsoft Windows</target></link>, and<space/><link><target>Mac OS</target></link><space/>systems. The core language is closely modelled on IBM's APL2 with various enhancements.<space/><italics>APLX</italics><space/>includes close integration with<space/><link><target>.NET</target></link>,<space/><link><target>Java (programming language)</target><part>Java</part></link>,<space/><link><target>Ruby</target></link><space/>and<space/><link><target>R (programming language)</target><part>R</part></link>.</paragraph><paragraph><link><target>Soliton Incorporated</target></link><space/>offers the SAX interpreter, which stands for<space/><italics>S</italics>harp<space/><italics>A</italics>PL for Uni<italics>X</italics>, for Unix and Linux systems. This is a further development of I. P. Sharp Associates' Sharp APL product. Unlike most other APL interpreters,<space/><link><target>Kenneth E. Iverson</target></link><space/>had some influence in the way nested arrays were implemented in Sharp APL and SAX. Nearly all other APL implementations followed the course set by IBM with APL2, thus some important details in Sharp APL differ from other implementations.</paragraph><paragraph>OpenAPL is an open source implementation of APL published by Branko Bratkovic. It is based on code by<space/><link><target>Ken Thompson</target></link><space/>of Bell Laboratories, together with contributions by others. It is licensed under the<space/><link><target>GNU General Public License</target></link>, and runs on Unix systems including Linux on x86, SPARC and other CPUs.</paragraph><paragraph>GNU APL is a free implementation of ISO Standard 13751 and hence similar to APL2. It runs on GNU/Linux and on Windows using<space/><link><target>Cygwin</target></link>. It uses<space/><link><target>Unicode</target></link><space/>internally. GNU APL was written by Jrgen Sauermann.</paragraph><heading level='3'>Compilers</heading><paragraph>APL programs are normally<space/><link><target>interpreted language</target><part>interpreted</part></link><space/>and less often<space/><link><target>compiled language</target><part>compiled</part></link>. In reality, most APL compilers<space/><link><target>translated</target></link><space/>source APL to a lower level language such as<space/><link><target>C (programming language)</target><part>C</part></link>, leaving the machine-specific details to the lower level compiler. Compilation of APL programs was a frequently discussed topic in conferences. Although some of the newer enhancements to the APL language such as nested arrays have rendered the language increasingly difficult to compile, the idea of APL compilation is still under development today.</paragraph><paragraph>In the past, APL compilation was regarded as a means to achieve execution speed comparable to other mainstream languages, especially on mainframe computers. Several APL compilers achieved some levels of success, though comparatively little of the development effort spent on APL over the years went to perfecting compilation into machine code.</paragraph><paragraph>As is the case when moving APL programs from one vendor's APL interpreter to another, APL programs invariably will require changes to their content. Depending on the compiler, variable declarations might be needed, certain language features would need to be removed or avoided, or the APL programs would need to be cleaned up in some way. Some features of the language, such as the execute function (an expression evaluator) and the various<space/><link><target>reflection (computer science)</target><part>reflection</part></link><space/>and<space/><link><target>introspection (computer science)</target><part>introspection</part></link><space/>functions from APL, such as the ability to return a function's text or to materialize a new function from text, are simply not practical to implement in machine code compilation.</paragraph><paragraph>A commercial compiler was brought to market by<space/><link><target>Scientific Time Sharing Corporation</target><part>STSC</part></link><space/>in the mid-1980s as an add-on to IBM's VSAPL Program Product. Unlike more modern APL compilers, this product produced machine code that would execute only in the interpreter environment, it was not possible to eliminate the interpreter component. The compiler could compile many scalar and vector operations to machine code, but it would rely on the APL interpreter's services to perform some more advanced functions, rather than attempt to compile them. However, dramatic speedups did occur, especially for heavily iterative APL code.</paragraph><paragraph>Around the same time, the book<space/><italics>An APL Compiler</italics><space/>by<space/><link><target>Timothy Budd</target></link><space/>appeared in print. This book detailed the construction of an APL translator, written in<space/><link><target>C (programming language)</target><part>C</part></link>, which performed certain optimizations such as<space/><link><target>loop fusion</target></link><space/>specific to the needs of an array language. The source language was APL-like in that a few rules of the APL language were changed or relaxed to permit more efficient compilation. The translator would emit C code which could then be compiled and run outside of the APL workspace.</paragraph><paragraph>The Burroughs/Unisys<space/><italics>APLB</italics><space/>interpreter (1982) was the first to use<space/><link><target>Dynamic compilation</target><part>dynamic</part></link><space/><link><target>Incremental compiler</target><part>incremental</part></link><space/>compilation to produce code for an APL-specific<space/><link><target>virtual machine</target></link>. It recompiled on-the-fly as identifiers changed their functional meanings. In addition to removing<space/><link><target>parsing</target></link><space/>and some error checking from the main execution path, such compilation also streamlines the repeated entry and exit of user-defined functional operands. This avoids the stack setup and take-down for function calls made by APL's built-in operators such as<space/><bold>Reduce</bold><space/>and<space/><bold>Each</bold>.</paragraph><paragraph><template><target>Sidebar</target><arg name="title"><space/>Array Contraction</arg><arg name="bodystyle"><space/>width:25em; background-color: #F5FFF7
</arg><arg name="heading1"><space/>''Definition'':
</arg><arg name="content1"><space/>
A program transformation which reduces array size while preserving the correct output. This technique has been used in the past to reduce memory requirement of the program, which can be important to out-of-core computing and embedded systems.
'Improving Data Locality by Array Contraction'<ref>{{cite web|last1</arg><arg name="below"><space/>Reducing [[Virtual memory|Virtual Memory]] Requirements
</arg></template><italics>APEX</italics>, a research APL compiler, is available under the<space/><link><target>GNU Public License</target></link>, per Snake Island Research Inc. APEX compiles flat APL (a subset of ISO N8485) into<space/><link><target>SAC programming language</target><part>SAC</part></link>, a functional array language with parallel semantics, and currently runs under<space/><link><target>Linux</target></link>. APEX-generated code uses<space/><link><target>loop fusion</target></link><space/>and 'array contraction', special-case algorithms not generally available to interpreters (e.g., upgrade of<space/><link><target>Permutation matrix</target><part>permutation matrix/vector</part></link>), to achieve a level of performance comparable to that of<space/><link><target>Fortran</target></link>.</paragraph><paragraph>The APLNext<space/><italics>VisualAPL</italics><space/>system is a departure from a conventional APL system in that VisualAPL is a true .NET language which is fully interoperable with other .NET languages such as<space/><link><target>VB.NET</target></link><space/>and<space/><link><target>C Sharp (programming language)</target><part>C#</part></link>. VisualAPL is inherently object-oriented and Unicode-based. While VisualAPL incorporates most of the features of standard APL implementations, the VisualAPL language extends standard APL to be .NET-compliant. VisualAPL is hosted in the standard Microsoft Visual Studio IDE and as such, invokes compilation in a manner identical to that of other .NET languages. By producing<space/><link><target>Common Intermediate Language</target></link><space/>(CIL) code, it utilizes the Microsoft just-in-time compiler (JIT) to support 32-bit or 64-bit hardware. Substantial performance speed-ups over standard APL have been reported,<template><target>Citation needed</target><arg name="date">September 2009</arg></template><space/>especially when (optional) strong typing of function arguments is used.</paragraph><paragraph>An APL to<space/><link><target>C Sharp (programming language)</target><part>C#</part></link><space/>translator is available from Causeway Graphical Systems. This product was designed to allow the APL code, translated to equivalent C#, to run completely outside of the APL environment. The Causeway compiler requires a run-time library of array functions. Some speedup, sometimes dramatic, is visible, but happens on account of the optimisations inherent in Microsoft's .NET Framework.</paragraph><heading level='3'>Matrix optimizations</heading><paragraph>APL was unique in the speed with which it could perform complicated matrix operations. For example, a very large matrix multiplication would take only a few seconds on a machine that was much less powerful than those today, ref.<space/><link><target>History of supercomputing#Beginnings: 1950s and 1960s</target><part>history of supercomputing</part></link><space/>and &quot;because it operates on arrays and performs operations like matrix inversion internally, well written APL can be surprisingly fast.&quot;<extension extension_name='ref'><template><target>cite web</target><arg name="last1">MARTHA and LLAMA</arg><arg name="title">The APL Computer Language</arg><arg name="url">http://marthallama.org/apl/</arg><arg name="website">http://marthallama.org</arg><arg name="publisher">MarthaLlama</arg><arg name="accessdate">20 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Lee</arg><arg name="first1">Robert S.</arg><arg name="title">Two Implementations of APL</arg><arg name="journal">PC Magazine</arg><arg name="date">1983</arg><arg name="volume">2</arg><arg name="issue">5</arg><arg name="page">379</arg><arg name="url">https://books.google.com/books?id</arg><arg name="accessdate">20 January 2015</arg></template></extension><space/>There were both technical and economic reasons for this advantage:</paragraph><list type='bullet'><listitem>Commercial interpreters delivered highly tuned linear algebra library routines.</listitem><listitem>Very low interpretive overhead was incurred per-arraynot per-element.</listitem><listitem>APL response time compared favorably to the runtimes of early optimizing compilers.</listitem><listitem>IBM provided<space/><link><target>microcode</target></link><space/>assist for APL on a number of IBM370 mainframes.</listitem></list><paragraph>Phil Abrams' much-cited paper &quot;An APL Machine&quot; illustrated how APL could make effective use of<space/><link><target>lazy evaluation</target></link><space/>where calculations would not actually be performed until the results were needed and then only those calculations strictly required. An obvious (and easy to implement) lazy evaluation is the<space/><italics>J-vector</italics>: when a monadic<space/><italics>iota</italics><space/>is encountered in the code, it is kept as a representation instead of being expanded in memory; in future operations, a J-vectors contents are the loop's induction register, not reads from memory.</paragraph><paragraph>Although such techniques were not widely used by commercial interpreters, they exemplify the language's best survival mechanism: not specifying the order of scalar operations or the exact contents of memory. As standardized, in 1983 by<space/><link><target>American National Standards Institute</target><part>ANSI</part></link><space/><link><target>working group</target></link><space/>X3J10, APL remains highly<space/><link><target>data parallelism</target><part>data-parallel</part></link>. This gives language implementers immense freedom to schedule operations as efficiently as possible. As computer innovations such as<space/><link><target>cache memory</target></link>, and<space/><link><target>SIMD</target></link><space/>execution became commercially available, APL programs are ported with almost no extra effort spent re-optimizing low-level details.</paragraph><heading level='2'>Terminology</heading><paragraph>APL makes a clear distinction between<space/><italics>functions</italics><space/>and<space/><italics>operators</italics>.<extension extension_name='ref' name="MicroAOL_Operators"></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Iverson</arg><arg name="first1">Kenneth E.</arg><arg name="title">A Dictionary of APL</arg><arg name="url">http://www.jsoftware.com/papers/APLDictionary.htm</arg><arg name="website">http://www.jsoftware.com</arg><arg name="publisher">JSoftware / Iverson Estate</arg><arg name="accessdate">20 January 2015</arg></template></extension><space/>Functions take arrays (variables or constants or expressions) as arguments, and return arrays as results. Operators (similar to<space/><link><target>higher-order function</target><trail>s</trail></link>) take functions or arrays as arguments, and derive related functions. For example, the &quot;sum&quot; function is derived by applying the &quot;reduction&quot; operator to the &quot;addition&quot; function. Applying the same reduction operator to the &quot;maximum&quot; function (which returns the larger of two numbers) derives a function which returns the largest of a group (vector) of numbers. In the J language, Iverson substituted the terms &quot;verb&quot; for &quot;function&quot; and &quot;adverb&quot; or &quot;conjunction&quot; for &quot;operator&quot;.</paragraph><paragraph>APL also identifies those features built into the language, and represented by a symbol, or a fixed combination of symbols, as<space/><italics>primitives</italics>. Most primitives are either functions or operators. Coding APL is largely a process of writing non-primitive functions and (in some versions of APL) operators. However a few primitives are considered to be neither functions nor operators, most noticeably assignment.</paragraph><paragraph>Some words used in APL literature have meanings that differ from those in both mathematics and the generality of computer science.</paragraph><table class="wikitable"><tablerow><tablehead>Term</tablehead><tablehead>Description</tablehead></tablerow><tablerow><tablehead>function</tablehead><tablecell><paragraph>operation or mapping that takes zero, one (right) or two (left &amp; right) arguments which may be scalars, arrays, or more complicated structures, and may return a similarly complex result. A function may be:</paragraph><list type='bullet'><listitem>Primitive: built-in and represented by a single glyph;<extension extension_name='ref' name="aplxch6"><template><target>cite web</target><arg name="url">http://www.microapl.co.uk/APL/apl_concepts_chapter6.html<space/></arg><arg name="title">APL concepts<space/></arg><arg name="publisher">Microapl.co.uk<space/></arg><arg name="accessdate">2010-02-03</arg></template></extension></listitem><listitem>Defined: as a named and ordered collection of program statements;<extension extension_name='ref' name="aplxch6"></extension></listitem><listitem>Derived: as a combination of an operator with its arguments.<extension extension_name='ref' name="aplxch6"></extension></listitem></list></tablecell></tablerow><tablerow><tablehead>array</tablehead><tablecell>data valued object of zero or more<space/><link><target>orthogonal</target></link><space/>dimensions in<space/><link><target>row major</target><part>row-major</part></link><space/>order in which each item is a primitive scalar datum or another array.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.nial.com/ArrayTheory.html<space/></arg><arg name="title">Nested array theory<space/></arg><arg name="publisher">Nial.com<space/></arg><arg name="accessdate">2010-02-03</arg></template></extension></tablecell></tablerow><tablerow><tablehead>niladic</tablehead><tablecell>not taking or requiring any arguments,<extension extension_name='ref' name="Bohman_Froberg">&quot;Programmera i APL&quot;, Bohman, Frberg, Studentlitteratur, ISBN 91-44-13162-3</extension></tablecell></tablerow><tablerow><tablehead>monadic</tablehead><tablecell>requiring only one argument; on the right for a function, on the left for an operator, unary<extension extension_name='ref' name="Bohman_Froberg"></extension></tablecell></tablerow><tablerow><tablehead>dyadic</tablehead><tablecell>requiring both a left and a right argument, binary<extension extension_name='ref' name="Bohman_Froberg"></extension></tablecell></tablerow><tablerow><tablehead>ambivalent or nomadic</tablehead><tablecell>capable of use in a monadic or dyadic context, permitting its left argument to be elided<extension extension_name='ref' name="aplxch6"></extension></tablecell></tablerow><tablerow><tablehead>operator</tablehead><tablecell><paragraph>operation or mapping that takes one (left) or two (left &amp; right) function or array valued arguments (operands) and derives a function. An operator may be:</paragraph><list type='bullet'><listitem>Primitive: built-in and represented by a single glyph;<extension extension_name='ref' name="aplxch6"></extension></listitem><listitem>Defined: as a named and ordered collection of program statements.<extension extension_name='ref' name="aplxch6"></extension></listitem></list></tablecell></tablerow></table><heading level='2'>Syntax</heading><paragraph><template><target>Main</target><arg>APL syntax and symbols</arg></template>APL has explicit representations of functions, operators, and syntax, thus providing a basis for the clear and explicit statement of extended facilities in the language, as well as tools for experimentation upon them.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Iverson</arg><arg name="first1">Kenneth E.</arg><arg name="title">APL Syntax and Semantics</arg><arg name="url">http://www.jsoftware.com/papers/APLSyntaxSemantics.htm</arg><arg name="website">http://www.jsoftware.com</arg><arg name="publisher">I.P. Sharp Assoc.</arg><arg name="accessdate">11 January 2015</arg></template></extension></paragraph><heading level='2'>Examples</heading><heading level='3'>Hello, World</heading><paragraph>This displays &quot;<link><target>Hello, world</target></link>&quot;:</paragraph><paragraph><extension extension_name='source' lang="apl">'Hello, world'</extension>'Hello World,' sample user session on YouTube<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Dyalog APL/W</arg><arg name="title">Producing a standalone 'Hello World' program in APL</arg><arg name="url">https://www.youtube.com/watch?v</arg><arg name="website">https://www.youtube.com</arg><arg name="publisher">Dyalog-APLtrainer</arg><arg name="accessdate">11 January 2015</arg></template></extension></paragraph><paragraph>A design theme in APL is to define default actions in some cases that would produce syntax errors in most other programming languages.</paragraph><paragraph>The 'Hello, world' string constant above displays, because display is the default action on any expression for which no action is specified explicitly (e.g. assignment, function parameter).</paragraph><heading level='3'>Exponentiation</heading><paragraph>Another example of this theme is that exponentiation in APL is written as &quot;<template><target>code</target><arg>2⋆3</arg></template>&quot;, which indicates raising 2 to the power 3 (this would be written as &quot;<template><target>code</target><arg>2^3</arg></template>&quot; in some other languages and &quot;<template><target>code</target><arg>2**3</arg></template>&quot; in FORTRAN and Python). However, if no base is specified (as with the statement &quot;<template><target>code</target><arg>⋆3</arg></template>&quot; in APL, or &quot;<template><target>code</target><arg>^3</arg></template>&quot; in other languages), most other programming languages one would have a syntax error. APL however assumes the missing base to be the natural logarithm constant<space/><link><target>e (mathematical constant)</target><part>e</part></link><space/>(2.71828....), and so interpreting &quot;<template><target>code</target><arg>⋆3</arg></template>&quot; as &quot;<template><target>code</target><arg>2.71828⋆3</arg></template>&quot;.</paragraph><heading level='3'>&quot;Pick 6&quot; lottery numbers</heading><paragraph>This following immediate-mode expression generates a typical set of &quot;Pick 6&quot;<space/><link><target>lottery</target></link><space/>numbers: six<space/><link><target>pseudo-random</target></link><space/><link><target>integer</target><trail>s</trail></link><space/>ranging from 1 to 40,<space/><italics>guaranteed non-repeating</italics>, and displays them sorted in ascending order:</paragraph><paragraph><extension extension_name='source' lang="apl">x[x6?40]</extension></paragraph><paragraph>The above does a lot, concisely; although it seems complex to a beginning APLer.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Wiktionary</arg><arg name="title">APLer - Wiktionary</arg><arg name="url">https://en.wiktionary.org/wiki/APLer</arg><arg name="website">https://en.wiktionary.org</arg><arg name="publisher">Wiktionary</arg><arg name="accessdate">11 January 2015</arg></template></extension><space/>It combines the following APL<space/><bold>functions</bold><space/>(also called<space/><italics>primitives</italics><extension extension_name='ref'><template><target>cite web</target><arg name="last1">MicroAPL</arg><arg name="title">APL Primitives</arg><arg name="url">http://www.microapl.co.uk/apl_help/ch_020_020.htm</arg><arg name="website">http://www.microapl.co.uk</arg><arg name="publisher">MicroAPL</arg><arg name="accessdate">11 January 2015</arg></template></extension><space/>and<space/><italics>glyphs</italics><extension extension_name='ref'><template><target>cite web</target><arg name="last1">NARS2000</arg><arg name="title">APL Font - Extra APL Glyphs</arg><arg name="url">http://wiki.nars2000.org/index.php/APL_Font</arg><arg name="website">http://wiki.nars2000.org</arg><arg name="publisher">NARS2000</arg><arg name="accessdate">11 January 2015</arg></template></extension>):</paragraph><list type='bullet'><listitem>The first to be executed (APL executes from rightmost to leftmost) is dyadic function &quot;?&quot; (named<space/><bold>deal</bold><space/>when dyadic) that returns a<space/><link><target>array data structure</target><part>vector</part></link><space/>consisting of a select number (left argument: 6 in this case) of random integers ranging from 1 to a specified maximum (right argument: 40 in this case), which, if said maximum vector length, is guaranteed to be non-repeating; thus, generate/create 6 random integers ranging from 1-40.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Fox</arg><arg name="first1">Ralph L.</arg><arg name="title">Systematically Random Numbers</arg><arg name="url">http://www.sigapl.org/article1.php</arg><arg name="website">http://www.sigapl.org</arg><arg name="publisher">SIGAPL</arg><arg name="accessdate">11 January 2015</arg></template></extension></listitem><listitem>This vector is then<space/><bold>assigned</bold><space/>(<xhtml:code></xhtml:code>) to the variable x, because it is needed later.</listitem><listitem>This vector is then<space/><bold>sorted</bold><space/>in ascending order by a monadic &quot;&quot; function, which has as its right argument everything to the right of it up to the next unbalanced<space/><bold>close-bracket</bold><space/>or close-parenthesis. The result of is the indices that will put its argument into ascending order.</listitem><listitem>Then the output of is applied to the variable x, which we saved earlier, and it puts the items of x into<space/><bold>ascending</bold><space/>sequence.</listitem></list><paragraph>Since there is no function to the left of the left-most x to tell APL what to do with the result, it simply outputs it to the display (on a single line, separated by spaces) without needing any explicit instruction to do that.</paragraph><paragraph>&quot;?&quot; also has a monadic equivalent called<space/><bold>roll</bold>, which simply returns a single random integer between 1 and its sole operand [to the right of it], inclusive. Thus, a<space/><link><target>role-playing game</target></link><space/>program might use the expression &quot;?20&quot; to roll a twenty-sided die.</paragraph><heading level='3'>Prime numbers</heading><paragraph>The following expression finds all<space/><link><target>prime number</target><trail>s</trail></link><space/>from 1 to R. In both time and space, the calculation complexity is<space/><extension extension_name='math'>O(R^2)\,\!</extension><space/>(in<space/><link><target>Big O notation</target></link>).</paragraph><paragraph><extension extension_name='source' lang="apl">(~RR.R)/R1R</extension></paragraph><paragraph>Executed from right to left, this means:</paragraph><list type='bullet'><listitem><bold><link><target>Iota</target></link></bold><space/><xhtml:code>R</xhtml:code><space/>creates a vector containing<space/><link><target>integer</target><trail>s</trail></link><space/>from<space/><xhtml:code>1</xhtml:code><space/>to<space/><xhtml:code>R</xhtml:code><space/>(if<space/><xhtml:code>R = 6</xhtml:code><space/>at the beginning of the program,<space/><xhtml:code>R</xhtml:code><space/>is<space/><xhtml:code>1 2 3 4 5 6</xhtml:code>)</listitem><listitem><bold>Drop</bold><space/>first element of this vector (<xhtml:code></xhtml:code><space/>function), i.e.<space/><xhtml:code>1</xhtml:code>. So<space/><xhtml:code>1R</xhtml:code><space/>is<space/><xhtml:code>2 3 4 5 6</xhtml:code></listitem><listitem><bold>Set</bold><space/><xhtml:code>R</xhtml:code><space/>to the new vector (<xhtml:code></xhtml:code>,<space/><bold>assignment</bold><space/>primitive), i.e.<space/><xhtml:code>2 3 4 5 6</xhtml:code></listitem><listitem>The<space/><xhtml:code>/</xhtml:code><space/><bold>compress</bold><space/>function is dyadic (binary) and the interpreter first evaluates its left argument (entirely in parentheses):</listitem><listitem>Generate<space/><bold><link><target>outer product</target></link></bold><space/>of<space/><xhtml:code>R</xhtml:code><space/>multiplied by<space/><xhtml:code>R</xhtml:code>, i.e. a matrix that is the<space/><italics><link><target>multiplication table</target></link></italics><space/>of R by R (<xhtml:code>.</xhtml:code><space/>operator), i.e.</listitem></list><table class="wikitable"><tablerow><tablecell>4</tablecell><tablecell>6</tablecell><tablecell>8</tablecell><tablecell>10</tablecell><tablecell>12</tablecell></tablerow><tablerow><tablecell>6</tablecell><tablecell>9</tablecell><tablecell>12</tablecell><tablecell>15</tablecell><tablecell>18</tablecell></tablerow><tablerow><tablecell>8</tablecell><tablecell>12</tablecell><tablecell>16</tablecell><tablecell>20</tablecell><tablecell>24</tablecell></tablerow><tablerow><tablecell>10</tablecell><tablecell>15</tablecell><tablecell>20</tablecell><tablecell>25</tablecell><tablecell>30</tablecell></tablerow><tablerow><tablecell>12</tablecell><tablecell>18</tablecell><tablecell>24</tablecell><tablecell>30</tablecell><tablecell>36</tablecell></tablerow></table><list type='bullet'><listitem>Build a vector the same length as<space/><xhtml:code>R</xhtml:code><space/>with<space/><xhtml:code>1</xhtml:code><space/>in each place where the corresponding number in<space/><xhtml:code>R</xhtml:code><space/>is in the outer product matrix (<xhtml:code></xhtml:code>,<space/><bold>set inclusion</bold><space/>or<space/><bold>element of</bold><space/>or<space/><bold><link><target>Epsilon</target></link></bold><space/>operator), i.e.<space/><xhtml:code>0 0 1 0 1</xhtml:code></listitem><listitem>Logically negate (<bold>not</bold>) values in the vector (change zeros to ones and ones to zeros) (<xhtml:code></xhtml:code>, logical<space/><bold>not</bold><space/>or<space/><bold><link><target>Tilde</target></link></bold><space/>operator), i.e.<space/><xhtml:code>1 1 0 1 0</xhtml:code></listitem><listitem>Select the items in<space/><xhtml:code>R</xhtml:code><space/>for which the corresponding element is<space/><xhtml:code>1</xhtml:code><space/>(<xhtml:code>/</xhtml:code><space/><bold>compress</bold><space/>operator), i.e.<space/><xhtml:code>2 3 5</xhtml:code></listitem></list><paragraph>(Note, this assumes the APL origin is 1, i.e. indices start with 1. APL can be set to use 0 as the origin, so that<space/><xhtml:code>6</xhtml:code><space/>is<space/><xhtml:code>0 1 2 3 4 5</xhtml:code>, which is convenient for some calculations).</paragraph><heading level='3'>Sorting</heading><paragraph>The following expression<space/><link><target>sorting</target><part>sorts</part></link><space/>a word list stored in matrix X according to word length:</paragraph><paragraph><extension extension_name='source' lang="apl">X[X+.' ';]</extension></paragraph><heading level='3'>Game of Life</heading><paragraph>The following function &quot;life&quot;, written in Dyalog APL, takes a boolean matrix and calculates the new generation according to<space/><link><target>Conway's Game of Life</target></link>. It demonstrates the power of APL to implement a complex algorithm in very little code, but it is also very hard to follow unless one has advanced knowledge of APL.</paragraph><paragraph><extension extension_name='source' lang="apl">life{1 .3 4=+/,1 0 1.1 0 1.}</extension></paragraph><heading level='3'>HTML tags removal</heading><paragraph>In the following example, also Dyalog, the first line assigns some HTML code to a variable<space/><xhtml:code>txt</xhtml:code><space/>and then uses an APL expression to remove all the HTML tags, returning the text only as shown in the last line.</paragraph><preblock><preline>txt'<extension extension_name='source' lang="html"><extension extension_name='html'><extension extension_name='body'><xhtml:p>This is<space/><xhtml:em>emphasized</xhtml:em><space/>text</xhtml:p></extension></extension></extension>'</preline><preline><extension extension_name='source' lang="apl">{/~{\}'&lt;&gt;'}txt</extension></preline><preline><template><target>color</target><arg>#666666</arg><arg>This is emphasized text</arg></template>.</preline></preblock><heading level='2'>Character set</heading><paragraph><template><target>Main</target><arg>APL (codepage)</arg><arg>APL syntax and symbols#Monadic functions</arg><arg name="l2">syntax and symbols.</arg></template></paragraph><paragraph><bold>APL</bold><space/>has been both criticized and praised for its choice of a unique, non-standard character set. Some who learn it become ardent adherents, suggesting that there is some weight behind Iverson's idea that the notation used does make a difference.<space/><italics>In the beginning</italics>, there were few terminal devices and even display monitors that could reproduce the APL character setthe most popular ones employing the<space/><link><target>IBM Selectric</target></link><space/>print mechanism along with a special APL type element. One of the early APL<space/><link><target>Computer terminal</target><part>line terminals</part></link><space/>(line-mode operation only,<space/><italics>not</italics><space/>full screen) - was the Texas Instruments TI Model 745 (circa 1977) with full APL character set<extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Texas Instruments</arg><arg name="title">TI 745 full page ad: Introducing a New Set of Characters</arg><arg name="journal">Computerworld</arg><arg name="date">1977</arg><arg name="volume">11</arg><arg name="issue">27</arg><arg name="page">32</arg><arg name="url">https://books.google.com/books?id</arg><arg name="accessdate">20 January 2015</arg></template></extension><space/>which featured<space/><link><target>Duplex (telecommunications)</target><part>half and full duplex</part></link><space/><link><target>telecommunication</target><trail>s</trail></link><space/>modes, for interacting with an APL<space/><link><target>time-sharing</target></link><space/>service or remote mainframe to run a remote computer job,<space/><link><target>Remote job entry</target><part>called an RJE</part></link>.</paragraph><paragraph>Over time, with the universal use of high-quality graphic displays, printing devices and<space/><link><target>Unicode</target></link><space/>support, the APL character font problem has largely been eliminated; however, entering APL characters requires use of<space/><link><target>input method editor</target><trail>s</trail></link>, keyboard mappings, virtual/on-screen APL symbol sets,<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Dyalog</arg><arg name="title">APL Fonts and Keyboards</arg><arg name="url">http://www.dyalog.com/apl-font-keyboard.htm</arg><arg name="website">http://www.dyalog.com</arg><arg name="publisher">Dyalog</arg><arg name="accessdate">19 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Smith</arg><arg name="first1">Bob</arg><arg name="title">NARS2000 Keyboard</arg><arg name="url">http://www.sudleyplace.com/APL/Keyboard.ahtml</arg><arg name="website">http://www.sudleyplace.com</arg><arg name="publisher">Bob Smith / NARS2000</arg><arg name="accessdate">19 January 2015</arg></template></extension><space/><bold>or</bold><space/>easy-reference printed keyboard<space/><italics>cards</italics><space/>which can frustrate beginners accustomed to other programming languages.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">MicroAPL Ltd</arg><arg name="title">Introduction to APL - APL Symbols</arg><arg name="url">http://www.microapl.co.uk/apl/introduction_chapter1.html</arg><arg name="website">http://www.microapl.co.uk</arg><arg name="publisher">MicroAPL Ltd</arg><arg name="accessdate">8 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Brown</arg><arg name="first1">James A.</arg><arg name="last2">Hawks</arg><arg name="first2">Brent</arg><arg name="last3">Trimble</arg><arg name="first3">Ray</arg><arg name="title">Extending the APL character set</arg><arg name="journal">ACM SIGAPL APL Quote Quad</arg><arg name="date">1993</arg><arg name="volume">24</arg><arg name="issue">1</arg><arg name="pages">41–46</arg><arg name="doi">10.1145/166198.166203</arg><arg name="url">http://dl.acm.org/citation.cfm?id</arg><arg name="accessdate">8 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Kromberg</arg><arg name="first1">Morten</arg><arg name="title">Unicode Support for APL</arg><arg name="url">http://archive.vector.org.uk/art10500090</arg><arg name="website">http://archive.vector.org.uk</arg><arg name="publisher">Vector, Journal of the British APL Association</arg><arg name="accessdate">8 January 2015</arg></template></extension></paragraph><paragraph>In defense of the APL community, APL requires less coding to type in, and keyboard mappings become memorized over time. Also, special APL keyboards are manufactured and in use today, as are freely available downloadable fonts for operating system platforms such as Microsoft Windows.<extension extension_name='ref'>Dyalog, Inc. APL fonts and keyboards. http://www.dyalog.com/apl-font-keyboard.htm</extension><space/>The reported productivity gains assume that one will spend enough time working in APL to make memorization of the symbols, their semantics, and keyboard mappings worthwhile.<template><target>citation needed</target><arg name="date">July 2015</arg></template></paragraph><heading level='2'>Use</heading><paragraph>APL has long had a select, mathematically inclined and curiosity-driven user base, who reference its powerful and symbolic nature: one symbol/character can perform an entire sort, another can perform regression, for example. It was and still is popular in financial, pre-modeling applications, and insurance applications, in simulations, and in mathematical applications. APL has been used in a wide variety of contexts and for many and varied purposes, including Artificial Intelligence<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Zarri</arg><arg name="first1">Gian Piero</arg><arg name="title">Using APL in an Artificial Intelligence Environment</arg><arg name="url">http://www.researchgate.net/publication/234789115_Using_APL_in_an_Artificial_Intelligence_environment_A_knowledge_engineering_system_dealing_with_biographical_data</arg><arg name="publisher">ACM SIGAPL</arg><arg name="accessdate">6 January 2015</arg><arg name="ref">ACM SIGAPL APL Quote Quad 01/1982; 13(1):183-191. DOI: 10.1145/390006.802242</arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Fordyce</arg><arg name="first1">K.</arg><arg name="last2">Sullivan</arg><arg name="first2">G.</arg><arg name="title">Artificial Intelligence Development Aids</arg><arg name="journal">APL Quote Quad</arg><arg name="date">1985</arg><arg name="volume">APL 85 Conf. Proc.</arg><arg name="issue">#15</arg></template></extension><space/>and Robotics.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Kromberg</arg><arg name="first1">Morten</arg><arg name="title">Robot Programming in APL</arg><arg name="url">http://begriffs.com/posts/2014-11-26-robots-in-apl.html</arg><arg name="website">http://www.dyalog.com/</arg><arg name="accessdate">6 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Kromberg</arg><arg name="first1">Morten</arg><arg name="title">Robot Controlled by Dyalog APL</arg><arg name="url">https://www.youtube.com/watch?v</arg><arg name="website">http://www.youtube.com</arg><arg name="publisher">YouTube / Dyalog APL</arg><arg name="accessdate">6 January 2015</arg></template></extension><space/>A newsletter titled &quot;Quote-Quad&quot; dedicated to APL has been published since the 1970s by the SIGAPL section of the Association for Computing Machinery (Quote-Quad is the name of the APL character used for text input and output).<extension extension_name='ref'><link type='external' href='http://www.sigapl.org/qq.htm'>Quote-Quad newsletter</link><space/><template><target>wayback</target><arg name="url">http://www.sigapl.org/qq.htm<space/></arg><arg name="date">20120209090113<space/></arg></template></extension></paragraph><paragraph>Before the advent of full-screen systems and until as late as the mid-1980s, systems were written such that the user entered instructions in his own business specific vocabulary. APL<space/><link><target>time-sharing</target></link><space/>vendors delivered applications in this form. On the<space/><link><target>I. P. Sharp Associates</target><part>I. P. Sharp</part></link><space/>timesharing system, a workspace called 39 MAGIC offered access to financial and airline data plus sophisticated (for the time) graphing and reporting. Another example is the GRAPHPAK workspace supplied with IBM's APL, then APL2.</paragraph><paragraph>Because of its matrix operations, APL was for some time quite popular for computer graphics programming, where graphic transformations could be encoded as matrix multiplications. One of the first commercial computer graphics houses,<space/><link><target>Digital Effects (studio)</target><part>Digital Effects</part></link>, based in New York City, produced an APL graphics product known as &quot;Visions&quot;, which was used to create television commercials and, reportedly, animation for the 1982 film<space/><italics><link><target>Tron</target></link></italics>. Digital Effects' use of APL was informally described at a number of SIGAPL conferences in the late 1980s; examples discussed included the early UK<space/><link><target>Channel 4</target></link><space/>TV logo/ident.</paragraph><paragraph>Interest in APL has declined from a peak in the mid-1980s. This appears partly due to lack of smooth migration pathways from higher performing memory-intensive mainframe implementations to low-cost personal computer alternatives - APL implementations for computers before the<space/><link><target>Intel 80386</target></link><space/>released in the late 1980s were only suitable for small applications. Another important reason for the decline is the lack of low cost, standardized and robust, compiled APL executables - usable across multiple computer hardware and OS platforms. There are several APL version permutations across various APL implementations, particularly differences between IBM's APL2 and APL2000's APL+ versions. Another practical limitation is that APL has fallen behind modern integrated computing environments with respect to debugging capabilities or test-driven development. Consequently, while APL remains eminently suitable for small-to-medium-sized programs, productivity gains for larger projects involving teams of developers would be questionable.<template><target>citation needed</target><arg name="date">July 2015</arg></template></paragraph><paragraph>The growth of end-user computing tools such as<space/><link><target>Microsoft Excel</target></link><space/>and<space/><link><target>Microsoft Access</target></link><space/>has indirectly eroded potential APL usage. These are frequently appropriate platforms for what may have been APL applications in the 1970s and 1980s. Some APL users migrated to the<space/><link><target>J programming language</target></link>, which offers some advanced features. Lastly, the decline was also due in part to the growth of<space/><link><target>MATLAB</target></link>,<space/><link><target>GNU Octave</target></link>, and<space/><link><target>Scilab</target></link>. These scientific computing array-oriented platforms provide an interactive computing experience similar to APL, but more closely resemble conventional programming languages such as Fortran, and use standard ASCII. Other APL users continue to wait for a very low-cost, standardized, broad-hardware-usable APL implementation.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Iverson</arg><arg name="first1">Ken</arg><arg name="title">APL Programming Language</arg><arg name="url">http://www.computerhistory.org/atchm/the-apl-programming-language-source-code/</arg><arg name="website">http://www.computerhistory.org</arg><arg name="accessdate">1 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">McCormick</arg><arg name="first1">Brad</arg><arg name="title">About APL</arg><arg name="url">http://www.users.cloud9.net/~bradmcc/APL.html</arg><arg name="website">http://www.users.cloud9.net</arg></template></extension></paragraph><paragraph>Notwithstanding this decline, APL finds continued use in certain fields, such as accounting research, pre-hardcoded modeling, DNA identification technology,<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Brenner</arg><arg name="first1">Charles</arg><arg name="title">DNA Identification Technology and APL</arg><arg name="url">http://dna-view.com/DNAtechID.htm</arg><arg name="website">http://dna-view.com</arg><arg name="publisher">Presentation at the 2005 APL User Conference</arg><arg name="accessdate">9 January 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Brenner</arg><arg name="first1">Charles</arg><arg name="title">There's DNA Everywhere - an Opportunity for APL</arg><arg name="url">https://www.youtube.com/watch?v</arg><arg name="website">https://www.youtube.com</arg><arg name="publisher">YouTube</arg><arg name="accessdate">9 January 2015</arg></template></extension><space/>symbolic mathematical expression and learning. It remains an inspiration to its current user base as well as for other languages.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.gsb.stanford.edu/programs/phd/academic-experience/fields/accounting/requirements<space/></arg><arg name="title">Stanford Accounting PhD requirements<space/></arg><arg name="publisher">Gsb.stanford.edu<space/></arg><arg name="accessdate">2014-01-09</arg></template></extension></paragraph><heading level='2'>Standardization</heading><paragraph>APL has been standardized by the<space/><link><target>American National Standards Institute</target><part>ANSI</part></link><space/><link><target>working group</target></link><space/>X3J10 and<space/><link><target>International Organization for Standardization</target><part>ISO</part></link>/<link><target>International Electrotechnical Commission</target><part>IEC</part></link><space/>Joint Technical Committee 1 Subcommittee 22 Working Group 3. The Core APL language is specified in ISO 8485:1989, and the Extended APL language is specified in ISO/IEC 13751:2001.</paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>A+ (programming language)</target></link></listitem><listitem><link><target>APL (codepage)</target><part>APL EBCDIC code page</part></link></listitem><listitem><link><target>APL Shared Variables</target></link></listitem><listitem><link><target>I. P. Sharp Associates</target></link></listitem><listitem><link><target>TK Solver</target></link></listitem><listitem><link><target>IBM Type-III Library</target></link></listitem><listitem><link><target>IBM 1130</target></link></listitem><listitem><link><target>Iverson Award</target></link></listitem><listitem><link><target>J (programming language)</target></link></listitem><listitem><link><target>K (programming language)</target></link></listitem><listitem><link><target>Q (programming language from Kx Systems)</target></link></listitem><listitem><link><target>LYaPAS</target></link></listitem><listitem><link><target>Scientific Time Sharing Corporation</target></link></listitem><listitem><link><target>Soliton Incorporated</target></link></listitem><listitem><link><target>ELI (programming language)</target></link></listitem><listitem><link><target>RPL (programming language)</target></link></listitem></list><heading level='2'>References</heading><paragraph><template><target>reflist</target><arg>30em</arg></template></paragraph><heading level='2'>Further reading</heading><list type='bullet'><listitem><link type='external' href='http://www.slac.stanford.edu/pubs/slacreports/slac-r-114.html'>''An APL Machine''</link><space/>(1970 Stanford doctoral dissertation by Philip Abrams)</listitem><listitem><link type='external' href='http://sigapl.org/Articles/MichaelMontalbanoPersonalViewOfAPL.php'>''A Personal History Of APL''</link><space/>(1982 article by<space/><link><target>Michael S. Montalbano</target></link>)</listitem><listitem><template><target>cite journal</target><arg name="url">http://www.research.ibm.com/journal/sj/304/ibmsj3004N.pdf<space/></arg><arg name="title">Language as an intellectual tool: From hieroglyphics to APL<space/></arg><arg name="year">1991<space/></arg><arg name="first">Donald B.<space/></arg><arg name="last">McIntyre<space/></arg><arg name="journal">IBM Systems Journal<space/></arg><arg name="volume">30<space/></arg><arg name="issue">4<space/></arg><arg name="archiveurl">http://web.archive.org/web/20060504050437/http://www.research.ibm.com/journal/sj/304/ibmsj3004N.pdf<space/></arg><arg name="archivedate">May 4, 2006</arg></template></listitem><listitem><template><target>cite journal</target><arg name="url">http://www.research.ibm.com/journal/sj/304/ibmsj3004O.pdf<space/></arg><arg name="title">A Personal view of APL<space/></arg><arg name="year">1991<space/></arg><arg name="first">Kenneth E.<space/></arg><arg name="last">Iverson<space/></arg><arg name="authorlink">Kenneth E. Iverson<space/></arg><arg name="journal">IBM Systems Journal<space/></arg><arg name="volume">30<space/></arg><arg name="issue">4<space/></arg><arg name="archiveurl">http://web.archive.org/web/20080227012149/http://www.research.ibm.com/journal/sj/304/ibmsj3004O.pdf<space/></arg><arg name="archivedate">February 27, 2008</arg></template></listitem><listitem><link type='external' href='http://www.softwarepreservation.org/projects/apl/Physics%20in%20APL2/APROGRAMMING%20LANGUAGE/view'>''A Programming Language''</link><space/>by<space/><link><target>Kenneth E. Iverson</target></link></listitem><listitem><link type='external' href='http://www.softwarepreservation.org/projects/apl/paper/197201_APL%20In%20Exposition_320-3010.pdf/view'>''APL in Exposition''</link><space/>by<space/><link><target>Kenneth E. Iverson</target></link></listitem><listitem>Brooks, Frederick P.; Kenneth Iverson (1965).<space/><italics>Automatic Data Processing, System/360 Edition</italics>. ISBN 0-471-10605-4.</listitem><listitem><template><target>cite book</target><arg name="last">Askoolum<space/></arg><arg name="first">Ajay<space/></arg><arg name="title">System Building with APL + Win<space/></arg><arg name="date"><space/>August 2006<space/></arg><arg name="publisher">Wiley<space/></arg><arg name="isbn">978-0-470-03020-2</arg></template></listitem><listitem><template><target>cite journal</target><arg name="url">http://www.research.ibm.com/journal/sj/032/falkoff.pdf<space/></arg><arg name="title">A Formal Description of SYSTEM/360<space/></arg><arg name="first1">Adin D.<space/></arg><arg name="last1">Falkoff<space/></arg><arg name="first2">Kenneth E.<space/></arg><arg name="last2">Iverson<space/></arg><arg name="authorlink2">Kenneth E. Iverson<space/></arg><arg name="first3">Edward H.<space/></arg><arg name="last3">Sussenguth<space/></arg><arg name="authorlink3"><space/>Edward H. Sussenguth<space/></arg><arg name="journal">IBM Systems Journal<space/></arg><arg name="volume">3<space/></arg><arg name="issue">3<space/></arg><arg name="location">New York<space/></arg><arg name="year">1964<space/></arg><arg name="archiveurl">http://web.archive.org/web/20080227012111/http://www.research.ibm.com/journal/sj/032/falkoff.pdf<space/></arg><arg name="archivedate">February 27, 2008</arg></template></listitem><listitem><italics>History of Programming Languages</italics>, chapter 14<template><target>Clarify</target><arg name="date">June 2010</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Banon<space/></arg><arg name="first">Gerald Jean Francis<space/></arg><arg name="title">Bases da Computacao Grafica<space/></arg><arg name="publisher">Campus<space/></arg><arg name="location">Rio de Janeiro<space/></arg><arg name="year">1989<space/></arg><arg name="page">141</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">LePage<space/></arg><arg name="first">Wilbur R.<space/></arg><arg name="title">Applied A.P.L. Programming<space/></arg><arg name="publisher">Prentice Hall<space/></arg><arg name="year">1978</arg></template></listitem><listitem><template><target>cite journal</target><arg name="title">OOPAL: Integrating Array Programming in ObjectOriented Programming<space/></arg><arg name="journal">Proceeding OOPSLA '03 Proceedings of the 18th annual ACM SIGPLAN conference on Object-oriented programing, systems, languages, and applications<space/></arg><arg name="date">November 2003<space/></arg><arg name="last">Mougin<space/></arg><arg name="first">Philippe<space/></arg><arg name="last2">Ducasse<space/></arg><arg name="first2">Stephane<space/></arg><arg name="volume">38<space/></arg><arg name="issue">11<space/></arg><arg name="pages">65–77<space/></arg><arg name="doi">10.1145/949343.949312<space/></arg><arg name="url">http://www.fscript.org/documentation/OOPAL.pdf</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Dyalog Limited<space/></arg><arg name="url">http://www.dyalog.dk/whatsnew/OO4APLERS.pdf<space/></arg><arg name="title">An Introduction to Object Oriented Programming For APL Programmers<space/></arg><arg name="publisher">Dyalog Limited<space/></arg><arg name="date">September 2006<space/></arg><arg name="deadurl">yes<space/></arg><arg name="archiveurl">https://web.archive.org/20080228023208/http://www.dyalog.dk/whatsnew/OO4APLERS.pdf<space/></arg><arg name="archivedate">28 February 2008<space/></arg></template></listitem></list><heading level='2'>External links</heading><paragraph><template><target>Commons category</target><arg>APL (programming language)</arg></template></paragraph><list type='bullet'><listitem><link type='external' href='http://www.sigapl.org/'>SIGAPL</link><space/>-<space/><link><target>SIGPLAN</target></link><space/>Chapter on<space/><link><target>Array programming</target><part>Array Programming languages</part></link></listitem><listitem><link type='external' href='http://aplwiki.com/'>APL Wiki</link></listitem><listitem><link type='external' href='http://www.apl2c.de/home/Links/links.html'>APL2C</link>, a source of links to APL compilers</listitem><listitem><link type='external' href='http://tryapl.org/'>TryAPL.org</link>, an online APL primer</listitem><listitem><italics><link type='external' href='https://sites.google.com/site/baavector/'>Vector</link></italics>, the journal of the British APL Association</listitem><listitem><template><target>dmoz</target><arg>Computers/Programming/Languages/APL</arg><arg>APL</arg></template></listitem><listitem><link type='external' href='http://www.dyalog.com/'>Dyalog APL</link></listitem><listitem><link type='external' href='http://www-306.ibm.com/software/awdtools/apl/'>IBM APL2</link></listitem><listitem><link type='external' href='http://www.apl2000.com/'>APL2000</link></listitem><listitem><link type='external' href='http://www.nars2000.org/'>NARS2000</link></listitem><listitem><link type='external' href='http://www.gnu.org/software/apl/'>GNU APL</link></listitem><listitem><link type='external' href='http://sourceforge.net/p/openapl/wiki/Home/'>OpenAPL</link></listitem></list><paragraph><link><target>Category:Array programming languages</target></link><link><target>Category:Functional languages</target></link><link><target>Category:Dynamic programming languages</target></link><link><target>Category:APL programming language family</target></link><link><target>Category:.NET programming languages</target></link><link><target>Category:IBM software</target></link><link><target>Category:Command shells</target></link><space/><link><target>Category:Programming languages created in 1964</target></link></paragraph></article>