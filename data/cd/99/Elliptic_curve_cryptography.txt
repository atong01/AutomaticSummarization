'''Elliptic curve cryptography''' ('''ECC''') is an approach to [[public-key cryptography]] based on the algebraic structure of [[elliptic curve]]s over [[finite field]]s. One of the main benefits in comparison with non-ECC cryptography (with plain [[Galois field]]s as a basis) is the same level of security provided by keys of smaller size.

Elliptic curves are applicable for [[encryption]], [[digital signature]]s, [[CPRNG|pseudo-random generators]] and other tasks. They are also used in several [[integer factorization]] [[algorithm]]s that have applications in cryptography, such as [[Lenstra elliptic curve factorization]].

== Rationale ==
Public-key cryptography is based on the [[Intractability (complexity)#Intractability|intractability]] of certain mathematical [[Computational hardness assumption|problems]]. Early public-key systems are secure assuming that it is difficult to [[Integer factorization|factor]] a large integer composed of two or more large prime factors. For elliptic-curve-based protocols, it is assumed that finding the [[discrete logarithm]] of a random elliptic curve element with respect to a publicly known base point is infeasible: this is the "elliptic curve discrete logarithm problem" or ECDLP. The entire security of ECC depends on the ability to compute a [[elliptic curve point multiplication|point multiplication]] and the inability to compute the multiplicand given the original and product points. The size of the elliptic curve determines the difficulty of the problem.

The primary benefit promised by ECC is a smaller key size, reducing storage and transmission requirements, i.e. that an elliptic curve group could provide the same level of security afforded by an RSA-based system with a large modulus and correspondingly larger key: for example, a 256-bit ECC public key should provide comparable security to a 3072-bit RSA public key.

The U.S. [[NIST|National Institute of Standards and Technology (NIST)]] has endorsed ECC in its [[NSA Suite B|Suite B]] set of recommended algorithms, specifically Elliptic Curve Diffie–Hellman (ECDH) for key exchange and Elliptic Curve Digital Signature Algorithm (ECDSA) for digital signature.  The U.S. [[National Security Agency]] (NSA) allows their use for protecting information classified up to [[Classified information in the United States|top secret]] with 384-bit keys.<ref>{{cite web |url=http://www.nsa.gov/ia/programs/suiteb_cryptography/index.shtml |title=Fact Sheet NSA Suite B Cryptography |work=U.S. National Security Agency }}</ref> However in August 2015, the NSA announced it plans to replace Suite B with a new cipher suite due to concerns about [[quantum computing]] attacks on ECC.<ref name=nsaquantum/>

While the RSA patent expired in 2000, there may be [[ECC patents|patents in force covering certain aspects of ECC technology]], though some (including [[RSA (security firm)|RSA Laboratories]]<ref>{{cite web | author = RSA Laboratories | url = http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/are-elliptic-curve-cryptosystems-patented.htm | title = 6.3.4 Are elliptic curve cryptosystems patented? | accessdate = 15 December 2014}}</ref> and [[Daniel J. Bernstein]]<ref>{{cite web |first=D. J. |last=Bernstein |url=http://cr.yp.to/ecdh/patents.html |title=Irrelevant patents on elliptic-curve cryptography }}</ref>) argue that the Federal elliptic curve digital signature standard (ECDSA; NIST FIPS 186-3) and certain practical ECC-based key exchange schemes (including ECDH) can be implemented without infringing them.

== History ==

The use of elliptic curves in cryptography was suggested independently by [[Neal Koblitz]]<ref>{{cite journal |first=N. |last=Koblitz |title=Elliptic curve cryptosystems |journal=Mathematics of Computation |volume=48 |issue=177 |year=1987 |pages=203–209 |doi= 10.2307/2007884|jstor=2007884 }}</ref> and [[Victor S. Miller]]<ref>{{cite journal |first=V. |last=Miller |title=Use of elliptic curves in cryptography |journal=CRYPTO |volume=85 |year=1985 |issue= |pages=417–426 |doi=10.1007/3-540-39799-X_31 |series=Lecture Notes in Computer Science |isbn=978-3-540-16463-0 }}</ref> in 1985. Elliptic curve cryptography algorithms entered wide use in 2004 to 2005.

== Theory ==
For current cryptographic purposes, an ''elliptic curve'' is a [[plane curve]] over a finite field (rather than the real numbers) which consists of the points satisfying the equation

: <math>y^2 = x^3 + ax + b, \, </math>

along with a distinguished [[point at infinity]], denoted ∞. (The coordinates here are to be chosen from a fixed [[finite field]] of [[Characteristic (algebra)#Case of fields|characteristic]] not equal to 2 or 3, or the curve equation will be somewhat more complicated.)

This set together with the [[Elliptic curve#The group law|group operation of elliptic curves]] is an [[Abelian group]], with the point at infinity as identity element. The structure of the group is inherited from the [[Divisor (algebraic geometry)|divisor group]] of the underlying [[algebraic variety]]. As is the case for other popular public key cryptosystems, no mathematical proof of security has been published for ECC {{As of|2009|lc=on}}.

== Cryptographic schemes ==
Several [[discrete logarithm]]-based protocols have been adapted to elliptic curves, replacing the group <math>(\mathbb{Z}_{p})^\times</math> with an elliptic curve:
* The [[elliptic curve Diffie–Hellman]] (ECDH) key agreement scheme is based on the [[Diffie–Hellman]] scheme,
* The Elliptic Curve [[Integrated Encryption Scheme]] (ECIES), also known as Elliptic Curve Augmented Encryption Scheme or simply the Elliptic Curve Encryption Scheme,
* The [[Elliptic Curve DSA|Elliptic Curve Digital Signature Algorithm]] (ECDSA) is based on the [[Digital Signature Algorithm]],
* The [[EdDSA|Edwards-curve Digital Signature Algorithm]] (EdDSA) is based on [[Schnorr signature]] and uses [[twisted Edwards curve]]s,
* The [[ECMQV]] key agreement scheme is based on the [[Menezes–Qu–Vanstone|MQV]] key agreement scheme,
* The [[Implicit certificate|ECQV]] implicit certificate scheme.

At the RSA Conference 2005, the [[National Security Agency]] (NSA) announced [[NSA Suite B|Suite B]] which exclusively uses ECC for digital signature generation and key exchange. The suite is intended to protect both classified and unclassified national security systems and information.<ref>{{cite web |url=http://www.nsa.gov/business/programs/elliptic_curve.shtml |title=The Case for Elliptic Curve Cryptography |work=NSA }}</ref>

Recently, a large number of cryptographic primitives based on bilinear mappings on various elliptic curve groups, such as the [[Weil pairing|Weil]] and [[Tate pairing]]s, have been introduced. Schemes based on these primitives provide efficient [[identity-based encryption]] as well as pairing-based signatures, [[signcryption]], [[key agreement]], and [[proxy re-encryption]].

== Implementation ==
Some common implementation considerations include:

=== Domain parameters ===
To use ECC all parties must agree on all the elements defining the elliptic curve, that is, the ''domain parameters'' of the scheme. The field is defined by ''p'' in the prime case and the pair of ''m'' and ''f''<!--m and f are no longer defined before this in this article--> in the binary case. The elliptic curve is defined by the constants ''a'' and ''b'' used in its defining equation. Finally, the cyclic subgroup is defined by its ''generator'' (a.k.a. ''base point'') ''G''. For cryptographic application the [[order (group theory)|order]] of ''G'', that is the smallest positive number ''n'' such that <math>n G = \infty</math>, is normally prime. Since ''n'' is the size of a subgroup of <math>E(\mathbb{F}_p)</math> it follows from [[Lagrange's theorem (group theory)|Lagrange's theorem]] that the number <math>h = \frac{1}{n}|E(\mathbb{F}_p)|</math> is an integer. In cryptographic applications this number ''h'', called the ''cofactor'', must be small (<math>h \le 4</math>) and, preferably, <math>h = 1</math>. Let us summarize: in the prime case the domain parameters are <math>(p,a,b,G,n,h)</math> and in the binary case they are <math>(m,f,a,b,G,n,h)</math>.

Unless there is an assurance that domain parameters were generated by a party trusted with respect to their use, the domain parameters ''must'' be validated before use.<!--TBD: validation procedure-->

The generation of domain parameters is not usually done by each participant since this involves computing [[counting points on elliptic curves|the number of points on a curve]] which is time-consuming and troublesome to implement. As a result several standard bodies published domain parameters of elliptic curves for several common field sizes. Such domain parameters are commonly known as "standard curves" or "named curves"; a named curve can be referenced either by name or by the unique [[object identifier]] defined in the standard documents:
* NIST, [http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf Recommended Elliptic Curves for Government Use]
* SECG, [http://www.secg.org/sec2-v2.pdf SEC 2: Recommended Elliptic Curve Domain Parameters]
* ECC Brainpool, [http://www.ecc-brainpool.org/download/Domain-parameters.pdf ECC Brainpool Standard Curves and Curve Generation]
SECG test vectors are also available.<ref>http://www.secg.org/download/aid-390/gec2.pdf</ref> NIST has approved many SECG curves, so there is a significant overlap between the specifications published by NIST and SECG. EC domain parameters may be either specified by value or by name.

If one (despite the above) wants to construct one's own domain parameters, one should select the underlying field and then use one of the following strategies to find a curve with appropriate (i.e., near prime) number of points using one of the following methods:
* Select a random curve and use a general point-counting algorithm, for example, [[Schoof's algorithm]] or [[Schoof–Elkies–Atkin algorithm]],
* Select a random curve from a family which allows easy calculation of the number of points (e.g., Koblitz curves), or
* Select the number of points and generate a curve with this number of points using ''complex multiplication'' technique.<ref>{{cite journal |first=G. |last=Lay |first2=H. |last2=Zimmer |title=Constructing elliptic curves with given group order over large finite fields |work=Algorithmic Number Theory Symposium |year=1994 |series=Lecture Notes in Computer Science |volume=877 |issue= |pages=250–263 |doi=10.1007/3-540-58691-1_64 }}</ref>

Several classes of curves are weak and should be avoided:

* Curves over <math>\mathbb{F}_{2^m}</math> with non-prime ''m'' are vulnerable to [[Weil descent]] attacks.<ref>{{cite journal |first=S. D. |last=Galbraith |first2=N. P. |last2=Smart |title=A cryptographic application of the Weil descent |work=Cryptography and Coding |year=1999 |series=Lecture Notes in Computer Science |volume=1746 |pages=799 |doi=10.1007/3-540-46665-7_23 }}</ref><ref>{{cite web |first=P. |last=Gaudry |first2=F. |last2=Hess |first3=N. P. |last3=Smart |url=http://www.hpl.hp.com/techreports/2000/HPL-2000-10.pdf |title=Constructive and destructive facets of Weil descent on elliptic curves |work=Hewlett Packard Laboratories Technical Report |year=2000 }}</ref>
* Curves such that ''n'' divides <math>p^B-1</math> (where ''p'' is the characteristic of the field&nbsp;– ''q'' for a prime field, or <math>2</math> for a binary field) for sufficiently small ''B'' are vulnerable to Menezes–Okamoto–Vanstone (MOV) attack<ref>{{cite journal |first=A. |last=Menezes |first2=T. |last2=Okamoto |first3=S. A. |last3=Vanstone |title=Reducing elliptic curve logarithms to logarithms in a finite field |work=IEEE Transactions on Information Theory |volume=39 |year=1993 | doi =  10.1109/18.259647 }}</ref><ref>{{cite journal |first=L. |last=Hitt |url=http://eprint.iacr.org/2006/415 |title=On an Improved Definition of Embedding Degree |work=IACR ePrint report |year=2006 |volume=415 }}</ref> which applies usual Discrete Logarithm Problem (DLP) in a small degree extension field of <math>\mathbb{F}_p</math> to solve ECDLP.  The bound ''B'' should be chosen so that discrete logarithms in the field <math>\mathbb{F}_{p^B}</math> are at least as difficult to compute as discrete logs on the elliptic curve <math>E(\mathbb{F}_q)</math>.<ref>IEEE [http://grouper.ieee.org/groups/1363/P1363/index.html P1363], section A.12.1</ref>
* Curves such that <math>|E(\mathbb{F}_q)| = q</math> are vulnerable to the attack that maps the points on the curve to the additive group of <math>\mathbb{F}_q</math><ref>{{cite journal |first=I. |last=Semaev |title=Evaluation of discrete logarithm in a group of ''p''-torsion points of an elliptic curve in characteristic ''p'' |journal=Mathematics of Computation |volume=67 |issue=221 |year=1998 |pages=353–356 |doi=10.1090/S0025-5718-98-00887-4 }}</ref><ref>{{cite journal |first=N. |last=Smart |title=The discrete logarithm problem on elliptic curves of trace one |journal=Journal of Cryptology |volume=12 |year=1999 |issue=3 |pages=193–196 |doi=10.1007/s001459900052 }}</ref><ref>{{cite journal |first=T. |last=Satoh |first2=K. |last2=Araki |title=Fermat quotients and the polynomial time discrete log algorithm for anomalous elliptic curves |journal=Commentarii Mathematici Universitatis Sancti Pauli |volume=47 |year=1998 }}</ref>

=== Key sizes ===
{{See also|Discrete logarithm records#Elliptic curves}}

Since all the fastest known algorithms that allow one to solve the ECDLP ([[baby-step giant-step]], [[Pollard's rho algorithm for logarithms|Pollard's rho]], etc.), need <math>O(\sqrt{n})</math> steps, it follows that the size of the underlying field should be roughly twice the security parameter. For example, for 128-bit security one needs a curve over <math>\mathbb{F}_q</math>, where <math>q \approx 2^{256}</math>. This can be contrasted with finite-field cryptography (e.g., [[Digital Signature Algorithm|DSA]]) which requires<ref>NIST, [http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf Recommendation for Key Management—Part 1: general],  Special Publication 800-57, August 2005.</ref> 3072-bit public keys and 256-bit private keys, and integer factorization cryptography (e.g., [[RSA (algorithm)|RSA]]) which requires a 3072-bit value of ''n'', where the private key should be just as large. However the public key may be smaller to accommodate efficient encryption, especially when processing power is limited.

The hardest ECC scheme (publicly) broken to date had a 112-bit key for the prime field case and a 109-bit key for the binary field case. For the prime field case this was broken in July 2009 using a cluster of over 200 [[PlayStation 3]] game consoles and could have been finished in 3.5 months using this cluster when running continuously.<ref>http://lacal.epfl.ch/page81774.html</ref> The binary field case was broken in April 2004 using 2600 computers over 17 months.<ref>{{cite web |url=http://www.certicom.com/index.php/2004-press-releases/36-2004-press-releases/300-solution-required-team-of-mathematicians-2600-computers-and-17-months- |title=Certicom Announces Elliptic Curve Cryptography Challenge Winner |work=Certicom |date=April 27, 2004 }}</ref>

A current project is aiming at breaking the ECC2K-130 challenge by Certicom, by using a wide range of different hardware: CPUs, GPUs, FPGA.<ref>http://www.ecc-challenge.info/</ref>

=== Projective coordinates ===
A close examination of the addition rules shows that in order to add two points one needs not only several additions and multiplications in <math>\mathbb{F}_q</math> but also an inversion operation. The inversion (for given <math>x \in \mathbb{F}_q</math> find <math>y \in \mathbb{F}_q</math> such that <math>x y = 1</math>) is one to two orders of magnitude slower<ref>{{cite journal |first=Y. |last=Hitchcock |first2=E. |last2=Dawson |first3=A. |last3=Clark |first4=P. |last4=Montague |url=http://anziamj.austms.org.au/V44/CTAC2001/Hitc/Hitc.pdf |title=Implementing an efficient elliptic curve cryptosystem over GF(p) on a smart card |year=2002 |journal=ANZIAM Journal |volume=44 }}</ref> than multiplication. Fortunately, points on a curve can be represented in different coordinate systems which do not require an inversion operation to add two points. Several such systems were proposed: in the ''projective'' system each point is represented by three coordinates <math>(X,Y,Z)</math> using the following relation: <math>x = \frac{X}{Z}</math>, <math>y = \frac{Y}{Z}</math>; in the ''Jacobian system'' a point is also represented with three coordinates <math>(X,Y,Z)</math>, but a different relation is used: <math>x = \frac{X}{Z^2}</math>, <math>y = \frac{Y}{Z^3}</math>; in the ''López–Dahab system'' the relation is <math>x = \frac{X}{Z}</math>, <math>y = \frac{Y}{Z^2}</math>; in the ''modified Jacobian'' system the same relations are used but four coordinates are stored and used for calculations <math>(X,Y,Z,aZ^4)</math>; and in the ''Chudnovsky Jacobian'' system five coordinates are used <math>(X,Y,Z,Z^2,Z^3)</math>. Note that there  may be different naming conventions, for example, [[IEEE P1363]]-2000 standard uses "projective coordinates" to refer to what is commonly called Jacobian coordinates.<!--TBD: insert formulas--> An additional speed-up is possible if mixed coordinates are used.<ref>{{cite journal |first=H. |last=Cohen |first2=A. |last2=Miyaji |first3=T. |last3=Ono |title=Efficient Elliptic Curve Exponentiation Using Mixed Coordinates |journal=Advances in Cryptology&nbsp;– AsiaCrypt '98 |year=1998 |series=Lecture Notes in Computer Science |volume=1514 |pages=51–65 |doi=10.1007/3-540-49649-1_6 |isbn=978-3-540-65109-3 }}</ref>

=== Fast reduction (NIST curves) ===
Reduction modulo ''p'' (which is needed for addition and multiplication) can be executed much faster if the prime ''p'' is a pseudo-[[Mersenne prime]], that is <math>p \approx 2^d</math>; for example, <math>p = 2^{521} - 1</math> or <math>p = 2^{256} - 2^{32} - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1.</math> Compared to [[Barrett reduction]] there can be an order of magnitude speed up.<ref>{{cite journal |first=M. |last=Brown |first2=D. |last2=Hankerson |first3=J. |last3=Lopez |first4=A. |last4=Menezes |title=Software Implementation of the NIST Elliptic Curves Over Prime Fields |journal=Topics in Cryptology&nbsp;– CT-RSA 2001 |series=Lecture Notes in Computer Science |year=2001 |volume=2020 |pages=250–265 |doi=10.1007/3-540-45353-9_19 |isbn=978-3-540-41898-6 }}</ref> The speed up here is a practical rather than theoretical one, and derives from the fact that the moduli of numbers against numbers near powers of two can be performed efficiently by computers operating on binary numbers with [[bitwise operation]]s.

The curves over <math>\mathbb{F}_p</math> with pseudo-Mersenne ''p'' are recommended by NIST. Yet another advantage of the NIST curves is the fact that they use ''a''&nbsp;=&nbsp;−3, which improves addition in Jacobian coordinates.

Many of the efficiency-related decisions in NIST FIPS 186-2 are sub-optimal. Other curves are more secure and run just as fast.<ref>{{ cite web | authors = Daniel J. Bernstein and Tanja Lange | title = SafeCurves: choosing safe curves for elliptic-curve cryptography | url = http://safecurves.cr.yp.to/ | accessdate = 1 December 2013 }}</ref>

== Applications ==
Elliptic curves are applicable for [[encryption]], [[digital signature]]s, [[CPRNG|pseudo-random generators]] and other tasks. They are also used in several [[integer factorization]] [[algorithm]]s that have applications in cryptography, such as [[Lenstra elliptic curve factorization]].

NIST recommended{{year needed|date=September 2013}} fifteen elliptic curves. Specifically, FIPS 186-3 has ten recommended finite fields:
* Five prime fields <math>\mathbb{F}_p</math> for certain primes ''p'' of sizes 192, 224, 256, 384, and 521<ref>The sequence may seem suggestive of a typographic error. Nevertheless, the last value is 521 and not 512 bits.</ref> bits. For each of the prime fields, one elliptic curve is recommended.
* Five binary fields <math>\mathbb{F}_{2^m}</math> for ''m'' equal 163, 233, 283, 409, and 571. For each of the binary fields, one elliptic curve and one [[Neal Koblitz|Koblitz]] curve was selected.

The NIST recommendation thus contains a total of five prime curves and ten binary curves. The curves were ostensibly chosen for optimal security and implementation efficiency.<ref>FIPS PUB 186-3, [http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf Digital Signature Standard (DSS)].</ref>

In 2013, the ''[[New York Times]]'' stated that [[Dual_EC_DRBG|Dual Elliptic Curve Deterministic Random Bit Generation]] (or Dual_EC_DRBG)  had been included as a NIST national standard due to the influence of [[NSA]], which had included a deliberate weakness in the algorithm and the recommended elliptic curve. [[RSA Security]] in September 2013 issued an advisory recommending that its customers discontinue using any software based on Dual_EC_DRBG.<ref>Kim Zetter, [http://www.wired.com/threatlevel/2013/09/rsa-advisory-nsa-algorithm/ RSA Tells Its Developer Customers: Stop Using NSA-Linked Algorithm] ''[[Wired (magazine)|Wired]]'', 19 September 2013. "Recommending against the use of SP 800-90A Dual Elliptic Curve Deterministic Random Bit Generation: NIST strongly recommends that, pending the resolution of the security concerns and the re-issuance of SP 800-90A, the Dual_EC_DRBG, as specified in the January 2012 version of SP 800-90A, no longer be used."</ref><ref>[http://csrc.nist.gov/publications/PubsDrafts.html#SP-800-90-A%20Rev%201%20B%20and%20C "Due to the debate around the Dual EC DRBG standard highlighted recently by the National Institute of Standards and Technology (NIST), NIST re-opened for public comment its SP 800-90 standard which covers Pseudo-random Number Generators (PRNG)." csrc.nist.gov]</ref> In the wake of the exposure of Dual_EC_DRBG as "an NSA undercover operation", cryptography experts have also expressed concern over the security of the NIST recommended elliptic curves,<ref>[[Bruce Schneier]] (5 September) "I no longer trust the constants. I believe the NSA has manipulated them through their relationships with industry." See [http://it.slashdot.org/firehose.pl?op=view&type=story&sid=13/09/11/1224252 Are the NIST Standard Elliptic Curves Back-doored?], ''[[Slashdot]]'', 11 September 2013.</ref> suggesting a return to encryption based on non-elliptic-curve groups.

== Security ==
=== Side-channel attacks ===
Unlike most other [[Discrete Logarithm|DLP]] systems (where it is possible to use the same procedure for squaring and multiplication) the EC addition is significantly different for doubling (<math>P = Q</math>) and general addition (<math>P \ne Q</math>) depending on the coordinate system used. Consequently, it is important to counteract [[side channel attack]]s (e.g., timing or [[Power analysis|simple/differential power analysis attacks]]) using, for example, fixed pattern window (a.k.a. comb) methods{{clarify|date=December 2011}}<ref>{{cite journal |first=M. |last=Hedabou |first2=P. |last2=Pinel |first3=L. |last3=Beneteau |url=http://eprint.iacr.org/2004/342.pdf |title=A comb method to render ECC resistant against Side Channel Attacks |year=2004 }}</ref> (note that this does not increase the computation time). Another concern for ECC-systems is the danger of [[Differential fault analysis|fault attacks]], especially when running on [[smart card]]s.<ref>See, for example, {{cite journal |title=Differential Fault Attacks on Elliptic Curve Cryptosystems |first=Ingrid |last=Biehl |first2=Bernd |last2=Meyer |first3=Volker |last3=Müller |journal=Advances in Cryptology&nbsp;– CRYPTO 2000 |series=[[Lecture Notes in Computer Science]] |volume=1880 |year=2000 |pages=131–146 |doi=10.1007/3-540-44598-6_8 |isbn=978-3-540-67907-3 }}</ref>

Cryptographic experts have also expressed concerns that the National Security Agency has inserted a backdoor into at least one elliptic curve-based pseudo random generator.<ref>https://www.schneier.com/essay-198.html</ref> One analysis of the possible backdoor concluded that an adversary in possession of the algorithm's secret key could obtain encryption keys given only 32 bytes of ciphertext.<ref>http://rump2007.cr.yp.to/15-shumow.pdf</ref>

=== Quantum computing attacks ===
Elliptic curve cryptography is vulnerable to a modified [[Shor's algorithm]] for solving the discrete logarithm problem on elliptic curves.<ref name="NielsenChuang2010">{{cite book|author1=Michael A. Nielsen|author2=Isaac L. Chuang|title=Quantum Computation and Quantum Information: 10th Anniversary Edition|url=http://books.google.com/books?id=-s4DEy7o-a0C&pg=PA202|date=9 December 2010|publisher=Cambridge University Press|isbn=978-1-139-49548-6|pages=202–}}</ref>  A quantum computer to attack elliptic curve cryptography can be less than half the size of a [[quantum computer]] to break an equivalently classically secure version of [[Rivest Shamir Adleman|RSA]].  This is due to the fact that smaller key sizes of elliptic curves are needed to match the classical security of RSA. The work of Proos and Zalka show how a quantum computer for breaking 2048-bit RSA requires roughly 4096 qubits while a quantum computer to break the equivalently secure 224-bit Elliptic Curve Cryptography requires between 1300 and 1600 qubits.  Depending on the growth rate of quantum computers in the future, elliptic curve cryptosystems may become attackable by a quantum computer many years before an equivalently secure RSA scheme.<ref>{{Cite journal|last=Proos|first=John|title=Shor's discrete logarithm quantum algorithm for elliptic curves|url=http://arxiv.org/abs/quantph/0301141|publisher=QIC|accessdate=3 May 2014|author2=Zalka|archiveurl=http://arxiv.org/|archivedate=2004|arxiv=quantph/0301141}}</ref>

To avoid quantum computing concerns, an elliptic curve based alternative to Elliptic Curve Diffie Hellman which is not susceptible to Shor's attack is the [[Supersingular Isogeny Key Exchange|Supersingular Isogeny Diffie–Hellman Key Exchange]] of De Feo, Jao and Plut.  They use elliptic curve [[isogenies]] to create a drop in replacement for the quantum attackable [[Diffie–Hellman]] and [[Elliptic curve Diffie–Hellman]] key exchanges.  This key exchange utilizes the same elliptic curve computational primitives of existing elliptic curve cryptography and requires computational and transmission overhead similar to many currently used public key systems.<ref>{{cite web|last=De Feo|first=Luca|title=Towards quantum-resistant cryptosystems from supersingular elliptic curve isogenies|url=http://eprint.iacr.org/eprint-bin/cite.pl?entry=2011/506|work=Cryptology ePrint Archive, Report 2011/506|publisher=IACR|accessdate=3 May 2014|author2=Jao, Plut|archiveurl=http://eprint.iacr.org|archivedate=2011}}</ref>

In August, 2015, NSA announced that it is planning to transition "in the not distant future" to a new cipher suite that is resistant to [[quantum computing|quantum]] attacks. "Unfortunately, the growth of elliptic curve use has bumped up against the fact of continued progress in the research on quantum computing, necessitating a re-evaluation of our cryptographic strategy."<ref name=nsaquantum>https://www.nsa.gov/ia/programs/suiteb_cryptography/index.shtml </ref>

== Patents ==
{{Main|ECC patents}}

At least one ECC scheme ([[ECMQV]]) and some implementation techniques are covered by patents.

== Alternative representations ==
Alternative representations of elliptic curves include:
* [[Hessian curves]]
* [[Edwards curves]]
* [[Twisted curves]]
* [[Twisted Hessian curves]]
* [[Twisted Edwards curve]]
* [[Doubling-oriented Doche–Icart–Kohel curve]]
* [[Tripling-oriented Doche–Icart–Kohel curve]]
* [[Jacobian curve]]
* [[Montgomery curve]]

== See also ==
* [[Cryptocurrency]]
* [[Curve25519]]
* [[DNSCurve]]
* [[ECC patents]]
* [[ECDH]]
* [[Elliptic Curve Digital Signature Algorithm]]
* [[ECMQV]]
* [[Elliptic curve point multiplication]]
* [[Homomorphic Signatures for Network Coding]]
* [[Pairing-based cryptography]]
* [[Public-key cryptography]]
* [[Quantum cryptography]]

== Notes ==
{{Reflist|30em}}

== References ==
{{refbegin}}
* [[SECG|Standards for Efficient Cryptography Group (SECG)]], [http://www.secg.org/download/aid-385/sec1_final.pdf SEC 1: Elliptic Curve Cryptography], Version 1.0, September 20, 2000.
* D. Hankerson, A. Menezes, and S.A. Vanstone, ''Guide to Elliptic Curve Cryptography'', Springer-Verlag, 2004.
* I. Blake, G. Seroussi, and N. Smart, ''Elliptic Curves in Cryptography'', London Mathematical Society 265, Cambridge University Press, 1999.
* I. Blake, G. Seroussi, and N. Smart, editors, ''Advances in Elliptic Curve Cryptography'', London Mathematical Society 317, Cambridge University Press, 2005.
* L. Washington, ''Elliptic Curves: Number Theory and Cryptography'', Chapman & Hall / CRC, 2003.
* [http://www.nsa.gov/business/programs/elliptic_curve.shtml The Case for Elliptic Curve Cryptography], National Security Agency
* [http://www.certicom.com/index.php/ecc-tutorial Online Elliptic Curve Cryptography Tutorial], Certicom Corp.
* K. Malhotra, S. Gardner, and R. Patz, Implementation of Elliptic-Curve Cryptography on Mobile Healthcare Devices, Networking, Sensing and Control, 2007 IEEE International Conference on, London, 15–17 April 2007 Page(s):239–244
* Saikat Basu, [http://ijns.jalaxy.com.tw/contents/ijns-v14-n2/ijns-2012-v14-n2-p101-108.pdf A New Parallel Window-Based Implementation of the Elliptic Curve Point Multiplication in Multi-Core Architectures], International Journal of Network Security, Vol. 13, No. 3, 2011, Page(s):234–241
* Christof Paar, Jan Pelzl, [http://wiki.crypto.rub.de/Buch/movies.php  "Elliptic Curve Cryptosystems"], Chapter 9 of "Understanding Cryptography, A Textbook for Students and Practitioners". (companion web site contains online cryptography course that covers elliptic curve cryptography), Springer, 2009.
* Luca De Feo, David Jao, Jerome Plut, [http://eprint.iacr.org/2011/506 Towards quantum-resistant cryptosystems from supersingular elliptic curve isogenies], Springer 2011.
{{refend}}
* [http://archive.numdam.org/ARCHIVE/MSMF/MSMF_1978__57_/MSMF_1978__57__1_0/MSMF_1978__57__1_0.pdf Jacques Vélu, ''Courbes elliptiques (...)'', Société Mathématique de France, '''57''', 1-152, Paris, 1978.]

== External links ==
{{Commons|Elliptic curve}}
* [http://www.certicom.com/index.php/ecc-tutorial Certicom ECC Tutorial]
* [http://arstechnica.com/security/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/ a relatively easy to understand primer on elliptic curve cryptography]
* [http://www.imperialviolet.org/2010/12/04/ecc.html Elliptic curves and their implementation] by Adam Langley (OpenSSL dev).
* [http://sagenb.org/home/pub/1126/ Interactive introduction to elliptic curves and elliptic curve cryptography with SAGE]
* [http://www.numberphile.com/videos/NSA1.html How did the NSA hack our e-mails?] explained by Mathematician [[Edward Frenkel]]
* [http://blog.cr.yp.to/20140323-ecdsa.html How to design an elliptic-curve signature system] by [[Daniel J. Bernstein]]

{{Cryptography navbox|public-key}}

[[Category:Elliptic curve cryptography]]
[[Category:Public-key cryptography]]
[[Category:Finite fields]]