<article title='Atomic_semantics'><paragraph><bold>Atomic semantics</bold><space/>is a term which describes a type of guarantee provided by a<space/><link><target>data register</target></link><space/>shared by several<space/><link><target>central processing unit</target><part>processors</part></link><space/>in a<space/><link><target>parallel machine</target></link><space/>or in a network of computers working together.Atomic semantics are very strong. An atomic register provides strong guarantees even when there is concurrency and failures.</paragraph><paragraph>A read/write register R stores a value and is accessed by two basic operations: read and write(v). A read returns the value stored in R and write(v) changes the value stored in R to v.A register is called atomic if it satisfies the two following properties:</paragraph><paragraph>1) Each invocation op of a read or write operation:</paragraph><paragraph>Must appear as if it were executed at a single point (op) in time.</paragraph><paragraph><space/>(op) works as follow:b(op) (op) e(op): where b(op) and e(op) indicate the time when the operation op begins and ends.</paragraph><paragraph>If op1 op2, then (op1) (op2)</paragraph><paragraph>2) Each read operation returns the value written by the last write operation before the read, in the sequence where all operations are ordered by their values.</paragraph><paragraph><bold>Atomic/Linearizable register:</bold></paragraph><paragraph>Termination: when a node is correct,sooner or later each read and write operation will complete.</paragraph><paragraph><bold>Safety Property</bold><space/>(Linearization points for read and write and failed operations):</paragraph><paragraph>Read operation:It appears as if happened at all nodes at some times between the invocation and response time.</paragraph><paragraph>Write operation: Similar to read operation,it appears as if happened at all nodes at some times between the invocation and response time.</paragraph><paragraph>Failed operation(The atomic term comes from this notion):It appears as if it is completed at every single node or it never happened at any node.</paragraph><paragraph>Example : We know that an atomic register is one that is linearizable to a sequential safe register.</paragraph><paragraph><link><target>File:Atomic register1.jpg</target><part>centre</part><part>atomic</part></link></paragraph><paragraph>The following picture shows where we should put the linearization point for each operation:</paragraph><paragraph><link><target>File:Atomic register.jpg</target><part>center</part><part>Atomic register</part></link></paragraph><preblock><preline></preline></preblock><paragraph>An atomic register could be defined for a variable with a single writer but multi- readers(SWMR),single-writer/single-reader (SWSR),or multi-writer/multi-reader(MWMR). Here is an example of a multi-reader multi-writer atomic register which is accessed by three processes (P1,P2,P3).Note that R.read() v means that the corresponding read operation returns v, which is the value of the register. Therefore, the following execution of the register R could satisfies the definition of the atomic registers:R.write(1), R.read()1, R.write(3), R.write(2), R.read()2, R.read()2.</paragraph><paragraph><link><target>File:Atomic MWMR1.jpg</target><part>center</part><part>Atomic MWMR1</part></link></paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Regular semantics</target></link></listitem><listitem><link><target>Safe semantics</target></link></listitem></list><heading level='2'>References</heading><list type='bullet'><listitem>Atomic semantics are defined formally in Lamport's &quot;On Interprocess Communication&quot; Distributed Computing 1, 2 (1986), 77-101. (Also appeared as SRC Research Report 8).</listitem></list><paragraph><template><target>DEFAULTSORT:Atomic Semantics</target></template><link><target>Category:Concurrency control</target></link></paragraph></article>