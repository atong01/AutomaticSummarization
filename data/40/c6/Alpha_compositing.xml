<article title='Alpha_compositing'><paragraph><template><target>Refimprove</target><arg name="date">May 2010</arg></template></paragraph><paragraph><link><target>Image:Hue alpha 2.svg</target><part>thumb</part><part>This image's alpha channel falls off to zero at its base.</part></link></paragraph><paragraph>In<space/><link><target>computer graphics</target></link>,<space/><bold>alpha compositing</bold><space/>is the process of combining an image with a background to create the appearance of partial or full transparency. It is often useful to render image elements in separate passes, and then combine the resulting multiple<space/><link><target>2D computer graphics</target><part>2D</part></link><space/>images into a single, final image called the<space/><link><target>compositing</target><part>composite</part></link>. For example, compositing is used extensively when combining computer-rendered image elements with live footage.</paragraph><paragraph>In order to combine these image elements correctly, it is necessary to keep an associated<space/><italics><link><target>matte (filmmaking)</target><part>matte</part></link></italics><space/>for each element. This matte contains the coverage informationthe shape of the geometry being drawnmaking it possible to distinguish between parts of the image where the geometry was actually drawn and other parts of the image that are empty.</paragraph><heading level='2'>Description</heading><paragraph>To store matte information, the concept of an<space/><bold>alpha channel</bold><space/>was introduced by<space/><link><target>Alvy Ray Smith</target></link><space/>in the late 1970s, and fully developed in a 1984 paper by<space/><link><target>Thomas_Porter (Pixar)</target><part>Thomas Porter</part></link><space/>and<space/><link><target>Tom Duff</target></link>.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Porter</arg><arg name="first">Thomas</arg><arg name="author2">Tom Duff</arg><arg name="year">1984</arg><arg name="title">Compositing Digital Images</arg><arg name="journal">Computer Graphics</arg><arg name="volume">18</arg><arg name="issue">3</arg><arg name="pages">253–259</arg><arg name="doi">10.1145/800031.808606</arg><arg name="isbn">0-89791-138-5</arg></template></extension><space/>In a 2D image element, which stores a color for each pixel, additional data is stored in the alpha channel with a value between 0 and 1. A value of 0 means that the pixel does not have any coverage information and is transparent; i.e. there was no color contribution from any geometry because the geometry did not overlap this pixel. A value of 1 means that the pixel is opaque because the geometry completely overlapped the pixel.</paragraph><paragraph>If an alpha channel is used in an image, it is common to also multiply the color by the alpha value, to save on additional multiplications during compositing. This is usually referred to as<space/><italics>premultiplied alpha</italics>.</paragraph><paragraph>Assuming that the pixel color is expressed using<space/><italics>straight</italics><space/>(non-premultiplied) RGBA<space/><link><target>tuple</target><trail>s</trail></link>, a pixel value of (0.0, 0.5, 0.0, 0.5) implies a pixel that has 50% of the maximum green intensity and 50% opacity. If the color were fully green, its RGBA would be (0, 1, 0, 0.5).</paragraph><paragraph>However, if this pixel uses premultiplied alpha, all of the RGB values (0, 1, 0) are multiplied by 0.5 and then the alpha is appended to the end to yield (0, 0.5, 0, 0.5). In this case, the 0.5 value for the G channel actually indicates 100% green intensity (with 50% opacity). For this reason, knowing whether a file uses premultiplied or straight alpha is essential to correctly process or composite it.</paragraph><paragraph>Premultiplied alpha has some practical advantages over normal alpha blending because premultiplied alpha blending is<space/><link><target>Associativity</target><part>associative</part></link>, and<space/><link><target>interpolation</target></link><space/>and<space/><link><target>Filter_(signal_processing)</target><part>filtering</part></link><space/>give correct results. Ordinary interpolation without premultiplied alpha leads to RGB information leaking out of fully transparent (A=0) regions, even though this RGB information is ideally invisible. When interpolating images with abrupt borders between transparent and opaque regions, this can result in borders of colors that were not visible in the original image. In addition, premultiplied alpha allows regions of regular alpha blending and regions with additive blending mode to be encoded within the same image.<extension extension_name='ref'>http://home.comcast.net/~tom_forsyth/blog.wiki.html#<link><target>Premultiplied alpha</target></link></extension>Premultiplication causes a loss of precision in the RGB values, so that a noticeable loss of quality can result if the color information is later brightened or if the alpha channel is removed. This loss of precision also makes premultiplied images easier to<space/><link><target>Data compression</target><part>compress</part></link>, as they do not record the color variations hidden inside transparent regions.</paragraph><paragraph>With the existence of an alpha channel, it is possible to express compositing image operations using a<space/><italics>compositing algebra</italics>. For example, given two image elements A and B, the most common compositing operation is to combine the images such that A appears in the foreground and B appears in the background. This can be expressed as A<space/><bold>over</bold><space/>B. In addition to<space/><bold>over</bold>, Porter and Duff defined the compositing operators<space/><bold>in</bold>,<space/><bold>held out by</bold><space/>(usually abbreviated<space/><bold>out</bold>),<space/><bold>atop</bold>, and<space/><bold>xor</bold><space/>(and the reverse operators<space/><bold>rover</bold>,<space/><bold>rin</bold>,<space/><bold>rout</bold>, and<space/><bold>ratop</bold>) from a consideration of choices in blending the colors of two pixels when their coverage is, conceptually, overlaid orthogonally:</paragraph><paragraph><link><target>Image:Alpha compositing.svg</target></link></paragraph><paragraph>The<space/><bold>over</bold><space/>operator is, in effect, the normal painting operation (see<space/><link><target>Painter's algorithm</target></link>). The<space/><bold>in</bold><space/>operator is the alpha compositing equivalent of<space/><link><target>Clipping (computer graphics)</target><part>clipping</part></link>.</paragraph><paragraph>As an example, the<space/><bold>over</bold><space/>operator can be accomplished by applying the following formula to each pixel value:</paragraph><list type='ident'><listitem><extension extension_name='math'>C_o = \frac{C_a \alpha_a + C_b \alpha_b \left(1 - \alpha_a\right)}{\alpha_a + \alpha_b \left(1 - \alpha_a\right)}</extension></listitem></list><paragraph>where<space/><extension extension_name='math'>C_o</extension><space/>is the result of the operation,<space/><extension extension_name='math'>C_a</extension><space/>is the color of the pixel in element A,<space/><extension extension_name='math'>C_b</extension><space/>is the color of the pixel in element B, and<space/><extension extension_name='math'>\alpha_a</extension><space/>and<space/><extension extension_name='math'>\alpha_b</extension><space/>are the alpha of the pixels in elements A and B respectively. If it is assumed that all color values are premultiplied by their alpha values (<extension extension_name='math'>c_i = \alpha_i C_i</extension>), we can rewrite the equation for output color as:</paragraph><list type='ident'><listitem><extension extension_name='math'>c_o = c_a + c_b \left(1 - \alpha_a\right)</extension></listitem></list><paragraph>and resulting alpha channel value is<space/></paragraph><list type='ident'><listitem><extension extension_name='math'>\alpha_o = \frac{c_o}{C_o} = \alpha_a + \alpha_b \left(1 - \alpha_a\right)</extension></listitem><listitem></listitem></list><heading level='3'>Examples</heading><paragraph>Examples of red overlaid with green with both colours fully opaque:</paragraph><paragraph><table style='border-collapse: collapse; border: 1px solid grey;'><tablerow><tablecell valign="top" align="left"><link><target>PorterDuffAdd.png</target><part>thumb</part><part>center</part><part></part></link><xhtml:br></xhtml:br>ADD operation</tablecell><tablecell valign="top" align="left"><link><target>PorterDuffClear.png</target><part>thumb</part><part>center</part><part></part></link><xhtml:br></xhtml:br>CLEAR operation</tablecell><tablecell valign="top" align="left"><link><target>PorterDuffMultiply.png</target><part>thumb</part><part>center</part><part></part></link><xhtml:br></xhtml:br>MULTIPLY operation</tablecell><tablecell valign="top" align="left"><link><target>PorterDuffOverlay.png</target><part>thumb</part><part>center</part><part></part></link><xhtml:br></xhtml:br>OVERLAY operation</tablecell></tablerow></table></paragraph><heading level='2'>Analytical derivation of the over operator</heading><paragraph>Porter and Duff gave a geometric interpretation of the alpha compositing formula by studying orthogonal coverages. Another derivation of the formula, based on a physical<space/><link><target>reflectance</target></link>/<link><target>transmittance</target></link><space/>model, can be found in a 1981 paper by<space/><link><target>Bruce A. Wallace</target></link>.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Wallace</arg><arg name="first">Bruce</arg><arg name="year">1981</arg><arg name="title">Merging and transformation of raster images for cartoon animation</arg><arg name="journal">SIGGRAPH Computer Graphics</arg><arg name="volume">15</arg><arg name="issue">3</arg><arg name="pages">253–262</arg><arg name="doi">10.1145/800224.806813</arg><arg name="isbn">0-89791-045-1</arg></template></extension></paragraph><paragraph>A third approach is found by starting out with two very simple assumptions. For simplicity, we shall here use the shorthand notation<space/><extension extension_name='math'>a \odot b</extension><space/>for representing the<space/><bold>over</bold><space/>operator.</paragraph><paragraph>The first assumption is that in the case where the background is opaque (i.e.<space/><extension extension_name='math'>\alpha_b = 1</extension>), the over operator represents the<space/><link><target>convex combination</target></link><space/>of<space/><extension extension_name='math'>a</extension><space/>and<space/><extension extension_name='math'>b</extension>:</paragraph><list type='ident'><listitem><extension extension_name='math'>C_o = \alpha_a C_a + (1 - \alpha_a) C_b</extension></listitem></list><paragraph>The second assumption is that the operator must respect the associative rule:</paragraph><list type='ident'><listitem><extension extension_name='math'>(a \odot b) \odot c = a \odot (b \odot c)</extension></listitem></list><paragraph>Now, let us assume that<space/><extension extension_name='math'>a</extension><space/>and<space/><extension extension_name='math'>b</extension><space/>have variable transparencies, whereas<space/><extension extension_name='math'>c</extension><space/>is opaque. We're interested in finding</paragraph><list type='ident'><listitem><extension extension_name='math'>o = a \odot b</extension>.</listitem></list><paragraph>We know from the associative rule that the following must be true:</paragraph><list type='ident'><listitem><extension extension_name='math'>o \odot c = a \odot (b \odot c)</extension></listitem></list><paragraph>We know that<space/><extension extension_name='math'>c</extension><space/>is opaque and thus follows that<space/><extension extension_name='math'>b \odot c</extension><space/>is opaque, so in the above equation, each<space/><extension extension_name='math'>\odot</extension><space/>operator can be written as a convex combination:</paragraph><list type='ident'><listitem><extension extension_name='math'>
\begin{align}
 \alpha_o C_o + (1 - \alpha_o) C_c &amp;= \alpha_a C_a + (1 - \alpha_a) (\alpha_b C_b + (1 - \alpha_b) C_c) \\
 &amp;= \alpha_a C_a + (1 - \alpha_a) \alpha_b C_b + (1 - \alpha_a) (1 - \alpha_b) C_c
\end{align}
</extension></listitem></list><paragraph>Hence we see that this represents an equation of the form<space/><extension extension_name='math'>X_0 + Y_0 C_c = X_1 + Y_1 C_c</extension>. By setting<space/><extension extension_name='math'>X_0 = X_1</extension><space/>and<space/><extension extension_name='math'>Y_0 = Y_1</extension><space/>we get</paragraph><list type='ident'><listitem><extension extension_name='math'>
\begin{align}
 \alpha_o &amp;= 1 - (1 - \alpha_a) (1 - \alpha_b),\\
 C_o &amp;= \frac{\alpha_a C_a + (1 - \alpha_a)\alpha_b C_b}{\alpha_o},
\end{align}
</extension></listitem></list><paragraph>which means that we have analytically derived a formula for the output alpha and the output color of<space/><extension extension_name='math'>a \odot b</extension>.</paragraph><paragraph>An even more compact representation is given by noticing that<space/><extension extension_name='math'>(1 - \alpha_a)\alpha_b = \alpha_o - \alpha_a</extension>:</paragraph><list type='ident'><listitem><extension extension_name='math'>
 C_o = \frac{\alpha_a}{\alpha_o} C_a + \left(1 - \frac{\alpha_a}{\alpha_o}\right) C_b
</extension></listitem></list><paragraph>It is also interesting to note that the<space/><extension extension_name='math'>\odot</extension><space/>operator fulfills all the requirements of a<space/><link><target>non-commutative</target></link><space/><link><target>monoid</target></link>, where the<space/><link><target>identity element</target></link><space/><extension extension_name='math'>e</extension><space/>is chosen such that<space/><extension extension_name='math'>e \odot a = a \odot e = a</extension><space/>(i.e. the identity element can be any tuple<space/><extension extension_name='math'>\langle C,\alpha\rangle</extension><space/>with<space/><extension extension_name='math'>\alpha = 0</extension>.)</paragraph><heading level='2'>Alpha blending</heading><paragraph>Alpha blending is the process of combining a translucent foreground color with a background color, thereby producing a new blended color. The degree of the foreground color's translucency may range from completely transparent to completely opaque. If the foreground color is completely transparent, the blended color will be the background color. Conversely, if it is completely opaque, the blended color will be the foreground color. Of course, the translucency can range between these extremes, in which case the blended color is computed as a weighted average of the foreground and background colors.</paragraph><paragraph>Alpha blending is a<space/><link><target>convex combination</target></link><space/>of two<space/><link><target>color</target><trail>s</trail></link><space/>allowing for<space/><link><target>Transparency (graphic)</target><part>transparency</part></link><space/>effects in<space/><link><target>computer graphics</target></link>. The value of<space/><xhtml:code>alpha</xhtml:code><space/>in the color code ranges from 0.0 to 1.0, where 0.0 represents a fully transparent color, and 1.0 represents a fully opaque color. This alpha value also corresponds to the ratio of &quot;SRC over DST&quot; in Porter and Duff equations.</paragraph><paragraph>The value of the resulting color is given by:</paragraph><list type='ident'><listitem><extension extension_name='math'>
\begin{cases}
\mathrm{out}_A = \mathrm{src}_A + \mathrm{dst}_A (1 - \mathrm{src}_A) \\
\mathrm{out}_{RGB} = \bigl( \mathrm{src}_{RGB} \mathrm{src}_A + \mathrm{dst}_{RGB} \mathrm{dst}_A \left( 1 - \mathrm{src}_A \right) \bigr) \div \mathrm{out}_A \\
\mathrm{out}_A = 0 \Rightarrow \mathrm{out}_{RGB} = 0
\end{cases}
</extension></listitem></list><paragraph>If the destination background is opaque, then<space/><extension extension_name='math'>dst_A = 1</extension>, and if you enter it to the upper equation:</paragraph><list type='ident'><listitem><extension extension_name='math'>
\begin{cases}
\mathrm{out}_A = 1 \\
\mathrm{out}_{RGB} = \mathrm{src}_{RGB} \mathrm{src}_A + \mathrm{dst}_{RGB} (1 - \mathrm{src}_A)
\end{cases}
</extension></listitem></list><paragraph>The alpha component may be used to blend to<space/><link><target>red</target></link>,<space/><link><target>green</target></link><space/>and<space/><link><target>blue</target></link><space/>components equally, as in<space/><link><target>32-bit</target></link><space/><link><target>RGBA color space</target><part>RGBA</part></link>, or, alternatively, there may be three alpha values specified corresponding to each of the<space/><link><target>primary color</target><trail>s</trail></link><space/>for<space/><link><target>spectral color</target></link><space/><link><target>filter (optics)</target><part>filtering</part></link>.</paragraph><paragraph>If pre-multiplied alpha is used, the above equations are simplified to:</paragraph><list type='ident'><listitem><extension extension_name='math'>
\begin{cases}
\mathrm{out}_A = \mathrm{src}_A + \mathrm{dst}_A (1 - \mathrm{src}_A) \\
\mathrm{out}_{RGB} = \mathrm{src}_{RGB} + \mathrm{dst}_{RGB} \left( 1 - \mathrm{src}_A \right)
\end{cases}
</extension></listitem></list><heading level='2'>Other transparency methods</heading><paragraph>Although used for similar purposes,<space/><link><target>Palette (computing)#Transparent color in palettes</target><part>transparent color</part><trail>s</trail></link><space/>and<space/><link><target>Mask (computing)#Image masks</target><part>image mask</part><trail>s</trail></link><space/>do not permit the smooth blending of the superimposed image pixels with those of the background (only whole image pixels or whole background pixels allowed).</paragraph><paragraph>A similar effect can be achieved with a 1-bit alpha channel, as found in the 16-bit RGBA<space/><link><target>Highcolor</target></link><space/>mode of the<space/><link><target>Truevision TGA</target></link><space/><link><target>image file format</target></link><space/>and related<space/><link><target>TARGA</target></link><space/>and<space/><link><target>AT-Vista</target></link>/<link><target>NU-Vista</target></link><space/>display adapters' Highcolor graphic mode. This mode devotes 5 bits for every primary RGB color (<link><target>List of monochrome and RGB palettes#15-bit RGB</target><part>15-bit RGB</part></link>) plus a remaining bit as the &quot;alpha channel&quot;.</paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>RGBA color space</target></link></listitem><listitem><link><target>Digital compositing</target></link></listitem><listitem><link><target>Transparency (graphic)</target></link></listitem><listitem><link><target>Palette (computing)#Transparent color in palettes</target><part>Transparent color in palettes</part></link></listitem><listitem><link><target>Mask (computing)#Image masks</target><part>Image masks</part></link></listitem><listitem><link><target>Portable Network Graphics</target></link></listitem><listitem><link><target>Truevision TGA</target></link></listitem><listitem><link><target>Magic Pink</target></link></listitem><listitem><link><target>Texture splatting</target></link></listitem><listitem><link><target>Alpha to coverage</target></link></listitem></list><heading level='2'>References</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://keithp.com/~keithp/porterduff/p253-porter.pdf'>Compositing Digital Images - Thomas Porter and Tom Duff (Original Paper)</link></listitem><listitem><link type='external' href='http://www.cs.princeton.edu/courses/archive/fall00/cs426/papers/smith95a.pdf'>Image Compositing Fundamentals</link></listitem><listitem><link type='external' href='http://www.svgopen.org/2005/papers/abstractsvgopen/'>Understand Compositing and Color extensions in SVG 1.2 in 30 minutes!</link></listitem><listitem><link type='external' href='http://dvd-hq.info/alpha_matting.php'>Alpha Matting and Premultiplication</link></listitem></list><paragraph><template><target>DEFAULTSORT:Alpha Compositing</target></template><link><target>Category:Computer graphics algorithms</target></link></paragraph></article>