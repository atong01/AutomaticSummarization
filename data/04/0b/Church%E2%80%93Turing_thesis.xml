<article title='Church%E2%80%93Turing_thesis'><paragraph><template><target>Redirect</target><arg>Church's thesis</arg><arg>the axiom CT in [[constructive mathematics]]</arg><arg>Church's thesis (constructive mathematics)</arg></template></paragraph><paragraph>In<space/><link><target>Computability theory (computation)</target><part>computability theory</part></link>, the<space/><bold>ChurchTuring thesis</bold><space/>(also known as the<space/><bold>TuringChurch thesis</bold>,<extension extension_name='ref'><template><target>cite video</target><arg name="last"><space/>Rabin<space/></arg><arg name="first"><space/>Michael O.<space/></arg><arg name="author-link"><space/>Michael O. Rabin<space/></arg><arg name="title"><space/>Turing, Church, GÃ¶del, Computability, Complexity and Randomization: A Personal View<space/></arg><arg name="date"><space/>June 2012<space/></arg><arg name="url"><space/>http://videolectures.net/turing100_rabin_turing_church_goedel/<space/></arg></template></extension><space/>the<space/><bold>ChurchTuring conjecture</bold>,<space/><bold>Church's thesis</bold>,<space/><bold>Church's conjecture</bold>, and<space/><bold>Turing's thesis</bold>) is a<space/><link><target>hypothesis</target></link><space/>(&quot;thesis&quot;) about the nature of<space/><link><target>computable function</target><trail>s</trail></link>. In simple terms, the ChurchTuring thesis states that a<space/><link><target>function (mathematics)</target><part>function</part></link><space/>on the<space/><link><target>natural numbers</target></link><space/>is computable in an informal sense (i.e., computable by a human being using a pencil-and-paper method, ignoring resource limitations) if and only if it is computable by a<space/><link><target>Turing machine</target></link>. The thesis is named after American mathematician<space/><link><target>Alonzo Church</target></link><space/>and the British mathematician<space/><link><target>Alan Turing</target></link>.</paragraph><paragraph>Before the precise definition of computable function, mathematicians often used the informal term<space/><link><target>effectively calculable</target></link><space/>to describe functions that are computable by paper-and-pencil methods. In the 1930s, several independent attempts were made to<space/><link><target>formal system</target><part>formalize</part></link><space/>the notion of<space/><link><target>computability</target></link>:</paragraph><list type='bullet'><listitem>In 1933, Austrian-American mathematician<space/><link><target>Kurt Gdel</target></link>, with<space/><link><target>Jacques Herbrand</target></link>, created a formal definition of a class called<space/><link><target>-recursive function</target><part>general recursive functions</part></link>. The class of general recursive functions is the smallest class of functions (possibly with more than one argument) which includes all<space/><link><target>constant function</target><trail>s</trail></link>, projections, the<space/><link><target>successor function</target></link>, and which is closed under<space/><link><target>function composition</target></link><space/>and<space/><link><target>recursion</target></link>.</listitem><listitem>In 1936,<space/><link><target>Alonzo Church</target></link><space/>created a method for defining functions called the<space/><link><target>Lambda calculus</target><part>-calculus</part></link>. Within -calculus, he defined an encoding of the natural numbers called the<space/><link><target>Church numerals</target></link>. A function on the natural numbers is called<space/><link><target>Lambda calculus#Computable functions and lambda calculus</target><part>-computable</part></link><space/>if the corresponding function on the Church numerals can be represented by a term of the -calculus.</listitem><listitem>Also in 1936, before learning of Church's work,<space/><link><target>Alan Turing</target></link><space/>created a theoretical model for machines, now called Turing machines, that could carry out calculations from inputs by manipulating symbols on a tape. Given a suitable encoding of the natural numbers as sequences of symbols, a function on the natural numbers is called<space/><link><target>computable function</target><part>Turing computable</part></link><space/>if some Turing machine computes the corresponding function on encoded natural numbers.</listitem></list><paragraph>Church<extension extension_name='ref'>Church 1934:90 footnote in Davis 1952</extension><space/>and Turing<extension extension_name='ref'>Turing 19367 in Davis 1952:149</extension><space/>proved that these three formally defined classes of computable functions coincide: a function is -computable if and only if it is Turing computable if and only if it is<space/><italics>general recursive</italics>. This has led mathematicians and computer scientists to believe that the concept of computability is accurately characterized by these three equivalent processes. Other formal attempts to characterize computability have subsequently strengthened this belief (see<space/><link><target>ChurchTuring thesis#Success of the thesis</target><part>below</part></link>).</paragraph><paragraph>On the other hand, the ChurchTuring thesis states that the above three formally-defined classes of computable functions coincide with the<space/><italics>informal</italics><space/>notion of an effectively calculable function. Since, as an informal notion, the concept of effective calculability does not have a formal definition, the thesis, although it has near-universal acceptance, cannot be formally proven.</paragraph><paragraph>Since its inception, variations on the original thesis have arisen, including statements about what can physically be realized by a computer in our universe (Physical Church-Turing Thesis) and what can be efficiently computed (Complexity-Theoretic ChurchTuring Thesis). These variations are not due to Church or Turing, but arise from later work in<space/><link><target>complexity theory</target></link><space/>and<space/><link><target>digital physics</target></link>. The thesis also has implications for the<space/><link><target>philosophy of mind</target></link>.</paragraph><heading level='2'>Statement in Church's and Turing's words</heading><paragraph><template><target>See also</target><arg>Effectively calculable</arg></template></paragraph><paragraph><link><target>J. Barkley Rosser</target><part>J. B. Rosser</part></link><space/>(1939) addresses the notion of &quot;effective computability&quot; as follows: &quot;Clearly the existence of CC and RC (Church's and Rosser's proofs) presupposes a precise definition of 'effective'. '<link><target>Effective method</target></link>' is here used in the rather special sense of a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps&quot;.<extension extension_name='ref'>Rosser 1939 in Davis 1965:225</extension><space/>Thus the adverb-adjective &quot;effective&quot; is used in a sense of &quot;1a: producing a decided, decisive, or desired effect&quot;, and &quot;capable of producing a result&quot;.<extension extension_name='ref'>Merriam Webster's Ninth New Collegiate Dictionary</extension><extension extension_name='ref'>&quot;See also&quot;<space/><link type='external' href='http://www.merriam-webster.com/dictionary/effective'>Merriam-Webster's Online Dictionary, 11th Edition</link><space/>(accessed July 26, 2014), which also gives these definitions for &quot;effective&quot; -- the first [&quot;producing a decided, decisive, or desired effect&quot;] as the definition for sense &quot;1a&quot; of the word &quot;effective&quot;, and the second [&quot;capable of producing a result&quot;] as part of the &quot;Synonym Discussion of EFFECTIVE&quot; there, (in the introductory part, where it summarizes the similarities between the meanings of the words &quot;effective&quot;, &quot;effectual&quot;, &quot;efficient&quot;, and &quot;efficacious&quot;).</extension></paragraph><paragraph>In the following, the words &quot;effectively calculable&quot; will mean &quot;produced by any intuitively 'effective' means whatsoever&quot; and &quot;effectively computable&quot; will mean &quot;produced by a Turing-machine or equivalent mechanical device&quot;. Turing's &quot;definitions&quot; given in a footnote in his 1939 Ph.D. thesis<space/><italics><link><target>Systems of Logic Based on Ordinals</target></link></italics>, supervised by Church, are virtually the same:</paragraph><list type='ident'><listitem>&quot;<xhtml:sup></xhtml:sup><space/>We shall use the expression 'computable function' to mean a function calculable by a machine, and let 'effectively calculable' refer to the intuitive idea without particular identification with any one of these definitions.&quot;<extension extension_name='ref'>A. M. Turing (1939),<space/><link type='external' href='https://webspace.princeton.edu/users/jedwards/Turing%20Centennial%202012/Mudd%20Archive%20files/12285_AC100_Turing_1938.pdf'>''Systems of Logic Based on Ordinals''</link><space/>(Ph.D. thesis). Princeton University. p. 8.</extension></listitem></list><paragraph>The thesis can be stated as follows:</paragraph><list type='ident'><listitem><italics>Every effectively calculable function is a computable function</italics>.<extension extension_name='ref'>Gandy (Gandy 1980 in Barwise 1980:123) states it this way:<space/><italics>What is effectively calculable is computable.</italics><space/>He calls this &quot;Church's Thesis&quot;, a peculiar choice of moniker.</extension></listitem></list><paragraph>Turing stated it this way:</paragraph><list type='ident'><listitem>&quot;It was stated&amp;nbsp;... that 'a function is effectively calculable if its values can be found by some purely mechanical process.' We may take this literally, understanding that by a purely mechanical process one which could be carried out by a machine. The development&amp;nbsp;... leads to&amp;nbsp;... an identification of computability<xhtml:sup></xhtml:sup><space/>with effective calculability.&quot; ( is the footnote above,<space/><link><target>ibid.</target></link>)</listitem></list><heading level='2'>History</heading><paragraph><template><target>Main</target><arg>History of the ChurchâTuring thesis</arg></template></paragraph><paragraph>One of the important problems for logicians in the 1930s was<space/><link><target>David Hilbert</target></link>'s<space/><link><target>Entscheidungsproblem</target></link>, which asked whether there was a mechanical procedure for separating mathematical truths from mathematical falsehoods. This quest required that the notion of &quot;algorithm&quot; or &quot;effective calculability&quot; be pinned down, at least well enough for the quest to begin.<extension extension_name='ref'>Davis's commentary before Church 1936<space/><italics>An Unsolvable Problem of Elementary Number Theory</italics><space/>in Davis 1965:88. Church uses the words &quot;effective calculability&quot; on page 100ff.</extension><space/>But from the very outset<space/><link><target>Alonzo Church</target></link>'s attempts began with a debate that continues to this day.<extension extension_name='ref'>In his review of<space/><italics>Church's Thesis after 70 Years</italics><space/>edited by Adam Olszewski et al. 2006, Peter Smith's criticism of a paper by Muraswski and Wolenski suggests 4 &quot;lines&quot; re the status of the ChurchTuring Thesis: (1) empirical hypothesis (2) axiom or theorem, (3) definition, (4) explication. But Smith opines that (4) is indistinguishable from (3), cf Smith (July 11, 2007)<space/><italics>Church's Thesis after 70 Years</italics><space/>at http://www.logicmatters.net/resources/pdfs/CTT.pdf</extension><space/>Was the notion of &quot;effective calculability&quot; to be (i) an &quot;axiom or axioms&quot; in an axiomatic system, or (ii) merely a<space/><italics>definition</italics><space/>that &quot;identified&quot; two or more propositions, or (iii) an<space/><italics>empirical hypothesis</italics><space/>to be verified by observation of natural events, or (iv) or just<space/><italics>a proposal</italics><space/>for the sake of argument (i.e. a &quot;thesis&quot;).</paragraph><heading level='3'>Circa 19301952</heading><paragraph>In the course of studying the problem, Church and his student<space/><link><target>Stephen Cole Kleene</target><part>Stephen Kleene</part></link><space/>introduced the notion of<space/><link><target>Lambda calculus</target><part>-definable functions</part></link>, and they were able to prove that several large classes of functions frequently encountered in number theory were -definable.<extension extension_name='ref'>cf footnote 3 in Church 1936<space/><italics>An Unsolvable Problem of Elementary Number Theory</italics><space/>in Davis 1965:89</extension><space/>The debate began when Church proposed to Gdel that one should define the &quot;effectively computable&quot; functions as the -definable functions. Gdel, however, was not convinced and called the proposal &quot;thoroughly unsatisfactory&quot;.<extension extension_name='ref'>Dawson 1997:99</extension><space/>Rather, in correspondence with Church (ca 19345), Gdel proposed<space/><italics>axiomatizing</italics><space/>the notion of &quot;effective calculability&quot;; indeed, in a 1935 letter to Kleene, Church reported that:</paragraph><list type='ident'><listitem>&quot;His [Gdel's] only idea at the time was that it might be possible, in terms of effective calculability as an undefined notion, to state a set of axioms which would embody the generally accepted properties of this notion, and to do something on that basis&quot;.<extension extension_name='ref' name="sieg160"></extension></listitem></list><paragraph>But Gdel offered no further guidance. Eventually, he would suggest his (primitive) recursion, modified by Herbrand's suggestion, that Gdel had detailed in his 1934 lectures in Princeton NJ (Kleene and<space/><link><target>J.B. Rosser</target><part>Rosser</part></link><space/>transcribed the notes). But &quot;he did not think that the two ideas could be satisfactorily identified &quot;except heuristically&quot;.<extension extension_name='ref'>Sieg 1997:160 quoting from the 1935 letter written by Church to Kleene, cf Footnote 3 in Gdel 1934 in Davis 1965:44</extension></paragraph><paragraph>Next, it was necessary to identify and prove the equivalence of two notions of effective calculability. Equipped with the -calculus and &quot;general&quot; recursion,<space/><link><target>Stephen Cole Kleene</target><part>Stephen Kleene</part></link><space/>with help of Church and<space/><link><target>J. Barkley Rosser</target><part>J. B. Rosser</part></link><space/>produced proofs (1933, 1935) to show that the two calculi are equivalent. Church subsequently modified his methods to include use of HerbrandGdel recursion and then proved (1936) that the<space/><link><target>Entscheidungsproblem</target></link><space/>is unsolvable: There is no generalized &quot;effective calculation&quot; (method, algorithm) that can determine whether or not a formula in either the recursive- or -calculus is &quot;valid&quot; (more precisely: no method to show that a<space/><link><target>well formed formula</target></link><space/>has a &quot;normal form&quot;).<extension extension_name='ref'>cf Church 1936 in Davis 1965:105ff</extension></paragraph><paragraph>Many years later in a letter to Davis (ca 1965), Gdel would confess that &quot;he was, at the time of these [1934] lectures, not at all convinced that his concept of recursion comprised all possible recursions&quot;.<extension extension_name='ref'>Davis's commentary before Gdel 1934 in Davis 1965:40</extension><space/>By 19634 Gdel would disavow HerbrandGdel recursion and the -calculus in favor of the Turing machine as the definition of &quot;algorithm&quot; or &quot;mechanical procedure&quot; or &quot;formal system&quot;.<extension extension_name='ref'>For a detailed discussion of Gdel's adoption of Turing's machines as models of computation, see Shagrir date TBD at http://edelstein.huji.ac.il/staff/shagrir/papers/Goedel_on_Turing_on_Computability.pdf</extension></paragraph><paragraph><bold>A hypothesis leading to a natural law?</bold>: In late 1936<space/><link><target>Alan Turing</target></link>'s paper (also proving that the<space/><link><target>Entscheidungsproblem</target></link><space/>is unsolvable) was delivered orally, but had not yet appeared in print.<extension extension_name='ref' name="On Computable"><template><target>Harvnb</target><arg>Turing</arg><arg>1937</arg></template></extension><space/>On the other hand,<space/><link><target>Emil Post</target></link>'s 1936 paper had appeared and was certified independent of Turing's work.<extension extension_name='ref'>cf. Editor's footnote to Post 1936<space/><italics>Finite Combinatory Process. Formulation I.</italics><space/>at Davis 1965:289.</extension><space/>Post strongly disagreed with Church's &quot;identification&quot; of effective computability with the -calculus and recursion, stating:</paragraph><list type='ident'><listitem>&quot;Actually the work already done by Church and others carries this identification considerably beyond the working hypothesis stage. But to mask this identification under a definition&amp;nbsp;... blinds us to the need of its continual verification.&quot;<extension extension_name='ref'>Post 1936 in Davis 1965:291 footnote 8</extension></listitem></list><paragraph>Rather, he regarded the notion of &quot;effective calculability&quot; as merely a &quot;working hypothesis&quot; that might lead by<space/><link><target>inductive reasoning</target></link><space/>to a &quot;<link><target>natural law</target></link>&quot; rather than by &quot;a definition or an axiom&quot;.<extension extension_name='ref'>Post 1936 in Davis 1952:291</extension><space/>This idea was &quot;sharply&quot; criticized by Church.<extension extension_name='ref'>Sieg 1997:171 and 1767</extension></paragraph><paragraph>Thus Post in his 1936<extension extension_name='ref' name="sieg160">Sieg 1997:160</extension><space/>paper was also discounting<space/><link><target>Kurt Gdel</target></link>'s suggestion to Church in 19345 that the thesis might be expressed as an axiom or set of axioms.<extension extension_name='ref' name="sieg160"></extension></paragraph><paragraph><bold>Turing adds another definition, Rosser equates all three</bold>: Within just a short time, Turing's 193637 paper &quot;On Computable Numbers, with an Application to the Entscheidungsproblem&quot;<extension extension_name='ref' name="On Computable"></extension><space/>appeared. In it he stated another notion of &quot;effective computability&quot; with the introduction of his a-machines (now known as the<space/><link><target>Turing machine</target></link><space/>abstract computational model). And in a proof-sketch added as an &quot;Appendix&quot; to his 193637 paper, Turing showed that the classes of functions defined by -calculus and Turing machines coincided.<extension extension_name='ref'>Turing 19367 in Davis 1965:263ff</extension><space/>Church was quick to recognise how compelling Turing's analysis was. In his review of Turing's paper<extension extension_name='ref'>Church 1937</extension><space/>he made clear that Turing's notion made &quot;the identification with effectiveness in the ordinary (not explicitly defined) sense evident immediately&quot;.</paragraph><paragraph>In a few years (1939) Turing would propose, like Church and Kleene before him, that<space/><italics>his</italics><space/>formal definition of mechanical computing agent was the correct one.<extension extension_name='ref'>Turing 1939 in Davis:160</extension><space/>Thus, by 1939, both Church (1934) and Turing (1939) had individually proposed that their &quot;formal systems&quot; should be<space/><italics>definitions</italics><space/>of &quot;effective calculability&quot;;<extension extension_name='ref'>cf. Church 1934 in Davis 1965:100, also Turing 1939 in Davis 1965:160</extension><space/>neither framed their statements as<space/><italics>theses</italics>.</paragraph><paragraph>Rosser (1939) formally identified the three notions-as-definitions:</paragraph><list type='ident'><listitem>&quot;All three<space/><italics>definitions</italics><space/>are equivalent, so it does not matter which one is used.&quot;<extension extension_name='ref'>italics added, Rosser 1939 in Davis 1965:226</extension></listitem></list><paragraph><bold>Kleene proposes<space/><italics>Church's Thesis</italics></bold>: This left the overt expression of a &quot;thesis&quot; to Kleene. In his 1943 paper<space/><italics>Recursive Predicates and Quantifiers</italics><space/>Kleene proposed his &quot;THESIS I&quot;:</paragraph><list type='ident'><listitem>&quot;This heuristic fact [general recursive functions are effectively calculable]&amp;nbsp;... led Church to state the following thesis(<xhtml:sup>22</xhtml:sup>). The same thesis is implicit in Turing's description of computing machines(<xhtml:sup>23</xhtml:sup>).<list type='ident'><listitem>&quot;THESIS I.<space/><italics>Every effectively calculable function (effectively decidable predicate) is general<extension extension_name='ref'>An archaic usage of Kleene et al. to distinguish Gdel's (1931) &quot;rekursiv&quot; (a few years later named<space/><link><target>primitive recursion</target></link><space/>by<space/><link><target>Rzsa Pter</target></link><space/>(cf Gandy 1994 in Herken 19945:68)) from HerbrandGdel's recursion of 1934 i.e. primitive recursion equipped with the additional<space/><link><target>mu operator</target></link>; nowadays mu-recursion is called, simply, &quot;<link><target>recursion</target></link>&quot;.</extension><space/>recursive</italics><space/>[Kleene's italics]</listitem></list></listitem><listitem>&quot;Since a precise mathematical definition of the term effectively calculable (effectively decidable) has been wanting, we can take this thesis&amp;nbsp;... as a definition of it&amp;nbsp;...&quot;<extension extension_name='ref' name="Davis274">Kleene 1943 in Davis 1965:274</extension><list type='ident'><listitem>&quot;(<xhtml:sup>22</xhtml:sup>) references Church 1936</listitem><listitem>&quot;(<xhtml:sup>23</xhtml:sup>) references Turing 19367</listitem></list></listitem></list><paragraph>Kleene goes on to note that:</paragraph><list type='ident'><listitem>&quot;...&amp;nbsp;the thesis has the character of an hypothesisa point emphasized by Post and by Church(<xhtml:sup>24</xhtml:sup>). If we consider the thesis and its converse as definition, then the hypothesis is an hypothesis about the application of the mathematical theory developed from the definition. For the acceptance of the hypothesis, there are, as we have suggested, quite compelling grounds.&quot;<extension extension_name='ref' name="Davis274"></extension><list type='ident'><listitem><list type='ident'><listitem>&quot;(24) references Post 1936 of Post and Church's<space/><italics>Formal definitions in the theory of ordinal numbers</italics>,<space/><italics>Fund. Math</italics>. vol 28 (1936) pp.1121 (see ref. #2, Davis 1965:286).</listitem></list></listitem></list></listitem></list><paragraph><bold>Kleene's ChurchTuring Thesis</bold>: A few years later (1952) Kleene would overtly name, defend, and express the two &quot;theses&quot; and then &quot;identify&quot; them (show equivalence) by use of his Theorem XXX:</paragraph><list type='ident'><listitem>&quot;Heuristic evidence and other considerations led Church 1936 to propose the following thesis.<list type='ident'><listitem>Thesis I.<space/><italics>Every effectively calculable function (effectively decidable predicate) is general recursive</italics>.<extension extension_name='ref'>Kleene 1952:300</extension></listitem></list></listitem><listitem>Theorem XXX: &quot;The following classes of partial functions are coextensive, i.e. have the same members: (a) the partial recursive functions, (b) the computable functions&amp;nbsp;...&quot;.<extension extension_name='ref' name="Kleene 1952 376">Kleene 1952:376</extension></listitem><listitem>Turing's thesis: &quot;Turing's thesis that every function which would naturally be regarded as computable is computable under his definition, i.e. by one of his machines, is equivalent to Church's thesis by Theorem XXX.&quot;<extension extension_name='ref' name="Kleene 1952 376"></extension></listitem></list><heading level='3'>Later developments</heading><paragraph>An attempt to understand the notion of &quot;effective computability&quot; better led<space/><link><target>Robin Gandy</target></link><space/>(Turing's student and friend) in 1980 to analyze<space/><italics>machine</italics><space/>computation (as opposed to human-computation acted out by a Turing machine). Gandy's curiosity about, and analysis of, &quot;<link><target>cellular automata</target></link>&quot;, &quot;<link><target>Conway's game of life</target></link>&quot;, &quot;parallelism&quot; and &quot;crystalline automata&quot; led him to propose four &quot;principles (or constraints)&amp;nbsp;... which it is argued, any machine must satisfy.&quot;<extension extension_name='ref'>Gandy 1980 in Barwise 1980:123ff)</extension><space/>His most-important fourth, &quot;the principle of causality&quot; is based on the &quot;finite velocity of propagation of effects and signals; contemporary physics rejects the possibility of instantaneous action at a distance.&quot;<extension extension_name='ref'>Gandy 1980 in Barwise 1980:135</extension><space/>From these principles and some additional constraints(1a) a lower bound on the linear dimensions of any of the parts, (1b) an upper bound on speed of propagation (the velocity of light), (2) discrete progress of the machine, and (3) deterministic behaviorhe produces a theorem that &quot;What can be calculated by a device satisfying principles IIV is computable.<extension extension_name='ref'>Gandy 1980 in Barwise:126</extension><space/>&quot;.</paragraph><paragraph>In the late 1990s<space/><link><target>Wilfried Sieg</target></link><space/>analyzed Turing's and Gandy's notions of &quot;effective calculability&quot; with the intent of &quot;sharpening the informal notion, formulating its general features axiomatically, and investigating the axiomatic framework&quot;.<extension extension_name='ref'>(Sieg 19989 in SiegSomnerTalcott 2002:390ff; also Sieg 1997:154ff)</extension><space/>In his 1997 and 2002 work Sieg presents a series of constraints on the behavior of a<space/><italics>computor</italics>&quot;a human computing agent who proceeds mechanically&quot;. These constraints reduce to:</paragraph><list type='bullet'><listitem>&quot;(B.1) (Boundedness)<space/><italics>There is a fixed bound on the number of symbolic configurations a computor can immediately recognize.</italics></listitem><listitem>&quot;(B.2) (Boundedness)<space/><italics>There is a fixed bound on the number of internal states a computor can be in.</italics></listitem><listitem>&quot;(L.1) (Locality)<space/><italics>A computor can change only elements of an observed symbolic configuration.</italics></listitem><listitem>&quot;(L.2) (Locality)<space/><italics>A computor can shift attention from one symbolic configuration to another one, but the new observed configurations must be within a bounded distance of the immediately previously observed configuration.</italics></listitem><listitem>&quot;(D) (Determinacy)<space/><italics>The immediately recognizable (sub-)configuration determines uniquely the next computation step (and id [instantaneous description] )</italics>&quot;; stated another way: &quot;''A computor's internal state together with the observed configuration fixes uniquely the next computation step and the next internal state.&quot;<extension extension_name='ref'>In a footnote Sieg breaks Post's 1936 (B) into (B.1) and (B.2) and (L) into (L.1) and (L.2) and describes (D) differently. With respect to his proposed<space/><link><target>Gandy machine</target></link><space/>he later adds LC.1, LC.2, GA.1 and GA.2. These are complicated; see Sieg 19989 in SiegSomnerTalcott 2002:390ff.</extension></listitem></list><paragraph>The matter remains in active discussion within the academic community.<extension extension_name='ref'>A collection of papers can be found at<space/><italics>Church's Thesis after 70 Years</italics><space/>edited by AdamOlszewski et al. 2006. Also a review of this collection by Peter Smith (July 11, 2007)<space/><italics>Church's Thesis after 70 Years</italics><space/>at http://www.logicmatters.net/resources/pdfs/CTT.pdf</extension><extension extension_name='ref'>See also<space/><template><target>cite web</target><arg name="url"><space/>http://www.turing.org.uk/publications/ct70.pdf<space/></arg><arg name="title"><space/>Did Church and Turing Have a Thesis about Machines?<space/></arg><arg name="last"><space/>Hodges<space/></arg><arg name="first"><space/>Andrew<space/></arg><arg name="date"><space/>2005<space/></arg><arg name="accessdate"><space/>July 27, 2014<space/></arg><arg name="archiveurl"><space/>http://www.webcitation.org/6RNqzzUDI<space/></arg><arg name="archivedate"><space/>July 27, 2014<space/></arg><arg name="deadurl"><space/>no<space/></arg></template></extension></paragraph><heading level='3'>The thesis as a definition</heading><paragraph>The thesis can be viewed as nothing but an ordinary mathematical definition. Comments by Gdel on the subject suggest this view, e.g. &quot;the correct definition of mechanical computability was established beyond any doubt by Turing&quot;.<extension extension_name='ref'>Gdel, K. [193?], &quot;Undecidable Diophantine Propositions&quot;, in Collected Works, III, p. 168.</extension><space/>The case for viewing the thesis as nothing more than a definition is made explicitly by<space/><link><target>Robert I. Soare</target></link><space/>in<extension extension_name='ref'>R. I. Soare, 1996, Computability and Recursion, Bulletin of Symbolic Logic v. 2 pp. 284321.</extension><space/>where it is also argued that Turing's definition of computability is no less likely to be correct than the epsilon-delta definition of a<space/><link><target>continuous function</target></link>.</paragraph><heading level='2'>Success of the thesis</heading><paragraph>Other formalisms (besides recursion, the<space/><link><target>Lambda calculus</target><part>-calculus</part></link>, and the<space/><link><target>Turing machine</target></link>) have been proposed for describing effective calculability/computability.<space/><link><target>Stephen Cole Kleene</target><part>Stephen Kleene</part></link><space/>(1952) adds to the list the functions &quot;<italics>reckonable</italics><space/>in the system S<xhtml:sub>1</xhtml:sub>&quot; of<space/><link><target>Kurt Gdel</target></link><space/>1936, and<space/><link><target>Emil Post</target></link>'s (1943, 1946) &quot;<italics>canonical</italics><space/>[also called<space/><italics>normal</italics>]<space/><italics>systems</italics>&quot;.<extension extension_name='ref'>Kleene 1952:320</extension><space/>In the 1950s<space/><link><target>Hao Wang (academic)</target><part>Hao Wang</part></link><space/>and<space/><link><target>Martin Davis</target></link><space/>greatly simplified the one-tape Turing-machine model (see<space/><link><target>PostTuring machine</target></link>).<space/><link><target>Marvin Minsky</target></link><space/>expanded the model to two or more tapes and greatly simplified the tapes into &quot;up-down counters&quot;, which Melzak and<space/><link><target>Joachim Lambek</target><part>Lambek</part></link><space/>further evolved into what is now known as the<space/><link><target>counter machine</target></link><space/>model. In the late 1960s and early 1970s researchers expanded the counter machine model into the<space/><link><target>register machine</target></link>, a close cousin to the modern notion of the<space/><link><target>computer</target></link>. Other models include<space/><link><target>combinatory logic</target></link><space/>and<space/><link><target>Markov algorithm</target><trail>s</trail></link>. Gurevich adds the<space/><link><target>pointer machine</target></link><space/>model of Kolmogorov and Uspensky (1953, 1958): &quot;...&amp;nbsp;they just wanted to&amp;nbsp;... convince themselves that there is no way to extend the notion of computable function.&quot;<extension extension_name='ref'>Gurevich 1988:2</extension></paragraph><paragraph>All these contributions involve proofs that the models are computationally equivalent to the Turing machine; such models are said to be<space/><link><target>Turing complete</target></link>. Because all these different attempts at formalizing the concept of &quot;effective calculability/computability&quot; have yielded equivalent results, it is now generally assumed that the ChurchTuring thesis is correct. In fact, Gdel (1936) proposed something stronger than this; he observed that there was something &quot;absolute&quot; about the concept of &quot;reckonable in S<xhtml:sub>1</xhtml:sub>&quot;:</paragraph><list type='ident'><listitem>&quot;It may also be shown that a function which is computable ['reckonable'] in one of the systems S<xhtml:sub>i</xhtml:sub>, or even in a system of transfinite type, is already computable [reckonable] in S<xhtml:sub>1</xhtml:sub>. Thus the concept 'computable' ['reckonable'] is in a certain definite sense 'absolute', while practically all other familiar metamathematical concepts (e.g. provable, definable, etc.) depend quite essentially on the system to which they are defined&quot;<extension extension_name='ref'>translation of Gdel (1936) by Davis in<space/><italics>The Undecidable</italics><space/>p. 83, differing in the use of the word 'reckonable' in the translation in Kleene (1952) p. 321</extension></listitem></list><preblock><preline></preline></preblock><heading level='2'>Informal usage in proofs</heading><paragraph>Proofs in computability theory often invoke<extension extension_name='ref'>Horsten in Olszewski 2006:256</extension><space/>the ChurchTuring thesis in an informal way to establish the computability of functions while avoiding the (often very long) details which would be involved in a rigorous, formal proof. To establish that a function is computable by Turing machine, it is usually considered sufficient to give an informal English description of how the function can be effectively computed, and then conclude &quot;By the ChurchTuring thesis&quot; that the function is Turing computable (equivalently partial recursive).</paragraph><paragraph>Dirk van Dalen (in Gabbay 2001:284<extension extension_name='ref'>Gabbay 2001:284</extension>) gives the following example for the sake of illustrating this informal use of the ChurchTuring thesis:</paragraph><list type='ident'><listitem>EXAMPLE: Each infinite<space/><link><target>recursively enumerable</target><part>RE</part></link><space/>set contains an infinite recursive set.</listitem></list><list type='ident'><listitem>Proof: Let A be infinite RE. We list the elements of A effectively, n<xhtml:sub>0</xhtml:sub>, n<xhtml:sub>1</xhtml:sub>, n<xhtml:sub>2</xhtml:sub>, n<xhtml:sub>3</xhtml:sub>, ...</listitem><listitem>From this list we extract an increasing sublist: put m<xhtml:sub>0</xhtml:sub>=n<xhtml:sub>0</xhtml:sub>, after finitely many steps we find an n<xhtml:sub>k</xhtml:sub><space/>such that n<xhtml:sub>k</xhtml:sub><space/>&gt; m<xhtml:sub>0</xhtml:sub>, put m<xhtml:sub>1</xhtml:sub>=n<xhtml:sub>k</xhtml:sub>. We repeat this procedure to find m<xhtml:sub>2</xhtml:sub><space/>&gt; m<xhtml:sub>1</xhtml:sub>, etc. this yields an effective listing of the subset B={m<xhtml:sub>0</xhtml:sub>,m<xhtml:sub>1</xhtml:sub>,m<xhtml:sub>2</xhtml:sub>,...} of A, with the property m<xhtml:sub>i</xhtml:sub><space/>&lt; m<xhtml:sub>i+1</xhtml:sub>.</listitem><listitem><italics>Claim</italics>. B is decidable. For, in order to test k in B we must check if k=m<xhtml:sub>i</xhtml:sub><space/>for some i. Since the sequence of m<xhtml:sub>i</xhtml:sub>'s is increasing we have to produce at most k+1 elements of the list and compare them with k. If none of them is equal to k, then k not in B. Since this test is effective, B is decidable and,<space/><bold>by Church's thesis</bold>, recursive.</listitem></list><paragraph>(Emphasis added). In order to make the above example completely rigorous, one would have to carefully construct a Turing Machine, or -function, or carefully invoke recursion axioms, or at best, cleverly invoke various theorems of computability theory. But because the computability theorist believes that Turing computability correctly captures what can be computed effectively, and because an effective procedure is spelled out in English for deciding the set B, the computability theorist accepts this as proof that the set is indeed recursive.</paragraph><paragraph>As a rule of thumb, the ChurchTuring thesis should only be invoked to simplify proofs in cases where the writer would be capable of, and expects the readers also to be capable of, easily (but not necessarily without tedium) producing a rigorous proof if one were demanded.</paragraph><heading level='2'>Variations</heading><paragraph>The success of the ChurchTuring thesis prompted variations of the thesis to be proposed. For example, the<space/><bold>Physical ChurchTuring thesis</bold><space/>(PCTT) states:</paragraph><list type='ident'><listitem><list type='ident'><listitem>&quot;All physically computable functions are Turing-computable&quot;<extension extension_name='ref'><link><target>Gualtiero Piccinini</target><part>Piccinini</part></link><space/>2007:101<space/><link type='external' href='http://www.umsl.edu/~piccininig/Computationalism_Church-Turing_Thesis_Church-Turing_Fallacy.pdf'>&quot;Computationalism, the ChurchTuring Thesis, and the ChurchTuring Fallacy&quot;</link>.<space/><template><target>doi</target><arg>10.1007/s11229-005-0194-z</arg></template>. in Synthese (2007) 154:97120.</extension></listitem></list></listitem></list><paragraph>The ChurchTuring thesis says nothing about the efficiency with which one model of computation can simulate another. It has been proved for instance that a (multi-tape)<space/><link><target>universal Turing machine</target></link><space/>only suffers a logarithmic slowdown factor in simulating any Turing machine.<extension extension_name='ref'>Arora, Sanjeev; Barak, Boaz,<space/><link type='external' href='http://www.cs.princeton.edu/theory/complexity/'>&quot;Complexity Theory: A Modern Approach&quot;</link>, Cambridge University Press, 2009, ISBN 978-0-521-42426-4, section 1.4, &quot;Machines as strings and the universal Turing machine&quot; and 1.7, &quot;Proof of theorem 1.9&quot;</extension><space/>No such result has been proved in general for an arbitrary but<space/><italics>reasonable</italics><space/>model of computation. A variation of the ChurchTuring thesis that addresses this issue is the<space/><bold>Feasibility Thesis</bold><extension extension_name='ref'>http://www.claymath.org/millennium/P_vs_NP/Official_Problem_Description.pdf</extension><space/>or<space/><bold>(Classical) Complexity-Theoretic ChurchTuring Thesis</bold><space/>(SCTT), which is not due to Church or Turing, but rather was realized gradually in the development of<space/><link><target>Computational complexity theory</target><part>complexity theory</part></link>. It states:<extension extension_name='ref' name="kaye">Phillip Kaye, Raymond Laflamme, Michele Mosca,<space/><italics>An introduction to quantum computing</italics>, Oxford University Press, 2007, ISBN 0-19-857049-X, pp. 56</extension></paragraph><list type='ident'><listitem>&quot;<italics>A<space/><link><target>probabilistic Turing machine</target></link><space/>can efficiently simulate any realistic model of computation.</italics>&quot;</listitem></list><paragraph>The word 'efficiently' here means up to<space/><link><target>polynomial-time reduction</target><trail>s</trail></link>. This thesis was originally called<space/><italics>Computational Complexity-Theoretic ChurchTuring Thesis</italics><space/>by Ethan Bernstein and<space/><link><target>Umesh Vazirani</target></link><space/>(1997). The Complexity-Theoretic ChurchTuring Thesis, then, posits that all 'reasonable' models of computation yield the same class of problems that can be computed in polynomial time. Assuming the conjecture that probabilistic polynomial time (<link><target>Bounded-error probabilistic polynomial</target><part>BPP</part></link>) equals deterministic polynomial time (<link><target>P (complexity)</target><part>P</part></link>), the word 'probabilistic' is optional in the Complexity-Theoretic ChurchTuring Thesis. A similar thesis, called the<space/><italics>Invariance Thesis</italics>, was introduced by Cees F. Slot and Peter van Emde Boas. It states:<space/><italics>&quot;Reasonable&quot; machines can simulate each other within a polynomially bounded overhead in time and a constant-factor overhead in space</italics>.<extension extension_name='ref'>Peter van Emde Boas's,<space/><italics>Machine Models and Simulations</italics>, in<space/><italics>Handbook of Theoretical Computer Science A</italics>, Elsevier, 1990, p. 5</extension><space/>The thesis originally appeared in a paper at<space/><link><target>STOC</target></link>'84, which was the first paper to show that polynomial-time overhead and constant-space overhead could be<space/><italics>simultaneously</italics><space/>achieved for a simulation of a<space/><link><target>Random Access Machine</target></link><space/>on a Turing machine.<extension extension_name='ref'>C. Slot, P. van Emde Boas,<space/><italics>On tape versus core: an application of space efficient perfect hash functions to the invariance of space</italics>,<space/><link><target>STOC</target></link>, December 1984</extension></paragraph><paragraph>If<space/><link><target>BQP</target></link><space/>is shown to be a strict superset of<space/><link><target>Bounded-error probabilistic polynomial</target><part>BPP</part></link>, it would invalidate the Complexity-Theoretic ChurchTuring Thesis. In other words, there would be efficient<space/><link><target>quantum algorithms</target></link><space/>that perform tasks that do not have efficient<space/><link><target>probabilistic algorithms</target></link>. This would not however invalidate the original ChurchTuring thesis, since a quantum computer can always be simulated by a Turing machine, but it would invalidate the classical Complexity-Theoretic ChurchTuring thesis for efficiency reasons. Consequently, the<space/><bold>Quantum Complexity-Theoretic ChurchTuring thesis</bold><space/>states:<extension extension_name='ref' name="kaye"></extension></paragraph><list type='ident'><listitem><italics>&quot;A<space/><link><target>quantum Turing machine</target></link><space/>can efficiently simulate any realistic model of computation.&quot;</italics></listitem></list><paragraph>Eugene Eberbach and Peter Wegner<extension extension_name='ref'>Eberbach and Wegner, 2003</extension><space/>claim that the ChurchTuring thesis is sometimes interpreted too broadly,stating &quot;the broader assertion that algorithms precisely capturewhat can be computed is invalid&quot;. They claim that forms of computation not captured by the thesis are relevant today,terms which they call<space/><link><target>hypercomputation</target><part>super-Turing computation</part></link>.</paragraph><heading level='2'>Philosophical implications</heading><paragraph>Philosophers have interpreted the ChurchTuring thesis as having implications for the<space/><link><target>philosophy of mind</target></link>; however, many of the philosophical interpretations of the Thesis involve basic misunderstandings of the thesis statement.<extension extension_name='ref'>In particular, see the numerous examples (of errors, of misappropriation of the thesis) at the entry in the Stanford Encyclopedia of Philosophy. For a good place to encounter original papers see David J. Chalmers, ed. 2002,<space/><italics>Philosophy of Mind: Classical and Contemporary Readings</italics>, Oxford University Press, New York.</extension><space/><link><target>Jack Copeland</target><part>B. Jack Copeland</part></link><space/>states that it's an open empirical question whether there are actual deterministic physical processes that, in the long run, elude simulation by a Turing machine; furthermore, he states that it is an open empirical question whether any such processes are involved in the working of the human brain.<extension extension_name='ref'>B. Jack Copeland,<space/><italics>Computation</italics><space/>in Luciano Floridi (ed.),<space/><italics>The Blackwell guide to the philosophy of computing and information</italics>, Wiley-Blackwell, 2004, ISBN 0-631-22919-1, p. 15</extension><space/>There are also some important open questions which cover the relationship between the ChurchTuring thesis and physics, and the possibility of<space/><link><target>hypercomputation</target></link>. When applied to physics, the thesis has several possible meanings:</paragraph><list type='numbered'><listitem>The universe is equivalent to a Turing machine; thus, computing<space/><link><target>recursion (computer science)</target><part>non-recursive functions</part></link><space/>is physically impossible. This has been termed the Strong ChurchTuring thesis and is a foundation of<space/><link><target>digital physics</target></link>.</listitem><listitem>The universe is not equivalent to a Turing machine (i.e., the laws of physics are not Turing-computable), but incomputable physical events are not &quot;harnessable&quot; for the construction of a<space/><link><target>hypercomputation</target><part>hypercomputer</part></link>. For example, a universe in which physics involves<space/><link><target>real numbers</target></link>, as opposed to<space/><link><target>computable number</target><part>computable real</part><trail>s</trail></link>, might fall into this category. The assumption that incomputable physical events are not &quot;harnessable&quot; has been challenged, however,<extension extension_name='ref'>Michael Fiske, &quot;Turing Incomputable Computation&quot; in Turing-100 proceedings, The Alan Turing Centenary. http://www.easychair.org/publications/?page=1303694832.</extension><space/>by a proposed computational process that uses quantum randomness together with a computational machine to hide the computational steps of a Universal Turing Machine with Turing-incomputable firing patterns.</listitem><listitem>The universe is a<space/><link><target>hypercomputation</target><part>hypercomputer</part></link>, and it is possible to build physical devices to harness this property and calculate non-recursive functions. For example, it is an open question whether all<space/><link><target>quantum mechanics</target><part>quantum mechanical</part></link><space/>events are Turing-computable, although it is known that rigorous models such as quantum Turing machines are equivalent to deterministic Turing machines. (They are not necessarily efficiently equivalent; see above.)<space/><link><target>John Lucas (philosopher)</target><part>John Lucas</part></link><space/>and<space/><link><target>Roger Penrose</target></link><extension extension_name='ref'>cf his subchapter &quot;The ChurchTuring Thesis&quot; (p. 4749) in his chapter &quot;Algorithms and Turing machines&quot; in his 1990 (2nd edition)<space/><italics>Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics</italics>, Oxford University Press, Oxford UK. Also his a final chapter titled &quot;Where lies the physics of mind?&quot; where, in a subsection he describes &quot;The non-algorithmic nature of mathematical insight&quot; (p. 4168).</extension><space/>have suggested that the human mind might be the result of some kind of quantum-mechanically enhanced, &quot;non-algorithmic&quot; computation, although there is no scientific evidence for this proposal.</listitem></list><paragraph>There are many other technical possibilities which fall outside or between these three categories, but these serve to illustrate the range of the concept.</paragraph><heading level='2'>Non-computable functions</heading><paragraph>One can formally define functions that are not computable. A well-known example of such a function is the<space/><link><target>Busy Beaver</target></link><space/>function. This function takes an input<space/><italics>n</italics><space/>and returns the largest number of symbols that a<space/><link><target>Turing machine</target></link><space/>with<space/><italics>n</italics><space/>states can print before halting, when run with no input. Finding an upper bound on the busy beaver function is equivalent to solving the<space/><link><target>halting problem</target></link>, a problem known to be unsolvable by Turing machines. Since the busy beaver function cannot be computed by Turing machines, the ChurchTuring thesis states that this function cannot be effectively computed by any method.</paragraph><paragraph>Several computational models allow for the computation of (Church-Turing) non-computable functions. These are known as<link><target>hypercomputation</target><part>hypercomputers</part></link>.Mark Burgin<extension extension_name='ref'><italics>Super-Recursive Algorithms (Monographs in Computer Science)</italics>, Springer, 2005. ISBN 0-387-95569-0</extension><space/>argues that<space/><link><target>super-recursive algorithm</target><trail>s</trail></link><space/>such as inductive Turing machines disprove the ChurchTuring thesis. His argument relies on a definition of algorithm broader than the ordinary one, so that non-computable functions obtained from some inductive Turing machines are called computable. This interpretation of the ChurchTuring thesis differs from the interpretation commonly accepted in computability theory, discussed above. The argument that super-recursive algorithms are indeed algorithms in the sense of the ChurchTuring thesis has not found broad acceptance within the computability research community.<template><target>Citation needed</target><arg name="date">September 2011</arg></template></paragraph><paragraph>Dr Selim G Akl of Queen's University (School of Computing) contests that the ChurchTuring thesis is provably incorrect based on a range of functions that are computable but generally considered to be non-computable.<extension extension_name='ref'>http://research.cs.queensu.ca/Parallel/projects.html#Current</extension></paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Abstract machine</target></link></listitem><listitem><link><target>Church's thesis (constructive mathematics)</target><part>Church's thesis in constructive mathematics</part></link></listitem><listitem><link><target>Computability logic</target></link></listitem><listitem><link><target>Computability theory (computation)</target><part>Computability theory</part></link></listitem><listitem><link><target>Decidability (logic)</target><part>Decidability</part></link></listitem><listitem><link><target>History of the ChurchTuring thesis</target></link></listitem><listitem><link><target>Hypercomputer</target></link></listitem><listitem><link><target>Model of computation</target></link></listitem><listitem><link><target>Super-recursive algorithm</target></link></listitem><listitem><link><target>ChurchTuringDeutsch principle</target></link>, which states that every<space/><link><target>physical process</target></link><space/>can be simulated by a universal computing device</listitem><listitem><link><target>stochastics</target></link></listitem><listitem><link><target>Monte Carlo method</target></link></listitem></list><heading level='2'>Footnotes</heading><paragraph><template><target>reflist</target><arg>2</arg></template></paragraph><heading level='2'>References</heading><list type='bullet'><listitem>Barwise, Jon, H. J. Keisler, and K. Kunen, Editors, 1980, The Kleene Symposium, 426 pages, North-Holland Publishing Company, Amsterdam, ISBN 0-444-85345-6</listitem><listitem><template><target>cite journal</target><arg name="last">Ben-Amram</arg><arg name="first">A.M.</arg><arg name="year">2005</arg><arg name="title">The Church-Turing Thesis and its Look-Alikes
</arg><arg name="journal">[[SIGACT News]]</arg><arg name="volume">36</arg><arg name="issue">3</arg><arg name="pages">113â116</arg><arg name="doi">10.1145/1086649.1086651</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Bernstein</arg><arg name="first">E</arg><arg name="author2">Vazirani, U.</arg><arg name="year">1997</arg><arg name="title">Quantum complexity theory</arg><arg name="journal">[[SIAM Journal on Computing]]</arg><arg name="volume">26</arg><arg name="issue">5</arg><arg name="pages">1411â1473</arg><arg name="doi">10.1137/S0097539796300921</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Blass</arg><arg name="first">Andreas</arg><arg name="authorlink">Andreas Blass</arg><arg name="author2">[[Yuri Gurevich]]<space/></arg><arg name="year">2003</arg><arg name="title">Algorithms: A Quest for Absolute Definitions</arg><arg name="journal">Bulletin of European Association for Theoretical Computer Science</arg><arg name="issue">81</arg><arg name="url">http://research.microsoft.com/~gurevich/Opera/164.pdf</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Burgin</arg><arg name="first">Mark</arg><arg name="title">Monographs in computer science</arg><arg name="publisher">Springer</arg><arg name="year">2005</arg><arg name="chapter">Super-recursive algorithms</arg><arg name="isbn">0-387-95569-0</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Church</arg><arg name="first">Alonzo</arg><arg name="year">1932</arg><arg name="title">A set of Postulates for the Foundation of Logic</arg><arg name="journal">Annals of Mathematics</arg><arg name="issue">2</arg><arg name="volume">33</arg><arg name="pages">346â366</arg><arg name="jstor">1968337</arg><arg name="doi">10.2307/1968337</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Church</arg><arg name="first">Alonzo</arg><arg name="year">1936</arg><arg name="title">An Unsolvable Problem of Elementary Number Theory</arg><arg name="journal">American Journal of Mathematics</arg><arg name="issue">58</arg><arg name="pages">345â363</arg><arg name="jstor">2371045</arg><arg name="volume">58</arg><arg name="doi">10.2307/2371045</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Church</arg><arg name="first">Alonzo</arg><arg name="year">1936</arg><arg name="title">A Note on the Entscheidungsproblem</arg><arg name="journal">Journal of Symbolic Logic</arg><arg name="issue">1</arg><arg name="pages">40â41</arg><arg name="doi">10.2307/2269326<space/></arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Church</arg><arg name="first">Alonzo</arg><arg name="year">1937</arg><arg name="title">Review: A. M. Turing, On Computable Numbers, with an Application to the Entscheidungsproblem</arg><arg name="journal">Journal of Symbolic Logic</arg><arg name="issue">2</arg><arg name="pages">42â43</arg><arg name="doi">10.2307/2268810<space/></arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Church</arg><arg name="first">Alonzo</arg><arg name="title">The Calculi of Lambda-Conversion</arg><arg name="publisher">Princeton University Press</arg><arg name="location">Princeton</arg><arg name="year">1941</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Cooper</arg><arg name="first">S. B.</arg><arg name="author2">Odifreddi, P.</arg><arg name="title">Computability and Models: Perspectives East and West</arg><arg name="editor">S. B. Cooper & S. S. Goncharov</arg><arg name="publisher">Kluwer Academic/Plenum Publishers</arg><arg name="year">2003</arg><arg name="pages">137â160</arg><arg name="chapter">Incomputability in Nature</arg></template></listitem><listitem><template><target>cite book</target><arg name="title">The Undecidable, Basic Papers on Undecidable Propositions, Unsolvable Problems And Computable Functions</arg><arg name="editor">[[Martin Davis|Davis, Martin]]</arg><arg name="publisher">Raven Press</arg><arg name="location">New York</arg><arg name="year">1965</arg></template><space/>Includes original papers by Gdel, Church, Turing, Rosser, Kleene, and Post mentioned in this section.</listitem><listitem><template><target>cite journal</target><arg name="author">Eberbach, E.</arg><arg name="author2">Wegner, P.</arg><arg name="date">October 2003</arg><arg name="title">Beyond Turing Machines</arg><arg name="journal">Bulletin of the European Association for Theoretical Computer Science</arg><arg name="issue">81</arg><arg name="pages">279â304</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Gabbay</arg><arg name="first">D.M.</arg><arg name="year">2001</arg><arg name="title">Handbook of Philosophical Logic</arg><arg name="edition">2nd</arg><arg name="volume">1</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Gandy</arg><arg name="first">Robin</arg><arg name="title">The Kleene Symposium</arg><arg name="editor">H.J. Barwise, H.J. Keisler, and K. Kunen</arg><arg name="publisher">North-Holland Publishing Company</arg><arg name="year">1980</arg><arg name="pages">123â148</arg><arg name="chapter">Church's Thesis and the Principles for Mechanisms</arg><arg name="authorlink">Robin Gandy</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Gandy</arg><arg name="first">Robin</arg><arg name="title">The universal Turing Machine: A Half-Century Survey</arg><arg name="editor">[[Rolf Herken]]</arg><arg name="publisher">Wien SpringerâVerlag</arg><arg name="location">New York</arg><arg name="date">1994â5</arg><arg name="pages">51ff</arg><arg name="isbn">3-211-82637-8</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">GÃ¶del</arg><arg name="first">Kurt</arg><arg name="others">Kleene and Rosser (lecture note-takers); Institute for Advanced Study (lecture sponsor)</arg><arg name="title">The Undecidable</arg><arg name="editor">Davis, M.</arg><arg name="publisher">Raven Press</arg><arg name="location">New York</arg><arg name="year">1965</arg><arg name="chapter">On Undecidable Propositions of Formal Mathematical Systems</arg><arg name="origyear">1934</arg></template></listitem><listitem><template><target>cite journal</target><arg name="first">Kurt</arg><arg name="last">GÃ¶del</arg><arg name="title">On The Length of Proofs</arg><arg name="year">1936</arg><arg name="journal">Ergenbnisse eines mathematishen Kolloquiums</arg><arg name="publisher">Heft</arg><arg name="issue">7</arg><arg name="pages">23â24</arg><arg name="language">German</arg></template><space/>Cited by Kleene (1952) as &quot;ber die Lange von Beweisen&quot;, in<space/><italics>Ergebnisse eines math. Koll</italics>, etc.</listitem><listitem><template><target>cite journal</target><arg name="last">Gurevich</arg><arg name="first">Yuri</arg><arg name="date">June 1988</arg><arg name="title">On Kolmogorov Machines and Related Issues</arg><arg name="journal">Bulletin of European Association for Theoretical Computer Science</arg><arg name="issue">35</arg><arg name="pages">71â82</arg><arg name="authorlink">Yuri Gurevich</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Gurevich</arg><arg name="first">Yuri</arg><arg name="date">July 2000</arg><arg name="title">Sequential Abstract State Machines Capture Sequential Algorithms</arg><arg name="journal">ACM Transactions on Computational Logic</arg><arg name="volume">1</arg><arg name="issue">1</arg><arg name="pages">77â111</arg><arg name="url">http://research.microsoft.com/~gurevich/Opera/141.pdf</arg><arg name="doi">10.1145/343369.343384</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Herbrand</arg><arg name="first">Jacques</arg><arg name="year">1932</arg><arg name="title">Sur la non-contradiction de l'arithmÃ©tique</arg><arg name="journal">Journal fur die reine und angewandte Mathematik</arg><arg name="issue">166</arg><arg name="pages">1â8</arg><arg name="authorlink">Jacques Herbrand</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Hofstadter</arg><arg name="first">Douglas R.</arg><arg name="title">[[GÃ¶del, Escher, Bach: an Eternal Golden Braid]]</arg><arg name="chapter">Chapter XVII: Church, Turing, Tarski, and Others</arg><arg name="authorlink">Douglas Hofstadter</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Kleene</arg><arg name="first">Stephen Cole</arg><arg name="year">1935</arg><arg name="title">A Theory of Positive Integers in Formal Logic</arg><arg name="journal">American Journal of Mathematics</arg><arg name="issue">57</arg><arg name="pages">153â173 & 219â244</arg><arg name="authorlink">Stephen Cole Kleene</arg><arg name="jstor">2372027</arg><arg name="volume">57</arg><arg name="doi">10.2307/2372027</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Kleene</arg><arg name="first">Stephen Cole</arg><arg name="year">1936</arg><arg name="title">Lambda-Definability and Recursiveness</arg><arg name="journal">Duke Mathematical Journal</arg><arg name="issue">2</arg><arg name="pages">340â353</arg><arg name="doi">10.1215/s0012-7094-36-00227-2<space/></arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Kleene</arg><arg name="first">Stephen Cole</arg><arg name="title"><space/>Recursive Predicates and Quantifiers</arg><arg name="journal">American Mathematical Society Transactions</arg><arg name="volume"><space/>54</arg><arg name="issue"><space/>1<space/></arg><arg name="pages">41â73</arg><arg name="year">1943<space/></arg><arg name="doi"><space/>10.2307/1990131</arg><arg name="jstor">1990131</arg><arg name="publisher">Transactions of the American Mathematical Society, Vol. 53, No. 1</arg></template><space/>Reprinted in<space/><italics>The Undecidable</italics>, p.&amp;nbsp;255ff. Kleene refined his definition of &quot;general recursion&quot; and proceeded in his chapter &quot;12. Algorithmic theories&quot; to posit &quot;Thesis I&quot; (p.&amp;nbsp;274); he would later repeat this thesis (in Kleene 1952:300) and name it &quot;Church's Thesis&quot; (Kleene 1952:317) (i.e., the<space/><link><target>Church thesis</target></link>).</listitem><listitem><template><target>cite book</target><arg name="last">Kleene</arg><arg name="first">Stephen Cole</arg><arg name="title">Introduction to Metamathematics</arg><arg name="publisher">North-Holland</arg><arg name="year">1952</arg><arg name="oclc">523942</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Knuth</arg><arg name="first">Donald</arg><arg name="title">The Art of Computer Programming</arg><arg name="publisher">AddisonâWesley</arg><arg name="year">1973</arg><arg name="edition">2nd</arg><arg name="volume">1/Fundamental Algorithms</arg><arg name="authorlink">Donald Knuth</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Kugel</arg><arg name="first">Peter</arg><arg name="date">November 2005</arg><arg name="title">Communications of the ACM</arg><arg name="journal">It's time to think outside the computational box</arg><arg name="volume">48</arg><arg name="issue">11</arg></template></listitem><listitem><template><target>cite book</target><arg name="author">Lewis, H.R.</arg><arg name="authorlink">Harry R. Lewis</arg><arg name="author2">Papadimitriou, C.H.<space/></arg><arg name="authorlink2">Christos H. Papadimitriou<space/></arg><arg name="title">Elements of the Theory of Computation</arg><arg name="publisher">Prentice-Hall</arg><arg name="location">Upper Saddle River, NJ, USA</arg><arg name="year">1998</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Manna</arg><arg name="first">Zohar</arg><arg name="title">Mathematical Theory of Computation</arg><arg name="location">Dover</arg><arg name="year">1974</arg><arg name="isbn">978-0-486-43238-0</arg><arg name="origyear">2003</arg><arg name="authorlink">Zohar Manna</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Markov</arg><arg name="first">A.A.</arg><arg name="year">1960</arg><arg name="title">The Theory of Algorithms</arg><arg name="journal">American Mathematical Society Translations</arg><arg name="volume">2</arg><arg name="issue">15</arg><arg name="pages">1â14</arg><arg name="origyear">1954</arg><arg name="authorlink">Andrey Markov, Jr.</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Olszewski</arg><arg name="first">Adam</arg><arg name="year">2006</arg><arg name="title">Church's Thesis After 70 Years</arg></template></listitem><listitem><template><target>cite book</target><arg name="author">Pour-El, M.B.</arg><arg name="author2">Richards, J.I.</arg><arg name="title">Computability in Analysis and Physics</arg><arg name="publisher">[[Springer Verlag]]</arg><arg name="year">1989</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Rosser</arg><arg name="first">J. B.</arg><arg name="year">1939</arg><arg name="title">An Informal Exposition of Proofs of Godel's Theorem and Church's Theorem</arg><arg name="journal">The Journal of Symbolic Logic</arg><arg name="volume">4</arg><arg name="pages">53â60</arg><arg name="authorlink">J. B. Rosser</arg><arg name="doi">10.2307/2269059</arg><arg name="jstor">2269059</arg><arg name="issue">2</arg><arg name="publisher">The Journal of Symbolic Logic, Vol. 4, No. 2</arg></template></listitem><listitem>Sieg, Wilfried, Richard Sommer, and Carolyn Talcott (eds.), 2002, Reflections on the Foundations of Mathematics: Essays in Honor of Solomon Feferman, Lecture Notes in Logic 15, 444 pages, A K Peters, Ltd., ISBN 1-56881-169-1</listitem><listitem><template><target>cite journal</target><arg name="last">Soare</arg><arg name="first">Robert</arg><arg name="year">1996</arg><arg name="title">Computability and Recursion</arg><arg name="journal">Bulletin of Symbolic Logic</arg><arg name="issue">2</arg><arg name="pages">284â321</arg><arg name="authorlink">Robert Soare</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Syropoulos</arg><arg name="first">Apostolos</arg><arg name="year">2008</arg><arg name="title">Hypercomputation: Computing Beyond the ChurchâTuring Barrier</arg><arg name="publisher">Springer</arg><arg name="isbn">978-0-387-30886-9</arg></template></listitem><listitem><template><target>Citation</target><arg name="last"><space/>Turing<space/></arg><arg name="first"><space/>A. M.<space/></arg><arg name="author-link"><space/>Alan Turing<space/></arg><arg name="year"><space/>1937<space/></arg><arg name="title"><space/>On Computable Numbers, with an Application to the Entscheidungsproblem<space/></arg><arg name="origyear"><space/>Delivered to the Society November 1936<space/></arg><arg name="periodical"><space/>Proceedings of the London Mathematical Society<space/></arg><arg name="series"><space/>2<space/></arg><arg name="volume"><space/>42<space/></arg><arg name="pages"><space/>230â65<space/></arg><arg name="doi"><space/>10.1112/plms/s2-42.1.230<space/></arg><arg name="url"><space/>http://www.comlab.ox.ac.uk/activities/ieg/e-library/sources/tp2-ie.pdf<space/></arg><arg name="ref"><space/>harv</arg></template><space/>and<space/><template><target>Cite news</target><arg name="last"><space/>Turing<space/></arg><arg name="first"><space/>A.M.<space/></arg><arg name="publication-date"><space/>1937<space/></arg><arg name="title"><space/>On Computable Numbers, with an Application to the Entscheidungsproblem: A correction<space/></arg><arg name="periodical"><space/>Proceedings of the London Mathematical Society<space/></arg><arg name="series"><space/>2<space/></arg><arg name="volume"><space/>43<space/></arg><arg name="pages"><space/>544â6<space/></arg><arg name="doi"><space/>10.1112/plms/s2-43.6.544<space/></arg><arg name="year"><space/>1938<space/></arg></template><space/>(See also: Davis 1965:115ff)</listitem></list><heading level='2'>External links</heading><list type='bullet'><listitem><template><target>sep entry</target><arg>church-turing</arg><arg>The ChurchâTuring Thesis</arg><arg>[[Jack Copeland|B. Jack Copeland]]</arg></template>.</listitem><listitem><link type='external' href='http://plato.stanford.edu/entries/computation-physicalsystems/'>Computation in Physical Systems</link><space/>&amp;mdash;a comprehensive philosophical treatment of relevant issues</listitem><listitem><link type='external' href='https://egtheory.wordpress.com/2014/09/11/transcendental-idealism-and-posts-variant-of-the-church-turing-thesis/'>Transcendental idealism and Posts variant of the Church-Turing thesis</link><space/>&amp;mdash;EGTheory blog</listitem></list><paragraph><template><target>Mathematical logic</target></template><template><target>Metalogic</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Church-Turing Thesis</target></template><link><target>Category:Computability theory</target></link><link><target>Category:Alan Turing</target></link><link><target>Category:Theory of computation</target></link><link><target>Category:Philosophy of computer science</target></link></paragraph><paragraph><link><target>lt:Tiuringo maina#Tiuringo tez</target></link></paragraph></article>