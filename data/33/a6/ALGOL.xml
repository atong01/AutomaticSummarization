<article title='ALGOL'><paragraph><template><target>about</target><arg>the programming language family</arg><arg></arg><arg>Algol (disambiguation)</arg></template><template><target>Use dmy dates</target><arg name="date">July 2012</arg></template><template><target>Infobox programming language</target><arg name="name"><space/>ALGOL
</arg><arg name="paradigm"><space/>[[procedural programming|procedural]], [[imperative programming|imperative]], [[structured programming|structured]]
</arg><arg name="year"><space/>1958
</arg><arg name="designer"><space/>[[Friedrich L. Bauer|Bauer]], [[Hermann Bottenbruch|Bottenbruch]], [[Heinz Rutishauser|Rutishauser]], [[Klaus Samelson|Samelson]], [[John Backus|Backus]], [[Charles Katz|Katz]], [[Alan Perlis|Perlis]], [[Joseph Henry Wegstein|Wegstein]], [[Peter Naur|Naur]], [[Bernard Vauquois|Vauquois]], [[Adriaan van Wijngaarden|van Wijngaarden]], [[Michael Woodger|Woodger]], [[Julien Green (computer scientist)|Green]], [[John McCarthy (computer scientist)|McCarthy]]
</arg><arg name="implementations">
</arg><arg name="influenced"><space/>Most subsequent imperative languages (so-called ''ALGOL-like'' languages)<space/><br><space/>e.g. [[Simula]], [[C (programming language)|C]], [[CPL (programming language)|CPL]], [[Pascal (programming language)|Pascal]], [[Ada (programming language)|Ada]]
</arg></template><bold>ALGOL</bold><space/>(short for<space/><bold>ALGO</bold>rithmic<space/><bold>L</bold>anguage)<extension extension_name='ref'>The name of the family is sometimes given in mixed case (<link type='external' href='http://www.masswerk.at/algol60/report.htm'>''Algol 60''</link>), and sometimes in all uppercase (<link type='external' href='http://www.cs.ru.nl/~hubbers/courses/sl1/rr.pdf'>''ALGOL68''</link>). For simplicity this article uses<space/><italics>ALGOL</italics>.</extension><space/>is a family of<space/><link><target>imperative programming</target><part>imperative</part></link><space/>computer<space/><link><target>programming language</target><trail>s</trail></link>, originally developed in the mid-1950s, which greatly influenced many other languages and was the standard method for<space/><link><target>algorithm</target></link><space/>description used by the<space/><link><target>Association for Computing Machinery</target><part>ACM</part></link><space/>in textbooks and academic sources for more than thirty years.<extension extension_name='ref'><link type='external' href='http://calgo.acm.org/'>''Collected Algorithms of the ACM''</link><space/>Compressed archives of the algorithms.<space/><link><target>Association for Computing Machinery</target><part>ACM</part></link>.</extension><space/></paragraph><paragraph>In the sense that most modern languages are &quot;algol-like&quot;,<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.eecs.qmul.ac.uk/~ohearn/Algol/intro.html<space/></arg><arg name="title">Algol-like languages, Introduction<space/></arg><arg name="author1">P. W. O'Hearn<space/></arg><arg name="author2">R. D. Tennent<space/></arg><arg name="date">September 1996<space/></arg><arg name="accessdate">17 January 2012</arg></template></extension><space/>it was arguably the most successful of the four high-level programming languages with which it was roughly contemporary:<template><target>according to whom?</target><arg name="date">August 2015</arg></template><space/><link><target>Fortran</target></link>,<space/><link><target>Lisp (programming language)</target><part>Lisp</part></link>, and<space/><link><target>COBOL</target></link>. It was designed to avoid some of the perceived problems with<space/><link><target>Fortran</target><part>FORTRAN</part></link><space/>and eventually gave rise to many other programming languages, including<space/><link><target>BCPL</target></link>,<space/><link><target>B (programming language)</target><part>B</part></link>,<space/><link><target>Pascal (programming language)</target><part>Pascal</part></link>,<space/><link><target>PL/I</target></link>,<space/><link><target>Simula</target></link>, and<space/><link><target>C (programming language)</target><part>C</part></link>. ALGOL introduced code blocks and the<space/><xhtml:code>begin</xhtml:code><xhtml:code>end</xhtml:code><space/>pairs for delimiting them. It was also the first language implementing<space/><link><target>nested function</target></link><space/>definitions with<space/><link><target>lexical scope</target></link>. Moreover, it was the first programming language which gave detailed attention to formal language definition and through the<space/><italics><link><target>Algol 60#History</target><part>Algol 60 Report</part></link></italics><space/>introduced<space/><link><target>Backus-Naur Form</target></link>, a principal notation for language design.</paragraph><paragraph>There were three major specifications:</paragraph><list type='bullet'><listitem><link><target>ALGOL 58</target></link><space/>originally proposed to be called<space/><bold>IAL</bold><space/>(for<space/><bold>I</bold>nternational<space/><bold>A</bold>lgebraic<space/><bold>L</bold>anguage).</listitem><listitem><link><target>ALGOL 60</target></link><space/>first implemented as<space/><italics>X1 ALGOL 60</italics><space/>in mid-1960 revised 1963<extension extension_name='ref'><template><target>cite book</target><arg name="title">Report on the Algorithmic Language ALGOL 60
</arg><arg name="location">Copenhagen
</arg><arg name="date">May 1960
</arg><arg name="doi">10.1145/367236.367262
</arg><arg name="issn">0001-0782
</arg><arg name="editor1-first">Peter</arg><arg name="editor1-last">Naur
</arg><arg name="first1">J. W.<space/></arg><arg name="last1">Backus
</arg><arg name="first2">F. L.<space/></arg><arg name="last2">Bauer
</arg><arg name="first3">J.<space/></arg><arg name="last3">Green
</arg><arg name="first4">C.<space/></arg><arg name="last4">Katz
</arg><arg name="first5">J.<space/></arg><arg name="last5">McCarthy
</arg><arg name="first6">A. J.<space/></arg><arg name="last6">Perlis
</arg><arg name="first7">H.<space/></arg><arg name="last7">Rutishauser
</arg><arg name="first8">K.<space/></arg><arg name="last8">Samelson
</arg><arg name="first9">B.<space/></arg><arg name="last9">Vauquois
</arg><arg name="first10">J. H.</arg><arg name="last10">Wegstein
</arg><arg name="first11">A.<space/></arg><arg name="last11">van Wijngaarden
</arg><arg name="first12">M.<space/></arg><arg name="last12">Woodger
</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="title">Revised Report on the Algorithmic Language Algol 60</arg><arg name="year">1963</arg><arg name="url">http://www.masswerk.at/algol60/report.htm</arg><arg name="accessdate">8 June 2007</arg><arg name="archiveurl"><space/>http://web.archive.org/web/20070625171638/http://www.masswerk.at/algol60/report.htm</arg><arg name="archivedate"><space/>25 June 2007<space/></arg><arg name="deadurl"><space/>no</arg></template></extension></listitem><listitem><link><target>ALGOL 68</target></link><space/>revised 1973<extension extension_name='ref' name="a68"><template><target>cite web</target><arg name="title">Revised Report on the Algorithmic Language ALGOL 68</arg><arg name="year">1973</arg><arg name="url">http://www.cs.ru.nl/~hubbers/courses/sl1/rr.pdf</arg><arg name="accessdate">13 September 2014</arg></template></extension><space/>introduced new elements including flexible arrays, slices, parallelism, operator identification, and various extensibility features.</listitem></list><paragraph><link><target>Niklaus Wirth</target></link><space/>based his own<space/><link><target>ALGOL W</target></link><space/>on ALGOL 60 before developing<space/><link><target>Pascal (programming language)</target><part>Pascal</part></link>. Algol-W (for the IBM 360) was based on the proposal for the next generation ALGOL, but the ALGOL 68 committee decided on a design that was more complex and advanced, rather than a cleaned, simplified ALGOL 60. The official ALGOL versions are named after the year they were first published.</paragraph><paragraph>Algol 68 is substantially different from Algol 60 and was not well received, so that in general &quot;Algol&quot; means Algol 60 and dialects thereof. Fragments of ALGOL-like<space/><link><target>programming language syntax</target><part>syntax</part></link><space/>are sometimes still used as<space/><link><target>pseudocode</target></link>.</paragraph><heading level='2'>Important implementations</heading><paragraph>The<space/><link><target>ALGOL 58</target><part>International Algebraic Language</part></link><space/>(IAL) was extremely influential and generally considered the ancestor of most of the modern programming languages (the so-called Algol-like languages). Additionally, in<space/><link><target>computer science</target></link>,<space/><bold>ALGOL object code</bold><space/>was a simple and compact and stack-based<space/><link><target>instruction set</target><part>instruction set architecture</part></link><space/>mainly used in teaching<space/><link><target>compiler</target></link><space/>construction and other high order languages (of which Algol is generally considered the first).</paragraph><heading level='2'>History</heading><paragraph>ALGOL was developed jointly by a committee of European and American computer scientists in a meeting in 1958 at<space/><link><target>ETH Zurich</target></link><space/>(cf.<space/><link><target>ALGOL 58</target></link>). It specified three different syntaxes: a reference syntax, a publication syntax, and an implementation syntax. The different syntaxes permitted it to use different keyword names and conventions for decimal points (commas vs periods) for different languages.</paragraph><paragraph>ALGOL was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard input/output facilities in its description and the lack of interest in the language by large computer vendors other than<space/><link><target>Burroughs Corporation</target></link>. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.</paragraph><paragraph><link><target>John Backus</target></link><space/>developed the<space/><link><target>BackusNaur Form</target><part>Backus normal form</part></link><space/>method of describing programming languages specifically for ALGOL 58. It was revised and expanded by<space/><link><target>Peter Naur</target></link><space/>for ALGOL 60, and at<space/><link><target>Donald Knuth</target></link>'s suggestion renamed<space/><link><target>BackusNaur Form</target></link>.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Knuth<space/></arg><arg name="first">Donald E.<space/></arg><arg name="year">1964<space/></arg><arg name="title">Backus Normal Form vs Backus Naur Form<space/></arg><arg name="journal">Communications of the ACM<space/></arg><arg name="volume">7<space/></arg><arg name="issue">12<space/></arg><arg name="pages">735–736<space/></arg><arg name="doi"><space/>10.1145/355588.365140<space/></arg></template></extension></paragraph><paragraph>Peter Naur: &quot;As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960.&quot;<extension extension_name='ref' name="naur_acm"><link type='external' href='http://awards.acm.org/citation.cfm?id=1024454&amp;amp;srt=all&amp;amp;aw=140&amp;amp;ao=AMTURING&amp;amp;yr=2005'>ACM Award Citation / Peter Naur</link>, 2005</extension></paragraph><paragraph>The following people attended the meeting in Paris (from 1 to 16 January):</paragraph><list type='bullet'><listitem><link><target>Friedrich L. Bauer</target></link>,<space/><link><target>Peter Naur</target></link>,<space/><link><target>Heinz Rutishauser</target></link>,<space/><link><target>Klaus Samelson</target></link>,<space/><link><target>Bernard Vauquois</target></link>,<space/><link><target>Adriaan van Wijngaarden</target></link>, and<space/><link><target>Michael Woodger</target></link><space/>(from Europe)</listitem><listitem><link><target>John Backus</target><part>John W. Backus</part></link>,<space/><link><target>Julien Green (computer scientist)</target><part>Julien Green</part></link>,<space/><link><target>Charles Katz</target></link>,<space/><link><target>John McCarthy (computer scientist)</target><part>John McCarthy</part></link>,<space/><link><target>Alan Perlis</target><part>Alan J. Perlis</part></link>, and<space/><link><target>Joseph Henry Wegstein</target></link><space/>(from the USA).</listitem></list><paragraph>Alan Perlis gave a vivid description of the meeting: &quot;The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent.&quot;</paragraph><paragraph>ALGOL 60 inspired many languages that followed it.<space/><link><target>C. A. R. Hoare</target></link><space/>remarked: &quot;Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors.&quot;<extension extension_name='ref'><link type='external' href='http://www.eecs.umich.edu/~bchandra/courses/papers/Hoare_Hints.pdf'>&quot;Hints on Programming Language Design&quot;</link>, C.A.R. Hoare, December 1973. Page 27. (This statement is sometimes erroneously attributed to<space/><link><target>Edsger W. Dijkstra</target></link>, also involved in implementing the first ALGOL 60<space/><link><target>compiler</target></link>.)</extension><space/>The<space/><link><target>Scheme (programming language)</target><part>Scheme</part></link><space/>programming language, a variant of<space/><link><target>Lisp (programming language)</target><part>Lisp</part></link><space/>that adopted the block structure and lexical scope of ALGOL, also adopted the wording &quot;Revised Report on the Algorithmic Language Scheme&quot; for its standards documents in homage to ALGOL.<extension extension_name='ref' name="r3rs"><template><target>cite web</target><arg name="author">Jonathan Rees and William Clinger (Editors), Hal Abelson, R. K. Dybvig<space/></arg><arg name="title">Revised(3) Report on the Algorithmic Language Scheme, (Dedicated to the Memory of ALGOL 60)<space/></arg><arg name="url">http://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r3rs-html/r3rs_toc.html<space/></arg><arg name="accessdate">20 October 2009</arg><arg name="display-authors">etal</arg></template></extension></paragraph><heading level='3'>Algol and programming language research</heading><paragraph>As<space/><link><target>Peter Landin</target></link><space/>noted, the language Algol was the first language to combine seamlessly imperative effects with the (call-by-name)<space/><link><target>lambda calculus</target></link>. Perhaps the most elegant formulation of the language is due to<space/><link><target>John C. Reynolds</target></link>, and it best exhibits its syntactic and semantic purity. Reynolds's idealized Algol also made a convincing methodological argument regarding the suitability of local effects in the context of call-by-name languages, to be contrasted with the global effects used by call-by-value languages such as<space/><link><target>ML (programming language)</target><part>ML</part></link>. The conceptual integrity of the language made it one of the main objects of semantic research, along with<space/><link><target>Programming language for Computable Functions</target><part>PCF</part></link><space/>and ML.<extension extension_name='ref'><link><target>Peter O'Hearn</target></link><space/>and<space/><link><target>Robert D. Tennent</target></link>. 1996. Algol-Like Languages. Birkhauser Boston Inc., Cambridge, MA, USA.</extension></paragraph><heading level='3'>IAL implementations timeline</heading><paragraph>To date there have been at least 70 augmentations, extensions, derivations and sublanguages of Algol 60.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://hopl.murdoch.edu.au/showlanguage.prx?exp</arg><arg name="title">The Encyclopedia of Computer Languages<space/></arg><arg name="accessdate">20 January 2012</arg></template></extension></paragraph><table class="wikitable sortable"><tablerow><tablehead>Name</tablehead><tablehead>Year</tablehead><tablehead>Author</tablehead><tablehead>Country</tablehead><tablehead>Description</tablehead><tablehead>Target CPU</tablehead></tablerow><tablerow><tablecell>ZMMD-implementation</tablecell><tablecell>1958</tablecell><tablecell><link><target>Friedrich L. Bauer</target></link>, Heinz Rutishauser, Klaus Samelson, Hermann Bottenbruch</tablecell><tablecell>Germany</tablecell><tablecell>implementation of<space/><link><target>ALGOL 58</target></link></tablecell><tablecell><link><target>Z22 (computer)</target><part>Z22</part></link><space/><xhtml:br></xhtml:br><space/>(later<space/><link><target>Konrad Zuse</target><part>Zuse</part></link>'s<space/><link><target>Z23 (computer)</target><part>Z23</part></link><space/>was delivered with an Algol 60 compiler)<extension extension_name='ref'><link type='external' href='http://www.computerhistory.org/projects/zuse_z23/'>Computer Museum History</link>, Historical Zuse-Computer Z23, restored by the Konrad Zuse Schule in Hnfeld, for the Computer Museum History Center in Mountain View (California) USA</extension></tablecell></tablerow><tablerow><tablecell>X1 ALGOL 60</tablecell><tablecell>August 1960<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://www.dijkstrascry.com/node/4<space/></arg><arg name="title">Dijkstra's Rallying Cry for Generalization: the Advent of the Recursive Procedure, late 1950s&nbsp;– early 1960s<space/></arg><arg name="last">Daylight<space/></arg><arg name="first">E. G.<space/></arg><arg name="journal">[[The Computer Journal]]<space/></arg><arg name="year">2011<space/></arg><arg name="doi">10.1093/comjnl/bxr002</arg></template></extension></tablecell><tablecell><link><target>Edsger W. Dijkstra</target></link><space/>and<space/><link><target>:nl:Jaap Zonneveld</target><part>Jaap A. Zonneveld</part></link></tablecell><tablecell>Netherlands</tablecell><tablecell>First implementation of ALGOL 60<extension extension_name='ref'><template><target>Cite book</target><arg name="last1"><space/>Kruseman Aretz<space/></arg><arg name="first1"><space/>F.E.J.<space/></arg><arg name="chapter"><space/>The Dijkstra-Zonneveld ALGOL 60 compiler for the Electrologica X1<space/></arg><arg name="title">Software Engineering<space/></arg><arg name="series"><space/>History of Computer Science<space/></arg><arg name="publisher"><space/>Centrum Wiskunde & Informatica<space/></arg><arg name="place"><space/>Kruislaan 413, 1098 SJ Amsterdam<space/></arg><arg name="date">30 June 2003<space/></arg><arg name="url"><space/>http://oai.cwi.nl/oai/asset/4155/04155D.pdf<space/></arg></template></extension></tablecell><tablecell><link><target>Electrologica X1</target></link></tablecell></tablerow><tablerow><tablecell><link><target>Elliott ALGOL</target></link></tablecell><tablecell>1960s</tablecell><tablecell><link><target>C. A. R. Hoare</target></link></tablecell><tablecell>UK</tablecell><tablecell>Subject of the famous<space/><link><target>Turing test</target><part>Turing</part></link><space/>lecture</tablecell><tablecell><link><target>Elliott 803</target></link><space/>&amp; the Elliott 503</tablecell></tablerow><tablerow><tablecell><link><target>JOVIAL</target></link></tablecell><tablecell>1960</tablecell><tablecell><link><target>Jules Schwarz</target></link></tablecell><tablecell>USA</tablecell><tablecell>A<space/><link><target>United States Department of Defense</target><part>DOD</part></link><space/><link><target>High level language</target><part>HOL</part></link><space/>prior to<space/><link><target>Ada (programming language)</target><part>Ada</part></link></tablecell><tablecell>Various (see article)</tablecell></tablerow><tablerow><tablecell><link><target>Burroughs large systems#ALGOL</target><part>Burroughs Algol</part></link><space/><xhtml:br></xhtml:br><space/>(Several variants)</tablecell><tablecell>1961</tablecell><tablecell><link><target>Burroughs Corporation</target></link><space/>(with participation by Hoare,<space/><link><target>Edsger W. Dijkstra</target><part>Dijkstra</part></link>, and others)</tablecell><tablecell>USA</tablecell><tablecell>Basis of the<space/><link><target>Burroughs Corporation</target><part>Burroughs</part></link><space/>(and now<space/><link><target>Unisys</target></link><space/><link><target>Burroughs MCP</target><part>MCP</part></link><space/>based) computers</tablecell><tablecell><link><target>Burroughs large systems</target></link><space/><xhtml:br></xhtml:br>and their midrange as well.</tablecell></tablerow><tablerow><tablecell><link><target>Case ALGOL</target></link></tablecell><tablecell>1961</tablecell><tablecell><link><target>Case Western Reserve University</target><part>Case Institute of Technology</part></link><extension extension_name='ref'><template><target>cite web</target><arg name="last">Koffman</arg><arg name="first">Eliot</arg><arg name="title">All I Really Need to KnowI Learned in CS1</arg><arg name="url">http://www.temple.edu/cis/directory/tenure/documents/KoffmanSIGCSESlides.pdf</arg><arg name="accessdate">20 May 2012</arg></template></extension></tablecell><tablecell>USA</tablecell><tablecell><link><target>Simula</target></link><space/>was originally contracted as a simulation extension of the Case ALGOL</tablecell><tablecell><link><target>UNIVAC 1107</target></link></tablecell></tablerow><tablerow><tablecell><link><target>GOGOL</target></link></tablecell><tablecell>1961</tablecell><tablecell><link><target>William McKeeman</target></link></tablecell><tablecell>USA</tablecell><tablecell>For<space/><link><target>Odin</target><part>ODIN</part></link><space/>time-sharing system</tablecell><tablecell><link><target>PDP-1</target></link></tablecell></tablerow><tablerow><tablecell><link><target>RegneCentralen ALGOL</target></link></tablecell><tablecell>1961</tablecell><tablecell><link><target>Peter Naur</target></link>,<space/><link><target>Jrn Jensen</target></link></tablecell><tablecell>Denmark</tablecell><tablecell>Implementation of full Algol 60</tablecell><tablecell>DASK at Regnecentralen</tablecell></tablerow><tablerow><tablecell><link><target>Dartmouth ALGOL 30</target></link></tablecell><tablecell>1962</tablecell><tablecell><link><target>Thomas Eugene Kurtz</target></link><space/>et al.</tablecell><tablecell>USA</tablecell><tablecell></tablecell><tablecell><link><target>LGP-30</target></link></tablecell></tablerow><tablerow><tablecell><link><target>USS 90 Algol</target></link></tablecell><tablecell>1962</tablecell><tablecell><link><target>L. Petrone</target></link></tablecell><tablecell>Italy</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell>Algol Translator</tablecell><tablecell>1962</tablecell><tablecell>G. van der Mey and<space/><link><target>Willem van der Poel</target><part>W.L. van der Poel</part></link></tablecell><tablecell>Netherlands</tablecell><tablecell>Staatsbedrijf der Posterijen, Telegrafie en Telefonie</tablecell><tablecell><link><target>ZEBRA (computer)</target><part>ZEBRA</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Kidsgrove Algol</target></link></tablecell><tablecell>1963</tablecell><tablecell><link><target>F. G. Duncan</target></link></tablecell><tablecell>UK</tablecell><tablecell></tablecell><tablecell><link><target>English Electric</target><part>English Electric Company</part></link><space/><link><target>English Electric KDF9</target><part>KDF9</part></link></tablecell></tablerow><tablerow><tablecell><link><target>VALGOL</target></link></tablecell><tablecell>1963</tablecell><tablecell><link><target>Val Schorre</target></link></tablecell><tablecell>USA</tablecell><tablecell>A test of the<space/><link><target>META II</target></link><space/>compiler compiler</tablecell></tablerow><tablerow><tablecell><link><target>Whetstone (benchmark)</target><part>Whetstone</part></link></tablecell><tablecell>1964</tablecell><tablecell><link><target>Brian Randell</target></link><space/>and L J Russell</tablecell><tablecell>UK</tablecell><tablecell>Atomic Power Division of English Electric Company. Precursor to<space/><link><target>Ferranti Pegasus</target></link>, National Physical Laboratories<space/><link><target>Automatic Computing Engine</target><part>ACE</part></link><space/>and<space/><link><target>English Electric DEUCE</target></link><space/>implementations.</tablecell><tablecell>English Electric Company<space/><link><target>English Electric KDF9</target><part>KDF9</part></link></tablecell></tablerow><tablerow><tablecell><link><target>NU ALGOL</target></link></tablecell><tablecell>1965</tablecell><tablecell></tablecell><tablecell>Norway</tablecell><tablecell></tablecell><tablecell><link><target>UNIVAC</target></link></tablecell></tablerow><tablerow><tablecell>ALGEK</tablecell><tablecell>1965</tablecell><tablecell></tablecell><tablecell><link><target>Soviet Union</target><part>USSR</part></link></tablecell><tablecell><link><target>Minsk family of computers</target><part>Minsk-22</part></link></tablecell><tablecell>, based on ALGOL-60 and<space/><link><target>COBOL</target></link><space/>support, for economical tasks</tablecell></tablerow><tablerow><tablecell><link><target>ALGOL W</target></link></tablecell><tablecell>1966</tablecell><tablecell><link><target>Niklaus Wirth</target></link></tablecell><tablecell>USA</tablecell><tablecell>Proposed successor to ALGOL 60</tablecell><tablecell><link><target>IBM System/360</target></link></tablecell></tablerow><tablerow><tablecell><link><target>MALGOL</target></link></tablecell><tablecell>1966</tablecell><tablecell>publ. A. Viil, M Kotli &amp; M. Rakhendi,</tablecell><tablecell><link><target>Estonian Soviet Socialist Republic</target><part>Estonian SSR</part></link></tablecell><tablecell><link><target>Minsk family of computers</target><part>Minsk-22</part></link></tablecell></tablerow><tablerow><tablecell><link><target>ALGAMS</target></link></tablecell><tablecell>1967</tablecell><tablecell>GAMS group (, ), cooperation of Comecon Academies of Science</tablecell><tablecell><link><target>Comecon</target></link></tablecell><tablecell><link><target>Minsk family of computers</target><part>Minsk-22</part></link>, later<space/><link><target>ES EVM</target></link>,<space/><link><target>BESM</target></link></tablecell></tablerow><tablerow><tablecell><link><target>ALGOL/ZAM</target></link></tablecell><tablecell>1967</tablecell><tablecell></tablecell><tablecell>Poland</tablecell><tablecell></tablecell><tablecell>Polish<space/><link><target>ZAM (computer)</target><part>ZAM</part></link><space/>computer</tablecell></tablerow><tablerow><tablecell><link><target>Simula</target><part>Simula 67</part></link></tablecell><tablecell>1967</tablecell><tablecell><link><target>Ole-Johan Dahl</target></link><space/>and<space/><link><target>Kristen Nygaard</target></link></tablecell><tablecell>Norway</tablecell><tablecell>Algol 60 with classes</tablecell><tablecell><link><target>UNIVAC 1107</target></link></tablecell></tablerow><tablerow><tablecell><link type='external' href='http://hopl.murdoch.edu.au/showlanguage.prx?exp=7288&amp;amp;language=Chinese%20Algol'>Chinese Algol</link></tablecell><tablecell>1972</tablecell><tablecell></tablecell><tablecell>China</tablecell><tablecell>Chinese characters, expressed via the Symbol system</tablecell></tablerow><tablerow><tablecell><link><target>DG/L</target></link></tablecell><tablecell>1972</tablecell><tablecell></tablecell><tablecell>USA</tablecell><tablecell></tablecell><tablecell>DG<space/><link><target>Data General Eclipse</target><part>Eclipse</part></link><space/>family of Computers</tablecell></tablerow><tablerow><tablecell><link><target>S-algol</target></link></tablecell><tablecell>1979</tablecell><tablecell>Prof.<space/><link><target>Ron Morrison</target></link></tablecell><tablecell>UK</tablecell><tablecell>Addition of orthogonal datatypes with intended use as a teaching language</tablecell><tablecell><link><target>PDP-11</target></link><space/>with a subsequent implementation on the<space/><link><target>Java VM</target></link></tablecell></tablerow></table><paragraph>The Burroughs dialects included special Bootstrapping dialects such as<space/><link><target>Executive Systems Problem Oriented Language</target><part>ESPOL</part></link><space/>and<space/><link><target>NEWP</target></link>. The latter is still used for Unisys MCP system software.</paragraph><heading level='2'>Properties</heading><paragraph>ALGOL 60 as officially defined had no<space/><link><target>I/O</target></link><space/>facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of<space/><italics>transput</italics><space/>(ALGOL 68 parlance for Input/Output) facilities.</paragraph><paragraph>ALGOL 60 allowed for two<space/><link><target>evaluation strategy</target><part>evaluation strategies</part></link><space/>for<space/><link><target>Parameter (computer science)</target><part>parameter</part></link><space/>passing: the common<space/><link><target>call-by-value</target></link>, and<space/><link><target>call-by-name</target></link>. Call-by-name has certain effects in contrast to<space/><link><target>call-by-reference</target></link>. For example, without specifying the parameters as<space/><italics>value</italics><space/>or<space/><italics>reference</italics>, it is impossible to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Aho<space/></arg><arg name="first">Alfred V.<space/></arg><arg name="authorlink">Alfred V. Aho<space/></arg><arg name="author2">[[Ravi Sethi]]<space/></arg><arg name="author3">[[Jeffrey Ullman|Jeffrey D. Ullman]]<space/></arg><arg name="title">[[Dragon Book (computer science)|Compilers: Principles, Techniques, and Tools]]<space/></arg><arg name="year">1986<space/></arg><arg name="edition">1st<space/></arg><arg name="publisher">Addison-Wesley<space/></arg><arg name="isbn">0-201-10194-7</arg></template>, Section 7.5, and references therein</extension><space/>Think of passing a pointer to swap(i, A[i]) in to a function. Now that every time swap is referenced, it's reevaluated. Say i := 1 and A[i] := 2, so every time swap is referenced it'll return the other combination of the values ([1,2], [2,1], [1,2] and so on). A similar situation occurs with a random function passed as actual argument.</paragraph><paragraph>Call-by-name is known by many compiler designers for the interesting &quot;<link><target>Thunk (delayed computation)</target><part>thunk</part><trail>s</trail></link>&quot; that are used to implement it.<space/><link><target>Donald Knuth</target></link><space/>devised the &quot;<link><target>man or boy test</target></link>&quot; to separate compilers that correctly implemented &quot;<link><target>recursion (computer science)</target><part>recursion</part></link><space/>and non-local references.&quot; This test contains an example of call-by-name.</paragraph><paragraph>ALGOL 68 was defined using a two-level grammar formalism invented by<space/><link><target>Adriaan van Wijngaarden</target></link><space/>and which bears his name.<space/><link><target>Van Wijngaarden grammar</target><trail>s</trail></link><space/>use a<space/><link><target>context-free grammar</target></link><space/>to generate an infinite set of productions that will recognize a particular ALGOL 68 program; notably, they are able to express the kind of requirements that in many other programming language standards are labelled &quot;semantics&quot; and have to be expressed in ambiguity-prone natural language prose, and then implemented in compilers as<space/><italics>ad hoc</italics><space/>code attached to the formal language parser.</paragraph><heading level='2'>Examples and portability issues</heading><heading level='3'>Code sample comparisons</heading><heading level='4'>ALGOL 60</heading><paragraph>(The way the bold text has to be written depends on the implementation, e.g. 'INTEGER' (including the quotation marks) for<space/><bold>integer</bold>; this is known as<space/><link><target>stropping (programming)</target><part>stropping</part></link>.)</paragraph><preblock><preline><bold>procedure</bold><space/>Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k);</preline><preline><space/><space/><space/><space/><bold>value</bold><space/>n, m;<space/><bold>array</bold><space/>a;<space/><bold>integer</bold><space/>n, m, i, k;<space/><bold>real</bold><space/>y;</preline><preline><bold>comment</bold><space/>The absolute greatest element of the matrix a, of size n by m</preline><preline><space/><space/><space/><space/>is transferred to y, and the subscripts of this element to i and k;</preline><preline><bold>begin</bold></preline><preline><space/><space/><space/><space/><bold>integer</bold><space/>p, q;</preline><preline><space/><space/><space/><space/>y := 0; i := k := 1;</preline><preline><space/><space/><space/><space/><bold>for</bold><space/>p := 1<space/><bold>step</bold><space/>1<space/><bold>until</bold><space/>n<space/><bold>do</bold></preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><bold>for</bold><space/>q := 1<space/><bold>step</bold><space/>1<space/><bold>until</bold><space/>m<space/><bold>do</bold></preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><bold>if</bold><space/>abs(a[p, q]) &gt; y<space/><bold>then</bold></preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><bold>begin</bold><space/>y := abs(a[p, q]);</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>i := p; k := q</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><bold>end</bold></preline><preline><bold>end</bold><space/>Absmax</preline></preblock><paragraph>Here's an example of how to produce a<space/><link><target>Table (information)</target><part>table</part></link><space/>using Elliott 803 ALGOL.<extension extension_name='ref'><link type='external' href='http://www.billp.org/ccs/A104/'>&quot;803 ALGOL&quot;</link>, the manual for Elliott 803 ALGOL</extension></paragraph><preblock><preline><space/>FLOATING POINT ALGOL TEST'</preline><preline><space/>BEGIN REAL A,B,C,D'</preline><preline><space/>&amp;nbsp;</preline><preline><space/>READ D'</preline><preline><space/>&amp;nbsp;</preline><preline><space/>FOR A:= 0.0 STEP D UNTIL 6.3 DO</preline><preline><space/>BEGIN</preline><preline><space/><space/><space/>PRINT PUNCH(3),L??'</preline><preline><space/><space/><space/>B := SIN(A)'</preline><preline><space/><space/><space/>C := COS(A)'</preline><preline><space/><space/><space/>PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C'</preline><preline><space/>END'</preline><preline><space/>END'</preline></preblock><paragraph>PUNCH(3) sends output to the teleprinter rather than the tape punch.<xhtml:br></xhtml:br>SAMELINE suppresses the carriage return + line feed normally printed between arguments.<xhtml:br></xhtml:br>ALIGNED(1,6) controls the format of the output with 1 digit before and 6 after the decimal point.</paragraph><heading level='4'>ALGOL 68</heading><paragraph>The following code samples are ALGOL 68 versions of the above ALGOL 60 code samples.</paragraph><paragraph>ALGOL 68 reuses ALGOL 60's<space/><link><target>stropping (programming)</target><part>stropping</part></link>. In ALGOL 68's case tokens with the<space/><bold>bold</bold><space/>typeface are reserved words, types (<bold>mode</bold>s) or operators.</paragraph><preblock><preline><bold>proc</bold><space/>abs max = ([,]<bold>real</bold><space/>a,<space/><bold>ref</bold><space/><bold>real</bold><space/>y,<space/><bold>ref</bold><space/><bold>int</bold><space/>i, k)<bold>real</bold>:</preline><preline><bold>comment</bold><space/>The absolute greatest element of the matrix a, of size a by 2a</preline><preline>is transferred to y, and the subscripts of this element to i and k;<space/><bold>comment</bold></preline><preline><bold>begin</bold></preline><preline><space/><space/><space/><bold>real</bold><space/>y := 0; i := a; k := 2a;</preline><preline><space/><space/><space/><bold>for</bold><space/>p<space/><bold>from</bold><space/>a<space/><bold>to</bold><space/>a<space/><bold>do</bold></preline><preline><space/><space/><space/><space/><space/><bold>for</bold><space/>q<space/><bold>from</bold><space/>2a<space/><bold>to</bold><space/>2a<space/><bold>do</bold></preline><preline><space/><space/><space/><space/><space/><space/><space/><bold>if</bold><space/><bold>abs</bold><space/>a[p, q] &gt; y<space/><bold>then</bold></preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>y :=<space/><bold>abs</bold><space/>a[p, q];</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>i := p; k := q</preline><preline><space/><space/><space/><space/><space/><space/><space/><bold>fi</bold></preline><preline><space/><space/><space/><space/><space/><bold>od</bold></preline><preline><space/><space/><space/><bold>od</bold>;</preline><preline><space/><space/><space/>y</preline><preline><bold>end</bold><space/># abs max #</preline></preblock><paragraph>Note: lower () and upper () bounds of an array, and array slicing, are directly available to the programmer.</paragraph><preblock><preline>floating point algol68 test:</preline><preline>(</preline><preline><space/><space/><bold>real</bold><space/>a,b,c,d;</preline><preline><space/><space/>&amp;nbsp;</preline><preline><space/><space/>#<space/><italics>printf</italics><space/>- sends output to the<space/><bold>file</bold><space/><italics>stand out</italics>. #</preline><preline><space/><space/>#<space/><italics>printf($p$);</italics><space/>selects a<space/><italics>new page</italics><space/>#</preline><preline><space/><space/>printf(($pg$,&quot;Enter d:&quot;));<space/></preline><preline><space/><space/>read(d);</preline><preline><space/><space/>&amp;nbsp;</preline><preline><space/><space/><bold>for</bold><space/>step<space/><bold>from</bold><space/>0<space/><bold>while</bold><space/>a:=step*d; a &lt;= 2*pi<space/><bold>do</bold></preline><preline><space/><space/><space/><space/>printf($l$); #<space/><italics>$l$</italics><space/>- selects a<space/><italics>new line</italics>. #</preline><preline><space/><space/><space/><space/>b := sin(a);</preline><preline><space/><space/><space/><space/>c := cos(a);</preline><preline><space/><space/><space/><space/>printf(($z-d.6d$,a,b,c)) # formats output with 1 digit before and 6 after the decimal point. #</preline><preline><space/><space/><bold>od</bold></preline><preline>)</preline></preblock><heading level='3'>Timeline: Hello world</heading><paragraph>The variations and lack of portability of the programs from one implementation to another is easily demonstrated by the classic<space/><link><target>hello world program</target></link>.</paragraph><heading level='4'>ALGOL 58 (IAL)</heading><paragraph><template><target>main</target><arg>ALGOL 58</arg></template>ALGOL 58 had no I/O facilities.</paragraph><heading level='4'>ALGOL 60 family</heading><paragraph><template><target>main</target><arg>ALGOL 60</arg></template>Since ALGOL 60 had no I/O facilities, there is no portable<space/><link><target>hello world program</target></link><space/>in ALGOL.</paragraph><preblock><preline>BEGIN</preline><preline><space/><space/>FILE F(KIND=REMOTE);</preline><preline><space/><space/>EBCDIC ARRAY E[0:11];</preline><preline><space/><space/>REPLACE E BY &quot;HELLO WORLD!&quot;;</preline><preline><space/><space/>WRITE(F, *, E);</preline><preline>END.</preline></preblock><paragraph>A simpler program using an inline format:</paragraph><preblock><preline>BEGIN</preline><preline><space/><space/>FILE F(KIND=REMOTE);</preline><preline><space/><space/>WRITE(F, &lt;&quot;HELLO WORLD!&quot;&gt;);</preline><preline>END.</preline></preblock><paragraph>An even simpler program using the Display statement:</paragraph><preblock><preline>BEGIN DISPLAY(&quot;HELLO WORLD!&quot;) END.</preline></preblock><paragraph>An alternative example, using Elliott Algol I/O is as follows. Elliott Algol used different characters for &quot;open-string-quote&quot; and &quot;close-string-quote&quot;:</paragraph><preblock><preline><space/><bold>program</bold><space/>HiFolks;</preline><preline><space/><bold>begin</bold></preline><preline><space/><space/><space/><space/><bold>print</bold><space/>Hello world;</preline><preline><space/><bold>end</bold>;</preline></preblock><paragraph>Here's a version for the Elliott 803 Algol (A104) The standard Elliott 803 used 5 hole paper tape and thus only had upper case. The code lacked any quote characters so (UK Pound Sign) was used for open quote and ? (Question Mark) for close quote. Special sequences were placed in double quotes (e.g. L?? produced a new line on the teleprinter).</paragraph><preblock><preline><space/><space/>HIFOLKS'</preline><preline><space/><space/>BEGIN</preline><preline><space/><space/><space/><space/><space/>PRINT HELLO WORLDL??'</preline><preline><space/><space/>END'</preline></preblock><paragraph>The<space/><link><target>ICT 1900 series</target></link><space/>Algol I/O version allowed input from paper tape or punched card. Paper tape 'full' mode allowed lower case. Output was to a line printer. The open and close quote characters were represented using '(' and ')' and spaces by %.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.icl1900.co.uk/techpub/tp3340.djvu</arg><arg name="title">ICL 1900 series: Algol Language</arg><arg name="publisher">ICL Technical Publication 3340</arg><arg name="year">1965</arg></template></extension></paragraph><preblock><preline><space/><space/>'BEGIN'</preline><preline><space/><space/><space/><space/><space/>WRITE TEXT('('HELLO%WORLD')');</preline><preline><space/><space/>'END'</preline></preblock><heading level='4'>ALGOL 68</heading><paragraph><template><target>main</target><arg>ALGOL 68</arg></template></paragraph><paragraph><bold>ALGOL 68</bold><space/>code was published with reserved words typically in lowercase, but bolded or underlined.</paragraph><preblock><preline><bold>begin</bold></preline><preline><space/><space/>printf(($gl$,&quot;Hello, world!&quot;))</preline><preline><bold>end</bold></preline></preblock><paragraph>In the language of the &quot;Algol 68 Report&quot; the input/output facilities were collectively called the &quot;<link><target>Input/output</target><part>Transput</part></link>&quot;.</paragraph><heading level='3'>Timeline of ALGOL special characters</heading><paragraph><template><target>SpecialChars</target><arg name="alt"><space/>Decimal Exponent Symbol
</arg><arg name="link"><space/>http://mailcom.com/unicode/DecimalExponent.ttf
</arg><arg name="special"><space/>Unicode 6.0 "[http://www.unicode.org/charts/PDF/U2300.pdf Miscellaneous Technical]" characters
</arg><arg name="fix"><space/>Unicode#External_links
</arg><arg name="characters"><space/>something like "₁₀" ([http://mailcom.com/unicode/DecimalExponent.ttf Decimal Exponent Symbol U+23E8 TTF])
</arg></template>The ALGOLs were conceived at a time when character sets were diverse and evolving rapidly; also, the ALGOLs were defined so that only<space/><italics>uppercase</italics><space/>letters were required.</paragraph><paragraph>1960:<space/><link><target>IFIP</target></link><space/>The Algol 60 language and report included several mathematical symbols which are available on modern computers and operating systems, but, unfortunately, were not supported on most computing systems at the time. For instance: , , , , , , , , , , and .</paragraph><paragraph>1961 September: ASCII&amp;nbsp; The<space/><link><target>ASCII</target></link><space/>character set, then in an early stage of development, had the<space/><link><target>\</target></link><space/>(Back slash) character added to it in order to support ALGOL's<space/><link><target>boolean data type</target><part>boolean</part></link><space/>operators<space/><link><target>\/</target><part>/\</part></link><space/>and<space/><link><target>\/</target></link>.<extension extension_name='ref'><link type='external' href='http://www.bobbemer.com/BACSLASH.HTM'>How ASCII Got Its Backslash</link>, Bob Bemer</extension></paragraph><paragraph>1962:<space/><link><target>ALCOR</target></link><space/>This character set included the unusual &quot;&amp;#x16ed;&quot; (iron/runic cross<extension extension_name='ref'>http://www.fileformat.info/info/unicode/char/16ed/index.htm</extension>) character and the &quot;&quot; (Decimal Exponent Symbol<extension extension_name='ref' name="unicode1">http://unicode.org/charts/PDF/U2300.pdf</extension>) for floating point notation.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Baumann<space/></arg><arg name="first">R.<space/></arg><arg name="year">1962<space/></arg><arg name="title">ALGOL Manual of the ALCOR Group, Part 1<space/></arg><arg name="journal">Elektronische Rechenanlagen<space/></arg><arg name="date">October 1961<space/></arg><arg name="pages">206–212<space/></arg><arg name="language">German</arg><arg name="trans_title">ALGOL Manual of the ALCOR Group</arg><arg name="accessdate">25 November 2009</arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="last">Baumann<space/></arg><arg name="first">R.<space/></arg><arg name="year">1962<space/></arg><arg name="title">ALGOL Manual of the ALCOR Group, Part 2<space/></arg><arg name="journal">Elektronische Rechenanlagen<space/></arg><arg name="volume">6<space/></arg><arg name="date">December 1961<space/></arg><arg name="pages">259–265<space/></arg><arg name="language">German</arg><arg name="trans_title">ALGOL Manual of the ALCOR Group</arg><arg name="accessdate">25 November 2009<space/></arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="last">Baumann<space/></arg><arg name="first">R.<space/></arg><arg name="title">ALGOL Manual of the ALCOR Group, Part 3<space/></arg><arg name="journal">Elektronische Rechenanlagen<space/></arg><arg name="volume">2<space/></arg><arg name="date">April 1962<space/></arg><arg name="language">German</arg><arg name="trans_title">ALGOL Manual of the ALCOR Group</arg><arg name="accessdate">25 November 2009<space/></arg></template></extension></paragraph><paragraph>1964:<space/><link><target>GOST</target></link><space/>The 1964 Soviet standard<space/><link><target>GOST 10859</target></link><space/>allowed the encoding of 4-bit, 5-bit, 6-bit and 7-bit characters in ALGOL.<extension extension_name='ref'><template><target>cite web</target><arg name="title">GOST 10859 standard</arg><arg name="url">http://homepages.cwi.nl/~dik/english/codes/stand.html#gost10859</arg><arg name="accessdate">5 June 2007</arg><arg name="archiveurl"><space/>http://web.archive.org/web/20070616201227/http://homepages.cwi.nl/~dik/english/codes/stand.html#gost10859</arg><arg name="archivedate"><space/>16 June 2007<space/></arg><arg name="deadurl"><space/>no</arg></template></extension></paragraph><paragraph>1968: The &quot;Algol 68 Report&quot; used existing ALGOL characters, and further adopted , , , , , , , , , and characters which can be found on the<space/><link><target>IBM 2741</target></link><space/>keyboard with &quot;golf-ball&quot; print heads inserted (such as the<space/><link><target>APL syntax and symbols</target><part>APL</part></link><space/>golfball). These became available in the mid-1960s while ALGOL 68 was being drafted. The report was translated into Russian, German, French and Bulgarian, and allowed programming in languages with larger character sets, e.g.<space/><link><target>Cyrillic</target></link><space/>alphabet of the Soviet<space/><link><target>BESM</target><part>BESM-4</part></link>. All ALGOL's characters are also part of the<space/><link><target>Unicode</target></link><space/>standard and most of them are available in several popular<space/><link><target>font</target><trail>s</trail></link>.</paragraph><paragraph>2009 October:<space/><link><target>Unicode</target></link><space/>The &quot;&quot; (Decimal Exponent Symbol<extension extension_name='ref' name="unicode1"></extension>) for floating point notation was added to Unicode 5.2 for backward compatibility with historic<space/><link><target>Buran (spacecraft)</target></link><space/>ALGOL software.<template><target>Citation needed</target><arg name="date">August 2015</arg></template></paragraph><heading level='2'>See also</heading><paragraph><template><target>col-begin</target></template><template><target>col-2</target></template></paragraph><list type='bullet'><listitem><link><target>Address programming language</target></link></listitem><listitem><link><target>Atlas Autocode</target></link></listitem><listitem><link><target>Coral 66</target></link></listitem><listitem><link><target>Edinburgh IMP</target></link></listitem><listitem><link><target>Jensen's Device</target></link></listitem><listitem><link><target>ISWIM</target></link></listitem></list><paragraph><template><target>col-2</target></template></paragraph><list type='bullet'><listitem><link><target>JOVIAL</target></link></listitem><listitem><link><target>Tron (video game)</target></link></listitem><listitem><link><target>NELIAC</target></link></listitem><listitem><link><target>Simula</target></link></listitem><listitem><link><target>S-algol</target></link></listitem><listitem><link><target>Scheme (programming language)</target></link></listitem></list><paragraph><template><target>col-end</target></template></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg></template></paragraph><heading level='2'>Further reading</heading><list type='bullet'><listitem>F.L. Bauer, R. Baumann, M. Feliciano, K. Samelson,<space/><italics>Introduction to Algol</italics>. Prentice Hall, 1964, ISBN 0-13-477828-6</listitem><listitem>B. Randell and L.J. Russell,<space/><italics>ALGOL 60 Implementation: The Translation and Use of ALGOL 60 Programs on a Computer</italics>. Academic Press, 1964. The design of the<space/><bold>Whetstone Compiler</bold>. One of the early published descriptions of implementing a compiler. See the related papers:<space/><link type='external' href='http://www.cs.ncl.ac.uk/research/pubs/articles/papers/427.pdf'>Whetstone Algol Revisited</link>, and<space/><link type='external' href='http://www.cs.ncl.ac.uk/publications/books/papers/124.pdf'>The Whetstone KDF9 Algol Translator</link><space/>by B. Randell</listitem><listitem>E. W, Dijkstra,<space/><italics>Algol 60 translation: an algol 60 translator for the x1 and making a translator for algol 60</italics>, report MR 35/61. Mathematisch Centrum, Amsterdam, 1961.<space/><link type='external' href='http://www.cs.utexas.edu/users/EWD/MCReps/MR35.PDF'></link></listitem><listitem><link type='external' href='http://www.masswerk.at/algol60/report.htm'>Revised Report on the Algorithmic Language Algol 60</link><space/>by Peter Naur, et al. ALGOL definition</listitem><listitem><link type='external' href='http://portal.acm.org/ft_gateway.cfm?id=808370&amp;amp;type=pdf&amp;amp;coll=&amp;amp;dl=ACM&amp;amp;CFID=15151515&amp;amp;CFTOKEN=6184618'>&quot;The European Side of the Last Phase of the Development of ALGOL 60&quot; by Peter Naur</link></listitem></list><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://www.softwarepreservation.org/projects/ALGOL/'>History of ALGOL</link><space/>at the<space/><link><target>Computer History Museum</target></link></listitem><listitem><link type='external' href='http://vintagebigblue.org/Compilerator/ALGOLF/mvsAlgolFCompile.php'>Web enabled ALGOL-F compiler for small experiments</link></listitem></list><paragraph><template><target>DEFAULTSORT:Algol</target></template><link><target>Category:ALGOL 60 dialect</target></link><link><target>Category:Articles with example ALGOL 60 code</target></link><link><target>Category:Procedural programming languages</target></link><link><target>Category:Structured programming languages</target></link><link><target>Category:Systems programming languages</target></link><link><target>Category:Programming languages created in the 1950s</target></link><link><target>Category:Algol programming language family</target><part></part></link></paragraph></article>