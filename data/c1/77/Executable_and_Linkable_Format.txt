{{Infobox file format
| name = ELF
| extension = none, {{Mono|.axf}}, {{Mono|.bin}}, {{Mono|.elf}}, {{Mono|.o}}, {{Mono|.prx}}, {{Mono|.puff}}, {{Mono|.so}}
| mime = 
| owner = [[Unix System Laboratories]]<ref name="linuxbase-elf" />{{rp|3}}
| genre = [[Binary file|Binary]], [[executable]], [[object code|object]], [[shared libraries]], [[core dump]]
| container for = Many executable binary formats
| magic = <code>0x7F 'E' 'L' 'F'</code>
}}

[[File:Elf-layout--en.svg|thumb|upright=1.2|An ELF file has two views: the program header shows the ''segments'' used at run-time, whereas the section header lists the set of ''sections'' of the binary.]]

In [[computing]], the '''Executable and Linkable Format''' ('''ELF''', formerly called '''Extensible Linking Format''') is a common standard [[file format]] for [[executable]]s, [[object code]], [[shared libraries]], and [[core dump]]s. First published in the [[System V Release 4]] (SVR4) [[application binary interface|Application Binary Interface]] (ABI) specification,<ref>''[http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface]'' Edition 4.1 (1997-03-18)</ref> and later in the [[Tool Interface Standard]],<ref name="linuxbase-elf">Tool Interface Standard (TIS) ''[http://refspecs.linuxbase.org/elf/elf.pdf Executable and Linking Format (ELF) Specification] Version 1.2'' (May 1995)</ref> it was quickly accepted among different vendors of [[Unix]] systems. In 1999 it was chosen as the standard binary file format for Unix and [[Unix-like]] systems on [[x86]] by the [[#86open|86open]] project.

ELF is flexible and extensible by design, and it is not bound to any particular processor or [[Instruction set architecture|architecture]]. This has allowed it to be adopted by many different [[operating system]]s on many different platforms.

==File layout==

Each ELF file is made up of one ELF header, followed by file data. The file data can include:
* Program header table, describing zero or more [[Memory segmentation|segments]]
* Section header table, describing zero or more sections
* Data referred to by entries in the program header table or section header table

The segments contain information that is necessary for runtime execution of the file, while sections contain important data for linking and relocation. Any byte in the entire file can be owned by at most one section, and there can be orphan bytes which are not owned by any section.

===File header===
The ELF header defines whether [[32-bit|32-]] or [[64-bit computing|64-bit]] addresses are to be used. The header itself contains three fields that are affected by this setting and offset other fields that follow them. The 64-bit header is 64 bytes long.

{| class="wikitable"
|+ ELF header<ref>{{cite web|url=http://www.sco.com/developers/gabi/2000-07-17/ch4.eheader.html |title=ELF Header |publisher=Sco.com |date=July 2000 |accessdate=2014-02-07}}</ref>
|-
! colspan="2" | Offset!! colspan="2" | Size (Bytes) !! rowspan="2" | Field !! rowspan="2" | Purpose
|-
! 32-bit !! 64-bit !! 32-bit !! 64-bit
|-
| colspan="2" | 0x00 || colspan="2" | 4 || <tt>e_ident[EI_MAG0]</tt> through <tt>e_ident[EI_MAG3]</tt>
| <code>0x7F</code> followed by <code>ELF</code> in [[ASCII]]; these four bytes constitute the [[magic number (programming)|magic number]].
|-
| colspan="2" | 0x04 || colspan="2" | 1 || <tt>e_ident[EI_CLASS]</tt>
|This byte is set to either <code>1</code> or <code>2</code> to signify 32- or 64-bit format, respectively.
|-
| colspan="2" | 0x05 || colspan="2" | 1 || <tt>e_ident[EI_DATA]</tt>
|This byte is set to either <code>1</code> or <code>2</code> to signify little or big [[endianness]], respectively. This affects interpretation of multi-byte fields starting with offset <code>0x10</code>.
|-
| colspan="2" | 0x06 || colspan="2" | 1 || <tt>e_ident[EI_VERSION]</tt>
|Set to <code>1</code> for the original version of ELF.
|-
| colspan="2" | 0x07 || colspan="2" | 1 || <tt>e_ident[EI_OSABI]</tt>
|Identifies the target operating system [[application binary interface|ABI]].
{| class="wikitable"
|-
!Value!!ABI
|-
|0x00||[[System V]]
|-
|0x01||[[HP-UX]]
|-
|0x02||[[NetBSD]]
|-
|0x03||[[Linux]]
|-
|0x06||[[Solaris (operating system)|Solaris]]
|-
|0x07||[[AIX]]
|-
|0x08||[[IRIX]]
|-
|0x09||[[FreeBSD]]
|-
|0x0C||[[OpenBSD]]
|-
|0x0D||[[OpenVMS]]
|}
It is often set to <code>0</code> regardless of the target platform.
|-
| colspan="2" | 0x08 || colspan="2" | 1 || <tt>e_ident[EI_ABIVERSION]</tt>
|Further specifies the ABI version. Its interpretation depends on the target ABI. Linux kernel (after at least 2.6) has no definition of it.<ref>{{cite web|url=http://lxr.linux.no/linux+v2.6.11/include/linux/elf.h#L380|title=LXR linux/include/linux/elf.h|work=linux.no|accessdate=27 April 2015}}</ref> In that case, offset and size of EI_PAD are <code>8</code>. 
|-
| colspan="2" | 0x09 || colspan="2" | 7 || <tt>e_ident[EI_PAD]</tt>
|currently unused
|-
| colspan="2" | 0x10 || colspan="2" | 2 || <tt>e_type</tt>
|<code>1</code>, <code>2</code>, <code>3</code>, <code>4</code> specify whether the object is relocatable, executable, shared, or core, respectively.
|-
| colspan="2" | 0x12 || colspan="2" | 2 || <tt>e_machine</tt>
|Specifies target [[instruction set architecture]]. Some examples are:
{| class="wikitable"
|-
!Value!!ISA
|-
|0x02||[[SPARC]]
|-
|0x03||[[x86]]
|-
|0x08||[[MIPS architecture|MIPS]]
|-
|0x14||[[PowerPC]]
|-
|0x28||[[ARM architecture|ARM]]
|-
|0x2A||[[SuperH]]
|-
|0x32||[[IA-64]]
|-
|0x3E||[[x86-64]]
|-
|0xB7||[[AArch64]]
|}
|-
| colspan="2" | 0x14 || colspan="2" | 4 || <tt>e_version</tt>
|Set to <code>1</code> for the original version of ELF.
|-
| colspan="2" | 0x18 || 4 || 8 || <tt>e_entry</tt>
|This is the memory address of the [[entry point]] from where the process starts executing. This field is either 32 or 64 bits long depending on the format defined earlier.
|-
| 0x1C || 0x20 || 4 || 8 || <tt>e_phoff</tt>
|Points to the start of the program header table. It usually follows the file header immediately making the offset <code>0x40</code> for 64-bit ELF executables.
|-
| 0x20 || 0x28 || 4 || 8 || <tt>e_shoff</tt>
|Points to the start of the section header table.
|-
| 0x24 || 0x30 || colspan="2" | 4 || <tt>e_flags</tt>
|Interpretation of this field depends on the target architecture.
|-
| 0x28 || 0x34 || colspan="2" | 2 || <tt>e_ehsize</tt>
|Contains the size of this header, normally 64 bytes for 64-bit and 52 for 32-bit format.
|-
| 0x2A || 0x36 || colspan="2" | 2 || <tt>e_phentsize</tt>
|Contains the size of a program header table entry. <!-- 0x38/0x20? -->
|-
| 0x2C || 0x38|| colspan="2" | 2 || <tt>e_phnum</tt>
|Contains the number of entries in the program header table.
|-
| 0x2E || 0x3A || colspan="2" | 2 || <tt>e_shentsize</tt>
|Contains the size of a section header table entry.
|-
| 0x30 || 0x3C || colspan="2" | 2 || <tt>e_shnum</tt>
|Contains the number of entries in the section header table.
|-
| 0x32 || 0x3E || colspan="2" | 2 || <tt>e_shstrndx</tt>
|Contains index of the section header table entry that contains the section names.
|}

==Tools==
* <code>[[readelf]]</code> is a Unix binary utility that displays information about one or more ELF files. A [[free software]] implementation is provided by [[GNU Binutils]].
* <code>elfutils</code> provides alternative tools to [[GNU Binutils]] purely for Linux.<ref>{{cite web|url=http://fedorahosted.org/elfutils/|title=elfutils|work=fedorahosted.org|accessdate=27 April 2015}}</ref>
* <code>elfdump</code> is a command for viewing ELF information in an ELF file, available under Solaris and [[FreeBSD]].
* <code>[[objdump]]</code> provides a wide range of information about ELF files and other object formats. <code>objdump</code> uses the [[Binary File Descriptor library]] as a back-end to structure the ELF data.
* The Unix <code>[[file (command)|file]]</code> utility can display some information about ELF files, including the [[instruction set architecture]] for which the code in a relocatable, executable, or shared object file is intended, or on which an ELF [[core dump]] was produced.

==Applications==
The ELF format has replaced older executable formats in various environments.
It has replaced [[a.out]] and [[COFF]] formats in [[Unix-like]] operating systems:
* [[Linux]]
* [[Solaris (operating system)|Solaris]]
* [[IRIX]]
* [[FreeBSD]]
* [[NetBSD]]
* [[OpenBSD]]
* [[DragonFly BSD]]
* [[Syllable Desktop (operating system)|Syllable]]
* [[HP-UX]] (except for 32-bit PA-RISC programs which continue to use [[System Object Model (file format)|SOM]])
* [[QNX Neutrino]]
* [[MINIX]]<ref>{{cite web|url=http://wiki.minix3.org/en/MinixReleases |title=MinixReleases - Minix Wiki |publisher=Wiki.minix3.org |date= |accessdate=2014-01-19}}</ref>

ELF has also seen some adoption in non-Unix operating systems, such as:
* [[OpenVMS]], in its Itanium version
* [[BeOS]] Revision 4 and later for [[x86]] based computers (where it replaced the [[Portable Executable]] format; the [[PowerPC]] version stayed with [[Preferred Executable Format]])
* [[Haiku (operating system)|Haiku]], the open source reimplementation of BeOS
* [[RISC OS]]<ref>{{cite web|url=http://www.riscos.info/index.php/GCCSDK |title=GCCSDK - RISC OS |publisher=Riscos.info |date=2012-04-22 |accessdate=2014-01-19}}</ref>
* [[Stratus VOS]], in PA-RISC and x86 versions

Some game consoles also use ELF:
* [[PlayStation Portable]],<ref>PlayStation Portable use encrypted & relocated ELF : PSP</ref> [[PlayStation 2]], [[PlayStation 3]], [[PlayStation 4]]
* [[GP2X]]
* [[Dreamcast]]
* [[GameCube]], [[Wii]], [[Wii U]]

Other operating systems running on [[PowerPC]] using ELF:
* [[AmigaOS 4]], the ELF executable has replaced the previous [[Extended Hunk Format|EHF]] (Extended Hunk Format) which was used on Amigas equipped with PPC processor expansion cards.
* [[MorphOS]]
* [[AROS]]

Some operating systems for mobile phones and mobile devices use ELF:
* [[Symbian OS]] v9 uses E32Image<ref>''[http://wiki.forum.nokia.com/index.php/E32Image Symbian OS executable file format]''</ref> format that is based on the ELF file format;
* [[Sony Ericsson]], for example, the [[Sony Ericsson W800|W800i]], [[Sony Ericsson W610i|W610]], [[Sony Ericsson W300|W300]], etc.
* [[Siemens]], the SGOLD and SGOLD2 platforms: from [[Siemens C65]] to S75 and BenQ-Siemens E71/[[BenQ-Siemens EL71|EL71]];
* [[Motorola]], for example, the E398, [[Motorola SLVR L7|SLVR L7]], v360, [[Motorola RAZR V3#V3i|v3i]] (and all phone LTE2 which has the patch applied).
* [[Bada]], for example, the [[Samsung Wave S8500]].
* [[Nokia]] phones or tablets running the Maemo or the Meego OS, for example, the [[Nokia N900]].
* [[Android (operating system)|Android]] uses ELF .so libraries for the [[Java Native Interface]]. With [[Android Runtime]] (ART), the default since [[Lollipop (operating system)|Android 5.0 "Lollipop"]], all applications are compiled into native ELF binaries upon installation.

{{Anchor|ELFPACK}}
Some phones can run ELF files through the use of a [[Patch (computing)|patch]] that adds [[Assembly Language|assembly code]] to the main [[firmware]], which is a feature known as ''ELFPack'' in the underground [[modding]] culture. The ELF file format is also used with the [[Atmel AVR]] (8-bit), [[AVR32]]<ref>{{citation
| url=//www.sco.com/developers/gabi/2009-10-26/ch4.eheader.html#e_machine
| title=System V Application Binary Interface
| chapter=Chapter 4: Object Files
| at=''e_machine''
| date=2009-10-26
}}</ref> and with [[Texas Instruments]] [[MSP430]] microcontroller architectures. Some implementations of [[Open Firmware]] can also load ELF files, most notably [[Apple Inc.|Apple]]'s implementation used in almost all [[PowerPC]] machines the company produced.

==Specifications==
<!--This would probably be better presented as a table-->
{{Div col||30em}}
* Generic:
** ''[http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface]'' Edition 4.1 (1997-03-18)
** ''[http://www.sco.com/developers/gabi/latest/contents.html System V ABI Update]'' (October 2009)
* [[AMD64]]:
** ''[http://www.x86-64.org/documentation/abi.pdf System V ABI, AMD64 Supplement]''
* [[ARM architecture|ARM]]:
** ''[http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044b/IHI0044B_aaelf.pdf ELF for the ARM Architecture]''
* [[IA-32]]:
** ''[http://www.sco.com/developers/devspecs/abi386-4.pdf System V ABI, Intel386 Architecture Processor Supplement]''
* [[IA-64]]:
** ''[http://refspecs.linux-foundation.org/IA64conventions.pdf Itanium Software Conventions and Runtime Guide]'' (September 2000)
* [[M32R]]:
** ''[http://www.linux-m32r.org/cmn/m32r/M32R-elf-abi.pdf M32R ELF ABI Supplement]'' Version 1.2 (2004-08-26)
* [[MIPS architecture|MIPS]]:
** ''[http://www.sco.com/developers/devspecs/mipsabi.pdf System V ABI, MIPS RISC Processor Supplement]''
** ''[http://sources.redhat.com/ml/binutils/2003-06/msg00436.html MIPS EABI documentation]'' (2003-06-11)
* [[Motorola 6800]]:
** ''[http://uclibc.org/docs/psABI-m8-16.pdf Motorola 8 and 16 bit Embedded ABI]''
* [[PA-RISC]]:
** ''[http://refspecs.freestandards.org/elf/elf-pa.pdf ELF Supplement for PA-RISC]'' Version 1.43 (October 6, 1997)
* [[PowerPC]]:
** ''[http://refspecs.freestandards.org/elf/elfspec_ppc.pdf System V ABI, PPC Supplement]
** ''[http://sources-redhat.mirrors.airband.net/binutils/ppc-docs/ppc-eabi-1995-01.pdf PowerPC Embedded Application Binary Interface] 32-Bit Implementation'' (1995-10-01)
** ''[http://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi-1.9.html 64-bit PowerPC ELF Application Binary Interface Supplement]'' Version 1.9 (2004)
* [[SPARC]]:
** ''[http://www.sparc.org/standards/psABI3rd.pdf System V ABI, SPARC Supplement]''
* [[S/390]]:
** ''[http://refspecs.linuxbase.org/ELF/zSeries/lzsabi0_s390.html S/390 32bit ELF ABI Supplement]''
* [[zSeries]]:
** ''[http://refspecs.linuxbase.org/ELF/zSeries/lzsabi0_zSeries.html zSeries 64bit ELF ABI Supplement]''
* Symbian OS 9:
** ''[http://wiki.forum.nokia.com/index.php/E32Image_file_format_on_Symbian_OS_9 E32Image file format on Symbian OS 9]''
{{Div col end}}

The [[Linux Standard Base]] (LSB) supplements some of the above specifications for architectures in which it is specified.<ref>{{cite web|url=http://refspecs.linuxfoundation.org/lsb.shtml|title=LSB Referenced Specifications|work=linuxfoundation.org|accessdate=27 April 2015}}</ref> For example, that is the case for the System V ABI, AMD64 Supplement.<ref>{{cite web|url=http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-AMD64/LSB-Core-AMD64/elf-amd64.html|title=Executable and Linking Format (ELF)|work=linuxfoundation.org|accessdate=27 April 2015}}</ref><ref>{{cite web|url=http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-AMD64/LSB-Core-AMD64/elfintro.html|title=Introduction|work=linuxfoundation.org|accessdate=27 April 2015}}</ref>

==86open==
'''86open''' was a project to form consensus on a common [[binary file]] format for [[Unix]] and [[Unix-like]] [[operating system]]s on the common [[PC compatible]] [[x86]] architecture, in order to encourage software developers to port to the architecture.<ref>{{cite web
  | url = http://www.telly.org/86open-faq
  | title = 86Open Frequently-Asked Questions
  | accessdate = 2007-06-06
  | last = Leibovitch
  | first = Evan
  | authorlink = 
  | date = 1997-12-23
|archiveurl = http://web.archive.org/web/20070311032337/http://www.telly.org/86open-faq <!-- Bot retrieved archive --> |archivedate = 2007-03-11}}</ref> The initial idea was to standardize on a small subset of Spec 1170, a predecessor of the [[Single UNIX Specification]], and the GNU C Library (glibc) to enable unmodified binaries to run on the x86 UNIX-like operating systems. The project was originally designated "Spec 150".

The format eventually chosen was ELF, specifically the Linux implementation of ELF, after it had turned out to be a [[De facto standard|''de facto'' standard]] supported by all involved vendors and operating systems.

The group started email discussions in 1997 and first met together at the [[Santa Cruz Operation]] offices on August 22, 1997.

The steering committee was [[Marc Ewing]], Dion Johnson, Evan Leibovitch, [[Bruce Perens]], Andrew Roach, Bryan Sparks and [[Linus Torvalds]]. Other people on the project were [[Keith Bostic]], Chuck Cranor, Michael Davidson,<!--At least three other Michael Davidsons in WP as of 04.2007--> Chris G. Demetriou, [[Ulrich Drepper]], Don Dugger, Steve Ginzburg, [[Jon "maddog" Hall]], Ron Holt, [[Jordan Hubbard]], Dave Jensen, Kean Johnston, Andrew Josey, Robert Lipe, Bela Lubkin, Tim Marsland, Greg Page,<!--Three other people by that name in WP as of 04.2007--> Ronald Joe Record, Tim Ruckle, Joel Silverstein, Chia-pi Tien and [[Erik Troan]]. Operating systems and companies represented were [[BeOS]], [[BSDI]], [[FreeBSD]], [[Intel]], [[Linux]], [[NetBSD]], [[Santa Cruz Operation|SCO]] and [[SunSoft, Inc.]].

The project progressed and in mid-1998, SCO began developing [[lxrun]], an open-source [[compatibility layer]] capable of running Linux binaries on [[OpenServer]], [[UnixWare]], and [[Solaris (operating system)|Solaris]]. SCO announced official support of lxrun at [[LinuxWorld Conference and Expo|LinuxWorld]] in March 1999. [[Sun Microsystems]] began officially supporting [[lxrun]] for Solaris in early 1999,<ref>{{cite web
  | url = http://www.mavetju.org/mail/view_message.php?list=freebsd-emulation&id=361608
  | title = Bulletin on status of 86open at SCO
  | accessdate = 2008-05-06
  | last = Record
  | first = Ronald
  | date = 1998-05-21
}}</ref> and has since moved to integrated support of the Linux binary format via [[Solaris Containers for Linux Applications]].

With the BSDs having long supported Linux binaries (through a [[compatibility layer]]) and the main x86 Unix vendors having added support for the format, the project decided that Linux ELF was the format chosen by the industry and "declare[d] itself dissolved" on July 25, 1999.<ref>{{cite web
  | url = http://www.telly.org/86open/
  | title = The86open Project - FINAL UPDATE
  | accessdate = 2007-05-06
  | last = Leibovitch
  | first = Evan
  | date = 1999-07-25
|archiveurl = http://web.archive.org/web/20070227214032/http://www.telly.org/86open/ <!-- Bot retrieved archive --> |archivedate = 2007-02-27}}</ref>

==FatELF: Universal Binaries for Linux==
[http://icculus.org/fatelf/ FatELF] is an ELF binary-format extension which adds [[Fat binary]] capabilities.<ref name="fatelfspec">{{cite web|publisher=icculus.org| title=fatelf-specification v1| url=http://hg.icculus.org/icculus/fatelf/raw-file/tip/docs/fatelf-specification.txt| date=| accessdate=2010-07-25|last=Gordon| first=Ryan}}</ref> It is aimed for [[Linux]] and other [[Unix-like]] operating systems. Additionally to the CPU architecture abstraction ([[byte order]], [[word size]], [[CPU]] [[instruction set]] etc.), there is the potential advantage of software-platform abstraction e.g. binaries which support multiple kernel [[Application binary interface|ABIs]] versions.

A proof-of-concept [[Ubuntu (operating system)|Ubuntu 9.04]] image ([http://icculus.org/fatelf/vm/ VM image of Ubuntu 9.04 with Fat Binary support]) and development tools are available. As of 2014, support for FatELF is not integrated in the Linux kernel mainline.<ref name="kernel1">{{cite web|publisher=icculus.org| title=FatELF: Turns out I liked the uncertainty better.| url=http://icculus.org/cgi-bin/finger/finger.pl?user=icculus&date=2009-11-03&time=19-08-04|date=|accessdate=2010-07-13|last=Gordon|first=Ryan}}</ref><ref name="kernel2">{{cite web|publisher=osnews.com| title=Ryan Gordon Halts FatELF Project| url=http://www.osnews.com/comments/22446|date=2009-11-03|accessdate=2010-07-05|last=Holwerda|first=Thom}}</ref><ref name=selfanatomy>{{cite web|url=http://lwn.net/Articles/392862/ |title=SELF: Anatomy of an (alleged) failure|publisher= Linux Weekly News|date= June 23, 2010|first=Joe|last=Brockmeier|accessdate=2011-02-06}}</ref>

==See also==
{{Portal|Computer programming|Computing}}

* [[Application binary interface]]
* [[Comparison of executable file formats]]
* [[DWARF]]{{snd}} a format for debugging data
* [[Intel Binary Compatibility Standard]]
* [[Portable Executable]]
* [[vDSO]]{{snd}} virtual DSO

==References==
{{Reflist|30em}}

==Further reading==
{{Div col||30em}}
*{{cite book
 |     title = Linkers and Loaders
 |    author = [[John R. Levine]]
 |date=October 1999
 | publisher = Morgan-Kauffman
 |      isbn = 1-55860-496-0
 |        url= http://www.iecc.com/linker/
 }}
*{{cite paper
 |      title = How To Write Shared Libraries
 |     author = [[Ulrich Drepper]]
 |    version = 4.0
 |       date = 2006-08-20
 |        url = http://people.redhat.com/drepper/dsohowto.pdf
 | accessdate = 2007-06-20
 }}
* ''[http://web.archive.org/web/20070224140341/http://www-128.ibm.com/developerworks/power/library/pa-spec12/ An unsung hero: The hardworking ELF]'' by Peter Seebach, December 20, 2005, archived from the original on February 24, 2007
* ''[http://developers.sun.com/solaris/articles/elf.html LibElf and GElf &mdash; A Library to Manipulate ELF Files]'' by Neelakanth Nadgir (August 2001)
* ''[http://www.linuxjournal.com/node/1060/print The ELF Object File Format by Dissection]'' by Eric Youngdale (1995-05-01)
* ''[http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux]'' by Brian Raiter
* [http://www.phrack.org/issues.html?issue=61&id=8#article ELF relocation into non-relocatable objects] by Julien Vanegue (2003-08-13)
* [http://www.phrack.org/issues.html?issue=63&id=9#article Embedded ELF debugging without ptrace] by the ELFsh team (2005-08-01)
* ''[http://netwinder.osuosl.org/users/p/patb/public_html/elf_relocs.html Study of ELF loading and relocs]'' by Pat Beirne (1999-08-03)
{{Div col end}}

==External links==
{{Div col||30em}}
* [http://web.archive.org/web/20130403001804/http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/binary-formats.html FreeBSD Handbook: Binary formats] (archived version)
* [http://www.freebsd.org/cgi/man.cgi?query=elf&sektion=5 FreeBSD <tt>elf(5)</tt> manual page]
* [http://www.netbsd.org/Documentation/elf.html NetBSD ELF FAQ]
* [http://www.oracle.com/pls/topic/lookup?ctx=solaris11&id=OSLLG Oracle Solaris Linker and Libraries Guide]
* [http://www.eresi-project.org The ERESI project : reverse engineering on ELF-based operating systems]
* [http://www.linuxtoday.com/developer/1999072600605PS Linux Today article on 86open] July 26, 1999
* [http://lists.debian.org/debian-announce/1997/msg00028.html Announcement of 86open on Debian Announce mailing list] October 10, 1997, [[Bruce Perens]]
* [http://www.groklaw.net/pdf/IBM-835-Exhibit_184.pdf Declaration of Ulrich Drepper (PDF)] in [[The SCO Group]] vs [[IBM]], September 19, 2006
* [http://www.groklaw.net/articlebasic.php?story=20060813114048520 86open and ELF discussion] on [[Groklaw]], August 13, 2006
{{Div col end}}

{{Executables}}

[[Category:Executable file formats]]