<article title='Database'><paragraph>A<space/><bold>database</bold><space/>is an organized collection of<space/><link><target>Data (computing)</target><part>data</part></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.merriam-webster.com/dictionary/database</arg><arg name="title">Database - Definition of database by Merriam-Webster</arg><arg name="work">merriam-webster.com</arg></template></extension><space/>It is the collection of schemes,<space/><link><target>Table (database)</target><part>tables</part></link>,<space/><link><target>Query language</target><part>queries</part></link>, reports,<space/><link><target>View (SQL)</target><part>views</part></link><space/>and other objects.The data is typically organized to model aspects of reality in a way that supports<space/><link><target>Process (computing)</target><part>processes</part></link><space/>requiring information, such as modelling the availability of rooms in hotels in a way that supports finding a hotel with vacancies.</paragraph><paragraph>A<space/><bold>database management system</bold><space/>(<bold>DBMS</bold>) is a<space/><link><target>computer software</target></link><space/>application that interacts with the user, other applications, and the database itself to capture and analyze data. A general-purpose DBMS is designed to allow the definition, creation, querying, update, and administration of databases. Well-known DBMSs include<space/><link><target>MySQL</target></link>,<space/><link><target>PostgreSQL</target></link>,<space/><link><target>Microsoft SQL Server</target></link>,<space/><link><target>Oracle Database</target><part>Oracle</part></link>,<space/><link><target>Sybase</target></link><space/>and<space/><link><target>IBM DB2</target></link>. A database is not generally<space/><link><target>Software portability</target><part>portable</part></link><space/>across different DBMSs, but different DBMS can interoperate by using<space/><link><target>Technical standard</target><part>standards</part></link><space/>such as<space/><link><target>SQL</target></link><space/>and<space/><link><target>ODBC</target></link><space/>or<space/><link><target>JDBC</target></link><space/>to allow a single application to work with more than one DBMS. Database management systems are often classified according to the<space/><link><target>database model</target></link><space/>that they support; the most popular database systems since the 1980s have all supported the<space/><link><target>relational model</target></link><space/>as represented by the<space/><link><target>SQL</target></link><space/>language.<template><target>disputed inline</target><arg>All SQL?</arg><arg name="date">June 2015</arg></template><space/>Sometimes a DBMS is loosely referred to as a 'database'.</paragraph><heading level='2'>Terminology and overview</heading><paragraph>Formally, a &quot;database&quot; refers to a set of related data and the way it is organized. Access to this data is usually provided by a &quot;database management system&quot; (DBMS) consisting of an integrated set of computer software that allows<space/><link><target>user (computing)</target><part>users</part></link><space/>to interact with one or more databases and provides access to all of the data contained in the database (although restrictions may exist that limit access to particular data). The DBMS provides various functions that allow entry, storage and retrieval of large quantities of information and provides ways to manage how that information is organized.</paragraph><paragraph>Because of the close relationship between them, the term &quot;database&quot; is often used casually to refer to both a database and the DBMS used to manipulate it.</paragraph><paragraph>Outside the world of professional<space/><link><target>information technology</target></link>, the term<space/><italics>database</italics><space/>is often used to refer to any collection of related data (such as a<space/><link><target>spreadsheet</target></link><space/>or a card index). This article is concerned only with databases where the size and usage requirements necessitate use of a database management system.<extension extension_name='ref' name="Ullman"><link><target>Jeffrey Ullman</target></link><space/>1997:<space/><italics>First course in database systems</italics>, PrenticeHall Inc., Simon &amp; Schuster, Page 1, ISBN 0-13-861337-0.</extension></paragraph><paragraph>Existing DBMSs provide various functions that allow management of a database and its data which can be classified into four main functional groups:</paragraph><list type='bullet'><listitem>Data definition Creation, modification and removal of definitions that define the organization of the data.</listitem><listitem>Update Insertion, modification, and deletion of the actual data.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.merriam-webster.com/dictionary/update</arg><arg name="title">Update - Definition of update by Merriam-Webster</arg><arg name="work">merriam-webster.com</arg></template></extension></listitem><listitem>Retrieval Providing information in a form directly usable or for further processing by other applications. The retrieved data may be made available in a form basically the same as it is stored in the database or in a new form obtained by altering or combining existing data from the database.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.merriam-webster.com/dictionary/retrieval</arg><arg name="title">Retrieval - Definition of retrieval by Merriam-Webster</arg><arg name="work">merriam-webster.com</arg></template></extension></listitem><listitem>Administration Registering and monitoring users, enforcing data security, monitoring performance, maintaining data integrity, dealing with concurrency control, and recovering information that has been corrupted by some event such as an unexpected system failure.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.merriam-webster.com/dictionary/administration</arg><arg name="title">Administration - Definition of administration by Merriam-Webster</arg><arg name="work">merriam-webster.com</arg></template></extension></listitem></list><paragraph>Both a database and its DBMS conform to the principles of a particular<space/><link><target>database model</target></link>.<extension extension_name='ref'>Tsitchizris, D. C. and F. H. Lochovsky (1982).<space/><italics>Data Models.</italics><space/>Englewood-Cliffs, PrenticeHall.</extension><space/>&quot;Database system&quot; refers collectively to the database model, database management system, and database.<extension extension_name='ref'>Beynon-Davies P. (2004).<space/><italics>Database Systems</italics><space/>3rd Edition. Palgrave, Basingstoke, UK. ISBN 1-4039-1601-2</extension></paragraph><paragraph>Physically, database<space/><link><target>Server (computing)</target><part>servers</part></link><space/>are dedicated computers that hold the actual databases and run only the DBMS and related software. Database servers are usually<space/><link><target>multiprocessor</target></link><space/>computers, with generous memory and<space/><link><target>redundant array of independent disks</target><part>RAID</part></link><space/>disk arrays used for stable storage. RAID is used for recovery of data if any of the disks fail. Hardware database accelerators, connected to one or more servers via a high-speed channel, are also used in large volume transaction processing environments. DBMSs are found at the heart of most<space/><link><target>database application</target><trail>s</trail></link>. DBMSs may be built around a custom<space/><link><target>computer multitasking</target><part>multitasking</part></link><space/><link><target>kernel (computing)</target><part>kernel</part></link><space/>with built-in<space/><link><target>Computer network</target><part>networking</part></link><space/>support, but modern DBMSs typically rely on a standard<space/><link><target>operating system</target></link><space/>to provide these functions.<space/><template><target>Citation needed</target><arg name="date">April 2010</arg></template><space/>Since DBMSs comprise a significant<space/><link><target>Economy</target><part>economical</part></link><space/><link><target>Market (economics)</target><part>market</part></link>, computer and storage vendors often take into account DBMS requirements in their own development plans.<template><target>Citation needed</target><arg name="date">March 2013</arg></template></paragraph><paragraph>Databases and DBMSs can be categorized according to the database model(s) that they support (such as relational or XML), the type(s) of computer they run on (from a server cluster to a mobile phone), the<space/><link><target>query language</target></link>(s) used to access the database (such as SQL or<space/><link><target>XQuery</target></link>), and their internal engineering, which affects performance,<space/><link><target>scalability</target></link>, resilience, and security.</paragraph><heading level='2'>Applications</heading><paragraph><template><target>unreferenced section</target><arg name="date">March 2013</arg></template></paragraph><paragraph>Databases are used to support internal operations of organizations and to underpin online interactions with customers and suppliers (see<space/><link><target>Enterprise software</target></link>).</paragraph><paragraph>Databases are used to hold administrative information and more specialized data, such as engineering data or economic models. Examples of database applications include computerized<space/><link><target>library</target></link><space/>systems,<space/><link><target>flight reservation system</target><trail>s</trail></link>, computerized<space/><link><target>parts inventory system</target><trail>s</trail></link>, and many<space/><link><target>content management system</target><trail>s</trail></link><space/>that store<space/><link><target>website</target><trail>s</trail></link><space/>as collections of webpages in a database.</paragraph><heading level='2'>General-purpose and special-purpose DBMSs</heading><paragraph>A DBMS has evolved into a complex software system and its development typically requires thousands of person-years of development effort.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.ibmpressbooks.com/articles/article.asp?p</arg><arg name="title">Introduction to DB2<space/></arg><arg name="date">3 July 2008<space/></arg><arg name="accessdate">17 March 2013</arg><arg name="author">Raul F. Chong, Michael Dang, Dwaine R. Snow, Xiaomei Wang</arg></template>. This article quotes a development time of 5 years involving 750 people for DB2 release 9 alone</extension><space/>Some general-purpose DBMSs such as<space/><link><target>Adabas</target></link>,<space/><link><target>Oracle Corporation</target><part>Oracle</part></link><space/>and DB2 have been undergoing upgrades since the 1970s. General-purpose DBMSs aim to meet the needs of as many applications as possible, which adds to the complexity. However, the fact that their development cost can be spread over a large number of users means that they are often the most cost-effective approach. However, a general-purpose DBMS is not always the optimal solution: in some cases a general-purpose DBMS may introduce unnecessary overhead. Therefore, there are many examples of systems that use special-purpose databases. A common example is an<space/><link><target>email</target></link><space/>system that performs many of the functions of a general-purpose DBMS such as the insertion and deletion of messages composed of various items of data or associating messages with a particular email address; but these functions are limited to what is required to handle email and don't provide the user with the all of the functionality that would be available using a general-purpose DBMS.</paragraph><preblock><preline>	</preline></preblock><paragraph>Many other databases have<space/><link><target>application software</target></link><space/>that accesses the database on behalf of end-users, without exposing the DBMS interface directly. Application programmers may use a<space/><link><target>wire protocol</target></link><space/>directly, or more likely through an<space/><link><target>application programming interface</target></link>. Database designers and database administrators interact with the DBMS through dedicated interfaces to build and maintain the applications' databases, and thus need some more knowledge and understanding about how DBMSs operate and the DBMSs' external interfaces and tuning parameters.</paragraph><heading level='2'>History</heading><paragraph>Following the<space/><link><target>technology</target></link><space/>progress in the areas of<space/><link><target>processors</target></link>,<space/><link><target>computer memory</target></link>,<space/><link><target>computer storage</target></link><space/>and<space/><link><target>computer networks</target></link>, the sizes, capabilities, and performance of databases and their respective DBMSs have grown in orders of magnitude. The development of database technology can be divided into three eras based on data model or structure:<space/><link><target>navigational database</target><part>navigational</part></link>,<extension extension_name='ref'><template><target>citation</target><arg name="author"><space/>C. W. Bachmann<space/></arg><arg name="title"><space/>The Programmer as Navigator<space/></arg><arg name="date"><space/>November 1973<space/></arg><arg name="journal"><space/>CACM<space/></arg><arg name="url"><space/>http://www.cs.uiuc.edu/class/fa05/cs511/Spring05/other_papers/p653-bachman.pdf</arg></template><space/>(Turing Award Lecture 1973)</extension><space/>SQL/<link><target>relational database</target><part>relational</part></link>, and post-relational.</paragraph><paragraph>The two main early navigational data models were the<space/><link><target>Hierarchical database model</target><part>hierarchical model</part></link>, epitomized by IBM's IMS system, and the<space/><link><target>CODASYL</target></link><space/>model (<link><target>network model</target></link>), implemented in a number of products such as<space/><link><target>IDMS</target></link>.</paragraph><paragraph>The<space/><link><target>relational model</target></link>, first proposed in 1970 by<space/><link><target>Edgar F. Codd</target></link>, departed from this tradition by insisting that applications should search for data by content, rather than by following links. The relational model employs sets of ledger-style tables, each used for a different type of entity. Only in the mid-1980s did computing hardware become powerful enough to allow the wide deployment of relational systems (DBMSs plus applications). By the early 1990s, however, relational systems dominated in all large-scale data processing applications, and<space/><template><target>as of</target><arg><space/>2015<space/></arg><arg name="lc"><space/>on</arg></template><space/>they remain dominant :<space/><link><target>IBM DB2</target></link>,<space/><link><target>Oracle database</target><part>Oracle</part></link>,<space/><link><target>MySQL</target></link><space/>and<space/><link><target>Microsoft SQL Server</target></link><space/>are the top<space/><link><target>DBMS</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://pypl.github.io/DB.html</arg><arg name="title">TOPDB Top Database index</arg><arg name="work">pypl.github.io</arg></template></extension><space/>The dominant database language, standardised SQL for the relational model, has influenced database languages for other data models.<template><target>Citation needed</target><arg name="date">March 2013</arg></template></paragraph><paragraph><link><target>Object database</target><trail>s</trail></link><space/>were developed in the 1980s to overcome the inconvenience of<space/><link><target>object-relational impedance mismatch</target></link>, which led to the coining of the term &quot;post-relational&quot; and also the development of hybrid<space/><link><target>object-relational database</target><trail>s</trail></link>.</paragraph><paragraph>The next generation of post-relational databases in the late 2000s became known as<space/><link><target>NoSQL</target></link><space/>databases, introducing fast<space/><link><target>key-value store</target><trail>s</trail></link><space/>and<space/><link><target>document-oriented database</target><trail>s</trail></link>. A competing &quot;next generation&quot; known as<space/><link><target>NewSQL</target></link><space/>databases attempted new implementations that retained the relational/SQL model while aiming to match the high performance of NoSQL compared to commercially available relational DBMSs.</paragraph><heading level='3'>1960s, navigational DBMS</heading><paragraph><template><target>Further</target><arg>Navigational database</arg></template><link><target>File:CodasylB.png</target><part>thumb</part><part>280px</part><part>Basic structure of navigational<space/><link><target>CODASYL</target></link><space/>database model</part></link></paragraph><paragraph>The introduction of the term<space/><italics>database</italics><space/>coincided with the availability of direct-access storage (disks and drums) from the mid-1960s onwards. The term represented a contrast with the tape-based systems of the past, allowing shared interactive use rather than daily<space/><link><target>batch processing</target></link>. The<space/><link><target>Oxford English Dictionary</target></link><space/>cites<extension extension_name='ref'><template><target>cite web</target><arg name="title">database, n</arg><arg name="url">http://www.oed.com/view/Entry/47411</arg><arg name="work">OED Online</arg><arg name="publisher">Oxford University Press</arg><arg name="accessdate">July 12, 2013</arg><arg name="date">June 2013</arg></template></extension><space/>a 1962 report by the System Development Corporation of California as the first to use the term &quot;data-base&quot; in a specific technical sense.</paragraph><paragraph>As computers grew in speed and capability, a number of general-purpose database systems emerged; by the mid-1960s a number of such systems had come into commercial use. Interest in a standard began to grow, and<space/><link><target>Charles Bachman</target></link>, author of one such product, the<space/><link><target>Integrated Data Store</target></link><space/>(IDS), founded the &quot;Database Task Group&quot; within<space/><link><target>CODASYL</target></link>, the group responsible for the creation and standardization of<space/><link><target>COBOL</target></link>. In 1971 the Database Task Group delivered their standard, which generally became known as the &quot;CODASYL approach&quot;, and soon a number of commercial products based on this approach entered the market.</paragraph><paragraph>The CODASYL approach relied on the &quot;manual&quot; navigation of a linked data set which was formed into a large network. Applications could find records by one of three methods:</paragraph><list type='numbered'><listitem>Use of a primary key (known as a CALC key, typically implemented by<space/><link><target>Hash_function</target><part>hashing)</part></link></listitem><listitem>Navigating relationships (called sets) from one record to another</listitem><listitem>Scanning all the records in a sequential order</listitem></list><paragraph>Later systems added<space/><link><target>B-tree</target><trail>s</trail></link><space/>to provide alternate access paths. Many CODASYL databases also added a very straightforward query language. However, in the final tally, CODASYL was very complex and required significant training and effort to produce useful applications.</paragraph><paragraph><link><target>International Business Machines</target><part>IBM</part></link><space/>also had their own DBMS in 1968, known as<space/><link><target>IBM Information Management System</target><part>Information Management System</part></link><space/>(IMS). IMS was a development of software written for the<space/><link><target>Apollo program</target></link><space/>on the<space/><link><target>System/360</target></link>. IMS was generally similar in concept to CODASYL, but used a strict hierarchy for its model of data navigation instead of CODASYL's network model. Both concepts later became known as navigational databases due to the way data was accessed, and Bachman's 1973<space/><link><target>Turing Award</target></link><space/>presentation was<space/><italics>The Programmer as Navigator</italics>. IMS is classified<template><target>by whom</target><arg name="date">March 2014</arg></template><space/>as a<space/><link><target>hierarchical database</target></link>. IDMS and<space/><link><target>Cincom Systems</target></link>'<space/><link><target>Cincom Systems#1970s</target><part>TOTAL</part></link><space/>database are classified as network databases. IMS remains in use<space/><template><target>as of</target><arg><space/>2014<space/></arg><arg name="lc"><space/>on</arg></template>.<extension extension_name='ref'><template><target>cite web</target><arg name="last">IBM Corporation</arg><arg name="title">IBM Information Management System (IMS) 13 Transaction and Database Servers delivers high performance and low total cost of ownership</arg><arg name="url">http://www-01.ibm.com/common/ssi/cgi-bin/ssialias?subtype</arg><arg name="accessdate">Feb 20, 2014</arg></template></extension></paragraph><heading level='3'>1970s, relational DBMS</heading><paragraph><link><target>Edgar F. Codd</target><part>Edgar Codd</part></link><space/>worked at IBM in<space/><link><target>San Jose, California</target></link>, in one of their offshoot offices that was primarily involved in the development of<space/><link><target>hard disk</target></link><space/>systems. He was unhappy with the navigational model of the CODASYL approach, notably the lack of a &quot;search&quot; facility. In 1970, he wrote a number of papers that outlined a new approach to database construction that eventually culminated in the groundbreaking<space/><italics>A Relational Model of Data for Large Shared Data Banks</italics>.<extension extension_name='ref'>Codd, E.F. (1970).<link type='external' href='http://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf'>&quot;A Relational Model of Data for Large Shared Data Banks&quot;</link>. In:<space/><italics>Communications of the ACM</italics><space/>13 (6): 377387.</extension></paragraph><paragraph>In this paper, he described a new system for storing and working with large databases. Instead of records being stored in some sort of<space/><link><target>linked list</target></link><space/>of free-form records as in CODASYL, Codd's idea was to use a &quot;<link><target>Table (database)</target><part>table</part></link>&quot; of fixed-length records, with each table used for a different type of entity. A linked-list system would be very inefficient when storing &quot;sparse&quot; databases where some of the data for any one record could be left empty. The relational model solved this by splitting the data into a series of normalized tables (or<space/><italics>relations</italics>), with optional elements being moved out of the main table to where they would take up room only if needed. Data may be freely inserted, deleted and edited in these tables, with the DBMS doing whatever maintenance needed to present a table view to the application/user.</paragraph><paragraph><link><target>File:Relational key SVG.svg</target><part>thumb</part><part>300px</part><part>In the<space/><link><target>relational model</target></link>, records are &quot;linked&quot; using virtual keys not stored in the database but defined as needed between the data contained in the records.</part></link></paragraph><preblock><preline>	</preline></preblock><paragraph>The relational model also allowed the content of the database to evolve without constant rewriting of links and pointers. The relational part comes from entities referencing other entities in what is known as one-to-many relationship, like a traditional hierarchical model, and many-to-many relationship, like a navigational (network) model. Thus, a relational model can express both hierarchical and navigational models, as well as its native tabular model, allowing for pure or combined modeling in terms of these three models, as the application requires.</paragraph><paragraph>For instance, a common use of a database system is to track information about users, their name, login information, various addresses and phone numbers. In the navigational approach all of these data would be placed in a single record, and unused items would simply not be placed in the database. In the relational approach, the data would be<space/><italics>normalized</italics><space/>into a user table, an address table and a phone number table (for instance). Records would be created in these optional tables only if the address or phone numbers were actually provided.</paragraph><paragraph>Linking the information back together is the key to this system. In the relational model, some bit of information was used as a &quot;<link><target>Primary key</target><part>key</part></link>&quot;, uniquely defining a particular record. When information was being collected about a user, information stored in the optional tables would be found by searching for this key. For instance, if the login name of a user is unique, addresses and phone numbers for that user would be recorded with the login name as its key. This simple &quot;re-linking&quot; of related data back into a single collection is something that traditional computer languages are not designed for.</paragraph><paragraph>Just as the navigational approach would require programs to loop in order to collect records, the relational approach would require loops to collect information about any<space/><italics>one</italics><space/>record. Codd's solution to the necessary looping was a set-oriented language, a suggestion that would later spawn the ubiquitous SQL. Using a branch of mathematics known as<space/><link><target>tuple calculus</target></link>, he demonstrated that such a system could support all the operations of normal databases (inserting, updating etc.) as well as providing a simple system for finding and returning<space/><italics>sets</italics><space/>of data in a single operation.</paragraph><paragraph>Codd's paper was picked up by two people at Berkeley,<space/><link><target>Eugene Wong</target></link><space/>and<space/><link><target>Michael Stonebraker</target></link>. They started a project known as<space/><link><target>INGRES</target></link><space/>using funding that had already been allocated for a geographical database project and student programmers to produce code. Beginning in 1973, INGRES delivered its first test products which were generally ready for widespread use in 1979. INGRES was similar to<space/><link><target>IBM System R</target><part>System R</part></link><space/>in a number of ways, including the use of a &quot;language&quot; for<space/><link><target>data access</target></link>, known as<space/><link><target>QUEL query languages</target><part>QUEL</part></link>. Over time, INGRES moved to the emerging SQL standard.</paragraph><paragraph>IBM itself did one test implementation of the relational model,<space/><link><target>PRTV</target></link>, and a production one,<space/><link><target>Business System 12</target></link>, both now discontinued.<space/><link><target>Honeywell</target></link><space/>wrote<space/><link><target>Multics Relational Data Store</target><part>MRDS</part></link><space/>for<space/><link><target>Multics</target></link>, and now there are two new implementations:<space/><link><target>Dataphor</target><part>Alphora Dataphor</part></link><space/>and<space/><link><target>Rel (DBMS)</target><part>Rel</part></link>. Most other DBMS implementations usually called<space/><italics>relational</italics><space/>are actually SQL DBMSs.</paragraph><paragraph>In 1970, the University of Michigan began development of the<space/><link><target>MICRO Information Management System</target></link><extension extension_name='ref' name="Hershey1972">William Hershey and Carol Easthope,<space/><link type='external' href='https://docs.google.com/open?id=0B4t_NX-QeWDYNmVhYjAwMWMtYzc3ZS00YjI0LWJhMjgtZTYyODZmNmFkNThh'>&quot;A set theoretic data structure and retrieval language&quot;</link>, Spring Joint Computer Conference, May 1972 in<space/><italics>ACM SIGIR Forum</italics>, Volume 7, Issue 4 (December 1972), pp. 4555, DOI=<link type='external' href='http://doi.acm.org/10.1145/1095495.1095500'>10.1145/1095495.1095500</link></extension><space/>based on D.L. Childs' Set-Theoretic Data model.<extension extension_name='ref' name="North2010">Ken North,<space/><link type='external' href='http://drdobbs.com/blogs/database/228700616'>&quot;Sets, Data Models and Data Independence&quot;</link>,<space/><italics>Dr. Dobb's</italics>, 10 March 2010</extension><extension extension_name='ref'><link type='external' href='http://hdl.handle.net/2027.42/4163'>''Description of a set-theoretic data structure''</link>, D. L. Childs, 1968, Technical Report 3 of the CONCOMP (Research in Conversational Use of Computers) Project, University of Michigan, Ann Arbor, Michigan, USA</extension><extension extension_name='ref'><link type='external' href='http://hdl.handle.net/2027.42/4164'>''Feasibility of a Set-Theoretic Data Structure : A General Structure Based on a Reconstituted Definition of Relation''</link>, D. L. Childs, 1968, Technical Report 6 of the CONCOMP (Research in Conversational Use of Computers) Project, University of Michigan, Ann Arbor, Michigan, USA</extension><space/>Micro was used to manage very large data sets by the<space/><link><target>US Department of Labor</target></link>, the<space/><link><target>U.S. Environmental Protection Agency</target></link>, and researchers from the<space/><link><target>University of Alberta</target></link>, the<space/><link><target>University of Michigan</target></link>, and<space/><link><target>Wayne State University</target></link>. It ran on IBM mainframe computers using the<space/><link><target>Michigan Terminal System</target></link>.<extension extension_name='ref' name="MICROManual1977"><link type='external' href='http://docs.google.com/viewer?a=v&amp;amp;pid=explorer&amp;amp;chrome=true&amp;amp;srcid=0B4t_NX-QeWDYZGMwOTRmOTItZTg2Zi00YmJkLTg4MTktN2E4MWU0YmZlMjE3'>''MICRO Information Management System (Version 5.0) Reference Manual''</link>, M.A. Kahn, D.L. Rumelhart, and B.L. Bronson, October 1977, Institute of Labor and Industrial Relations (ILIR), University of Michigan and Wayne State University</extension><space/>The system remained in production until 1998.</paragraph><heading level='3'>Integrated approach</heading><paragraph><template><target>Main</target><arg>Database machine</arg></template></paragraph><paragraph>In the 1970s and 1980s attempts were made to build database systems with integrated hardware and software. The underlying philosophy was that such integration would provide higher performance at lower cost. Examples were IBM<space/><link><target>System/38</target></link>, the early offering of<space/><link><target>Teradata</target></link>, and the<space/><link><target>Britton Lee, Inc.</target></link><space/>database machine.</paragraph><paragraph>Another approach to hardware support for database management was<space/><link><target>International Computers Limited</target><part>ICL</part></link>'s<space/><link><target>Content Addressable File Store</target><part>CAFS</part></link><space/>accelerator, a hardware disk controller with programmable search capabilities. In the long term, these efforts were generally unsuccessful because specialized database machines could not keep pace with the rapid development and progress of general-purpose computers. Thus most database systems nowadays are software systems running on general-purpose hardware, using general-purpose computer data storage. However this idea is still pursued for certain applications by some companies like<space/><link><target>Netezza</target></link><space/>and Oracle (<link><target>Exadata</target></link>).</paragraph><heading level='3'>Late 1970s, SQL DBMS</heading><paragraph>IBM started working on a prototype system loosely based on Codd's concepts as<space/><italics>System R</italics><space/>in the early 1970s. The first version was ready in 1974/5, and work then started on multi-table systems in which the data could be split so that all of the data for a record (some of which is optional) did not have to be stored in a single large &quot;chunk&quot;. Subsequent multi-user versions were tested by customers in 1978 and 1979, by which time a standardized<space/><link><target>query language</target></link><space/>SQL<template><target>Citation needed</target><arg name="reason">First version of SQL standard was SQL-86 adopted in 1986</arg><arg name="date">May 2012</arg></template><space/>had been added. Codd's ideas were establishing themselves as both workable and superior to CODASYL, pushing IBM to develop a true production version of System R, known as<space/><italics>SQL/DS</italics>, and, later,<space/><italics>Database 2</italics><space/>(DB2).</paragraph><paragraph><link><target>Larry Ellison</target></link>'s Oracle started from a different chain, based on IBM's papers on System R, and beat IBM to market when the first version was released in 1978.<template><target>citation needed</target><arg name="date">March 2013</arg></template></paragraph><paragraph>Stonebraker went on to apply the lessons from INGRES to develop a new database, Postgres, which is now known as PostgreSQL. PostgreSQL is often used for global mission critical applications (the .org and .info domain name registries use it as their primary<space/><link><target>data store</target></link>, as do many large companies and financial institutions).</paragraph><paragraph>In Sweden, Codd's paper was also read and<space/><link><target>Mimer SQL</target></link><space/>was developed from the mid-1970s at<space/><link><target>Uppsala University</target></link>. In 1984, this project was consolidated into an independent enterprise. In the early 1980s, Mimer introduced transaction handling for high robustness in applications, an idea that was subsequently implemented on most other DBMSs.</paragraph><paragraph>Another data model, the<space/><link><target>entityrelationship model</target></link>, emerged in 1976 and gained popularity for<space/><link><target>database design</target></link><space/>as it emphasized a more familiar description than the earlier relational model. Later on, entityrelationship constructs were retrofitted as a data modeling construct for the relational model, and the difference between the two have become irrelevant.<template><target>Citation needed</target><arg name="date">March 2013</arg></template></paragraph><heading level='3'>1980s, on the desktop</heading><paragraph>The 1980s ushered in the age of<space/><link><target>Desktop Computer</target><part>desktop computing</part></link>. The new computers empowered their users with spreadsheets like<space/><link><target>Lotus 1-2-3</target></link><space/>and database software like<space/><link><target>dBASE</target></link>. The dBASE product was lightweight and easy for any computer user to understand out of the box.<space/><link><target>C. Wayne Ratliff</target></link><space/>the creator of dBASE stated: &quot;dBASE was different from programs like BASIC, C, FORTRAN, and COBOL in that a lot of the dirty work had already been done. The data manipulation is done by dBASE instead of by the user, so the user can concentrate on what he is doing, rather than having to mess with the dirty details of opening, reading, and closing files, and managing space allocation.&quot;<extension extension_name='ref'><link type='external' href='http://www.foxprohistory.org/interview_wayne_ratliff.htm'>Interview with Wayne Ratliff</link>. The FoxPro History. Retrieved on 2013-07-12.</extension><space/>dBASE was one of the top selling software titles in the 1980s and early 1990s.</paragraph><heading level='3'>1990s, object-oriented</heading><paragraph>The 1990s, along with a rise in<space/><link><target>object-oriented programming</target></link>, saw a growth in how data in various databases were handled. Programmers and designers began to treat the data in their databases as objects. That is to say that if a person's data were in a database, that person's attributes, such as their address, phone number, and age, were now considered to belong to that person instead of being extraneous data. This allows for relations between data to be relations to objects and their attributes and not to individual fields.<extension extension_name='ref'>Development of an object-oriented DBMS; Portland, Oregon, United States; Pages: 472 482; 1986; ISBN 0-89791-204-7</extension><space/>The term &quot;<link><target>object-relational impedance mismatch</target></link>&quot; described the inconvenience of translating between programmed objects and database tables.<space/><link><target>Object database</target><trail>s</trail></link><space/>and<space/><link><target>object-relational database</target><trail>s</trail></link><space/>attempt to solve this problem by providing an object-oriented language (sometimes as extensions to SQL) that programmers can use as alternative to purely relational SQL. On the programming side, libraries known as<space/><link><target>object-relational mapping</target><trail>s</trail></link><space/>(ORMs) attempt to solve the same problem.</paragraph><heading level='3'>2000s, NoSQL and NewSQL</heading><paragraph><template><target>Main</target><arg>NoSQL</arg><arg>NewSQL</arg></template></paragraph><paragraph>The next generation of post-relational databases in the 2000s became known as NoSQL databases, including fast key-value stores and document-oriented databases.</paragraph><paragraph><link><target>XML databases</target></link><space/>are a type of structured document-oriented database that allows querying based on<space/><link><target>XML</target></link><space/>document attributes. XML databases are mostly used in<space/><link><target>enterprise database management</target></link>, where XML is being used as the machine-to-machine data interoperability standard. XML database management systems include<space/><link><target>commercial software</target></link><space/><link><target>MarkLogic</target></link><space/>and<space/><link><target>Oracle Database</target><part>Oracle Berkeley DB XML</part></link>, and a free use software<space/><link><target>Clusterpoint</target><part>Clusterpoint Distributed XML/JSON Database</part></link>. All are<space/><link><target>enterprise software</target></link><space/>database platforms and support industry standard<space/><link><target>ACID</target></link>-compliant<space/><link><target>transaction processing</target></link><space/>with strong database consistency characteristics and high level of database security.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/berkeley-db-xml-datasheet-130133.pdf<space/></arg><arg name="title">Oracle Berkeley DB XML<space/></arg><arg name="accessdate">10 March 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.marklogic.com/what-is-marklogic/features/acid-transactions/<space/></arg><arg name="title">ACID Transactions, MarkLogic<space/></arg><arg name="accessdate">10 March 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://docs.clusterpoint.com/wiki/Clusterpoint_DB_at_a_glance<space/></arg><arg name="title">Clusterpoint Database at a Glance<space/></arg><arg name="accessdate">10 March 2015</arg></template></extension></paragraph><paragraph>NoSQL databases are often very fast, do not require fixed table schemas, avoid join operations by storing<space/><link><target>Denormalization</target><part>denormalized</part></link><space/>data, and are designed to<space/><link><target>Horizontal scaling</target><part>scale horizontally</part></link>. The most popular NoSQL systems include<space/><link><target>MongoDB</target></link>,<space/><link><target>Couchbase</target></link>,<space/><link><target>Riak</target></link>,<space/><link><target>Memcached</target></link>,<space/><link><target>Redis</target></link>,<space/><link><target>CouchDB</target></link>,<space/><link><target>Hazelcast</target></link>,<space/><link><target>Apache Cassandra</target></link><space/>and<space/><link><target>HBase</target></link>,<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://db-engines.com/en/ranking<space/></arg><arg name="title">DB-Engines Ranking<space/></arg><arg name="date">January 2013<space/></arg><arg name="accessdate">22 January 2013</arg></template></extension><space/>which are all<space/><link><target>open-source software</target></link><space/>products.</paragraph><paragraph>In recent years there was a high demand for massively distributed databases with high partition tolerance but according to the<space/><link><target>CAP theorem</target></link><space/>it is impossible for a<space/><link><target>Distributed computing</target><part>distributed system</part></link><space/>to simultaneously provide<space/><link><target>Consistency model</target><part>consistency</part></link>, availability and partition tolerance guarantees. A distributed system can satisfy any two of these guarantees at the same time, but not all three. For that reason many NoSQL databases are using what is called<space/><link><target>eventual consistency</target></link><space/>to provide both availability and partition tolerance guarantees with a reduced level of data consistency.</paragraph><paragraph>NewSQL is a class of modern relational databases that aims to provide the same scalable performance of NoSQL systems for online transaction processing (read-write) workloads while still using SQL and maintaining the ACID guarantees of a traditional database system. Such databases include<space/><link><target>ScaleBase</target></link>,<space/><link><target>Clustrix</target></link>,<space/><link><target>EnterpriseDB</target></link>,<space/><link><target>MemSQL</target></link>,<space/><link><target>NuoDB</target></link><extension extension_name='ref'><template><target>cite web</target><arg name="url"><space/>http://www.infoq.com/articles/nuodb-architecture-1/
</arg><arg name="title"><space/>Exploring the Architecture of the NuoDB Database, Part 1
</arg><arg name="first"><space/>Seth
</arg><arg name="last"><space/>Proctor
</arg><arg name="year"><space/>2013
</arg><arg name="accessdate"><space/>2013-07-12
</arg></template></extension><space/>and<space/><link><target>VoltDB</target></link>.</paragraph><heading level='2'>Research</heading><paragraph>Database technology has been an active research topic since the 1960s, both in<space/><link><target>academia</target></link><space/>and in the research and development groups of companies (for example<space/><link><target>IBM Research</target></link>). Research activity includes<space/><link><target>Database theory</target><part>theory</part></link><space/>and development of<space/><link><target>prototype</target><trail>s</trail></link>. Notable research topics have included<space/><link><target>Data model</target><part>models</part></link>, the atomic transaction concept and related<space/><link><target>concurrency control</target></link><space/>techniques, query languages and<space/><link><target>query optimization</target></link><space/>methods,<space/><link><target>RAID</target></link>, and more.</paragraph><paragraph>The database research area has several dedicated<space/><link><target>academic journal</target><trail>s</trail></link><space/>(for example,<space/><italics><link><target>ACM Transactions on Database Systems</target></link></italics>-TODS,<space/><italics><link><target>Data and Knowledge Engineering</target></link></italics>-DKE) and annual<space/><link><target>Academic conference</target><part>conference</part><trail>s</trail></link><space/>(e.g.,<space/><link><target>Association for Computing Machinery</target><part>ACM</part></link><space/><link><target>SIGMOD</target></link>, ACM<space/><link><target>Symposium on Principles of Database Systems</target><part>PODS</part></link>,<space/><link><target>VLDB</target></link>,<space/><link><target>IEEE</target></link><space/>ICDE).</paragraph><heading level='2'>Examples</heading><paragraph>One way to classify databases involves the type of their contents, for example:<space/><link><target>Bibliographic database</target><part>bibliographic</part></link>, document-text, statistical, or multimedia objects. Another way is by their application area, for example: accounting, music compositions, movies, banking, manufacturing, or insurance. A third way is by some technical aspect, such as the database structure or interface type. This section lists a few of the adjectives used to characterize different kinds of databases.</paragraph><list type='bullet'><listitem>An<space/><link><target>in-memory database</target></link><space/>is a database that primarily resides in<space/><link><target>main memory</target></link>, but is typically backed-up by non-volatile computer data storage. Main memory databases are faster than disk databases, and so are often used where response time is critical, such as in telecommunications network equipment.<extension extension_name='ref'><template><target>cite news</target><arg name="url">http://findarticles.com/p/articles/mi_m0EIN/is_2002_June_24/ai_87694370<space/></arg><arg name="work">Business Wire<space/></arg><arg name="title">TeleCommunication Systems Signs up as a Reseller of TimesTen; Mobile Operators and Carriers Gain Real-Time Platform for Location-Based Services<space/></arg><arg name="date">2002-06-24</arg></template></extension><space/><link><target>SAP HANA</target></link><space/>platform is a very hot topic for in-memory database. By May 2012, HANA was able to run on servers with 100TB main memory powered by IBM. The co founder of the company claimed that the system was big enough to run the 8 largest SAP customers.</listitem></list><list type='bullet'><listitem>An<space/><link><target>active database</target></link><space/>includes an event-driven architecture which can respond to conditions both inside and outside the database. Possible uses include security monitoring, alerting, statistics gathering and authorization. Many databases provide active database features in the form of<space/><link><target>database trigger</target><trail>s</trail></link>.</listitem></list><list type='bullet'><listitem>A<space/><link><target>cloud database</target></link><space/>relies on<space/><link><target>Cloud computing</target><part>cloud technology</part></link>. Both the database and most of its DBMS reside remotely, &quot;in the cloud&quot;, while its applications are both developed by programmers and later maintained and utilized by (application's) end-users through a<space/><link><target>web browser</target></link><space/>and<space/><link><target>Open API</target><trail>s</trail></link>.</listitem></list><list type='bullet'><listitem><link><target>Data warehouse</target><trail>s</trail></link><space/>archive data from operational databases and often from external sources such as market research firms. The warehouse becomes the central source of data for use by managers and other end-users who may not have access to operational data. For example, sales data might be aggregated to weekly totals and converted from internal product codes to use<space/><link><target>Universal Product Code</target><part>UPC</part><trail>s</trail></link><space/>so that they can be compared with<space/><link><target>ACNielsen</target></link><space/>data. Some basic and essential components of data warehousing include extracting, analyzing, and<space/><link><target>Data mining</target><part>mining</part></link><space/>data, transforming, loading and managing data so as to make them available for further use.</listitem></list><list type='bullet'><listitem>A<space/><link><target>deductive database</target></link><space/>combines<space/><link><target>logic programming</target></link><space/>with a relational database, for example by using the<space/><link><target>Datalog</target></link><space/>language.</listitem></list><list type='bullet'><listitem>A<space/><link><target>distributed database</target></link><space/>is one in which both the data and the DBMS span multiple computers.</listitem></list><list type='bullet'><listitem>A document-oriented database is designed for storing, retrieving, and managing document-oriented, or semi structured data, information. Document-oriented databases are one of the main categories of NoSQL databases.</listitem></list><list type='bullet'><listitem>An<space/><link><target>embedded database</target></link><space/>system is a DBMS which is tightly integrated with an application software that requires access to stored data in such a way that the DBMS is hidden from the applications end-users and requires little or no ongoing maintenance.<extension extension_name='ref'>Graves, Steve.<space/><link type='external' href='http://www.embedded-computing.com/articles/id/?2020'>&quot;COTS Databases For Embedded Systems&quot;</link>,<space/><italics>Embedded Computing Design</italics><space/>magazine, January 2007. Retrieved on August 13, 2008.</extension></listitem></list><list type='bullet'><listitem><bold>End-user databases</bold><space/>consist of data developed by individual end-users. Examples of these are collections of documents, spreadsheets, presentations, multimedia, and other files. Several products exist to support such databases. Some of them are much simpler than full-fledged DBMSs, with more elementary DBMS functionality.</listitem></list><list type='bullet'><listitem>A<space/><link><target>federated database system</target></link><space/>comprises several distinct databases, each with its own DBMS. It is handled as a single database by a federated database management system (FDBMS), which transparently integrates multiple autonomous DBMSs, possibly of different types (in which case it would also be a<space/><link><target>heterogeneous database system</target></link>), and provides them with an integrated conceptual view.</listitem></list><list type='bullet'><listitem>Sometimes the term<space/><italics>multi-database</italics><space/>is used as a synonym to federated database, though it may refer to a less integrated (e.g., without an FDBMS and a managed integrated schema) group of databases that cooperate in a single application. In this case typically<space/><link><target>Middleware (distributed applications)</target><part>middleware</part></link><space/>is used for distribution, which typically includes an atomic commit protocol (ACP), e.g., the<space/><link><target>two-phase commit protocol</target></link>, to allow<space/><link><target>Distributed transaction</target><part>distributed (global) transactions</part></link><space/>across the participating databases.</listitem></list><list type='bullet'><listitem>A<space/><link><target>graph database</target></link><space/>is a kind of NoSQL database that uses<space/><link><target>Graph (data structure)</target><part>graph structures</part></link><space/>with nodes, edges, and properties to represent and store information. General graph databases that can store any graph are distinct from specialized graph databases such as<space/><link><target>triplestore</target><trail>s</trail></link><space/>and<space/><link><target>network database model</target><part>network databases</part></link>.</listitem></list><list type='bullet'><listitem>An<space/><link><target>array DBMS</target></link><space/>is a kind of NoSQL DBMS that allows to model, store, and retrieve (usually large) multi-dimensional<space/><link><target>Array data structure</target><part>arrays</part></link><space/>such as satellite images and climate simulation output.</listitem></list><list type='bullet'><listitem>In a<space/><link><target>hypertext</target></link><space/>or<space/><link><target>hypermedia</target></link><space/>database, any word or a piece of text representing an object, e.g., another piece of text, an article, a picture, or a film, can be<space/><link><target>hyperlink</target><trail>ed</trail></link><space/>to that object. Hypertext databases are particularly useful for organizing large amounts of disparate information. For example, they are useful for organizing<space/><link><target>online encyclopedia</target><trail>s</trail></link>, where users can conveniently jump around the text. The<space/><link><target>World Wide Web</target></link><space/>is thus a large distributed hypertext database.</listitem></list><list type='bullet'><listitem>A<space/><link><target>knowledge base</target></link><space/>(abbreviated<space/><bold>KB</bold>,<space/><bold>kb</bold><space/>or<space/><extension extension_name='ref'>Argumentation in Artificial Intelligence by Iyad Rahwan, Guillermo R. Simari</extension><extension extension_name='ref'><template><target>cite web</target><arg name="title"><space/>OWL DL Semantics
</arg><arg name="url"><space/>http://www.obitko.com/tutorials/ontologies-semantic-web/owl-dl-semantics.html
</arg><arg name="accessdate"><space/>10 December 2010</arg></template></extension>) is a special kind of database for<space/><link><target>knowledge management</target></link>, providing the means for the computerized collection, organization, and<space/><link><target>Information retrieval</target><part>retrieval</part></link><space/>of<space/><link><target>knowledge</target></link>. Also a collection of data representing problems with their solutions and related experiences.</listitem></list><list type='bullet'><listitem>A<space/><link><target>mobile database</target></link><space/>can be carried on or synchronized from a mobile computing device.</listitem></list><list type='bullet'><listitem><link><target>Operational database</target><trail>s</trail></link><space/>store detailed data about the operations of an organization. They typically process relatively high volumes of updates using<space/><link><target>transaction (database)</target><part>transactions</part></link>. Examples include<space/><link><target>Customer relationship management</target><part>customer databases</part></link><space/>that record contact, credit, and demographic information about a business' customers, personnel databases that hold information such as salary, benefits, skills data about employees,<space/><link><target>enterprise resource planning</target></link><space/>systems that record details about product components, parts inventory, and financial databases that keep track of the organization's money, accounting and financial dealings.</listitem></list><list type='bullet'><listitem>A<space/><link><target>parallel database</target></link><space/>seeks to improve performance through<space/><link><target>Parallel computing</target><part>parallelization</part></link><space/>for tasks such as loading data, building indexes and evaluating queries.</listitem></list><list type='ident'><listitem><list type='ident'><listitem>The major parallel DBMS architectures which are induced by the underlying<space/><link><target>Computer hardware</target><part>hardware</part></link><space/>architecture are:<list type='bullet'><listitem><bold><link><target>Shared memory architecture</target></link></bold>, where multiple processors share the main memory space, as well as other data storage.</listitem><listitem><bold>Shared disk architecture</bold>, where each processing unit (typically consisting of multiple processors) has its own main memory, but all units share the other storage.</listitem><listitem><bold><link><target>Shared nothing architecture</target></link></bold>, where each processing unit has its own main memory and other storage.</listitem></list></listitem></list></listitem></list><list type='bullet'><listitem><link><target>Probabilistic database</target><trail>s</trail></link><space/>employ<space/><link><target>fuzzy logic</target></link><space/>to draw inferences from imprecise data.</listitem></list><list type='bullet'><listitem><link><target>Real-time database</target><trail>s</trail></link><space/>process transactions fast enough for the result to come back and be acted on right away.</listitem></list><list type='bullet'><listitem>A<space/><link><target>spatial database</target></link><space/>can store the data with multidimensional features. The queries on such data include location based queries, like &quot;Where is the closest hotel in my area?&quot;.</listitem></list><list type='bullet'><listitem>A<space/><link><target>temporal database</target></link><space/>has built-in time aspects, for example a temporal data model and a temporal version of SQL. More specifically the temporal aspects usually include valid-time and transaction-time.</listitem></list><list type='bullet'><listitem>A<space/><link><target>terminology-oriented database</target></link><space/>builds upon an<space/><link><target>object-oriented database</target></link>, often customized for a specific field.</listitem></list><list type='bullet'><listitem>An<space/><link><target>unstructured data</target></link><space/>database is intended to store in a manageable and protected way diverse objects that do not fit naturally and conveniently in common databases. It may include email messages, documents, journals, multimedia objects, etc. The name may be misleading since some objects can be highly structured. However, the entire possible object collection does not fit into a predefined structured framework. Most established DBMSs now support unstructured data in various ways, and new dedicated DBMSs are emerging.</listitem></list><heading level='2'>Design and modeling</heading><paragraph><template><target>Main</target><arg>Database design</arg></template></paragraph><paragraph>The first task of a database designer is to produce a<space/><link><target>conceptual data model</target></link><space/>that reflects the structure of the information to be held in the database. A common approach to this is to develop an entity-relationship model, often with the aid of drawing tools. Another popular approach is the<space/><link><target>Unified Modeling Language</target></link>. A successful data model will accurately reflect the possible state of the external world being modeled: for example, if people can have more than one phone number, it will allow this information to be captured. Designing a good conceptual data model requires a good understanding of the application domain; it typically involves asking deep questions about the things of interest to an organisation, like &quot;can a customer also be a supplier?&quot;, or &quot;if a product is sold with two different forms of packaging, are those the same product or different products?&quot;, or &quot;if a plane flies from New York to Dubai via Frankfurt, is that one flight or two (or maybe even three)?&quot;. The answers to these questions establish definitions of the terminology used for entities (customers, products, flights, flight segments) and their relationships and attributes.</paragraph><paragraph>Producing the conceptual data model sometimes involves input from<space/><link><target>Business process modeling</target><part>business processes</part></link>, or the analysis of<space/><link><target>workflow</target></link><space/>in the organization. This can help to establish what information is needed in the database, and what can be left out. For example, it can help when deciding whether the database needs to hold historic data as well as current data.</paragraph><paragraph>Having produced a conceptual data model that users are happy with, the next stage is to translate this into a<space/><link><target>Database schema</target><part>schema</part></link><space/>that implements the relevant data structures within the database. This process is often called logical database design, and the output is a<space/><link><target>logical data model</target></link><space/>expressed in the form of a schema. Whereas the conceptual data model is (in theory at least) independent of the choice of database technology, the logical data model will be expressed in terms of a particular database model supported by the chosen DBMS. (The terms<space/><italics>data model</italics><space/>and<space/><italics>database model</italics><space/>are often used interchangeably, but in this article we use<space/><italics>data model</italics><space/>for the design of a specific database, and<space/><italics>database model</italics><space/>for the modelling notation used to express that design.)</paragraph><paragraph>The most popular database model for general-purpose databases is the relational model, or more precisely, the relational model as represented by the SQL language. The process of creating a logical database design using this model uses a methodical approach known as<space/><link><target>Database normalization</target><part>normalization</part></link>. The goal of normalization is to ensure that each elementary &quot;fact&quot; is only recorded in one place, so that insertions, updates, and deletions automatically maintain consistency.</paragraph><paragraph>The final stage of database design is to make the decisions that affect performance, scalability, recovery, security, and the like. This is often called<space/><italics>physical database design</italics>. A key goal during this stage is<space/><link><target>data independence</target></link>, meaning that the decisions made for performance optimization purposes should be invisible to end-users and applications. Physical design is driven mainly by performance requirements, and requires a good knowledge of the expected workload and access patterns, and a deep understanding of the features offered by the chosen DBMS.</paragraph><paragraph>Another aspect of physical database design is security. It involves both defining<space/><link><target>access control</target></link><space/>to database objects as well as defining security levels and methods for the data itself.</paragraph><heading level='3'>Models</heading><paragraph><template><target>Main</target><arg>Database model</arg></template><link><target>File:Database models.jpg</target><part>thumb</part><part>480px</part><part>Collage of five types of database models</part></link></paragraph><paragraph>A database model is a type of data model that determines the logical structure of a database and fundamentally determines in which manner<space/><link><target>data</target></link><space/>can be stored, organized, and manipulated. The most popular example of a database model is the relational model (or the SQL approximation of relational), which uses a table-based format.</paragraph><paragraph>Common logical data models for databases include:</paragraph><list type='bullet'><listitem><link><target>Navigational database</target><trail>s</trail></link><list type='bullet'><listitem><link><target>Hierarchical database model</target></link></listitem><listitem><link><target>Network model</target></link></listitem><listitem><link><target>Graph database</target></link></listitem></list></listitem><listitem><link><target>Relational model</target></link></listitem><listitem><link><target>Entityrelationship model</target></link><list type='bullet'><listitem><link><target>Enhanced entityrelationship model</target></link></listitem></list></listitem><listitem><link><target>Object database</target><part>Object model</part></link></listitem><listitem>Document model</listitem><listitem><link><target>Entityattributevalue model</target></link></listitem><listitem><link><target>Star schema</target></link></listitem></list><paragraph>An object-relational database combines the two related structures.</paragraph><paragraph><link><target>Physical data model</target><trail>s</trail></link><space/>include:</paragraph><list type='bullet'><listitem><link><target>Inverted index</target></link></listitem><listitem><link><target>Flat file database</target><part>Flat file</part></link></listitem></list><paragraph>Other models include:</paragraph><list type='bullet'><listitem><link><target>Associative model of data</target><part>Associative model</part></link></listitem><listitem><link><target>Multidimensional database</target><part>Multidimensional model</part></link></listitem><listitem><link><target>Array DBMS</target><part>Array model</part></link></listitem><listitem><link><target>Multivalue model</target></link></listitem></list><paragraph>Specialized models are optimized for particular types of data:</paragraph><list type='bullet'><listitem><link><target>XML database</target></link></listitem><listitem><link><target>Semantic data model</target><part>Semantic model</part></link></listitem><listitem><link><target>Content store</target></link></listitem><listitem><link><target>Event store</target></link></listitem><listitem><link><target>Time series database</target><part>Time series model</part></link></listitem></list><heading level='3'>External, conceptual, and internal views</heading><paragraph><link><target>Image:Traditional View of Data SVG.svg</target><part>thumb</part><part>320px</part><part>Traditional view of data<extension extension_name='ref' name="ITL93">itl.nist.gov (1993)<space/><link type='external' href='http://www.itl.nist.gov/fipspubs/idef1x.doc'>''Integration Definition for Information Modeling (IDEFIX)''</link>. 21 December 1993.</extension></part></link></paragraph><paragraph>A database management system provides three views of the database data:</paragraph><list type='bullet'><listitem>The<space/><bold>external level</bold><space/>defines how each group of end-users sees the organization of data in the database. A single database can have any number of views at the external level.</listitem><listitem>The<space/><bold>conceptual level</bold><space/>unifies the various external views into a compatible global view.<extension extension_name='ref' name="date31"></extension><space/>It provides the synthesis of all the external views. It is out of the scope of the various database end-users, and is rather of interest to database application developers and database administrators.</listitem><listitem>The<space/><bold>internal level</bold><space/>(or<space/><italics>physical level</italics>) is the internal organization of data inside a DBMS (see Implementation section below). It is concerned with cost, performance, scalability and other operational matters. It deals with storage layout of the data, using storage structures such as<space/><link><target>Index (database)</target><part>indexes</part></link><space/>to enhance performance. Occasionally it stores data of individual views (<link><target>materialized view</target><trail>s</trail></link>), computed from generic data, if performance justification exists for such redundancy. It balances all the external views' performance requirements, possibly conflicting, in an attempt to optimize overall performance across all activities.</listitem></list><paragraph>While there is typically only one conceptual (or logical) and physical (or internal) view of the data, there can be any number of different external views. This allows users to see database information in a more business-related way rather than from a technical, processing viewpoint. For example, a financial department of a company needs the payment details of all employees as part of the company's expenses, but does not need details about employees that are the interest of the<space/><link><target>human resources</target></link><space/>department. Thus different departments need different<space/><italics>views</italics><space/>of the company's database.</paragraph><paragraph>The three-level database architecture relates to the concept of<space/><italics>data independence</italics><space/>which was one of the major initial driving forces of the relational model. The idea is that changes made at a certain level do not affect the view at a higher level. For example, changes in the internal level do not affect application programs written using conceptual level interfaces, which reduces the impact of making physical changes to improve performance.</paragraph><paragraph>The conceptual view provides a level of indirection between internal and external. On one hand it provides a common view of the database, independent of different external view structures, and on the other hand it abstracts away details of how the data is stored or managed (internal level). In principle every level, and even every external view, can be presented by a different data model. In practice usually a given DBMS uses the same data model for both the external and the conceptual levels (e.g., relational model). The internal level, which is hidden inside the DBMS and depends on its implementation (see Implementation section below), requires a different level of detail and uses its own types of data structure types.</paragraph><paragraph>Separating the<space/><italics>external</italics>,<space/><italics>conceptual</italics><space/>and<space/><italics>internal</italics><space/>levels was a major feature of the relational database model implementations that dominate 21st century databases.<extension extension_name='ref' name="date31"><template><target>harvnb</target><arg>Date</arg><arg>1990</arg><arg name="pages">31–32</arg></template></extension></paragraph><heading level='2'>Languages</heading><paragraph>Database languages are special-purpose languages, which do one or more of the following:</paragraph><list type='bullet'><listitem><link><target>Data definition language</target></link><space/>defines data types and the relationships among them</listitem><listitem><link><target>Data manipulation language</target></link><space/>performs tasks such as inserting, updating, or deleting data occurrences</listitem><listitem><link><target>Query language</target></link><space/>allows searching for information and computing derived information</listitem></list><paragraph>Database languages are specific to a particular data model. Notable examples include:</paragraph><list type='bullet'><listitem>SQL combines the roles of data definition, data manipulation, and query in a single language. It was one of the first commercial languages for the relational model, although it departs in some respects from<space/><link><target>Codd's 12 rules</target><part>the relational model as described by Codd</part></link><space/>(for example, the rows and columns of a table can be ordered). SQL became a standard of the<space/><link><target>American National Standards Institute</target></link><space/>(ANSI) in 1986, and of the<space/><link><target>International Organization for Standardization</target></link><space/>(ISO) in 1987. The standards have been regularly enhanced since and is supported (with varying degrees of conformance) by all mainstream commercial relational DBMSs.<extension extension_name='ref' name="SQL-Fundamentals"><template><target>cite web</target><arg name="last"><space/>Chapple
<space/></arg><arg name="first"><space/>Mike
<space/></arg><arg name="title"><space/>SQL Fundamentals
<space/></arg><arg name="work"><space/>Databases
<space/></arg><arg name="publisher"><space/>About.com
<space/></arg><arg name="url"><space/>http://databases.about.com/od/sql/a/sqlfundamentals.htm
<space/></arg><arg name="accessdate"><space/>2009-01-28<space/></arg></template></extension><extension extension_name='ref' name="IBM-sql"><template><target>cite web</target><arg name="title"><space/>Structured Query Language (SQL)<space/></arg><arg name="publisher"><space/>International Business Machines<space/></arg><arg name="url"><space/>http://publib.boulder.ibm.com/infocenter/db2luw/v9/index.jsp?topic</arg><arg name="date"><space/>October 27, 2006<space/></arg><arg name="accessdate"><space/>2007-06-10<space/></arg></template></extension></listitem></list><list type='bullet'><listitem><link><target>OQL</target></link><space/>is an object model language standard (from the<space/><link><target>Object Data Management Group</target></link>). It has influenced the design of some of the newer query languages like<space/><link><target>JDOQL</target></link><space/>and<space/><link><target>EJB QL</target></link>.</listitem></list><list type='bullet'><listitem><link><target>XQuery</target></link><space/>is a standard XML query language implemented by XML database systems such as<space/><link><target>MarkLogic</target></link><space/>and<space/><link><target>eXist</target></link>, by relational databases with XML capability such as Oracle and DB2, and also by in-memory XML processors such as<space/><link><target>Saxon XSLT</target><part>Saxon</part></link>.</listitem></list><list type='bullet'><listitem><link><target>SQL/XML</target></link><space/>combines<space/><link><target>XQuery</target></link><space/>with SQL.<extension extension_name='ref' name="wagner"><template><target>Citation</target><arg name="title"><space/>SQL/XML:2006 – Evaluierung der Standardkonformität ausgewählter Datenbanksysteme
<space/></arg><arg name="chapter"><space/>1. Auflage
<space/></arg><arg name="author"><space/>Wagner, Michael
<space/></arg><arg name="year"><space/>2010
<space/></arg><arg name="publisher"><space/>Diplomica Verlag
<space/></arg><arg name="isbn"><space/>3-8366-9609-6
</arg></template></extension></listitem></list><paragraph>A database language may also incorporate features like:</paragraph><list type='bullet'><listitem>DBMS-specific Configuration and storage engine management</listitem><listitem>Computations to modify query results, like counting, summing, averaging, sorting, grouping, and cross-referencing</listitem><listitem>Constraint enforcement (e.g. in an automotive database, only allowing one engine type per car)</listitem><listitem>Application programming interface version of the query language, for programmer convenience</listitem></list><heading level='2'>Performance, security, and availability</heading><paragraph>Because of the critical importance of database technology to the smooth running of an enterprise, database systems include complex mechanisms to deliver the required performance, security, and availability, and allow database administrators to control the use of these features.</paragraph><heading level='3'>Storage</heading><paragraph><template><target>Main</target><arg>Computer data storage</arg><arg>Database engine</arg></template></paragraph><paragraph>Database storage is the container of the physical materialization of a database. It comprises the<space/><italics>internal</italics><space/>(physical)<space/><italics>level</italics><space/>in the database architecture. It also contains all the information needed (e.g.,<space/><link><target>metadata</target></link>, &quot;data about the data&quot;, and internal<space/><link><target>data structure</target><trail>s</trail></link>) to reconstruct the<space/><italics>conceptual level</italics><space/>and<space/><italics>external level</italics><space/>from the internal level when needed. Putting data into permanent storage is generally the responsibility of the<space/><link><target>database engine</target></link><space/>a.k.a. &quot;storage engine&quot;. Though typically accessed by a DBMS through the underlying operating system (and often utilizing the operating systems'<space/><link><target>file system</target><trail>s</trail></link><space/>as intermediates for storage layout), storage properties and configuration setting are extremely important for the efficient operation of the DBMS, and thus are closely maintained by database administrators. A DBMS, while in operation, always has its database residing in several types of storage (e.g., memory and external storage). The database data and the additional needed information, possibly in very large amounts, are coded into bits. Data typically reside in the storage in structures that look completely different from the way the data look in the conceptual and external levels, but in ways that attempt to optimize (the best possible) these levels' reconstruction when needed by users and programs, as well as for computing additional types of needed information from the data (e.g., when querying the database).</paragraph><paragraph>Some DBMSs support specifying which<space/><link><target>character encoding</target></link><space/>was used to store data, so multiple encodings can be used in the same database.</paragraph><paragraph>Various low-level<space/><link><target>database storage structures</target></link><space/>are used by the storage engine to serialize the data model so it can be written to the medium of choice. Techniques such as indexing may be used to improve performance. Conventional storage is row-oriented, but there are also<space/><link><target>column-oriented DBMS</target><part>column-oriented</part></link><space/>and<space/><link><target>correlation database</target><trail>s</trail></link>.</paragraph><heading level='4'>Materialized views</heading><paragraph><template><target>Main</target><arg>Materialized view</arg></template></paragraph><paragraph>Often storage redundancy is employed to increase performance. A common example is storing<space/><italics>materialized views</italics>, which consist of frequently needed<space/><italics>external views</italics><space/>or query results. Storing such views saves the expensive computing of them each time they are needed. The downsides of materialized views are the overhead incurred when updating them to keep them synchronized with their original updated database data, and the cost of storage redundancy.</paragraph><heading level='4'>Replication</heading><paragraph><template><target>Main</target><arg>Database replication</arg></template></paragraph><paragraph>Occasionally a database employs storage redundancy by database objects replication (with one or more copies) to increase data availability (both to improve performance of simultaneous multiple end-user accesses to a same database object, and to provide resiliency in a case of partial failure of a distributed database). Updates of a replicated object need to be synchronized across the object copies. In many cases the entire database is replicated.</paragraph><heading level='3'>Security</heading><paragraph><template><target>sync</target><arg>Database security</arg><arg name="date">March 2013</arg></template><template><target>Main</target><arg>Database security</arg></template></paragraph><paragraph><link><target>Database security</target></link><space/>deals with all various aspects of protecting the database content, its owners, and its users. It ranges from protection from intentional unauthorized database uses to unintentional database accesses by unauthorized entities (e.g., a person or a computer program).</paragraph><paragraph>Database access control deals with controlling who (a person or a certain computer program) is allowed to access what information in the database. The information may comprise specific database objects (e.g., record types, specific records, data structures), certain computations over certain objects (e.g., query types, or specific queries), or utilizing specific access paths to the former (e.g., using specific indexes or other data structures to access information). Database access controls are set by special authorized (by the database owner) personnel that uses dedicated protected security DBMS interfaces.</paragraph><paragraph>This may be managed directly on an individual basis, or by the assignment of individuals and<space/><link><target>Privilege (Computing)</target><part>privileges</part></link><space/>to groups, or (in the most elaborate models) through the assignment of individuals and groups to roles which are then granted entitlements. Data security prevents unauthorized users from viewing or updating the database. Using passwords, users are allowed access to the entire database or subsets of it called &quot;subschemas&quot;. For example, an employee database can contain all the data about an individual employee, but one group of users may be authorized to view only payroll data, while others are allowed access to only work history and medical data. If the DBMS provides a way to interactively enter and update the database, as well as interrogate it, this capability allows for managing personal databases.</paragraph><paragraph><link><target>Data security</target></link><space/>in general deals with protecting specific chunks of data, both physically (i.e., from corruption, or destruction, or removal; e.g., see<space/><link><target>physical security</target></link>), or the interpretation of them, or parts of them to meaningful information (e.g., by looking at the strings of bits that they comprise, concluding specific valid credit-card numbers; e.g., see<space/><link><target>data encryption</target></link>).</paragraph><paragraph>Change and access logging records who accessed which attributes, what was changed, and when it was changed. Logging services allow for a forensic<space/><link><target>database audit</target></link><space/>later by keeping a record of access occurrences and changes. Sometimes application-level code is used to record changes rather than leaving this to the database. Monitoring can be set up to attempt to detect security breaches.</paragraph><heading level='3'>Transactions and concurrency</heading><paragraph><template><target>further</target><arg>Concurrency control</arg></template></paragraph><paragraph><link><target>Database transactions</target></link><space/>can be used to introduce some level of<space/><link><target>fault tolerance</target></link><space/>and<space/><link><target>data integrity</target></link><space/>after recovery from a<space/><link><target>Crash (computing)</target><part>crash</part></link>. A database transaction is a unit of work, typically encapsulating a number of operations over a database (e.g., reading a database object, writing, acquiring<space/><link><target>Lock (database)</target><part>lock</part></link>, etc.), an abstraction supported in database and also other systems. Each transaction has well defined boundaries in terms of which program/code executions are included in that transaction (determined by the transaction's programmer via special transaction commands).</paragraph><paragraph>The acronym<space/><link><target>ACID</target></link><space/>describes some ideal properties of a database transaction:<space/><link><target>Atomicity (database systems)</target><part>Atomicity</part></link>,<space/><link><target>Consistency (database systems)</target><part>Consistency</part></link>,<space/><link><target>Isolation (database systems)</target><part>Isolation</part></link>, and<space/><link><target>Durability (database systems)</target><part>Durability</part></link>.</paragraph><heading level='3'>Migration</heading><list type='ident'><listitem><italics>See also section<space/><link><target>Data migration#Database migration</target><part>Database migration</part></link><space/>in article<space/><link><target>Data migration</target></link></italics></listitem></list><paragraph>A database built with one DBMS is not portable to another DBMS (i.e., the other DBMS cannot run it). However, in some situations it is desirable to move, migrate a database from one DBMS to another. The reasons are primarily economical (different DBMSs may have different<space/><link><target>Total cost of ownership</target><part>total costs of ownership</part></link><space/>or TCOs), functional, and operational (different DBMSs may have different capabilities). The migration involves the database's transformation from one DBMS type to another. The transformation should maintain (if possible) the database related application (i.e., all related application programs) intact. Thus, the database's conceptual and external architectural levels should be maintained in the transformation. It may be desired that also some aspects of the architecture internal level are maintained. A complex or large database migration may be a complicated and costly (one-time) project by itself, which should be factored into the decision to migrate. This in spite of the fact that tools may exist to help migration between specific DBMSs. Typically a DBMS vendor provides tools to help importing databases from other popular DBMSs.</paragraph><heading level='3'>Building, maintaining, and tuning</heading><paragraph><template><target>Main</target><arg>Database tuning</arg></template></paragraph><paragraph>After designing a database for an application, the next stage is building the database. Typically an appropriate<space/><link><target>general-purpose DBMS</target></link><space/>can be selected to be utilized for this purpose. A DBMS provides the needed<space/><link><target>user interface</target><trail>s</trail></link><space/>to be utilized by database administrators to define the needed application's data structures within the DBMS's respective data model. Other user interfaces are used to select needed DBMS parameters (like security related, storage allocation parameters, etc.).</paragraph><paragraph>When the database is ready (all its data structures and other needed components are defined) it is typically populated with initial application's data (database initialization, which is typically a distinct project; in many cases using specialized DBMS interfaces that support bulk insertion) before making it operational. In some cases the database becomes operational while empty of application data, and data is accumulated during its operation.</paragraph><paragraph>After the database is created, initialised and populated it needs to be maintained. Various database parameters may need changing and the database may need to be tuned (<link><target>Database tuning</target><part>tuning</part></link>) for better performance; application's data structures may be changed or added, new related application programs may be written to add to the application's functionality, etc.</paragraph><heading level='3'>Backup and restore</heading><paragraph><template><target>Main</target><arg>Backup</arg></template>Sometimes it is desired to bring a database back to a previous state (for many reasons, e.g., cases when the database is found corrupted due to a software error, or if it has been updated with erroneous data). To achieve this a<space/><bold>backup</bold><space/>operation is done occasionally or continuously, where each desired database state (i.e., the values of its data and their embedding in database's data structures) is kept within dedicated backup files (many techniques exist to do this effectively). When this state is needed, i.e., when it is decided by a database administrator to bring the database back to this state (e.g., by specifying this state by a desired point in time when the database was in this state), these files are utilized to<space/><bold>restore</bold><space/>that state.</paragraph><heading level='3'>Static Analysis</heading><paragraph>Static analysis techniques for software verification can be applied also in the scenario of query languages. In particular, the *<link><target>Abstract interpretation</target></link><space/>framework has been extended to the field of query languages for relational databases as a way to support sound approximation techniques.<extension extension_name='ref'>R.Halder and A.Cortesi,<space/><link type='external' href='http://www.dsi.unive.it/~cortesi/paperi/CL2012.pdf'>Abstract Interpretation of Database Query Languages</link>. COMPUTER LANGUAGES, SYSTEMS &amp; STRUCTURES, vol. 38(2), pp. 123--157, Elsevier Ed. (ISSN 1477-8424)</extension><space/>The semantics of query languages can be tuned according to suitable abstractions of the concrete domain of data. The abstraction of relational database system has many interesting applications, in particular, for security purposes, such as fine grained access control, watermarking, etc.</paragraph><heading level='3'>Other</heading><paragraph>Other DBMS features might include:</paragraph><list type='bullet'><listitem><link><target>Database log</target><trail>s</trail></link></listitem><listitem>Graphics component for producing graphs and charts, especially in a data warehouse system</listitem><listitem><bold><link><target>Query optimizer</target></link></bold><space/>Performs<space/><link><target>query optimization</target></link><space/>on every query to choose for it the most efficient<space/><italics><link><target>query plan</target></link></italics><space/>(a partial order (tree) of operations) to be executed to compute the query result. May be specific to a particular storage engine.</listitem><listitem>Tools or hooks for database design, application programming, application program maintenance, database performance analysis and monitoring, database configuration monitoring, DBMS hardware configuration (a DBMS and related database may span computers, networks, and storage units) and related database mapping (especially for a distributed DBMS), storage allocation and database layout monitoring, storage migration, etc.</listitem></list><heading level='2'>See also</heading><paragraph><template><target>Main</target><arg>Outline of databases</arg></template><template><target>Wikipedia books</target><arg>Databases</arg></template><template><target>Div col</target><arg></arg><arg>25em</arg></template></paragraph><list type='bullet'><listitem><link><target>Comparison of database tools</target></link></listitem><listitem><link><target>Comparison of object database management systems</target></link></listitem><listitem><link><target>Comparison of object-relational database management systems</target></link></listitem><listitem><link><target>Comparison of relational database management systems</target></link></listitem><listitem><link><target>Data hierarchy</target></link></listitem><listitem><link><target>Data bank</target></link></listitem><listitem><link><target>Data store</target></link></listitem><listitem><link><target>Database theory</target></link></listitem><listitem><link><target>Database testing</target></link></listitem><listitem><link><target>Database-centric architecture</target></link></listitem><listitem><link><target>Question-focused dataset</target></link></listitem></list><paragraph><template><target>Div col end</target></template></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg name="colwidth">30em</arg></template></paragraph><heading level='2'>Further reading</heading><paragraph><template><target>Div col</target><arg></arg><arg>30em</arg></template><template><target>refbegin</target></template></paragraph><list type='bullet'><listitem>Ling Liu and Tamer M. zsu (Eds.) (2009). &quot;<link type='external' href='http://www.springer.com/computer/database+management+&amp;amp;+information+retrieval/book/978-0-387-49616-0'>Encyclopedia of Database Systems</link>, 4100 p.&amp;nbsp;60 illus. ISBN 978-0-387-49616-0.</listitem><listitem>Beynon-Davies, P. (2004). Database Systems. 3rd Edition. Palgrave, Houndmills, Basingstoke.</listitem><listitem>Connolly, Thomas and Carolyn Begg.<space/><italics>Database Systems.</italics><space/>New York: Harlow, 2002.</listitem><listitem><template><target>cite book</target><arg name="last">Date<space/></arg><arg name="first">C. J.<space/></arg><arg name="authorlink">Christopher J. Date<space/></arg><arg name="title">An Introduction to Database Systems, Fifth Edition<space/></arg><arg name="publisher">Addison Wesley<space/></arg><arg name="year"><space/>2003<space/></arg><arg name="isbn">0-201-51381-1<space/></arg><arg name="ref">harv</arg></template></listitem><listitem>Gray, J. and Reuter, A.<space/><italics>Transaction Processing: Concepts and Techniques</italics>, 1st edition, Morgan Kaufmann Publishers, 1992.</listitem><listitem>Kroenke, David M. and David J. Auer.<space/><italics>Database Concepts.</italics><space/>3rd ed. New York: Prentice, 2007.</listitem><listitem><link><target>Raghu Ramakrishnan</target></link><space/>and<space/><link><target>Johannes Gehrke</target></link>,<space/><italics><link type='external' href='http://pages.cs.wisc.edu/~dbbook/'>Database Management Systems</link></italics></listitem><listitem><link><target>Abraham Silberschatz</target></link>, Henry F. Korth, S. Sudarshan,<space/><italics><link type='external' href='http://www.db-book.com/'>Database System Concepts</link></italics></listitem><listitem>Discussion on database systems,<space/><italics><link type='external' href='http://www.bbconsult.co.uk/Documents/Database-Systems.docx'></link></italics></listitem><listitem><template><target>cite book</target><arg name="last1">Lightstone<space/></arg><arg name="first1">S.<space/></arg><arg name="first2">T.<space/></arg><arg name="last2">Teorey<space/></arg><arg name="first3">T.<space/></arg><arg name="last3">Nadeau<space/></arg><arg name="title">Physical Database Design: the database professional's guide to exploiting indexes, views, storage, and more<space/></arg><arg name="publisher">Morgan Kaufmann Press<space/></arg><arg name="year">2007<space/></arg><arg name="isbn">0-12-369389-6<space/></arg><arg name="ref">harv</arg></template></listitem><listitem>Teorey, T.; Lightstone, S. and Nadeau, T.<space/><italics>Database Modeling &amp; Design: Logical Design</italics>, 4th edition, Morgan Kaufmann Press, 2005. ISBN 0-12-685352-5</listitem></list><paragraph><template><target>refend</target></template><template><target>Div col end</target></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>Sister project links</target><arg name="wikt">database</arg><arg name="commons">Category:Database</arg><arg name="v">Topic:Databases</arg></template></paragraph><list type='bullet'><listitem><template><target>dmoz</target><arg>Computers/Data_Formats/Database</arg></template></listitem><listitem><link type='external' href='http://www.fileextension.org/DB'>DB File extension</link><space/>informations about files with DB extension</listitem></list><paragraph><template><target>Database</target></template><template><target>Databases</target></template><template><target>Database models</target></template><template><target>Data warehouse</target></template><template><target>Sub-disciplines of computing</target></template></paragraph><paragraph><template><target>Authority control</target></template><link><target>Category:Databases</target><part></part></link><link><target>Category:Database management systems</target><part></part></link><link><target>Category:Database theory</target></link></paragraph></article>