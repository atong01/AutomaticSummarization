<article title='Applesoft_BASIC'><paragraph><template><target>more footnotes</target><arg name="date">January 2013</arg></template><bold>Applesoft BASIC</bold><space/>is a dialect of<space/><link><target>Microsoft BASIC</target></link>, developed by<space/><link><target>Marc McDonald</target></link><space/>and<space/><link><target>Ric Weiland</target></link>, supplied with the<space/><link><target>Apple II series</target></link><space/>of computers. It supersedes<space/><link><target>Integer BASIC</target></link><space/>and is the BASIC in<space/><link><target>Read-only memory</target><part>ROM</part></link><space/>in all Apple II series computers after the original<space/><link><target>Apple II#Apple II</target><part>Apple II</part></link><space/>model. It is also referred to as<space/><bold>FP BASIC</bold><space/>(from &quot;<link><target>floating point</target></link>&quot;) because of the Disk Operating System (<link><target>Apple DOS</target><part>DOS</part></link>) command used to invoke it, instead of INT for Integer BASIC. Applesoft BASIC was supplied by<space/><link><target>Microsoft</target></link><space/>and its name is derived from the names of both<space/><link><target>Apple Inc.</target><part>Apple</part></link><space/>and Microsoft. Apple employees, including<space/><link><target>Randy Wigginton</target></link>, adapted Microsoft's interpreter for the Apple II and added several features. The first version of Applesoft was released in 1977 only on<space/><link><target>cassette tape</target></link><space/>and lacked proper support for high-resolution graphics.<space/><bold>Applesoft II</bold>, which was made available on cassette and disk and in the ROM of the Apple II Plus and subsequent models, was released in 1978. It is this latter version, which has some syntax differences from the first as well as support for the Apple II high-resolution graphics modes, that most people mean by the term &quot;Applesoft.&quot;</paragraph><heading level='2'>Background</heading><paragraph>When<space/><link><target>Steve Wozniak</target></link><space/>wrote<space/><link><target>Integer BASIC</target></link><space/>for the<space/><link><target>Apple II</target></link>, he did not implement support for<space/><link><target>floating point</target></link><space/>math because he was primarily interested in writing games, a task for which integers alone were sufficient.<extension extension_name='ref' name="wozniak20140501"><template><target>cite web</target><arg name="url">http://gizmodo.com/how-steve-wozniak-wrote-basic-for-the-original-apple-fr-1570573636<space/></arg><arg name="title">How Steve Wozniak Wrote BASIC for the Original Apple From Scratch<space/></arg><arg name="publisher">Gizmodo<space/></arg><arg name="date">2014-05-01<space/></arg><arg name="accessdate">2 May 2014<space/></arg><arg name="author">Wozniak, Steve</arg></template></extension><space/>In 1976, Microsoft had developed<space/><link><target>Microsoft BASIC</target></link>, a BASIC interpreter for the<space/><link><target>MOS Technology 6502</target></link>, but at the time there was no production computer that used it. Upon learning that Apple had a 6502 machine, Microsoft asked if the company were interested in licensing BASIC, but<space/><link><target>Steve Jobs</target></link><space/>replied that Apple already had one. The Apple II was unveiled to the public at the West Coast Consumer Electronics Expo in April 1977 and became available for sale in June. One of the most common customer complaints about the computer was BASIC's lack of floating-point capability. Integer BASIC is limited to whole numbers between 32768 and 32767 and caused problems for users attempting to write business applications with it. As Wozniakthe only person who understood Integer BASIC well enough to add floating point featureswas busy with the<space/><link><target>Disk II</target></link><space/>drive and controller and with<space/><link><target>Apple DOS</target></link>, Apple turned to Microsoft.</paragraph><paragraph>Apple reportedly obtained an eight-year license for Applesoft BASIC from Microsoft for a flat fee of $21,000, renewing it in 1985 through an arrangement that gave Microsoft the rights and source code for Apple's Macintosh version of BASIC.<extension extension_name='ref'>Herzfeld, Andy &quot;MacBasic The Sad Story of MacBasic&quot;. http://www.folklore.org/StoryView.py?project=Macintosh&amp;story=MacBasic.txt . Folklore.org. 2014 February 12</extension><space/>Applesoft was designed to be backwards-compatible with Integer BASIC and uses the core of Microsoft's 6502 BASIC implementation, which includes using the GET command for detecting key presses and not requiring any spaces on program lines. While Applesoft BASIC is slower than Integer BASIC, it has many features that the older BASIC lacks:</paragraph><list type='bullet'><listitem>Atomic strings: A string is no longer an array of characters (as in Integer BASIC and<space/><link><target>C (programming language)</target><part>C</part></link>); it is instead a<space/><link><target>garbage collection (computer science)</target><part>garbage-collected</part></link><space/>object (as in<space/><link><target>Scheme (programming language)</target><part>Scheme</part></link><space/>and<space/><link><target>Java (programming language)</target><part>Java</part></link>). This allows for string arrays;<space/><xhtml:code>DIM A$(10)</xhtml:code><space/>resulted in a<space/><link><target>Array data type</target><part>vector</part></link><space/>of<space/><italics>eleven</italics><space/>string variables numbered 010.</listitem><listitem>Multidimensional<space/><link><target>Array data type</target><part>arrays</part></link><space/>(numbers or strings)</listitem><listitem>Single-precision<space/><link><target>floating point</target></link><space/>variables with an 8-bit exponent and a 31-bit significand and improved math capabilities, including trigonometry and logarithmic functions</listitem><listitem>Commands for high-resolution graphics</listitem><listitem><xhtml:code>DATA</xhtml:code><space/>statements, with<space/><xhtml:code>READ</xhtml:code><space/>and<space/><xhtml:code>RESTORE</xhtml:code><space/>commands, for representing numerical and string values in quantity</listitem><listitem><xhtml:code>CHR$</xhtml:code>,<space/><xhtml:code>STR$</xhtml:code>, and<space/><xhtml:code>VAL</xhtml:code><space/>functions for converting between string and numeric types (both languages did have the<space/><xhtml:code>ASC</xhtml:code><space/>function)</listitem><listitem><link><target>User-defined function</target><trail>s</trail></link>: simple one-line functions written in BASIC, with a single parameter</listitem><listitem>Error-trapping, allowing BASIC programs to handle unexpected errors by means of a subroutine written in BASIC</listitem></list><paragraph>Conversely, Applesoft lacked the<space/><xhtml:code>MOD</xhtml:code><space/>(remainder) operator that had been present in Integer BASIC.</paragraph><paragraph>Microsoft licensed a BASIC compatible with Applesoft to<space/><link><target>VTech</target></link><space/>for its<space/><link><target>Laser 128</target></link><space/><link><target>Apple II clone</target><part>clone</part></link>.<extension extension_name='ref' name="grevstad198612"><template><target>cite news</target><arg name="url">https://archive.org/stream/inCider_86-12#page/n59/mode/2up<space/></arg><arg name="title">Laser 128 / An Affordable Compatible<space/></arg><arg name="work">inCider<space/></arg><arg name="date">1986-12<space/></arg><arg name="accessdate">29 June 2014<space/></arg><arg name="author">Grevstad, Eric<space/></arg><arg name="pages">58</arg></template></extension></paragraph><heading level='2'>Speed issues, features</heading><paragraph><template><target>cleanup section</target><arg name="reason">The bullet points should be rewritten in prose per [[WP:MOS]]</arg><arg name="date">November 2014</arg></template>Whereas Wozniak originally referred to his Integer BASIC as &quot;Game BASIC,&quot; having written it so he could write a<space/><link><target>Breakout clone</target></link><space/>for his new computer,<template><target>r</target><arg>wozniak20140501</arg></template><space/>few<space/><link><target>action game</target><trail>s</trail></link><space/>were written in Applesoft BASIC for several reasons:</paragraph><list type='bullet'><listitem>In that era of carefully counting clock cycles and limited memory, it was inefficient to write speed-dependent programs that ran on a<space/><link><target>runtime interpreter</target></link>.</listitem><listitem>The use of &quot;real&quot; (floating-point) numbers for all math operations created unnecessary overhead and degraded performance, although this could be improved somewhat using hardware accessories such as<space/><link><target>ALF Products#FTL</target><part>ALF's Formula Transfer Link</part></link>. A common feature of all Microsoft 6502 BASICs is the lack of double-precision variables or true integer math. BASIC normally always works in single-precision and although a % could be placed after a variable to mark it as integer, its value would merely be converted back into single-precision, slowing down program execution and wasting memory (as each &quot;%&quot; required one extra byte of code). The integer variable type on Microsoft 6502 BASIC was really only designed for arrays because each element would take two bytes (versus, in the case of Applesoft, five for floating-point).</listitem><listitem><link><target>Shape table</target><trail>s</trail></link><space/>were then a slow alternative to<space/><link><target>bitmap</target><trail>s</trail></link><space/>and were usually even larger than their respective bitmaps in the amount of bit space they consumed. No provision existed for mixing text and graphics, except for the limited &quot;hardware split screen&quot; of the Apple II (four lines of text at the bottom of the screen). Many graphics programs thus contained their own bitmap character generator routines. No provision was added in the 128 kB<space/><link><target>Apple IIe</target></link><space/>and<space/><link><target>Apple IIc</target></link><space/>models' BASIC interpreters for the new machines' extra memory and double-resolution graphics, or for the<space/><link><target>Apple IIgs</target><part>Apple II<xhtml:small>GS</xhtml:small>'s</part></link><space/>16-color mode. (<link><target>Beagle Bros</target></link><space/>offered machine-language workarounds for these problems.)</listitem><listitem>The program is stored as a<space/><link><target>linked list</target></link><space/>of lines; a<space/><xhtml:code><link><target>GOTO</target></link></xhtml:code><space/>or<space/><xhtml:code><link><target>GOSUB</target></link></xhtml:code><space/>took<space/><link><target>Computational complexity theory</target><part>O(n) (linear) time</part></link>, and although Applesoft programs were not very long compared to today's software, on a 1&amp;nbsp;MHz 6502 this could be a significant bottleneck. Large programs were often written with the most-used subroutines at the top of the program to reduce the processing time for<space/><xhtml:code>GOSUB</xhtml:code><space/>calls.</listitem><listitem>No sound support aside from a<space/><xhtml:code><link><target>PEEK and POKE</target><part>PEEK</part></link></xhtml:code><space/>command that can be used to click the speaker, though one could also<space/><xhtml:code>PRINT</xhtml:code><space/>an ASCII<space/><link><target>bell character</target></link><space/>to sound the system alert<space/><link><target>beep (sound)</target><part>beep</part></link>. The language is not fast enough to produce more than a baritone buzz from repeated clicks anyway. However, music spanning several octaves can be played by repeated calls to a machine-language tone generator.</listitem></list><paragraph>Other language features:</paragraph><list type='bullet'><listitem>Applesoft lacks some commands and functions common to most of the non-6502 Microsoft BASIC interpreters, such as:<list type='bullet'><listitem>INSTR (search for a substring in a given string)</listitem><listitem>PRINT USING (formatting numbers in printed output)</listitem><listitem>INKEY$ (check for a keypress without stopping the program) although a PEEK location did provide this functionality.</listitem><listitem>LPRINT (output printed content to a printer instead of the screen; Applesoft, like Integer BASIC, required the user to use a PR# command to select the slot on the motherboard where the printer card was connected, then PRINT)</listitem></list></listitem><listitem>Applesoft BASIC can be extended by two means: the ampersand (&amp;amp;) command and the USR() function. These are two features that called machine-language routines stored in memory. Routines that need to be fast or require direct access to arbitrary functions or data in memory can thus be called from a higher-level interpreted BASIC program. The USR() function takes one numerical argument, and can be programmed to derive and return a calculated function value, to be used in a numerical expression. &quot;&amp;&quot; was effectively a shorthand for CALL, with an address that would be predefined. The 1978 Applesoft II Manual essentially ignored the &amp; command, merely listing it among reserved words in an appendix, and stating, &quot;The ampersand ( &amp; ) is intended for the computer's internal use only; it is<space/><bold>not</bold><space/>a proper APPLESOFT command. This symbol, when executed as an instruction, causes an unconditional jump to location $3F5. Use<space/><template><target>keypress</target><arg>Reset</arg></template><space/><template><target>keypress</target><arg>Ctrl</arg><arg>C</arg></template><space/><template><target>keypress</target><arg>Return</arg></template><space/>to recover&quot;, referring to the command's &quot;hook&quot; address.<extension extension_name='ref'>Applesoft II Basic Programming Reference Manual, Apple Computer, Inc., 1978</extension><space/>The 1982 Applesoft manual for the Apple IIe (also in an appendix) did not call it &quot;improper&quot;, and said slightly more about it, adding to the &quot;internal use&quot; clause, &quot;...and for user-supplied machine-language routines&quot;, but giving no further documentation beyond describing the hook address.<extension extension_name='ref' name="ManualIIe">Applesoft BASIC Programmer's Reference Manual (for IIe only), Apple Computer, Inc., 1982</extension><space/>In practice it was possible for an ampersand routine to parse code and arguments that followed the &amp; character by calling routines in the BASIC ROM.<space/></listitem><listitem>Applesoft, like Integer BASIC before it, does not come with any built-in commands for dealing with files or disks, other than a feature to save programs to, and load programs from, cassette tape. The Apple II disk operating system, known simply as DOS, augments the language to provide such abilities.</listitem><listitem>Unlike in Integer BASIC, Applesoft BASIC variable names are significant only to two letters; they can be made longer, but only the first two letters are used. For instance, &quot;LOW&quot; and &quot;LOSS&quot; are treated as the same variable, and attempting to assign a value to &quot;LOSS&quot; overwrites any value assigned to &quot;LOW.&quot; Furthermore, because the language used<space/><link><target>Tokenization (lexical analysis)</target><part>tokenization</part></link>, a programmer has to avoid using any consecutive letters that are also Applesoft commands or operations (one cannot use the name &quot;SCORE&quot; for a variable because it interprets the OR as a Boolean operator, thus rendering it SC OR E, nor can one use &quot;BACKGROUND&quot; because the command &quot;GR&quot; invokes the low-resolution graphics mode, in this case creating a syntax error).</listitem><listitem>The Apple II high-resolution graphics mode is extremely limited; a user is limited to six colors (black, green, violet, orange, blue, and white), two of which do not appear in odd-numbered columns and two that do not appear in even-numbered ones; and white was a combination of two neighboring pixels, supplanting the individual pixel colors. A hardware hack incorporated into the Apple IIe's 80-column character card expands the mode to higher horizontal resolution and opens up the availability of all 16 colors of the lo-res graphics mode. To its benefit, the language allows for easy use of<space/><link><target>vector graphics</target></link>, a feature unavailable in the lower-resolution graphics mode.</listitem><listitem>A deficiency in Applesoft's error-trapping with ONERR means that the system stack would not be reset if an error-handling routine did not invoke RESUME, potentially leading to a crash. Error-handling that does not employ RESUME can avoid the problem with a CALL -3288 or (equivalent) 62248 before exiting the routine.<extension extension_name='ref' name="ManualIIe"></extension></listitem><listitem>Through several early models of the Apple II, Applesoft BASIC does not support the use of<space/><link><target>lowercase</target></link><space/>letters in programs, except in strings. (Thus, Applesoft can display lowercase letters, but cannot recognize them as part of a program; thus,<space/><xhtml:code>PRINT</xhtml:code><space/>is a valid command but<space/><xhtml:code>print</xhtml:code><space/>and<space/><xhtml:code>Print</xhtml:code><space/>are unrecognizable and result in a syntax error.)</listitem></list><heading level='2'>Early evolution</heading><paragraph>The original Applesoft, stored in RAM as documented in its Reference Manual of November 1977, has smaller interpreter code than the later Applesoft II, occupying 8 kb of memory,<extension extension_name='ref'>Applesoft Extended Precision Floating Point Basic Language Reference Manual, Apple Computer, Inc., November 1977</extension><space/>instead of the 10 kb used by the later Applesoft II. Consequently, it lacks a number of command features developed for the later, mainstream version:</paragraph><list type='bullet'><listitem>All commands supporting Apple's &quot;high resolution&quot; graphics (9 total)</listitem><listitem>Error-trapping with ONERR...GOTO and RESUME</listitem><listitem>Machine-routine shorthand call &quot;&amp;&quot;</listitem><listitem>Screen-clearing HOME (a call to a system ROM routine)</listitem><listitem>Text-output control NORMAL, INVERSE, FLASH and SPEED=</listitem><listitem>The print-space function SPC() is listed among reserved words in the manual, but is not otherwise documented (the TAB() print-function<space/><italics>is</italics><space/>documented)</listitem><listitem>Cassette tape storage of numerical arrays: STORE and RECALL</listitem><listitem>Device response: WAIT</listitem></list><paragraph>as well as several the later version would have, that had already been present in Apple's Integer BASIC:</paragraph><list type='bullet'><listitem>Program-line deletion: DEL</listitem><listitem>Machine-routine access: CALL</listitem><listitem>Peripheral device access: IN# and PR# (although IN without &quot;#&quot; is listed among reserved words)</listitem><listitem>Memory range control: HIMEM: and LOMEM:</listitem><listitem>Execution tracking for debugging: TRACE and NOTRACE</listitem><listitem>Screen-positioning: HTAB and VTAB</listitem><listitem>Subroutine aborting POP</listitem><listitem>Functions PDL() to read the analog controllers, and SCRN() to read the low-resolution graphics screen (both accessing system ROM routines)</listitem></list><paragraph>In addition, its low-resolution graphics commands have different names from their Integer BASIC/Applesoft II counterparts. All command names are of the form PLTx such that GR, COLOR=, PLOT, HLIN and VLIN are called PLTG, PLTC, PLTP, PLTH, and PLTV, respectively. The command for returning to text mode, known as TEXT in other versions, is simply TEX, and carries the proviso that it has to be the last statement in a program line.</paragraph><paragraph>The USR() function is also defined differently, serving as a stand-in for the absent CALL command. Its argument is not for passing a numerical value to the machine-language routine, but is instead the call-address of the routine itself; there is no &quot;hook&quot; to pre-define the address. All of several examples in the manual use the function only to access &quot;system monitor ROM&quot; routines, or short user-routines to manipulate the ROM routines. No mention is made of any code to calculate the value returned by the function itself; the function is always shown being assigned to &quot;dummy&quot; variables, which, without action to set a value by user-code, just receive a meaningless value handed back to them. Even accessed ROM routines that return values (in examples, those that provide the service of PDL() and SCRN() functions) merely have their values stored, by user-routines, in locations that are separately PEEKed in a subsequent statement.</paragraph><paragraph>Unlike in Integer BASIC and Applesoft II, the Boolean operators AND, OR and NOT perform<space/><link><target>bitwise operation</target><trail>s</trail></link><space/>on 16-bit integer values. If they are given values outside that range, an error results.</paragraph><paragraph>The terms OUT and PLT (and the aforementioned IN) appear in the list of reserved words, but are not explained anywhere in the manual.</paragraph><heading level='2'>Sample code</heading><paragraph><link><target>File:Applesoft BASIC.png</target><part>thumb</part><part><link><target>Hello World</target></link>, with<space/><link><target>inverse video</target></link><space/>and<space/><link><target>bell character</target></link>, run then listed</part></link><link><target>Hello World</target></link><space/>in Applesoft BASIC could be entered as the following:</paragraph><preblock><preline>10 TEXT:HOME</preline><preline>20 ?&quot;HELLO WORLD&quot;</preline></preblock><paragraph>Multiple commands can be included on the same line of code if separated by a colon (<xhtml:code><list type='ident'><listitem></listitem></list></xhtml:code>). The<space/><xhtml:code>?</xhtml:code><space/>can be used in Applesoft BASIC (and almost all versions of Microsoft BASIC) as a shortcut for &quot;PRINT&quot;, though spelling out the word is not only acceptable but canonicalApplesoft converted &quot;?&quot; in entered programs to the same token as &quot;PRINT&quot; (thus no memory is actually saved by using &quot;?&quot;), thus either appears as &quot;PRINT&quot; when a program is listed. The program above appears in a<space/><xhtml:code>LIST</xhtml:code><space/>command as:</paragraph><preblock><preline>10 TEXT : HOME</preline><preline>20 PRINT &quot;HELLO WORLD&quot;</preline></preblock><paragraph><italics>This article includes text from<space/><link type='external' href='http://everything2.com/?node=Applesoft+BASIC'>Everything2</link>, licensed under GFDL.</italics></paragraph><paragraph>When Applesoft II BASIC was initially released in mid-1978, it came on cassette tape and could be loaded into memory via the Apple II's machine language monitor. When the enhanced Apple II+ replaced the original II in 1979, Applesoft was now included in ROM and automatically started on power-up if no bootable floppy disk was present. Conversely, Integer BASIC was now removed from ROM and turned into an executable file on the DOS 3.3 disk.</paragraph><heading level='2'>BASIC for the Apple III</heading><paragraph>Microsoft and Apple each developed their own versions of BASIC for the<space/><link><target>Apple III</target></link><space/>computer.<space/><bold>Apple III Microsoft BASIC</bold><space/>was designed to run on the<space/><link><target>CP/M</target></link><space/>platform available for the Apple III.<space/><bold>Apple Business BASIC</bold>, meanwhile, shipped with the Apple III. Donn Denman ported Applesoft BASIC to<space/><link><target>Apple SOS</target><part>SOS</part></link><space/>and reworked it to take advantage of the extended memory of the Apple III.</paragraph><paragraph>Both languages introduced a number of new or improved features over Applesoft II, some of the same features as each other, and some unique to each. Both languages replace Applesoft II's single-precision floating-point variables using 5-byte storage with the somewhat-reduced-pecision 4-byte variables, while also adding a larger numerical format. Apple III Microsoft BASIC provides double-precision floating-point variables, taking 8 bytes of storage,<extension extension_name='ref'>Apple III Microsoft BASIC Reference Manual, Microsoft Corporation, 1982</extension><space/>while Apple Business BASIC offers an extra-long integer type, also taking 8 bytes for storage.<extension extension_name='ref'>Apple Business BASIC Reference Manual, Apple Computer, Inc., 1981</extension><space/>Both languages also retain 2-byte integers, and maximum 255-character strings.</paragraph><paragraph>Other new features common to both languages include:</paragraph><list type='bullet'><listitem>Incorporation of disk-file commands within the language.</listitem><listitem>Operators for MOD and for integer-division.</listitem><listitem>An optional ELSE clause in IF...THEN statements.</listitem><listitem>HEX$() function for hexadecimal-format output.</listitem><listitem>INSTR function for finding a substring within a string.</listitem><listitem>PRINT USING statement to control format of output. Apple Business BASIC had an option in addition to directly specifying the format with a string expression, of giving the line number where an IMAGE statement gave the formatting expression, similar to a FORMAT statement in<space/><link><target>Fortran</target><part>FORTRAN</part></link>.</listitem></list><paragraph>Differences of the same features:</paragraph><table class="wikitable"><tablerow><tablehead scope="col" width="150px"></tablehead><tablehead scope="col" width="230px">Apple III Microsoft BASIC</tablehead><tablehead scope="col" width="265px">Apple Business BASIC</tablehead></tablerow><tablerow><tablecell>integer division operator</tablecell><tablecell>\ (backslash)</tablecell><tablecell>DIV</tablecell></tablerow><tablerow><tablecell>reading the keyboard without waiting</tablecell><tablecell>INKEY$ function returns a one-character string representing the last key pressed, or the null string if no new key pressed since last reading</tablecell><tablecell>KBD read-only &quot;reserved variable&quot; returns the ASCII code of the last key pressed; the manual fails to document what is returned if no new key pressed since last reading</tablecell></tablerow><tablerow><tablecell>reassigning a portion of a string variable</tablecell><tablecell>MID$() assignment statement</tablecell><tablecell>SUB$() assignment statement</tablecell></tablerow><tablerow><tablecell>determining position of text output</tablecell><tablecell>POS() function to read horizontal screen position, and LPOS() function to read horizontal position on printer</tablecell><tablecell>HPOS and VPOS assignable &quot;reserved variables&quot; to read or set the horizontal or vertical position for text screen output</tablecell></tablerow><tablerow><tablecell>accepting hexadecimal-format values</tablecell><tablecell>&quot;&amp;H&quot;-formatted expressions</tablecell><tablecell>TEN() function to give numerical value from string representing hexadecimal</tablecell></tablerow><tablerow><tablecell>result of ASC(&quot;&quot;)(null string operand)</tablecell><tablecell>causes an error</tablecell><tablecell>returns the value 1</tablecell></tablerow></table><paragraph>Features specific to each language are described separately below.</paragraph><heading level='3'>Apple III Microsoft BASIC additional new features</heading><list type='bullet'><listitem>INPUT$() function to replace Applesoft's GET command.</listitem><listitem>LINE INPUT statement to input an entire line of text, regardless of punctuation, into a single string variable.</listitem><listitem>LPRINT and LPRINT USING statements to automatically direct output to paper.</listitem><listitem>LSET and RSET statements to left- or right-justify a string expression within a given string variable's character length.</listitem><listitem>OCT$() function for output, and &quot;&amp;&quot;- or &quot;&amp;O&quot;-formatted expressions, for manipulating octal notation.</listitem><listitem>SPACE$() function for generating blank spaces outside of a PRINT statement, and STRING$() function to do likewise with any character.</listitem><listitem>WHILE...WEND statements, for loop structures built on general Boolean conditions without an index variable.</listitem><listitem>Bitwise Boolean (16-bit) operations (AND, OR, NOT), with additional operators XOR, EQV, IMP.</listitem><listitem>Line number specification in the RESTORE command.</listitem><listitem>RESUME options of NEXT (to skip to the statement after that which caused the error) or a specified line number (which replaces the idea of exiting error-handling by GOTO-line, thus avoiding Applesoft II's stack error problem).</listitem><listitem>Multiple parameters in user-defined (DEF FN) functions.</listitem><listitem>A return to the old Applesoft One concept of having multiple USR() functions at different addresses, by establishing ten different USR functions, numbered USR0 to USR9, with separate DEF USRx statements to define the address of each. The argument passed to a USRx function could be of any specific type, including string. The returned value could also be of any type, by default the same type as the argument passed.</listitem></list><paragraph>There is no support for graphics provided within the language, nor for reading analog controls or buttons; nor is there a means of defining the active window of the text screen.</paragraph><heading level='3'>Apple Business BASIC additional new features</heading><paragraph>Apple Business BASIC eliminates all references to absolute memory addresses. Thus, the POKE command and PEEK() function were not included in the language, and new features replaced the CALL statement and USR() function. Functionality of certain features in Applesoft that had been achieved with various PEEK and POKE locations is now provided by:</paragraph><list type='bullet'><listitem>BUTTON() function to read game-controller buttons</listitem><listitem>WINDOW statement to define the active window of the text screen by its coordinates</listitem><listitem>Aforementioned KBD, HPOS, and VPOS system variables</listitem></list><paragraph>External binary subroutines and functions are now loaded into memory by a single INVOKE disk-command that loads separately-assembled code modules, listing the names of all files to be used. A PERFORM statement is then used to call an INVOKEd procedure by name, with an argument-list. INVOKEd functions would be referenced in expressions by EXFN. (floating-point) or EXFN%. (integer), with the function name appended, plus the argument-list for the function.</paragraph><paragraph>Graphics are supported with an INVOKEd module, with features including displaying text within graphics in various fonts, within four different graphics modes available on the Apple III, including the precursor of Apple IIe's double-high-resolution mode.</paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Chinese BASIC</target></link><space/>a Chinese-localized version of Applesoft BASIC</listitem></list><heading level='2'>References</heading><paragraph><template><target>Reflist</target></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://www.txbobsc.com/scsc/scdocumentor/'>Disassembled ROM</link></listitem><listitem><link type='external' href='http://www.calormen.com/jsbasic/'>AppleSoft BASIC in JavaScript</link></listitem></list><paragraph><template><target>BASIC</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Applesoft Basic</target></template><link><target>Category:Apple II software</target></link><link><target>Category:Discontinued Microsoft BASICs</target></link></paragraph></article>