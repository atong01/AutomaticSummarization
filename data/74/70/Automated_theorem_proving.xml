<article title='Automated_theorem_proving'><paragraph><link><target>File:ANL-E aerial 22037k4.jpg</target><part>thumb</part><part>right</part><part>300px</part><part><link><target>Argonne National Laboratory</target></link><space/>was a leader in automated theorem proving from the 1960s to the 2000s</part></link><bold>Automated theorem proving</bold><space/>(also known as<space/><bold>ATP</bold><space/>or<space/><bold>automated deduction</bold>) is a subfield of<space/><link><target>automated reasoning</target></link><space/>and<space/><link><target>mathematical logic</target></link><space/>dealing with proving<space/><link><target>mathematical theorem</target><trail>s</trail></link><space/>by<space/><link><target>computer program</target><trail>s</trail></link>. Automated reasoning over<space/><link><target>mathematical proof</target></link><space/>was a major impetus for the development of computer science.</paragraph><heading level='2'>Logical foundations</heading><paragraph>While the roots of formalised<space/><link><target>logic</target></link><space/>go back to<space/><link><target>Aristotelian logic</target><part>Aristotle</part></link>, the end of the 19th and early 20th centuries saw the development of modern logic and formalised mathematics.<space/><link><target>Gottlob Frege</target><part>Frege</part></link>'s<space/><italics><link><target>Begriffsschrift</target></link></italics><space/>(1879) introduced both a complete<space/><link><target>propositional logic</target><part>propositional calculus</part></link><space/>and what is essentially modern<space/><link><target>predicate logic</target></link>.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Frege</arg><arg name="first">Gottlob</arg><arg name="title">Begriffsschrift</arg><arg name="year">1879</arg><arg name="publisher">Verlag Louis Neuert</arg><arg name="url">http://gallica.bnf.fr/ark:/12148/bpt6k65658c</arg></template></extension><space/>His<space/><italics><link><target>The Foundations of Arithmetic</target><part>Foundations of Arithmetic</part></link></italics>, published 1884,<extension extension_name='ref'><template><target>cite book</target><arg name="last">Frege</arg><arg name="first">Gottlob</arg><arg name="title">Die Grundlagen der Arithmetik</arg><arg name="year">1884</arg><arg name="publisher">Wilhelm Kobner</arg><arg name="location">Breslau</arg><arg name="url">http://www.ac-nancy-metz.fr/enseign/philo/textesph/Frege.pdf</arg></template></extension><space/>expressed (parts of) mathematics in formal logic. This approach was continued by<space/><link><target>Bertrand Russell</target><part>Russell</part></link><space/>and<space/><link><target>Alfred North Whitehead</target><part>Whitehead</part></link><space/>in their influential<space/><italics><link><target>Principia Mathematica</target></link></italics>, first published 19101913,<extension extension_name='ref'><template><target>cite book</target><arg name="title">Principia Mathematica</arg><arg name="year">1910–1913</arg><arg name="publisher">Cambridge University Press</arg><arg name="author">Bertrand Russell</arg><arg name="edition">1st</arg><arg name="author2">Alfred North Whitehead</arg></template></extension><space/>and with a revised second edition in 1927.<extension extension_name='ref'><template><target>cite book</target><arg name="title">Principia Mathematica</arg><arg name="year">1927</arg><arg name="publisher">Cambridge University Press</arg><arg name="author">Bertrand Russell</arg><arg name="edition">2nd</arg><arg name="author2">Alfred North Whitehead</arg></template></extension><space/>Russell and Whitehead thought they could derive all mathematical truth using axioms and inference rules of formal logic, in principle opening up the process to automatisation. In 1920,<space/><link><target>Thoralf Skolem</target></link><space/>simplified a previous result by<space/><link><target>Leopold Lwenheim</target></link>, leading to the<space/><link><target>LwenheimSkolem theorem</target></link><space/>and, in 1930, to the notion of a<space/><link><target>Herbrand universe</target></link><space/>and a<space/><link><target>Herbrand interpretation</target></link><space/>that allowed (un)satisfiability of first-order formulas (and hence the<space/><link><target>validity</target></link><space/>of a theorem) to be reduced to (potentially infinitely many) propositional satisfiability problems.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Herbrand</arg><arg name="first">Jaques</arg><arg name="title">Recherches sur la théorie de la démonstration</arg><arg name="year">1930</arg></template></extension></paragraph><paragraph>In 1929,<space/><link><target>Mojesz Presburger</target></link><space/>showed that the theory of<space/><link><target>natural numbers</target></link><space/>with addition and equality (now called<space/><link><target>Presburger arithmetic</target></link><space/>in his honor) is<space/><link><target>Decidability (logic)</target><part>decidable</part></link><space/>and gave an algorithm that could determine if a given sentence in the language was true or false.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Presburger</arg><arg name="first">Mojżesz</arg><arg name="title">Über die Vollständigkeit eines gewissen Systems der Arithmetik ganzer Zahlen, in welchem die Addition als einzige Operation hervortritt</arg><arg name="journal">Comptes Rendus du I congrès de Mathématiciens des Pays Slaves</arg><arg name="year">1929</arg><arg name="pages">92–101</arg><arg name="location">Warszawa</arg></template></extension><extension extension_name='ref' name="Davis2001"><template><target>Citation</target><arg name="last"><space/>Davis
</arg><arg name="first"><space/>Martin
</arg><arg name="author-link"><space/>Martin Davis
</arg><arg name="chapter"><space/>The Early History of Automated Deduction
</arg><arg name="year"><space/>2001
</arg><arg name="chapter-url"><space/>http://cs.nyu.edu/cs/faculty/davism/early.ps
</arg><arg name="editor-last"><space/>Robinson
</arg><arg name="editor-first"><space/>Alan
</arg><arg name="editor-link"><space/>John Alan Robinson
</arg><arg name="editor2-last"><space/>Voronkov
</arg><arg name="editor2-first"><space/>Andrei
</arg><arg name="editor2-link"><space/>Andrei Voronkov
</arg><arg name="title"><space/>[[Handbook of Automated Reasoning]]
</arg><arg name="volume"><space/>1
</arg><arg name="publisher"><space/>[[Elsevier]]
</arg><arg name="publication-date"><space/>2001
</arg></template>)</extension>However, shortly after this positive result,<space/><link><target>Kurt Gdel</target></link><space/>published<space/><italics><link><target>On Formally Undecidable Propositions of Principia Mathematica and Related Systems</target></link></italics><space/>(1931), showing that in any sufficiently strong axiomatic system there are true statements which cannot be proved in the system. This topic was further developed in the 1930s by<space/><link><target>Alonzo Church</target></link><space/>and<space/><link><target>Alan Turing</target></link>, who on the one hand gave two independent but equivalent definitions of<space/><link><target>computability</target></link>, and on the other gave concrete examples for undecidable questions.</paragraph><heading level='2'>First implementations</heading><paragraph>Shortly after<space/><link><target>World War II</target></link>, the first general purpose computers became available. In 1954,<space/><link><target>Martin Davis</target></link><space/>programmed Presburger's algorithm for a<space/><link><target>JOHNNIAC</target></link><space/>vacuum tube computer at the<space/><link><target>Princeton Institute for Advanced Study</target></link>. According to Davis, &quot;Its great triumph was to prove that the sum of two even numbers is even&quot;.<extension extension_name='ref' name="Davis2001"></extension><extension extension_name='ref' name="Bibel2007"><template><target>cite journal</target><arg name="last">Bibel</arg><arg name="first">Wolfgang</arg><arg name="title">Early History and Perspectives of Automated Deduction</arg><arg name="journal">KI 2007</arg><arg name="year">2007</arg><arg name="series">LNAI</arg><arg name="issue">4667</arg><arg name="pages">2–18</arg><arg name="url">http://www.intellektik.de/resources/OsnabrueckBuchfassung.pdf</arg><arg name="accessdate">2 September 2012</arg><arg name="publisher">Springer</arg></template></extension><space/>More ambitious was the<space/><link><target>Logic Theory Machine</target></link>, a deduction system for the<space/><link><target>propositional logic</target></link><space/>of the<space/><italics>Principia Mathematica</italics>, developed by<space/><link><target>Allen Newell</target></link>,<space/><link><target>Herbert A. Simon</target></link><space/>and<space/><link><target>Cliff Shaw</target><part>J. C. Shaw</part></link>. Also running on a JOHNNIAC, the Logic Theory Machine constructed proofs from a small set of propositional axioms and three deduction rules:<space/><link><target>modus ponens</target></link>, (propositional) variable substitution, and the replacement of formulas by their definition. The system used heuristic guidance, and managed to prove 38 of the first 52 theorems of the<space/><italics>Principia</italics>.<extension extension_name='ref' name="Davis2001"></extension></paragraph><paragraph>The &quot;heuristic&quot; approach of the Logic Theory Machine tried to emulate human mathematicians, and could not guarantee that a proof could be found for every valid theorem even in principle. In contrast, other, more systematic algorithms achieved, at least theoretically,<space/><link><target>completeness (logic)</target><part>completeness</part></link><space/>for first-order logic. Initial approaches relied on the results of Herbrand and Skolem to convert a first-order formula into successively larger sets of propositional formulae by instantiating variables with terms from the<space/><link><target>Herbrand universe</target></link>. The propositional formulas could then be checked for unsatisfiability using a number of methods. Gilmore's program used conversion to<space/><link><target>disjunctive normal form</target></link>, a form in which the satisfiability of a formula is obvious.<extension extension_name='ref' name="Davis2001"></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="last">Gilmore</arg><arg name="first">Paul</arg><arg name="title">A proof procedure for quantification theory: its justification and realisation</arg><arg name="journal">IBM Journal of Research and Development</arg><arg name="year">1960</arg><arg name="volume">4</arg><arg name="pages">28–35</arg><arg name="doi">10.1147/rd.41.0028</arg></template></extension></paragraph><heading level='2'>Decidability of the problem</heading><paragraph><template><target>Unreferenced section</target><arg name="date">April 2010</arg></template>Depending on the underlying logic, the problem of deciding the validity of a formula varies from trivial to impossible. For the frequent case of<space/><link><target>propositional logic</target></link>, the problem is decidable but<space/><link><target>Co-NP-complete</target></link>, and hence only exponential-time algorithms are believed to exist for general proof tasks. For a<space/><link><target>first-order logic</target><part>first order predicate calculus</part></link>,<space/><link><target>Gdel's completeness theorem</target></link><space/>states that the theorems (provable statements) are exactly the logically valid<space/><link><target>well-formed formula</target><trail>s</trail></link>, so identifying valid formulas is<space/><link><target>recursively enumerable</target></link>: given unbounded resources, any valid formula can eventually be proven. However,<space/><italics>invalid</italics><space/>formulas (those that are<space/><italics>not</italics><space/>entailed by a given theory), cannot always be recognized.</paragraph><paragraph>The above applies to first order theories, such as<space/><link><target>Peano axioms</target><part>Peano Arithmetic</part></link>. However, for a specific model that may be described by a first order theory, some statements may be true but undecidable in the theory used to describe the model. For example, by<space/><link><target>Gdel's incompleteness theorem</target></link>, we know that any theory whose proper axioms are true for the natural numbers cannot prove all first order statements true for the natural numbers, even if the list of proper axioms is allowed to be infinite enumerable. It follows that an automated theorem prover will fail to terminate while searching for a proof precisely when the statement being investigated is undecidable in the theory being used, even if it is true in the model of interest. Despite this theoretical limit, in practice, theorem provers can solve many hard problems, even in models that are not fully described by any first order theory (such as the integers).</paragraph><heading level='2'>Related problems</heading><paragraph>A simpler, but related, problem is<space/><bold>proof verification</bold>, where an existing proof for a theorem is certified valid. For this, it is generally required that each individual proof step can be verified by a<space/><link><target>primitive recursive function</target></link><space/>or program, and hence the problem is always decidable.</paragraph><paragraph>Since the proofs generated by automated theorem provers are typically very large, the problem of<space/><link><target>proof compression</target></link><space/>is crucial and various techniques aiming at making the prover's output smaller, and consequently more easily understandable and checkable, have been developed.</paragraph><paragraph><link><target>Proof assistant</target><trail>s</trail></link><space/>require a human user to give hints to the system. Depending on the degree of automation, the prover can essentially be reduced to a proof checker, with the user providing the proof in a formal way, or significant proof tasks can be performed automatically. Interactive provers are used for a variety of tasks, but even fully automatic systems have proved a number of interesting and hard theorems, including at least one that has eluded human mathematicians for a long time, namely the<space/><link><target>Robbins conjecture</target></link>.<extension extension_name='ref'><template><target>cite journal</target><arg name="author">W.W. McCune</arg><arg name="title">Solution of the Robbins Problem</arg><arg name="journal">Journal of Automated Reasoning</arg><arg name="year">1997</arg><arg name="url">http://www.springerlink.com/content/h77246751668616h/</arg><arg name="volume">19</arg><arg name="issue">3</arg></template></extension><extension extension_name='ref'><template><target>cite news</target><arg name="title">Computer Math Proof Shows Reasoning Power</arg><arg name="author">Gina Kolata</arg><arg name="date">December 10, 1996</arg><arg name="url">http://www.nytimes.com/library/cyber/week/1210math.html</arg><arg name="publisher">The New York Times</arg><arg name="accessdate">2008-10-11</arg></template></extension><space/>However, these successes are sporadic, and work on hard problems usually requires a proficient user.</paragraph><paragraph>Another distinction is sometimes drawn between theorem proving and other techniques, where a process is considered to be theorem proving if it consists of a traditional proof, starting with axioms and producing new inference steps using rules of inference. Other techniques would include<space/><link><target>model checking</target></link>, which, in the simplest case, involves brute-force enumeration of many possible states (although the actual implementation of model checkers requires much cleverness, and does not simply reduce to brute force).</paragraph><paragraph>There are hybrid theorem proving systems which use model checking as an inference rule. There are also programs which were written to prove a particular theorem, with a (usually informal) proof that if the program finishes with a certain result, then the theorem is true. A good example of this was the machine-aided proof of the<space/><link><target>four color theorem</target></link>, which was very controversial as the first claimed mathematical proof which was essentially impossible to verify by humans due to the enormous size of the program's calculation (such proofs are called<space/><link><target>non-surveyable proofs</target></link>). Another example would be the proof that the game<space/><link><target>Connect Four</target></link><space/>is a win for the first player.</paragraph><heading level='2'>Industrial uses</heading><paragraph>Commercial use of automated theorem proving is mostly concentrated in<space/><link><target>integrated circuit design</target></link><space/>and verification. Since the<space/><link><target>Pentium FDIV bug</target></link>, the complicated<space/><link><target>floating point unit</target><trail>s</trail></link><space/>of modern microprocessors have been designed with extra scrutiny.<space/><link><target>AMD</target></link>,<space/><link><target>Intel</target></link><space/>and others use automated theorem proving to verify that division and other operations are correctly implemented in their processors.</paragraph><heading level='2'>First-order theorem proving</heading><paragraph>In the late 1960s agencies funding research in automated deduction began to emphasize the need for practical applications. One of the first fruitful areas was that of program verification whereby first-order theorem provers were applied to the problem of verifying the correctness of computer programs in languages such as Pascal, Ada, Java etc. Notable among early program verification systems was the Stanford Pascal Verifier developed by David Luckham at Stanford University. This was based on the Stanford Resolution Prover also developed at Stanford using J.A. Robinson's resolution Principle. This was the first automated deduction system to demonstrate an ability to solve mathematical problems that were announced in the Notices of the American Mathematical Society before solutions were formally published.</paragraph><paragraph><link><target>First-order logic</target><part>First-order</part></link><space/>theorem proving is one of the most mature subfields of automated theorem proving. The logic is expressive enough to allow the specification of arbitrary problems, often in a reasonably natural and intuitive way. On the other hand, it is still semi-decidable, and a number of sound and complete calculi have been developed, enabling<space/><italics>fully</italics><space/>automated systems. More expressive logics, such as higher order logics, allow the convenient expression of a wider range of problems than first order logic, but theorem proving for these logics is less well developed.</paragraph><heading level='2'>Benchmarks and competitions</heading><paragraph>The quality of implemented systems has benefited from the existence of a large library of standard benchmark examples the Thousands of Problems for Theorem Provers (TPTP) Problem Library<extension extension_name='ref'><template><target>cite web</target><arg name="last">Sutcliffe</arg><arg name="first">Geoff</arg><arg name="title">The TPTP Problem Library for Automated Theorem Proving</arg><arg name="url">http://www.cs.miami.edu/~tptp/</arg><arg name="accessdate">8 September 2012</arg></template></extension><space/>as well as from the<space/><link><target>CADE ATP System Competition</target></link><space/>(CASC), a yearly competition of first-order systems for many important classes of first-order problems.</paragraph><paragraph>Some important systems (all have won at least one CASC competition division) are listed below.</paragraph><list type='bullet'><listitem><link><target>E theorem prover</target><part>E</part></link><space/>is a high-performance prover for full first-order logic, but built on a<space/><link><target>superposition calculus</target><part>purely equational calculus</part></link>, developed primarily in the automated reasoning group of<space/><link><target>Technical University of Munich</target></link>.</listitem><listitem><link><target>Otter (theorem prover)</target><part>Otter</part></link>, developed at the<space/><link><target>Argonne National Laboratory</target></link>, is based on<space/><link><target>first-order resolution</target></link><space/>and<space/><link><target>paramodulation</target></link>. Otter has since been replaced by<space/><link><target>Prover9</target></link>, which is paired with<space/><link><target>Mace4</target></link>.</listitem><listitem><link><target>SETHEO</target></link><space/>is a high-performance system based on the goal-directed<space/><link><target>model elimination</target></link><space/>calculus. It is developed in the automated reasoning group of Technical University of Munich. E and SETHEO have been combined (with other systems) in the composite theorem prover E-SETHEO.</listitem><listitem><link><target>Vampire theorem prover</target><part>Vampire</part></link><space/>is developed and implemented at<space/><link type='external' href='http://www.manchester.ac.uk/'>Manchester University</link><space/>by<space/><link type='external' href='http://www.voronkov.com/'>Andrei Voronkov</link><space/>and<space/><link type='external' href='http://www.cs.man.ac.uk/~hoderk/'>Krystof Hoder</link>, formerly also by<space/><link type='external' href='http://www.freewebs.com/riazanov/'>Alexandre Riazanov</link>. It has won the CADE ATP System Competition in the most prestigious CNF (MIX) division for eleven years (1999, 20012010).</listitem><listitem>Waldmeister is a specialized system for unit-equational first-order logic. It has won the CASC UEQ division for the last fourteen years (19972010).</listitem><listitem><link><target>SPASS</target></link><space/>is a first order logic theorem prover with equality. This is developed by the research group Automation of Logic,<space/><link><target>Max Planck Institute for Computer Science</target></link>.</listitem></list><heading level='2'>Popular techniques</heading><list type='bullet'><listitem><link><target>First-order resolution</target></link><space/>with<space/><link><target>unification (computing)</target><part>unification</part></link></listitem><listitem><link><target>Lean theorem prover</target><part>Lean theorem proving</part></link></listitem><listitem><link><target>Model elimination</target></link></listitem><listitem><link><target>Method of analytic tableaux</target></link></listitem><listitem><link><target>Superposition calculus</target><part>Superposition</part></link><space/>and term<space/><link><target>rewriting</target></link></listitem><listitem><link><target>Model checking</target></link></listitem><listitem><link><target>Mathematical induction</target></link></listitem><listitem><link><target>Binary decision diagram</target><trail>s</trail></link></listitem><listitem><link><target>DPLL algorithm</target><part>DPLL</part></link></listitem><listitem><link><target>Unification (computing)#Higher-order unification</target><part>Higher-order unification</part></link></listitem></list><heading level='2'>Comparison</heading><paragraph><italics>See also:</italics><space/><link><target>Proof assistant#Comparison</target></link><space/>and<space/><link><target>:Category:Theorem proving software systems</target></link></paragraph><table class="wikitable sortable"><tablerow><tablehead>Name</tablehead><tablehead>License type</tablehead><tablehead>Web service</tablehead><tablehead>Library</tablehead><tablehead>Standalone</tablehead><tablehead>Version</tablehead><tablehead>Last update<space/><template><target>small</target><arg>([[strftime|YYYY-mm-dd format]])</arg></template></tablehead><tablehead>Author</tablehead><tablehead>Notice</tablehead></tablerow><tablerow><tablecell><link><target>ACL2</target></link></tablecell><tablecell>3-clause BSD</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>6.5</tablecell><tablecell>2014/07</tablecell><tablecell>Matt Kaufmann, J. Strother Moore</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>Prover9</target></link><space/>/<space/><link><target>Mace4</target></link></tablecell><tablecell>GPLv2</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>v05</tablecell><tablecell>2009/11/04</tablecell><tablecell>William McCune / Argonne National Laboratory</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>Otter (theorem prover)</target><part>Otter</part></link></tablecell><tablecell>Public Domain</tablecell><tablecell><template><target>Yes</target><arg>Via [[System on TPTP]]</arg></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>3.3f</tablecell><tablecell>2004/09</tablecell><tablecell>William McCune / Argonne National Laboratory</tablecell><tablecell>Succeeded by<space/><link><target>Prover9</target></link><space/>/<space/><link><target>Mace4</target></link></tablecell></tablerow><tablerow><tablecell>j'Imp</tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell></tablecell><tablecell>2010/05/28</tablecell><tablecell>Andr Platzer</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell>Metis</tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>2.2</tablecell><tablecell>2010/05/24</tablecell><tablecell>Joe Hurd</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell>MetiTarski</tablecell><tablecell>MIT</tablecell><tablecell><template><target>Yes</target><arg>Via [[System on TPTP]]</arg></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>2.3</tablecell><tablecell>2014/03/04</tablecell><tablecell>Larry Paulson, James Bridge, Grant Passmore, Behzad Akbarpour, Joe Hurd. University of Cambridge</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>Jape (software)</target><part>Jape</part></link></tablecell><tablecell>?</tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>1.0</tablecell><tablecell>2010/03/22</tablecell><tablecell>Adolfo Gustavo Neto, USP</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>Prototype Verification System</target><part>PVS</part></link></tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>4.2</tablecell><tablecell>2008/07</tablecell><tablecell>Computer Science Laboratory of<space/><link><target>SRI International</target></link>, California, USA</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link type='external' href='http://www.leoprover.org'>Leo II</link></tablecell><tablecell>?</tablecell><tablecell><template><target>Yes</target><arg>Via [[System on TPTP]]</arg></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>1.2.8</tablecell><tablecell>2011</tablecell><tablecell>Christoph Benzmller, Frank Theiss, Larry Paulson. FU Berlin and University of Cambridge</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>EQP</target></link></tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>0.9e</tablecell><tablecell>2009/05</tablecell><tablecell>William McCune / Argonne National Laboratory</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link type='external' href='http://nevidal.org/sad.en.html'>SAD</link></tablecell><tablecell>?</tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>2.32.5</tablecell><tablecell>2008/08/27</tablecell><tablecell>Alexander Lyaletski, Konstantin Verchinine, Andrei Paskevich</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>PhoX</target></link></tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>0.88.100524</tablecell><tablecell></tablecell><tablecell>Christophe Raffalli, Philippe Curmin, Pascal Manoury, Paul Roziere</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link type='external' href='http://www.symbolaris.com/info/KeYmaera.html'>KeYmaera</link></tablecell><tablecell>GPL</tablecell><tablecell><template><target>Yes</target><arg><space/>Via [[Java Webstart]]</arg></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>3.6.17</tablecell><tablecell>2015/03/11</tablecell><tablecell>Andr Platzer, Jan-David Quesel; Philipp Rmmer; David Renshaw</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>Gandalf (theorem prover)</target><part>Gandalf</part></link></tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>3.6</tablecell><tablecell>2009</tablecell><tablecell>Tanel Tammet, Tallinn University of Technology</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>Tau (theorem prover)</target><part>Tau</part></link></tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell></tablecell><tablecell>2005</tablecell><tablecell>Jay R. Halcomb e Randall R. Schulz da H&amp;S Information Systems</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>E theorem prover</target><part>E</part></link></tablecell><tablecell><link><target>GPL</target></link></tablecell><tablecell><template><target>Yes</target><arg>Via [[System on TPTP]]</arg></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>E 1.9</tablecell><tablecell>2015/07/14</tablecell><tablecell>Stephan Schulz,<space/><link><target>Baden-Wrttemberg Cooperative State University</target></link></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>SNARK theorem prover</target><part>SNARK</part></link></tablecell><tablecell>Mozilla Public License</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>snark-20080805r018b</tablecell><tablecell>2008</tablecell><tablecell>Mark E. Stickel</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>Vampire theorem prover</target><part>Vampire</part></link></tablecell><tablecell>?</tablecell><tablecell><template><target>Yes</target><arg>Via [[System on TPTP]]</arg></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>Third re-incarnation Vampire</tablecell><tablecell>2011</tablecell><tablecell>Andrei Voronkov, Alexandre Riazanov, Krystof Hoder</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>Waldmeister (theorem prover)</target><part>Waldmeister</part></link></tablecell><tablecell>?</tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell></tablecell><tablecell></tablecell><tablecell>Thomas Hillenbrand, Bernd Lchner, Arnim Buch, Roland Vogt, Doris Diedrich</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell>Saturate</tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell>2.5</tablecell><tablecell>1996/10</tablecell><tablecell>Harald Ganzinger, Robert Nieuwenhuis, Pilar Nivela Pilar Nivela</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>Theorem Proving System</target></link><space/>(TPS)</tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell></tablecell><tablecell>2004/06/24</tablecell><tablecell>Carnegie Mellon University</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>SPASS</target></link></tablecell><tablecell>?</tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>3.7</tablecell><tablecell>2005/11</tablecell><tablecell>Max Planck Institut Informatik</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>IsaPlanner</target></link></tablecell><tablecell><link><target>GPL</target></link></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>IsaPlanner 2</tablecell><tablecell>2007</tablecell><tablecell>Lucas Dixon, Johansson Moa</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link><target>KeY</target></link></tablecell><tablecell><link><target>GPL</target></link></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>2.4.1</tablecell><tablecell>2015/02</tablecell><tablecell><link><target>Karlsruhe Institute of Technology</target></link>,<space/><link><target>Chalmers University of Technology</target></link>,<space/><link><target>Technische Universitt Darmstadt</target><part>TU Darmstadt</part></link></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link type='external' href='http://www.mathapplets.net/Programs/Theorem%20Checker/Theorem%20Checker.jar'>Theorem Checker</link></tablecell><tablecell>?</tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>No</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>0</tablecell><tablecell><space/>2014</tablecell><tablecell>Robert J. Swartz, Northeastern Illinois University</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><link type='external' href='http://www.philipp.ruemmer.org/princess.shtml'>Princess</link></tablecell><tablecell><link><target>GPL</target></link></tablecell><tablecell><template><target>Yes</target><arg>Via [[Java Webstart]] and [[System on TPTP]]</arg></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell><template><target>Yes</target></template></tablecell><tablecell>2012-11-02</tablecell><tablecell>2012</tablecell><tablecell>Philipp Rmmer,<space/><link><target>Uppsala University</target></link></tablecell><tablecell></tablecell></tablerow></table><heading level='3'>Free software</heading><list type='bullet'><listitem><link><target>Alt-Ergo</target></link></listitem><listitem><link><target>Automath</target></link></listitem><listitem><link><target>CVC (theorem prover)</target><part>CVC</part></link></listitem><listitem><link><target>E theorem prover</target><part>E</part></link></listitem><listitem><link><target>Gdel-machines</target></link></listitem><listitem><link><target>iProver</target></link></listitem><listitem><link><target>IsaPlanner</target></link></listitem><listitem><link><target>KED theorem prover</target></link></listitem><listitem><link><target>leanCoP</target></link></listitem><listitem><link><target>LCF (theorem prover)</target><part>LCF</part></link></listitem><listitem><link><target>LoTREC</target></link></listitem><listitem><link><target>MetaPRL</target></link></listitem><listitem><link><target>NuPRL</target></link></listitem><listitem><link><target>Paradox (theorem prover)</target><part>Paradox</part></link></listitem><listitem><link><target>Simplify (software)</target><part>Simplify</part></link><space/>(<link type='external' href='http://www.dwheeler.com/misc/simplify-hp-release.txt'>GPL'ed since 5/2011</link>)</listitem><listitem><link><target>Twelf</target></link></listitem><listitem><link><target>SPARK (programming language)</target></link></listitem></list><heading level='3'>Proprietary software</heading><list type='bullet'><listitem><link><target>Acumen RuleManager</target></link><space/>(commercial product)</listitem><listitem><link type='external' href='http://mcs.open.ac.uk/pp2464/ALLIGATOR'>ALLIGATOR</link></listitem><listitem><link><target>CARINE</target></link></listitem><listitem><link type='external' href='http://isse.de/kiv'>KIV</link><space/>(freely available as a plugin for<space/><link><target>Eclipse_(software)</target><part>Eclipse</part></link>)</listitem><listitem><link><target>Prover Plug-In</target></link><space/>(commercial proof engine product)</listitem><listitem><link><target>ProverBox</target></link></listitem><listitem><link><target>ResearchCyc</target></link></listitem><listitem><link><target>Spear modular arithmetic theorem prover</target></link></listitem></list><heading level='2'>Notable people</heading><preblock><preline>*<space/><link><target>Leo Bachmair</target></link>, co-developer of the<space/><link><target>superposition calculus</target></link>.</preline></preblock><list type='bullet'><listitem><link><target>Woody Bledsoe</target></link>,<space/><link><target>artificial intelligence</target></link><space/>pioneer.</listitem><listitem><link><target>Robert S. Boyer</target></link>, co-author of the<space/><link><target>Nqthm</target><part>Boyer-Moore theorem prover</part></link>, co-recipient of the<space/><link><target>Herbrand Award</target></link><space/>1999.</listitem><listitem><link><target>Alan Bundy</target></link>,<space/><link><target>University of Edinburgh</target></link>, meta-level reasoning for guiding inductive proof, proof planning and recipient of 2007<space/><link><target>IJCAI Award for Research Excellence</target></link>, Herbrand Award, and 2003<space/><link><target>Donald E. Walker Distinguished Service Award</target></link>.</listitem><listitem><link type='external' href='http://www-unix.mcs.anl.gov/~mccune/'>William McCune</link><space/>Argonne National Laboratory, author of Otter, the first high-performance theorem prover. Many important papers, recipient of the Herbrand Award 2000.</listitem><listitem><link type='external' href='http://www.lsv.ens-cachan.fr/~comon/'>Hubert Comon</link>,<space/><link><target>CNRS</target></link><space/>and now<space/><link><target>ENS Cachan</target></link>. Many important papers.</listitem><listitem><link><target>Robert Lee Constable</target></link>, Cornell University. Important contributions to type theory, NuPRL.</listitem><listitem><link><target>Martin Davis</target></link>, author of the &quot;Handbook of Artificial Reasoning&quot;, co-inventor of the<space/><link><target>DPLL algorithm</target></link>, recipient of the Herbrand Award 2005.</listitem><listitem><link type='external' href='http://www.fitelson.org/'>Branden Fitelson</link><space/>University of California at Berkeley. Work in automated discovery of shortest axiomatic bases for logic systems.</listitem><listitem><link><target>Harald Ganzinger</target></link>, co-developer of the superposition calculus, head of the MPI Saarbrcken, recipient of the Herbrand Award 2004 (posthumous).</listitem><listitem><link type='external' href='http://logic.stanford.edu/people/genesereth/'>Michael Genesereth</link>,<space/><link><target>Stanford University</target></link><space/>professor of Computer Science.</listitem><listitem><link><target>Keith Goolsbey</target></link><space/>chief developer of the<space/><link><target>Cyc</target></link><space/>inference engine.</listitem><listitem><link><target>Michael J. C. Gordon</target></link><space/>led the development of the HOL theorem prover.</listitem><listitem><link><target>Grard Huet</target></link><space/>Term rewriting, HOL logics, Herbrand Award 1998.</listitem><listitem><link><target>Robert Kowalski</target></link><space/>developed the connection graph theorem-prover and<space/><link><target>SLD resolution</target></link>, the inference engine that executes<space/><link><target>logic programming</target><part>logic programs</part></link>.</listitem><listitem><link type='external' href='http://www.cs.duke.edu/~dwl/'>Donald W. Loveland</link><space/>Duke University. Author, co-developer of the DPLL-procedure, developer of<space/><link><target>model elimination</target></link>, recipient of the Herbrand Award 2001.</listitem><listitem><link type='external' href='http://www.complexevents.com/david-luckham/'>David Luckham</link><space/>Stanford University, Developed the Stanford Resolution Theorem Prover 1968, the first automated deduction system used to solve problems announced in the Notices of the AMS, and subsequently developed the Stanford Pascal Verifier, the first program verification system for Pascal, and a widely distributed program verification system, 1968-75</listitem><listitem>Norman Megill, developer of<space/><link><target>Metamath</target></link>, and maintainer of its site at<space/><link type='external' href='http://www.metamath.org'>metamath.org</link>, an online database of automatically verified proofs.</listitem><listitem><link><target>J Strother Moore</target></link>, co-author of the BoyerMoore theorem prover, co-recipient of the Herbrand Award 1999.</listitem><listitem><link><target>Robert Nieuwenhuis</target></link><space/>University of Barcelona. Co-developer of the superposition calculus.</listitem><listitem><link><target>Tobias Nipkow</target></link><space/>of the<space/><link><target>Technical University of Munich</target></link>, contributions to (higher-order) rewriting, co-developer of the Isabelle proof assistant</listitem><listitem><link><target>Ross Overbeek</target></link><space/>Argonne National Laboratory. Founder of<space/><link type='external' href='http://theseed.uchicago.edu/FIG/Html/FIG.html'>The Fellowship for Interpretation of Genomes</link></listitem><listitem><link><target>Lawrence C. Paulson</target></link><space/>of the<space/><link><target>University of Cambridge</target></link>, work on higher-order logic system, co-developer of the<space/><link><target>Isabelle theorem prover</target><part>Isabelle Theorem Prover</part></link></listitem><listitem><link><target>David Plaisted</target></link><space/><link><target>University of North Carolina at Chapel Hill</target></link>. Complexity results, contributions to<space/><link><target>rewriting</target></link><space/>and<space/><link><target>KnuthBendix completion algorithm</target><part>completion</part></link>, instance-based theorem proving.</listitem><listitem><link><target>John Rushby</target></link><space/>Program Director<space/><link><target>SRI International</target></link><extension extension_name='ref'><template><target>cite web</target><arg name="title">SRI International Computer Science Laboratory – John Rushby</arg><arg name="url">http://www.csl.sri.com/users/rushby/</arg><arg name="publisher">SRI International</arg><arg name="accessdate">22 September 2012</arg></template></extension></listitem><listitem><link><target>John Alan Robinson</target><part>J. Alan Robinson</part></link><space/>Syracuse University. Developed original resolution and unification based first order theorem proving, co-editor of the &quot;Handbook of Automated Reasoning&quot;, recipient of the Herbrand Award 1996</listitem><listitem><link><target>Jrgen Schmidhuber</target></link>, work on<space/><link type='external' href='http://www.idsia.ch/~juergen/goedelmachine.html'>Gdel Machines: Self-Referential Universal Problem Solvers Making Provably Optimal Self-Improvements</link></listitem><listitem><link><target>Stephan Schulz</target></link>, E theorem Prover.</listitem><listitem><link><target>Natarajan Shankar</target></link><space/>SRI International, work on decision procedures,<space/><italics>little engines of proof</italics>, co-developer of<space/><link><target>Prototype Verification System</target><part>PVS</part></link>.</listitem><listitem><link><target>Mark Stickel</target></link><space/>SRI International. Recipient of the Herbrand Award 2002.</listitem><listitem><link><target>Geoff Sutcliffe</target></link><space/>University of Miami. Maintainer of the TPTP collection, an organizer of the CADE annual contest.</listitem><listitem><link type='external' href='http://web.ics.purdue.edu/~dulrich/Home-page.htm'>Dolph Ulrich</link><space/>Purdue, Work on automated discovery of shortest axiomatic bases for systems.</listitem><listitem><link type='external' href='http://www.cs.unm.edu/~veroff/'>Robert Veroff</link><space/>University of New Mexico. Many important papers.</listitem><listitem><link type='external' href='http://www.voronkov.com/'>Andrei Voronkov</link><space/>Developer of Vampire and Co-Editor of the &quot;Handbook of Automated Reasoning&quot;</listitem><listitem><link type='external' href='http://www-unix.mcs.anl.gov/~wos/'>Larry Wos</link><space/>Argonne National Laboratory. (Otter) Many important papers. Very first Herbrand Award winner (1992)</listitem><listitem><link><target>Wen-Tsun Wu</target></link><space/>Work in geometric theorem proving:<space/><link><target>Wu's method</target></link>, Herbrand Award 1997</listitem><listitem><link><target>Christoph Weidenbach</target></link>, author of<space/><link><target>SPASS</target></link>, automated theorem prover.</listitem></list><heading level='2'>See also</heading><paragraph><template><target>colbegin</target><arg>2</arg></template></paragraph><list type='bullet'><listitem><link><target>Symbolic computation</target></link></listitem><listitem><link><target>Computer-aided proof</target></link></listitem><listitem><link><target>Automated reasoning</target></link></listitem><listitem><link><target>Formal verification</target></link></listitem><listitem><link><target>Logic programming</target></link></listitem><listitem><link><target>Proof checking</target></link></listitem><listitem><link><target>Model checking</target></link></listitem><listitem><link><target>Proof complexity</target></link></listitem><listitem><link><target>Computer algebra system</target></link></listitem><listitem><link><target>Program analysis (computer science)</target></link></listitem><listitem><link><target>General Problem Solver</target></link></listitem><listitem><link><target>Metamath</target></link><space/>language for formalized mathematics</listitem></list><paragraph><template><target>colend</target></template></paragraph><heading level='2'>Notes</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>References</heading><list type='bullet'><listitem><template><target>cite book</target><arg name="title"><space/>Symbolic Logic and Mechanical Theorem Proving
</arg><arg name="author"><space/>Chin-Liang Chang
</arg><arg name="author2">Richard Char-Tung Lee
</arg><arg name="publisher"><space/>[[Academic Press]]
</arg><arg name="year"><space/>1973
</arg></template></listitem><listitem><template><target>cite book</target><arg name="last"><space/>Loveland
</arg><arg name="first"><space/>Donald W.
</arg><arg name="title"><space/>Automated Theorem Proving: A Logical Basis. Fundamental Studies in Computer Science Volume 6
</arg><arg name="publisher"><space/>[[North-Holland Publishing]]
</arg><arg name="year"><space/>1978
</arg></template></listitem><listitem><template><target>cite book</target><arg name="last"><space/>Luckham
</arg><arg name="first"><space/>David
</arg><arg name="title"><space/>Programming with Specifications: An Introduction to Anna, A Language for Specifying Ada Programs
</arg><arg name="publisher"><space/>Springer-Verlag Texts and Monographs in Computer Science, 421 pp.
</arg><arg name="year"><space/>1990
</arg><arg name="url"><space/>http://www.amazon.com/Programming-Specifications-Introduction-Specifying-Monographs/dp/1461396875/ref</arg></template></listitem></list><list type='bullet'><listitem><template><target>cite book</target><arg name="last"><space/>Gallier
</arg><arg name="first"><space/>Jean H.
</arg><arg name="title"><space/>Logic for Computer Science: Foundations of Automatic Theorem Proving
</arg><arg name="publisher"><space/>[[Harper & Row Publishers]] (Available for free download)
</arg><arg name="year"><space/>1986
</arg><arg name="url"><space/>http://www.cis.upenn.edu/~jean/gbooks/logic.html
</arg></template></listitem><listitem><template><target>cite book</target><arg name="last"><space/>Duffy
</arg><arg name="first"><space/>David A.
</arg><arg name="title"><space/>Principles of Automated Theorem Proving
</arg><arg name="year"><space/>1991
</arg><arg name="publisher"><space/>[[John Wiley & Sons]]
</arg></template></listitem><listitem><template><target>cite book</target><arg name="last"><space/>Wos
</arg><arg name="first"><space/>Larry
</arg><arg name="author2"><space/>Overbeek, Ross</arg><arg name="author3"><space/>Lusk, Ewing</arg><arg name="author4"><space/>Boyle, Jim
</arg><arg name="title"><space/>Automated Reasoning: Introduction and Applications
</arg><arg name="edition"><space/>2nd
</arg><arg name="publisher"><space/>[[McGraw–Hill]]
</arg><arg name="year"><space/>1992
</arg></template></listitem><listitem><template><target>cite book</target><arg name="title"><space/>Handbook of Automated Reasoning Volume I & II
</arg><arg name="editor"><space/>Alan Robinson and Andrei Voronkov (eds.)
</arg><arg name="publisher"><space/>[[Elsevier]] and [[MIT Press]]
</arg><arg name="year"><space/>2001
</arg></template></listitem><listitem><template><target>cite book</target><arg name="last"><space/>Fitting
</arg><arg name="first"><space/>Melvin
</arg><arg name="title"><space/>First-Order Logic and Automated Theorem Proving
</arg><arg name="edition"><space/>2nd
</arg><arg name="publisher"><space/>[[Springer Science+Business Media|Springer]]
</arg><arg name="year"><space/>1996
</arg><arg name="url"><space/>http://comet.lehman.cuny.edu/fitting/
</arg></template></listitem></list><paragraph><template><target>DEFAULTSORT:Automated Theorem Proving</target></template><link><target>Category:Formal methods</target></link><link><target>Category:Automated theorem proving</target></link></paragraph></article>