<article title='Dylan_%28programming_language%29'><paragraph><template><target>Unreferenced</target><arg name="date">June 2013</arg></template><template><target>Infobox programming language</target><arg name="name"><space/>Dylan
</arg><arg name="logo"><space/>[[File:Dylan logo.png|frameless]]
</arg><arg name="paradigm"><space/>[[Multi-paradigm programming language|multi-paradigm]]: [[Functional programming|functional]], [[Object-oriented programming|object-oriented]]
</arg><arg name="year"><space/>{{Start date and age|1992}}
</arg><arg name="designer">
</arg><arg name="developer"><space/>[[Apple Computer]], [[Harlequin (software company)|Harlequin]], [[Carnegie Mellon University]]
</arg><arg name="latest_release_version"><space/>2014.1
</arg><arg name="typing"><space/>Strong, dynamic
</arg><arg name="implementations"><space/>Open Dylan, Gwydion Dylan
</arg><arg name="dialects"><space/>
</arg><arg name="influenced_by"><space/>[[Common Lisp Object System|CLOS]], [[ALGOL]], [[Scheme (programming language)|Scheme]], [[EuLisp]]
</arg><arg name="influenced"><space/>[[Goo (programming language)|Goo]], [[Lasso (programming language)|Lasso]], [[Python (programming language)|Python]], [[Ruby (programming language)|Ruby]]
</arg><arg name="operating_system"><space/>[[Cross-platform]]
</arg><arg name="website"><space/>{{URL|opendylan.org}}
</arg></template></paragraph><paragraph><bold>Dylan</bold><space/><template><target>IPAc-en</target><arg>ˈ</arg><arg>d</arg><arg>ɪ</arg><arg>l</arg><arg>ən</arg></template><space/>is a multi-paradigm<space/><link><target>programming language</target></link><space/>that includes support for<space/><link><target>Functional programming</target><part>functional</part></link><space/>and<space/><link><target>object-oriented programming</target></link>, and is<space/><link><target>dynamic programming language</target><part>dynamic</part></link><space/>and<space/><link><target>Reflection (computer science)</target><part>reflective</part></link><space/>while providing a programming model designed to support efficient machine code generation, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by<space/><link><target>Apple Computer</target></link>.</paragraph><paragraph>A concise and thorough<space/><link type='external' href='http://opendylan.org/books/drm/Language_Overview'>overview of the language</link><space/>may be found in the Dylan Reference Manual.</paragraph><paragraph>Dylan derives from<space/><link><target>Scheme (programming language)</target><part>Scheme</part></link><space/>and<space/><link><target>Common Lisp</target></link><space/>and adds an integrated object system derived from the<space/><link><target>Common Lisp Object System</target></link><space/>(CLOS). In Dylan, all values (including numbers, characters, functions, and classes) are<space/><link><target>first-class object</target><trail>s</trail></link>. Dylan supports multiple inheritance, polymorphism, multiple dispatch, keyword arguments, object introspection, pattern-based syntax extension macros, and many other advanced features. Programs can express fine-grained control over dynamism, admitting programs that occupy a continuum between dynamic and static programming and supporting evolutionary development (allowing for rapid prototyping followed by incremental refinement and optimization).</paragraph><paragraph>Dylan's main design goal is to be a dynamic language well-suited for developing commercial software. Dylan attempts to address potential performance issues by introducing &quot;natural&quot; limits to the full flexibility of Lisp systems, allowing the compiler to clearly understand compilable units (i.e., libraries).</paragraph><paragraph>Although deriving much of its semantics from Scheme and other Lispssome implementations were in fact initially built within existing Lisp systemsDylan has an<space/><link><target>ALGOL</target></link>-like syntax rather than a Lisp-like prefix syntax.</paragraph><heading level='2'>History</heading><paragraph><template><target>main</target><arg>History of the Dylan programming language</arg></template></paragraph><paragraph>Dylan was created in the early 1990s by a group led by<space/><link><target>Apple Computer</target></link>. At one point in its development it was intended for use with Apple's<space/><link><target>Apple Newton</target><part>Newton</part></link><space/>computer, but the Dylan implementation did not reach sufficient maturity in time, and Newton instead used a combination of C and the<space/><link><target>NewtonScript programming language</target><part>NewtonScript</part></link><space/>developed by Walter Smith. Apple ended their Dylan development effort in 1995, though they made a &quot;technology release&quot; version available (<link type='external' href='http://opendylan.org/about/apple-dylan/'>Apple Dylan TR1</link>) that included an advanced<space/><link><target>Integrated development environment</target><part>IDE</part></link>.</paragraph><paragraph>Two other groups contributed to the design of the language and developed implementations:<space/><link><target>Harlequin (software company)</target><part>Harlequin</part></link><space/>released a commercial IDE for<space/><link><target>Microsoft Windows</target></link><space/>and<space/><link><target>Carnegie Mellon University</target></link><space/>released an<space/><link><target>open source</target></link><space/>compiler for<space/><link><target>Unix</target></link><space/>systems called<space/><link><target>Gwydion Dylan</target></link>. Both of these implementations are now open source. The Harlequin implementation is now known as<space/><link><target>Open Dylan</target></link><space/>and is maintained by a group of volunteers, the<space/><link type='external' href='http://opendylan.org'>Dylan Hackers</link>.</paragraph><paragraph>The Dylan language was code-named Ralph. James Joaquin chose the name Dylan for &quot;DYnamic LANguage.&quot;</paragraph><heading level='2'>Syntax</heading><paragraph>Dylan uses an Algol-like syntax designed by<space/><link><target>Michael Kahl</target></link>. It is described in great detail in the<space/><link type='external' href='http://opendylan.org/books/drm/'>Dylan Reference Manual</link>. This page shows examples of some syntax features that are more unusual. Many of them come from Dylan's Lisp heritage.</paragraph><paragraph>A simple class with several slots:</paragraph><paragraph><extension extension_name='source' lang="dylan"><paragraph>define class &lt;point&gt; (&lt;object&gt;)</paragraph><preblock><preline><space/>slot point-x :: &lt;integer&gt;,</preline><preline><space/><space/><space/>required-init-keyword: x:;</preline><preline><space/>slot point-y :: &lt;integer&gt;,</preline><preline><space/><space/><space/>required-init-keyword: y:;</preline></preblock><paragraph>end class &lt;point&gt;;</paragraph></extension></paragraph><list type='bullet'><listitem>By convention all classes are named with angle brackets. This is just a convention. The class could be named &quot;Point&quot;, but that is never done. (Note that Dylan is not case sensitive.)</listitem><listitem>In &quot;end class &lt;point&gt;&quot; both &quot;class&quot; and &quot;&lt;point&gt;&quot; are optional. This is true for all &quot;end clauses&quot;. For example, you may write &quot;end if&quot; or just &quot;end&quot; to terminate an &quot;if&quot; statement.</listitem></list><paragraph>The same class, rewritten in the most minimal way possible:</paragraph><paragraph><extension extension_name='source' lang="dylan"><paragraph>define class &lt;point&gt; (&lt;object&gt;)</paragraph><preblock><preline><space/>slot point-x;</preline><preline><space/>slot point-y;</preline></preblock><paragraph>end;</paragraph></extension></paragraph><list type='bullet'><listitem>The slots are now both typed as &lt;object&gt;.</listitem><listitem>The slots must be initialized manually.</listitem></list><paragraph><extension extension_name='source' lang="dylan">define constant $pi :: &lt;double-float&gt; = 3.1415927d0;</extension></paragraph><list type='bullet'><listitem>By convention constant names begin with &quot;$&quot;.</listitem></list><paragraph>A factorial function:<extension extension_name='source' lang="dylan"><paragraph>define function factorial (n :: &lt;integer&gt;) =&gt; (n! :: &lt;integer&gt;)</paragraph><preblock><preline><space/>case</preline><preline><space/><space/><space/>n &lt; 0 =&gt; error(&quot;Can't take factorial of negative integer: %d\n&quot;, n);</preline><preline><space/><space/><space/>n = 0 =&gt; 1;</preline><preline><space/><space/><space/>otherwise =&gt; n * factorial(n - 1);</preline><preline><space/>end</preline></preblock><paragraph>end;</paragraph></extension></paragraph><list type='bullet'><listitem>There is no explicit &quot;return&quot; statement. The result of a method or function is the last expression evaluated. It is a common style to leave off the semicolon after an expression in return position.</listitem><listitem>Identifiers in Dylan may contain more &quot;special&quot; characters than most language. &quot;n!&quot; and &quot;&lt;integer&gt;&quot; are just normal identifiers. If there is any ambiguity, whitespace is used.</listitem><listitem>Statements such as &quot;if&quot; and &quot;for&quot; end with the keyword &quot;end&quot; but may optionally be written as &quot;end if&quot; or &quot;end for&quot;.</listitem></list><paragraph>Originally, Dylan used a Lisp-like prefix syntax, which is based on<space/><link><target>s-expressions</target></link>:</paragraph><paragraph><extension extension_name='source' lang="lisp"><preblock><preline>(bind ((radius 5)</preline><preline><space/><space/><space/><space/><space/><space/><space/>(circumference (* 2 $pi radius)))</preline><preline><space/><space/>(if (&gt; circumference 42)</preline><preline><space/><space/><space/><space/><space/><space/>(format-out &quot;Hello big circle! c is %=&quot; circumference)</preline><preline><space/><space/><space/><space/><space/><space/>(format-out &quot;Hello circle! c is %=&quot; circumference)))</preline></preblock></extension></paragraph><paragraph>By the time the language design was completed, it was changed to an Algol-like syntax, with the expectation that it would be more familiar to a wider audience of programmers.</paragraph><heading level='2'>Modules vs. namespace</heading><paragraph>In many object-oriented languages, classes are the primary means of encapsulation and modularity; each class defines a namespace and controls which definitions are externally visible. In addition, classes in many languages define an indivisible unit that must be used as a wholeif you want to use a String concatenation function, you must import and compile against all of String.</paragraph><paragraph>Some languages also include a separate, explicit namespace or module system that performs encapsulation in a more general way. Dylan is such a language.</paragraph><paragraph>In Dylan, the concepts of compile-unit and import-unit are separated, and classes have nothing specifically to do with either. A<space/><italics>library</italics><space/>defines items that should be compiled and handled together, while a<space/><italics>module</italics><space/>defines the namespace. Classes can be placed together in modules, or cut across them, as the programmer wishes. Often the complete definition for a class does not exist in a single module, but is spread across several that are optionally collected together. Different programs can have different definitions of the same class, including only what they need.</paragraph><paragraph>For example, consider an add-on library for<space/><link><target>regex</target></link><space/>support on String. In some languages, in order for the functionality to be included in strings, the functionality has to be added to the String namespace itself. As soon as you do this, the String class becomes larger, and people who don't need to use regex still have to &quot;pay&quot; for it in increased library size. For this reason these sorts of add-ons are typically placed in their own namespaces and objects. The downside to this approach is that the new functionality is no longer a<space/><italics>part of</italics><space/>string; instead, it is isolated in its own set of functions that have to be called separately. Instead of<space/><xhtml:code>myString.parseWith(myPattern)</xhtml:code>, which would be the natural organization from an OO point of view, you use something like<space/><xhtml:code>myPattern.parseString(myString)</xhtml:code>, which effectively reverses the ordering.</paragraph><paragraph>In addition, under Dylan many interfaces can be defined for the same code, for instance the String concatenation method could be placed in both the String interface, and the &quot;concat&quot; interface which collects together all of the different concatenation functions from various classes. This is more commonly used in math libraries, where functions tend to be applicable to widely differing object types.</paragraph><paragraph>A more practical use of the interface construct is to build public and private versions of a module, something that other languages include as a &quot;bolt on&quot; feature that invariably causes problems and adds syntax. Under Dylan the programmer can simply place every function call in the &quot;Private&quot; or &quot;Development&quot; interface, and collect up publicly accessible functions in &quot;Public&quot;. Under<space/><link><target>Java (programming language)</target><part>Java</part></link><space/>or<space/><link><target>C++</target></link><space/>the visibility of an object is defined in the code itself, meaning that to support a similar change the programmer would be forced to re-write the definitions completely, and could not have two versions at the same time.</paragraph><heading level='2'>Classes</heading><paragraph>Classes in Dylan describe &quot;slots&quot; (data members, fields, ivars, etc.) of objects in a fashion similar to most OO languages. All access to slots are via methods, as in<space/><link><target>Smalltalk</target></link>. Default getter and setter methods are automatically generated based on the slot names. In contrast with most other OO languages, other methods applicable to the class are often defined outside of the class, and thus class definitions in Dylan typically include the definition of the storage only. For instance:</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="dylan"><paragraph>define class &lt;window&gt; (&lt;view&gt;)</paragraph><preblock><preline><space/>slot title :: &lt;string&gt; = &quot;untitled&quot;, init-keyword: title:;</preline><preline><space/>slot position :: &lt;point&gt;, required-init-keyword: position:;</preline></preblock><paragraph>end class;</paragraph></extension></paragraph><paragraph>In this example the class &quot;<xhtml:code>&amp;lt;window&amp;gt;</xhtml:code>&quot; is defined. The &amp;lt;class name&amp;gt; syntax is convention only, to make the class names stand outthe angle brackets are merely part of the class name. In comparison, in some languages the convention is to capitalize the first letter of the class name or to prefix the name with a &quot;C&quot; or &quot;T&quot; (for example).<space/><xhtml:code>&amp;lt;window&amp;gt;</xhtml:code><space/>inherits from a single class,<space/><xhtml:code>&amp;lt;view&amp;gt;</xhtml:code>, and contains two slots,<space/><xhtml:code>title</xhtml:code><space/>holding a string for the window title, and<space/><xhtml:code>position</xhtml:code><space/>holding an X-Y point for a corner of the window. In this particular example the title has been given a default value, while the position has not. The optional &quot;init-keyword&quot; syntax allows the programmer to specify the initial value of the slot when instantiating an object of the class.</paragraph><paragraph>In languages such as C++ or Java, the class would also define its interface. In this case the definition above has no explicit instructions, so in both languages access to the slots and methods is considered<space/><xhtml:code>protected</xhtml:code>, meaning they can be used only by subclasses. In order to allow unrelated code to use the window instances, they would have to be declared<space/><xhtml:code>public</xhtml:code>.</paragraph><paragraph>In Dylan these sorts of visibility rules are not considered part of the code itself, but of the module/interface system. This adds considerable flexibility. For instance, one interface used during early development could declare everything public, whereas one used in testing and deployment could limit this. With C++ or Java these changes would require changes to the source code itself, so people won't do it, whereas in Dylan this is a completely unrelated concept.</paragraph><paragraph>Although this example does not use it, Dylan also supports<space/><link><target>multiple inheritance</target></link>.</paragraph><heading level='2'>Methods and generic functions</heading><paragraph>In Dylan, methods are not intrinsically associated with any particular class; methods can be thought of as existing outside of classes. Like CLOS, Dylan is based on<space/><link><target>multimethods</target></link>, where the specific method to be called is chosen based upon the types of all its arguments. The method does not have to be known at compile time, the understanding being that the required functionality may be available or may not, based on the user's preferences.</paragraph><paragraph>Under Java the same methods would be isolated in a particular class. In order to use that functionality the programmer is forced to<space/><italics>import</italics><space/>that class and refer to it explicitly in order to call the method. If that class is not available, or unknown at compile time, the application simply won't compile.</paragraph><paragraph>In Dylan, code is isolated from storage in<space/><italics>functions</italics>. Many classes have methods that call their own functions, thereby looking and feeling like most other OO languages. However code may also be located in<space/><italics>generic functions</italics>, meaning they are not attached to a particular class, and can be called natively by anyone. Linking a particular generic function to a method in a class is accomplished this way:</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="dylan"><paragraph>define method turn-blue (w :: &lt;window&gt;)</paragraph><preblock><preline><space/>w.color := $blue;</preline></preblock><paragraph>end method;</paragraph></extension></paragraph><paragraph>This definition is similar to those in other languages, and would likely be encapsulated within the<space/><xhtml:code>&amp;lt;window&amp;gt;</xhtml:code><space/>class. Note the := setter call, which is<space/><link><target>syntactic sugar</target></link><space/>for<space/><xhtml:code>color-setter($blue, w)</xhtml:code>.</paragraph><paragraph>The utility of generic methods comes into its own when you consider more &quot;generic&quot; examples. For instance, one common function in most languages is the<space/><xhtml:code>to-string</xhtml:code>, which returns some<space/><link><target>human-readable</target></link><space/>form for the object. For instance, a window might return its title and its position in parens, while a string would return itself. In Dylan these methods could all be collected into a single module called &quot;<xhtml:code>to-string</xhtml:code>&quot;, thereby removing this code from the definition of the class itself. If a particular object did not support a<space/><xhtml:code>to-string</xhtml:code>, it could be easily added in the<space/><xhtml:code>to-string</xhtml:code><space/>module.</paragraph><heading level='2'>Extensibility</heading><paragraph>This whole concept might strike some readers as very odd. The code to handle<space/><xhtml:code>to-string</xhtml:code><space/>for a window isn't defined in<space/><xhtml:code>&amp;lt;window&amp;gt;</xhtml:code>? This might not make any sense until you consider how Dylan handles the call of the<space/><xhtml:code>to-string</xhtml:code>. In most languages<template><target>which</target><arg name="date">June 2013</arg></template><space/>when the program is compiled the<space/><xhtml:code>to-string</xhtml:code><space/>for<space/><xhtml:code>&amp;lt;window&amp;gt;</xhtml:code><space/>is looked up and replaced with a pointer (more or less) to the method. In Dylan this occurs when the program is first run; the<space/><link><target>Run time system</target><part>runtime</part></link><space/>builds a table of method-name/parameters details and looks up methods dynamically via this table. That means that a function for a particular method can be located anywhere, not just in the compile-time unit. In the end the programmer is given considerable flexibility in terms of where to place their code, collecting it along class lines where appropriate, and functional lines where it's not.</paragraph><paragraph>The implication here is that a programmer can add functionality to existing classes by defining functions in a separate file. For instance, you might wish to add spell checking to all<space/><xhtml:code>&amp;lt;string&amp;gt;</xhtml:code>s, which in most languages would require access to the source code of the string class&amp;mdash;and such basic classes are rarely given out in source form. In Dylan (and other &quot;extensible languages&quot;) the spell checking method could be added in the<space/><xhtml:code>spell-check</xhtml:code><space/>module, defining all of the classes on which it can be applied via the<space/><xhtml:code>define method</xhtml:code><space/>construct. In this case the actual functionality might be defined in a single generic function, which takes a string and returns the errors. When the<space/><xhtml:code>spell-check</xhtml:code><space/>module is compiled into your program, all strings (and other objects) will get the added functionality.</paragraph><heading level='2'>Apple Dylan</heading><paragraph><template><target>main</target><arg>Apple Dylan</arg></template>Apple Dylan is the implementation of Dylan produced by<space/><link><target>Apple Computer</target></link>. It was originally developed for the<space/><link><target>Apple Newton</target></link><space/>product.</paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Dylan Server Pages</target></link></listitem></list><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://opendylan.org/'>Open Dylan</link><space/>Host of open source, optimizing Dylan compiler targeting Unix/Linux, Mac OS X, and Microsoft Windows</listitem><listitem><link type='external' href='http://opendylan.org/documentation/intro-dylan/'>An Introduction to Dylan</link></listitem><listitem><link type='external' href='http://opendylan.org/books/drm/'>The Dylan Reference Manual</link><space/>The core language and library definition</listitem><listitem><link type='external' href='http://www.cise.ufl.edu/~jnw/Marlais/'>The Marlais Dylan Interpreter</link><space/>An implementation of a subset of Dylan, suitable for bootstrapping a compiler</listitem><listitem><template><target>dmoz</target><arg>Computers/Programming/Languages/Dylan/</arg><arg>Dylan</arg></template></listitem></list><paragraph><link><target>Category:Dylan (programming language)</target><part></part></link><link><target>Category:Cross-platform software</target></link><link><target>Category:Programming languages created in the 1990s</target></link><link><target>Category:Lisp programming language family</target></link><link><target>Category:Extensible syntax programming languages</target></link></paragraph></article>