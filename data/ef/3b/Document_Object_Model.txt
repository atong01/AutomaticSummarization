{{Distinguish|Domain Object Model}}
{{More footnotes|date=August 2010}}
{{HTML}} 
[[File:JKDOM.SVG|thumb|right|Hierarchy of objects in an example HTML DOM—Document Object Model]]
The '''Document Object Model''' ('''DOM''') is a [[cross-platform]] and [[programming language|language]]-independent ''convention'' for representing and interacting with [[Object (computer science)|objects]] in [[HTML]], [[XHTML]], and [[XML]] documents.<ref name="Introduction">{{cite web
| accessdate = 2012-01-12
| location = http://www.w3.org/
| publisher = W3C 
| title = Document Object Model (DOM)
| quote = The Document Object Model is a platform- and language-neutral interface that will allow programs and scripts to dynamically access and update the content, structure and style of documents. 
| url = http://www.w3.org/DOM/#what}}</ref> The [[Node (computer science)|nodes]] of every document are organized in a [[tree structure]], called the ''DOM tree''.  Objects in the DOM tree may be addressed and manipulated by using methods on the objects. The public interface of a DOM is specified in its [[application programming interface]] (API).

The history of the Document Object Model is intertwined with the history of the "[[browser wars]]" of the late 1990s between [[Netscape Navigator]] and [[Microsoft Internet Explorer]], as well as with that of [[JavaScript]] and [[JScript]], the first [[scripting language]]s to be widely implemented in the [[layout engines]] of [[web browser]]s.

==Legacy DOM==

JavaScript was released by [[Netscape Communications]] in 1995 within Netscape Navigator 2.0. Netscape's competitor, [[Microsoft]], released [[Internet Explorer 3|Internet Explorer 3.0]] the following year with a [[port (software)|port]] of JavaScript called JScript. JavaScript and JScript let [[web developer]]s  create web pages with [[client-side]] interactivity. The limited facilities for detecting user-generated [[Event (computing)|events]] and modifying the HTML document in the first generation of these languages eventually became known as "DOM Level 0" or "Legacy DOM." No independent standard was developed for DOM Level 0, but it was partly described in the specification of [[HTML4|HTML 4]].

Legacy DOM was limited in the kinds of [[HTML element|element]]s that could be accessed. [[Form (web)|Form]], [[Hyperlink|link]] and image elements could be referenced with a hierarchical name that began with the root document object. A hierarchical name could make use of either the names or the sequential index of the traversed elements. For example, a [[Text box|form input element]] could be accessed as either <code>document.formName.inputName</code> or <code>document.forms[0].elements[0]</code>.

The Legacy DOM enabled client-side form validation and the popular "[[Rollover (web design)|rollover]]" effect.

==Intermediate DOM==

In 1997, Netscape and Microsoft released version 4.0 of Netscape Navigator and Internet Explorer respectively, adding support for [[Dynamic HTML]] (DHTML), functionality enabling changes to a loaded HTML document. DHTML required extensions to the rudimentary document object that was available in the Legacy DOM implementations. Although the Legacy DOM implementations were largely compatible since JScript was based on JavaScript, the DHTML DOM extensions were developed in parallel by each browser maker and remained incompatible. These versions of the DOM became known as the "Intermediate DOM."

==Standardization==

The [[World Wide Web Consortium]] (W3C), founded in 1994 to promote [[open standard]]s for the [[World Wide Web]], brought Netscape Communications and Microsoft together with other companies to develop a standard for browser scripting languages, called "[[ECMAScript]]." The first version of the standard was published in 1997. Subsequent releases of JavaScript and JScript would implement the ECMAScript standard for greater cross-browser compatibility.

After the release of ECMAScript, W3C began working on a standardized DOM. The initial DOM standard, known as "DOM Level 1", was recommended by W3C in late 1998. About the same time, Internet Explorer 5.0 shipped with limited support for DOM Level 1. DOM Level 1 provided a complete model for an entire HTML or [[XML]] document, including means to change any portion of the document. Non-conformant browsers such as Internet Explorer 4.x and Netscape 4.x were still widely used as late as 2000.

DOM Level 2 was published in late 2000. It introduced the <code>getElementById</code> function as well as an [[DOM Events|event model]] and support for [[XML namespace]]s and CSS.

DOM Level 3, the current release of the DOM specification, published in April 2004, added support for [[XPath]] and keyboard [[event handling]], as well as an interface for [[serialization|serializing]] documents as XML.

DOM Level 4 is currently being developed. Last Call Working Draft was released in February 2014.<ref>http://www.w3.org/TR/dom/</ref>

By 2005, large parts of W3C DOM were well-supported by common ECMAScript-enabled browsers, including [[Microsoft Internet Explorer 6|Microsoft Internet Explorer version 6]] (from 2001), [[Opera (web browser)|Opera]], [[Safari (web browser)|Safari]] and [[Gecko (layout engine)|Gecko]]-based browsers (like [[Mozilla Application Suite|Mozilla]], [[Mozilla Firefox|Firefox]], [[SeaMonkey]] and [[Camino (web browser)|Camino]]).

==Applications==

===Web browsers===

To [[Web browser engine|render]] a document such as an HTML page, most web browsers use an internal model similar to the '''DOM'''. The nodes of every document are organized in a [[tree structure]], called the ''DOM tree'', with topmost node named "Document object". When an HTML page is rendered in browsers, the browser downloads the HTML into local memory and automatically parses it to display the page on screen. The DOM is also the way JavaScript transmits the state of the browser in HTML pages.

===JavaScript===

When a web page is loaded, the browser creates a Document Object Model of the page.

With the object model, JavaScript gets all the power it needs to create dynamic HTML:

* JavaScript can add, change, and remove all the HTML elements and attributes in the page
* JavaScript can change all the CSS styles in the page
* JavaScript can react to all existing events in the page
* JavaScript can create new events in the page

<ref>http://www.w3schools.com/js/js_htmldom.asp</ref>

==Implementations==

Because DOM supports navigation in any direction (e.g., parent and previous sibling) and allows for arbitrary modifications, an implementation must at least buffer the document that has been read so far (or some parsed form of it).{{Citation needed|date=January 2012}}

===Layout engines===

Web browsers rely on layout engines to parse HTML into a DOM. Some layout engines, such as [[Trident (layout engine)|Trident/MSHTML]], are associated primarily or exclusively with a particular browser, such as Internet Explorer. Others, such as [[Blink (layout engine)|Blink]], [[WebKit]], and [[Gecko (layout engine)|Gecko]], are shared by a number of browsers, such as [[Google Chrome]], [[Opera (web browser)|Opera]], [[Safari (web browser)|Safari]], and [[Firefox]]. The different layout engines implement the DOM standards to varying degrees of compliance.

{{See also|Comparison of layout engines (Document Object Model)}}

===Libraries===

DOM implementations:

* [[libxml2]]
* [[MSXML]]
* [[Xerces]] is a collection of DOM implementations written in C++, Java and Perl
* XML for <SCRIPT> is a JavaScript-based DOM implementation<ref>[http://xmljs.sourceforge.net/ "Cross Platform XML Parsing in JavaScript"]</ref>
APIs that expose DOM implementations:

* [[Java API for XML Processing|JAXP]] (Java API for XML Processing) is an API for accessing DOM providers
* [[Lazarus (IDE)|Lazarus]] ([[Free Pascal]] IDE) contains two variants of the DOM - with UTF-8 and ANSI format

Inspection tools

* [[DOM Inspector]] is a web developer tool

==See also==

* [[Ajax (programming)|Ajax]]—a methodology employing DOM in combination with techniques for retrieving data without reloading a page.
* [[Application Object Model]]
* [[DOM scripting]]
* [[JDOM]]—a Java-based document object model for XML that integrates with DOM and [[Simple API for XML|SAX]] and uses parsers to build the document.
* [[jQuery]]
* [[JSON]]
* [[Prototype.js]]
* [[Simple API for XML|SAX]]—serial access parser API for XML, an alternative to DOM.
* [[SXML]]—a model for representing XML and HTML in the form of S-expressions.
* [[TinyXml]]—efficient platform-independent XML library for C++.

==Sources==

*{{cite book
  | last = Flanagan
  | first = David
  | title = JavaScript: The Definitive Guide
  | publisher = O'Reilly & Associates
  | year = 2006
  | pages = 312–313
  | isbn = 0-596-10199-6 }}
*{{cite web
  | last = Koch
  | first = Peter-Paul
  | title = The Document Object Model: an Introduction
  | work = Digital Web Magazine
  | date = May 14, 2001
  | url = http://www.digital-web.com/articles/the_document_object_model/
  | accessdate = January 10, 2009 }}
*{{cite web
  | last = Le Hégaret
  | first = Philippe
  | title = The W3C Document Object Model (DOM)
  | publisher = World Wide Web Consortium
  | year = 2002
  | url = http://www.w3.org/2002/07/26-dom-article.html
  | accessdate = January 10, 2009 }}
*{{cite web
  | last = Guisset
  | first = Fabian
  | title = What does each DOM Level bring?
  | publisher = Mozilla Project
  | work = Mozilla Developer Center
  | url = https://developer.mozilla.org/en/docs/DOM_Levels
  | accessdate = January 10, 2009 }}

==References==

{{Reflist}}

==External links==

{{Commons category|Document object models|<br />Document object models}}
*[http://www.w3.org/DOM/ Document Object Model] by the World Wide Web Consortium
*[http://xml.coverpages.org/dom.html Technology Reports]
*[http://www.w3.org/2003/02/06-dom-support.html What does your user agent claim to support?]
*[http://www.quirksmode.org/dom/contents.html W3C DOM scripts and compatibility tables] (Quirksmode)
*[https://developer.mozilla.org/en/Gecko_DOM_Reference Gecko DOM Reference] (Mozilla Developer Center)
*[http://ibdom.sourceforge.net/ IB DOM Utilities: Mapping JavaScript Objects to DOM Elements]
*[https://www.p6r.com/software/xjr.html XJR with DOM, SAX2, and XPath interfaces]
*[http://blog.mozilla.com/tilt/ Firefox plugin that lets you visualize a Web's page DOM in 3D]

{{W3C Standards}}

{{Authority control}}

<!--Categories-->
[[Category:Application programming interfaces]]
[[Category:Object models]]
[[Category:World Wide Web Consortium standards]]
[[Category:XML-based standards]]
[[Category:HTML]]