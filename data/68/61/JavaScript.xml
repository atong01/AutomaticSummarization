<article title='JavaScript'><paragraph><template><target>distinguish</target><arg>Java (programming language)</arg><arg>Java (software platform)</arg><arg>Javanese script</arg></template><template><target>Infobox programming language</target><arg name="name"><space/>JavaScript
</arg><arg name="paradigm"><space/>[[Multi-paradigm]]: [[scripting language|scripting]], [[object-oriented programming|object-oriented]] ([[prototype-based programming|prototype-based]]), [[imperative programming|imperative]], [[functional programming|functional]]{{Sfn|Flanagan|2011|pp<space/></arg><arg name="year"><space/>{{start date and age|1995|5}}
</arg><arg name="logo">
</arg><arg name="designer"><space/>[[Brendan Eich]]
</arg><arg name="developer"><space/>[[Netscape Communications Corporation]], [[Mozilla Foundation]], [[Ecma International]]
</arg><arg name="latest_release_version"><space/>ECMAScript 6<ref>{{cite web | url</arg><arg name="latest_release_date"><space/>{{start date and age|2015|6|17}}
</arg><arg name="latest_preview_version"><space/>
</arg><arg name="latest_preview_date"><space/>{{start date and age|2010|7|27}}
</arg><arg name="typing"><space/>[[dynamic typing|dynamic]], [[duck typing|duck]]
</arg><arg name="implementations"><space/>[[KJS (KDE)|KJS]], [[Rhino (JavaScript engine)|Rhino]], [[SpiderMonkey (JavaScript engine)|SpiderMonkey]], [[V8 (JavaScript engine)|V8]], [[Linear b (script engine)|Carakan]], [[Chakra (JScript engine)|Chakra]]
</arg><arg name="influenced_by"><space/>[[Lua (programming language)|Lua]], [[Scheme (programming language)|Scheme]], [[Perl]], [[Self (programming language)|Self]], [[Java (programming language)|Java]], [[C (programming language)|C]], [[Python (programming language)|Python]], [[AWK]], [[HyperTalk]] 
</arg><arg name="influenced"><space/>[[ActionScript]], [[AtScript]], [[CoffeeScript]], [[Dart (programming language)|Dart]], [[JScript .NET]], [[Objective-J]], [[QML]], [[TypeScript]], [[LiveScript]]
</arg><arg name="license"><space/>
</arg><arg name="website"><space/>
</arg><arg name="wikibooks"><space/>JavaScript
</arg><arg name="logo caption"><space/></arg></template><template><target>Infobox file format</target><arg name="name"><space/>JavaScript
</arg><arg name="icon"><space/>[[File:Javascript icon.svg|150px]]
</arg><arg name="logo"><space/>
</arg><arg name="screenshot"><space/>
</arg><arg name="caption"><space/>
</arg><arg name="extension"><space/>.js
</arg><arg name="mime"><space/>{{flatlist|
*<space/><tt>application/javascript</tt>
*<space/><tt>text/javascript</tt>&nbsp;(obsolete)<ref>{{cite web | url</arg><arg name="type code"><space/>
</arg><arg name="uniform type"><space/>com.netscape.javascript-source<ref>{{cite web
| publisher<space/></arg><arg name="magic"><space/>
</arg><arg name="owner"><space/>
</arg><arg name="released"><space/>
</arg><arg name="latest release version"><space/>
</arg><arg name="latest release date"><space/>
</arg><arg name="genre"><space/>[[Scripting language]]
</arg><arg name="container for"><space/>
</arg><arg name="contained by"><space/>
</arg><arg name="extended from"><space/>
</arg><arg name="extended to"><space/>
</arg><arg name="standard"><space/>
</arg><arg name="url"><space/>
</arg></template><template><target>JavaScriptSidebar</target></template></paragraph><paragraph><bold>JavaScript</bold><space/>(<template><target>IPAc-en</target><arg>ˈ</arg><arg>dʒ</arg><arg>ɑː</arg><arg>v</arg><arg>ə</arg><arg>ˌ</arg><arg>s</arg><arg>k</arg><arg>r</arg><arg>ɪ</arg><arg>p</arg><arg>t</arg></template><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://dictionary.reference.com/browse/javascript<space/></arg><arg name="title">JavaScript<space/></arg><arg name="publisher">William Collins Sons & Co<space/></arg><arg name="work">Collins English Dictionary - Complete & Unabridged 2012 Digital Edition<space/></arg><arg name="date">2012<space/></arg><arg name="accessdate">21 August 2015</arg></template></extension>) is a<space/><link><target>High-level programming language</target><part>high-level</part></link>,<space/><link><target>dynamic programming language</target><part>dynamic</part></link>,<space/><link><target>Programming language#Type system</target><part>untyped</part></link>, and<space/><link><target>Interpreted language</target><part>interpreted</part></link><space/>programming language.<template><target>Sfn</target><arg>Flanagan</arg><arg>2011</arg><arg name="p">1</arg></template><space/>It has been standardized in the<space/><link><target>ECMAScript</target></link><space/>language specification.<template><target>Sfn</target><arg>Flanagan</arg><arg>2011</arg><arg name="p">2</arg></template><space/>Alongside<space/><link><target>HTML</target></link><space/>and<space/><link><target>CSS</target></link>, it is one of the three essential technologies of<space/><link><target>World Wide Web</target></link><space/>content production; the majority of<space/><link><target>website</target><trail>s</trail></link><space/>employ it and it is supported by all modern<space/><link><target>web browser</target><trail>s</trail></link><space/>without<space/><link><target>Browser extension</target><part>plug-ins</part></link>.<template><target>Sfn</target><arg>Flanagan</arg><arg>2011</arg><arg name="p">1</arg></template><space/>JavaScript is<space/><link><target>Prototype-based programming</target><part>prototype-based</part></link><space/>with<space/><link><target>first-class functions</target></link>, making it a<space/><link><target>multi-paradigm</target></link><space/>language, supporting<space/><link><target>Object-oriented programming</target><part>object-oriented</part></link>,<extension extension_name='ref' name="ECMA-262"><template><target>cite web</target><arg name="url">http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf<space/></arg><arg name="title"><space/>ECMAScript Language Specification<space/></arg></template></extension><space/><link><target>imperative programming</target><part>imperative</part></link>, and<space/><link><target>functional programming</target><part>functional</part></link><space/>programming styles.<template><target>Sfn</target><arg>Flanagan</arg><arg>2011</arg><arg name="p">1</arg></template><space/>It has an<space/><link><target>Application programming interface</target><part>API</part></link><space/>for working with text,<space/><link><target>Array data type</target><part>arrays</part></link>, dates and<space/><link><target>regular expression</target><trail>s</trail></link>, but does not include any<space/><link><target>Input/output</target><part>I/O</part></link>, such as networking, storage or graphics facilities, relying for these upon the host environment in which it is embedded.<template><target>Sfn</target><arg>Flanagan</arg><arg>2011</arg><arg name="p">2</arg></template></paragraph><paragraph>Despite some naming,<space/><link><target>Syntax (programming languages)</target><part>syntactic</part></link>, and<space/><link><target>standard library</target></link><space/>similarities, JavaScript and<space/><link><target>Java (programming language)</target><part>Java</part></link><space/>are otherwise unrelated and have very different<space/><link><target>Semantics (computer science)</target><part>semantics</part></link>. The syntax of JavaScript is actually derived from<space/><link><target>C (programming language)</target><part>C</part></link>, while the semantics and design are influenced by the<space/><link><target>Self (programming language)</target><part>Self</part></link><space/>and<space/><link><target>Scheme (programming language)</target><part>Scheme</part></link><space/>programming languages.<extension extension_name='ref'><template><target>cite web</target><arg name="title">ECMAScript Language Overview</arg><arg name="url">http://www.ecmascript.org/es4/spec/overview.pdf</arg><arg name="format">PDF</arg><arg name="page">4</arg><arg name="date">2007-10-23</arg><arg name="accessdate">2009-05-03</arg></template></extension></paragraph><paragraph>JavaScript is also used in environments that are not web-based, such as<space/><link><target>Portable Document Format</target><part>PDF</part></link><space/>documents,<space/><link><target>site-specific browser</target><trail>s</trail></link>, and<space/><link><target>desktop widget</target><trail>s</trail></link>. Newer and faster JavaScript<space/><link><target>virtual machine</target><trail>s</trail></link><space/>(VMs) and platforms built upon them have also increased the popularity of JavaScript for server-side<space/><link><target>web application</target><trail>s</trail></link>. On the client side, JavaScript has been traditionally implemented as an<space/><link><target>Interpreter (computing)</target><part>interpreted</part></link><space/>language, but more recent browsers perform<space/><link><target>just-in-time compilation</target></link>. It is also used in game development, the creation of desktop and mobile applications, and server-side network programming with runtime environments such as<space/><link><target>Node.js</target></link>.</paragraph><heading level='2'>History</heading><heading level='3'>Beginnings at Netscape</heading><paragraph>JavaScript was originally developed in 10 days in May 1995 by<space/><link><target>Brendan Eich</target></link>, while he was working for<space/><link><target>Netscape Communications Corporation</target></link>. Indeed, while competing with<space/><link><target>Microsoft</target></link><space/>for user adoption of web technologies and platforms, Netscape considered their client-server offering a distributed OS with a portable version of<space/><link><target>Sun Microsystems</target></link>' Java providing an environment in which<space/><link><target>Java applet</target><part>applets</part></link><space/>could be run.<template><target>Citation needed</target><arg name="date">October 2014</arg></template><space/>Because Java was a competitor of<space/><link><target>C++</target></link><space/>and aimed at professional programmers, Netscape also wanted a lightweight<space/><link><target>interpreted language</target></link><space/>that would complement Java by appealing to nonprofessional programmers, like Microsoft's Visual Basic (see<space/><link><target>#JavaScript and Java</target><part>JavaScript and Java</part></link>).<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Severance<space/></arg><arg name="first">Charles<space/></arg><arg name="date">February 2012<space/></arg><arg name="title">JavaScript: Designing a Language in 10 Days<space/></arg><arg name="journal">Computer<space/></arg><arg name="volume">45<space/></arg><arg name="issue">2<space/></arg><arg name="pages">7–8<space/></arg><arg name="publisher">IEEE Computer Society<space/></arg><arg name="url">http://www.computer.org/csdl/mags/co/2012/02/mco2012020007-abs.html<space/></arg><arg name="accessdate">23 March 2013<space/></arg><arg name="doi">10.1109/MC.2012.57<space/></arg></template></extension></paragraph><paragraph>Although it was developed under the name<space/><bold>Mocha</bold>, the language was officially called<space/><bold>LiveScript</bold><space/>when it first shipped in beta releases of Netscape Navigator 2.0 in September 1995, but it was renamed JavaScript<extension extension_name='ref'><link type='external' href='https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html'>Press release announcing JavaScript</link>, &quot;Netscape and Sun announce JavaScript&quot;, PR Newswire, December 4, 1995</extension><space/>when it was deployed in the Netscape browser version 2.0B3.<extension extension_name='ref' name="techvision"><template><target>cite web</target><arg name="archiveurl">https://web.archive.org/web/20080208124612/http://wp.netscape.com/comprod/columns/techvision/innovators_be.html<space/></arg><arg name="archivedate">2008-02-08<space/></arg><arg name="title">TechVision: Innovators of the Net: Brendan Eich and JavaScript<space/></arg><arg name="publisher">web.archive.org<space/></arg><arg name="url">http://wp.netscape.com/comprod/columns/techvision/innovators_be.html<space/></arg></template></extension></paragraph><paragraph>The change of name from LiveScript to JavaScript roughly coincided with Netscape adding support for Java technology in its<space/><link><target>Netscape Navigator</target></link><space/>web browser. The final choice of name caused confusion, giving the impression that the language was a spin-off of the Java programming language, and the choice has been characterized as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new web programming language.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.webdevelopersnotes.com/basics/languages_on_the_internet.php3<space/></arg><arg name="title">Programming languages used on the Internet and the World Wide Web (WWW)<space/></arg><arg name="publisher">webdevelopersnotes.com<space/></arg><arg name="accessdate">2009-05-19</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://safari.oreilly.com/0596101996/jscript5-CHP-1<space/></arg><arg name="title">O'Reilly - Safari Books Online - 0596101996 - JavaScript: The Definitive Guide, 5th Edition<space/></arg><arg name="publisher">Safari.oreilly.com<space/></arg><arg name="accessdate">2009-05-19</arg></template></extension></paragraph><paragraph>There is a common misconception that the JavaScript language was influenced by an earlier web page scripting language developed by<space/><link><target>Openwave</target><part>Nombas</part></link><space/>named C--, not to be confused with the later<space/><link><target>C--</target></link><space/>created in 1997.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://oreilly.com/news/languageposter_0504.html<space/></arg><arg name="title">The History of Programming Languages - O'Reilly Media<space/></arg><arg name="publisher">Oreilly.com<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.brenkoweb.com/articles/world-wide-web/web-design-software/history-of-javascript.php<space/></arg><arg name="title">History of JavaScript, ©Brenkoweb<space/></arg><arg name="publisher">Brenkoweb.com<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://media.wiley.com/product_data/excerpt/88/07645790/0764579088.pdf<space/></arg><arg name="title">What Is JavaScript?<space/></arg><arg name="publisher">media.wiley.com<space/></arg><arg name="accessdate">2014-04-21</arg></template></extension><space/>Brendan Eich, however, had never heard of C-- before he created LiveScript.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.quora.com/Brent-Noorda/answers/ECMA<space/></arg><arg name="title">Brent Noorda's Answers on ECMA<space/></arg><arg name="publisher">Quora<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension><space/>Nombas did pitch their embedded web page scripting to Netscape, though web page scripting was not a new concept, as shown by<space/><link><target>ViolaWWW</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.brent-noorda.com/nombas/history/HistoryOfNombas.html#h.yal3k216ii2r<space/></arg><arg name="title">History of Nombas<space/></arg><arg name="publisher">Brent-noorda.com<space/></arg><arg name="date">2010-06-24<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension><space/>Nombas later switched to offering JavaScript instead of C-- in their ScriptEase product and was part of the TC39 group that standardized<space/><link><target>ECMAScript</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">https://brendaneich.com/2011/06/new-javascript-engine-module-owner/<space/></arg><arg name="title">New JavaScript Engine Module Owner<space/></arg><arg name="publisher">Brendan Eich<space/></arg><arg name="date">2011-06-21<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://read.uberflip.com/i/113144/44<space/></arg><arg name="title">Tech - JavaScript for Web Developers<space/></arg><arg name="publisher">Read.uberflip.com<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension></paragraph><heading level='3'>Server-side JavaScript</heading><paragraph>Netscape introduced an implementation of the language for<space/><link><target>server-side scripting</target></link><space/>with<space/><link><target>Netscape Enterprise Server</target></link><space/>in December, 1995, soon after releasing JavaScript for browsers.<extension extension_name='ref' name="Newscape JavaScript Guide-1998"><template><target>cite web</target><arg name="title">Server-Side JavaScript Guide</arg><arg name="publisher">Netscape Communications Corporation<space/></arg><arg name="year">1998<space/></arg><arg name="url">http://docs.oracle.com/cd/E19957-01/816-6411-10/getstart.htm</arg><arg name="accessdate">2012-04-25</arg></template></extension><extension extension_name='ref' name="Morgan-Netcape LiveWire"><template><target>cite web</target><arg name="title">Using Netscape™ LiveWire™, Special Edition<space/></arg><arg name="author">Mike Morgan<space/></arg><arg name="url">http://vampire.rulez.org/onlinedoc/book/NetscapeLiveWire/ch6.htm<space/></arg><arg name="year">1996<space/></arg><arg name="publisher">Que<space/></arg></template></extension>Since the mid-2000s, there has been a resurgence of<space/><link><target>Comparison of server-side JavaScript solutions</target><part>server-side JavaScript implementations</part></link>, such as Node.js.<extension extension_name='ref' name="RWW-Server-Side-2009-12-17"><template><target>cite web</target><arg name="title"><space/>Server-Side JavaScript Back With a Vengeance<space/></arg><arg name="work"><space/>Read Write Web<space/></arg><arg name="date"><space/>December 17, 2009<space/></arg><arg name="accessdate"><space/>May 28, 2012<space/></arg><arg name="url"><space/>http://www.readwriteweb.com/archives/server-side_javascript_back_with_a_vengeance.php<space/></arg></template></extension><extension extension_name='ref' name="node.js-about"><template><target>cite web</target><arg name="url">http://nodejs.org/about/<space/></arg><arg name="title"><space/>Node's goal is to provide an easy way to build scalable network programs<space/></arg><arg name="work"><space/>About Node.js<space/></arg><arg name="publisher"><space/>Joyent</arg></template></extension></paragraph><heading level='3'>Adoption by Microsoft</heading><paragraph><link><target>Microsoft Windows</target></link><space/>script technologies including<space/><link><target>VBScript</target></link><space/>and<space/><link><target>JScript</target></link><space/>were released in 1996. JScript, a port of Netscape's JavaScript, was released on July 16, 1996 and was part of<space/><link><target>Internet Explorer 3</target></link>, as well as being available server-side in<space/><link><target>Internet Information Server</target></link>. IE3 also included Microsoft's first support for<space/><link><target>Cascading Style Sheets</target></link><space/>and various extensions to HTML, but in each case the implementation was noticeably different to that found in<space/><link><target>Netscape Navigator</target></link><space/>at the time.<extension extension_name='ref' name="O'Reilly-2001"><template><target>cite web</target><arg name="last1">Champeon</arg><arg name="first1">Steve</arg><arg name="title">JavaScript: How Did We Get Here?</arg><arg name="url">http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html</arg><arg name="publisher">O'Reilly Media</arg><arg name="accessdate">9 March 2015</arg><arg name="date">4 June 2001</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="title">Microsoft Internet Explorer 3.0 Beta Now Available</arg><arg name="url">http://news.microsoft.com/1996/05/29/microsoft-internet-explorer-3-0-beta-now-available/</arg><arg name="publisher">Microsoft</arg><arg name="accessdate">9 March 2015</arg><arg name="date">29 May 1996</arg></template></extension><space/>These differences made it difficult for designers and programmers to make a single website work well in both browsers leading to the use of 'best viewed in Netscape' and 'best viewed in Internet Explorer' logos that characterised these early years of the<space/><link><target>browser wars</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">McCracken</arg><arg name="first1">Harry</arg><arg name="title">The Unwelcome Return of "Best Viewed With Internet Explorer"</arg><arg name="url">http://www.technologizer.com/2010/09/16/the-unwelcome-return-of-best-viewed-with-internet-explorer/</arg><arg name="publisher">Technologizer</arg><arg name="accessdate">9 March 2015</arg><arg name="date">16 September 2010</arg></template></extension><space/>JavaScript began to acquire a reputation for being one of the roadblocks to a cross-platform and standards-driven web. Some developers took on the difficult task of trying to make their sites work in both major browsers, but many could not afford the time.<extension extension_name='ref' name="O'Reilly-2001"></extension><space/>With the release of<space/><link><target>Internet Explorer 4</target></link>, Microsoft introduced the concept of<space/><link><target>Dynamic HTML</target></link>, but the differences in language implementations and the different and proprietary<space/><link><target>Document Object Model</target><trail>s</trail></link><space/>remained, and were obstacles to widespread take-up of JavaScript on the web.<extension extension_name='ref' name="O'Reilly-2001"></extension></paragraph><heading level='3'>Standardization</heading><paragraph>In November 1996, Netscape announced that it had submitted JavaScript to<space/><link><target>Ecma International</target></link><space/>for consideration as an industry standard, and subsequent work resulted in the standardized version named<space/><link><target>ECMAScript</target></link>. In June 1997,<space/><link><target>Ecma International</target></link><space/>published the first edition of the<space/><link><target>ECMA-262</target></link><space/><link><target>specification</target></link>. In June 1998, some modifications were made to adapt it to the ISO/IEC-16262 standard, and the second edition was released. The third edition of<space/><link><target>ECMA-262</target></link><space/>was published on December 1999.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf<space/></arg><arg name="title">ECMAScript 3rd Edition specification<space/></arg><arg name="format">PDF<space/></arg><arg name="accessdate">2013-05-26</arg></template></extension></paragraph><paragraph>Development of the fourth edition of the ECMAScript standard was never completed.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.ecmascript.org/docs.php<space/></arg><arg name="title">Documentation<space/></arg><arg name="publisher">ECMAScript<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension><space/>The fifth edition was released in December 2009. The current edition of the ECMAScript standard is 6, released in June 2015.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf<space/></arg><arg name="title">Standard ECMA-262<space/></arg><arg name="format">PDF<space/></arg><arg name="accessdate">2015-06-18</arg></template></extension></paragraph><heading level='3'>Later developments</heading><paragraph>JavaScript has become one of the most popular programming languages on the Web. Initially, however, many professional programmers denigrated the language because its target audience consisted of Web authors and other such &quot;amateurs&quot;, among other reasons.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.crockford.com/javascript/javascript.html<space/></arg><arg name="title">JavaScript: The World's Most Misunderstood Programming Language<space/></arg><arg name="publisher">Crockford.com<space/></arg><arg name="accessdate">2009-05-19</arg></template></extension><space/>The advent of<space/><link><target>Ajax (programming)</target><part>Ajax</part></link><space/>returned JavaScript to the spotlight and brought more professional programming attention. The result was a proliferation of comprehensive<space/><link><target>List of JavaScript libraries</target><part>frameworks and libraries</part></link>, improved JavaScript programming practices, and increased usage of JavaScript outside Web browsers, as seen by the proliferation of<space/><link><target>server-side JavaScript</target></link><space/>platforms.</paragraph><paragraph>In January 2009, the<space/><link><target>CommonJS</target></link><space/>project was founded with the goal of specifying a common standard library mainly for JavaScript development outside the browser.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://arstechnica.com/web/news/2009/12/commonjs-effort-sets-javascript-on-path-for-world-domination.ars<space/></arg><arg name="title">CommonJS effort sets JavaScript on path for World domination<space/></arg><arg name="author">Kris Kowal<space/></arg><arg name="date">1 December 2009<space/></arg><arg name="work">[[Ars Technica]]<space/></arg><arg name="publisher">[[Condé Nast Publications]]<space/></arg><arg name="accessdate">18 April 2010</arg></template></extension></paragraph><paragraph>With the rise of the single-page web app and JavaScript-heavy sites, it is increasingly being used as a compile target for<space/><link><target>source-to-source compiler</target><trail>s</trail></link><space/>from both<space/><link><target>dynamic typing</target><part>dynamic languages</part></link><space/>and<space/><link><target>static typing</target><part>static languages</part></link>. In particular,<space/><link><target>Emscripten</target></link><space/>and highly optimized<space/><link><target>just-in-time compiler</target><part>JIT compilers</part></link>, in tandem with<space/><link><target>asm.js</target></link><space/>that is friendly to<space/><link><target>ahead-of-time compilation</target><part>AOT compilers</part></link><space/>like<space/><link><target>OdinMonkey</target></link>, have enabled<space/><link><target>C (programming language)</target><part>C</part></link><space/>and<space/><link><target>C++</target></link><space/>programs to be compiled into JavaScript and execute at near-native speeds, causing JavaScript to be considered the &quot;assembly language of the web&quot;,<extension extension_name='ref' name="asm.js"><template><target>cite web</target><arg name="url">http://www.hanselman.com/blog/JavaScriptisAssemblyLanguagefortheWebPart2MadnessorjustInsanity.aspx<space/></arg><arg name="title">JavaScript is Assembly Language for the Web: Part 2 - Madness or just Insanity?<space/></arg><arg name="first">Scott<space/></arg><arg name="last">Hanselman<space/></arg><arg name="date">July 19, 2011</arg></template></extension><space/>according to its creator and others.</paragraph><heading level='2'>Trademark</heading><paragraph>&quot;JavaScript&quot; is a<space/><link><target>trademark</target></link><space/>of<space/><link><target>Oracle Corporation</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="title">USPTO Copyright entry #75026640</arg><arg name="url">http://tarr.uspto.gov/servlet/tarr?regser</arg><arg name="publisher">USPTO</arg></template></extension><space/>It is used under license for technology invented and implemented by Netscape Communications and current entities such as the<space/><link><target>Mozilla Foundation</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Sun Trademarks</arg><arg name="url">http://www.sun.com/suntrademarks/</arg><arg name="publisher">Sun Microsystems</arg><arg name="accessdate">2007-11-08</arg><arg name="archiveurl">https://web.archive.org/web/20100528154600/http://www.sun.com/suntrademarks/</arg><arg name="archivedate">28 May 2010</arg></template></extension></paragraph><heading level='2'>Features</heading><paragraph>The following features are common to all conforming ECMAScript implementations, unless explicitly specified otherwise.</paragraph><heading level='3'>Imperative and structured</heading><paragraph>JavaScript supports much of the<space/><link><target>structured programming</target></link><space/>syntax from<space/><link><target>C (computer language)</target><part>C</part></link><space/>(e.g.,<space/><xhtml:tt>if</xhtml:tt><space/>statements,<space/><xhtml:tt>while</xhtml:tt><space/>loops,<space/><xhtml:tt>switch</xhtml:tt><space/>statements,<space/><xhtml:tt>do while</xhtml:tt><space/>loops, etc.). One partial exception is<space/><link><target>scope (computer science)</target><part>scoping</part></link>: JavaScript originally had only<space/><link><target>function scoping</target></link><space/>with<space/><xhtml:tt>var</xhtml:tt>. ECMAScript 2015 adds a<space/><xhtml:tt>let</xhtml:tt><space/>keyword for block scoping, meaning JavaScript now has both function and block scoping. Like C, JavaScript makes a distinction between<space/><link><target>Expression (computer science)</target><part>expressions</part></link><space/>and<space/><link><target>Statement (computer science)</target><part>statements</part></link>. One syntactic difference from C is<space/><link><target>Defensive semicolon</target><part>automatic semicolon insertion</part></link>, which allows the semicolons that would normally terminate statements to be omitted.<template><target>Sfn</target><arg>Flanagan</arg><arg>2006</arg><arg name="p">16</arg></template></paragraph><heading level='3'>Dynamic</heading><list type='def'><listitem><defkey>Dynamic typing</defkey><defval><space/>As in most<space/><link><target>scripting language</target><trail>s</trail></link>,<space/><link><target>type system</target><part>types</part></link><space/>are associated with<space/><link><target>value (computer science)</target><part>values</part></link>, not with<space/><link><target>Variable (programming)</target><part>variables</part></link>. For example, a variable<space/><template><target>mono</target><arg>x</arg></template><space/>could be bound to a number, then later rebound to a<space/><link><target>string (computer science)</target><part>string</part></link>. JavaScript supports various ways to test the type of an object, including<space/><link><target>duck typing</target></link>.<template><target>Sfn</target><arg>Flanagan</arg><arg>2006</arg><arg name="pp">176–178</arg></template></defval></listitem><listitem><defkey>Object-based</defkey><defval><space/>JavaScript is almost entirely<space/><link><target>object-based</target></link>. JavaScript<space/><link><target>Object (computer science)</target><part>objects</part></link><space/>are<space/><link><target>associative array</target><trail>s</trail></link>, augmented with prototypes (see below). Object property names are string keys. They support two equivalent syntaxes: dot notation (<xhtml:code>obj.x&amp;nbsp;=&amp;nbsp;10</xhtml:code>) and bracket notation (<xhtml:code>obj['x']&amp;nbsp;=&amp;nbsp;10</xhtml:code>). Properties and their values can be added, changed, or deleted at run-time. Most properties of an object (and those on its prototype inheritance chain) can be enumerated using a<space/><xhtml:code>for...in</xhtml:code><space/>loop. JavaScript has a small number of built-in objects such as<space/><template><target>mono</target><arg>Function</arg></template><space/>and<space/><template><target>mono</target><arg>Date</arg></template>.</defval></listitem><listitem><defkey>Run-time evaluation</defkey><defval><space/>JavaScript includes an<space/><xhtml:code><link><target>eval</target></link></xhtml:code><space/>function that can execute statements provided as strings at run-time.</defval></listitem></list><heading level='3'>Functional</heading><list type='def'><listitem><defkey>First-class functions</defkey><defval><space/><link><target>Subroutine</target><part>Functions</part></link><space/>are<space/><link><target>first-class function</target><part>first-class</part></link>; they are objects themselves. As such, they have properties and methods, such as<space/><xhtml:tt>.call()</xhtml:tt><space/>and<space/><xhtml:tt>.bind()</xhtml:tt>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://es5.github.com/#x15.3.4-toc<space/></arg><arg name="title">Properties of the Function Object<space/></arg><arg name="publisher">Es5.github.com<space/></arg><arg name="accessdate">2013-05-26</arg></template></extension><space/>A<space/><italics>nested</italics><space/>function is a function defined within another function. It is created each time the outer function is invoked. In addition, each created function forms a<space/><link><target>Closure (computer science)</target><part>lexical closure</part></link>: the<space/><link><target>Scope (programming)#Lexical scoping vs. dynamic scoping</target><part>lexical scope</part></link><space/>of the outer function, including any constants, local variables and argument values, becomes part of the internal state of each inner function object, even after execution of the outer function concludes.<template><target>Sfn</target><arg>Flanagan</arg><arg>2006</arg><arg name="p">141</arg></template><space/>JavaScript also supports<space/><link><target>anonymous function</target><trail>s</trail></link>.</defval></listitem></list><heading level='3'>Prototype-based object-oriented programming</heading><list type='def'><listitem><defkey>Prototypes</defkey><defval><space/>JavaScript uses<space/><link><target>prototype-based programming</target><part>prototypes</part></link><space/>where many other object-oriented languages use<space/><link><target>Class (computer science)</target><part>classes</part></link><space/>for<space/><link><target>Inheritance (computer science)</target><part>inheritance</part></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Inheritance and the prototype chain</arg><arg name="url">https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Inheritance_and_the_prototype_chain</arg><arg name="work">Mozilla Developer Network</arg><arg name="publisher">[[Mozilla]]</arg><arg name="accessdate">6 April 2013</arg></template></extension><space/>It is possible to simulate many class-based features with prototypes in JavaScript.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Herman</arg><arg name="first">David</arg><arg name="title">Effective JavaScript</arg><arg name="year">2013</arg><arg name="publisher">Addison-Wesley</arg><arg name="isbn">9780321812186</arg><arg name="page">83</arg></template></extension></defval></listitem><listitem><defkey>Functions as object constructors</defkey><defval><space/>Functions double as object constructors along with their typical role. Prefixing a function call with<space/><xhtml:tt>new</xhtml:tt><space/>will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the<space/><xhtml:tt>Object</xhtml:tt><space/>prototype).<extension extension_name='ref'><template><target>cite book</target><arg name="last">Haverbeke</arg><arg name="first">Marjin</arg><arg name="title">Eloquent JavaScript</arg><arg name="year">2011</arg><arg name="publisher">No Starch Press</arg><arg name="isbn">9781593272821</arg><arg name="pages">95–97</arg></template></extension><space/>ECMAScript 5 offers the<space/><xhtml:tt>Object.create</xhtml:tt><space/>method, allowing explicit creation of an instance without automatically inheriting from the<space/><xhtml:tt>Object</xhtml:tt><space/>prototype (older environments can assign the prototype to<space/><xhtml:tt>null</xhtml:tt>).<extension extension_name='ref'><template><target>cite web</target><arg name="last">Katz</arg><arg name="first">Yehuda</arg><arg name="title">Understanding "Prototypes" in JavaScript</arg><arg name="url">http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/</arg><arg name="accessdate">6 April 2013</arg></template></extension><space/>The constructor's<space/><xhtml:tt>prototype</xhtml:tt><space/>property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as<space/><xhtml:tt>Array</xhtml:tt><space/>or<space/><xhtml:tt>Object</xhtml:tt>, also have prototypes that can be modified. While it is possible to modify the<space/><xhtml:tt>Object</xhtml:tt><space/>prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the<space/><xhtml:tt>Object</xhtml:tt><space/>prototype and they may not expect the prototype to be modified.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Herman</arg><arg name="first">David</arg><arg name="title">Effective JavaScript</arg><arg name="year">2013</arg><arg name="publisher">Addison-Wesley</arg><arg name="isbn">9780321812186</arg><arg name="pages">125–127</arg></template></extension></defval></listitem><listitem><defkey>Functions as methods</defkey><defval><space/>Unlike many object-oriented languages, there is no distinction between a function definition and a<space/><link><target>method (computer science)</target><part>method</part></link><space/>definition. Rather, the distinction occurs during function calling; when a function is called as a method of an object, the function's local<space/><xhtml:em>this</xhtml:em><space/>keyword is bound to that object for that invocation.</defval></listitem></list><heading level='3'>Implicit and explicit delegation</heading><paragraph>JavaScript is a<space/><link><target>Delegation (programming)</target><part>delegation language</part></link>.</paragraph><list type='def'><listitem><defkey>Functions as Roles (Traits and Mixins)</defkey><defval><space/>JavaScript natively supports various function-based implementations of<space/><link><target>Role-oriented programming</target><part>Role</part></link><extension extension_name='ref'><link type='external' href='http://peterseliger.blogspot.de/2014/04/the-many-talents-of-javascript.html#the-many-talents-of-javascript-for-generalizing-role-oriented-programming-approaches-like-traits-and-mixins'>The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins</link>, April 11, 2014.</extension><space/>patterns like<space/><link><target>Traits (computer science)</target><part>Traits</part></link><extension extension_name='ref'><link type='external' href='http://soft.vub.ac.be/~tvcutsem/traitsjs/'>Traits for JavaScript</link>, 2010.</extension><extension extension_name='ref'><link type='external' href='http://cocktailjs.github.io/'>CocktailJS - ANNOTATIONS. TRAITS. TALENTS.</link>, April 2013.</extension><space/>and<space/><link><target>Mixin</target><trail>s</trail></link>.<extension extension_name='ref'>Angus Croll,<space/><link type='external' href='http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/'>A fresh look at JavaScript Mixins</link>, published May 31, 2011.</extension><extension extension_name='ref'><link type='external' href='https://github.com/petsel/javascript-code-reuse-patterns/tree/master/source/components/composition/'>JavaScript Code Reuse Patterns</link>, April 19, 2013.</extension><space/>Such a function defines additional behavior by at least one method bound to the<space/><xhtml:tt>this</xhtml:tt><space/>keyword within its<space/><xhtml:tt>function</xhtml:tt><space/>body. A Role then has to be delegated explicitly via<space/><xhtml:tt>call</xhtml:tt><space/>or<space/><xhtml:tt>apply</xhtml:tt><space/>to objects that need to feature additional behavior that is not shared via the prototype chain.</defval></listitem><listitem><defkey>Object Composition and Inheritance</defkey><defval><space/>Whereas explicit function-based delegation does cover<space/><link><target>Object composition</target><part>composition</part></link><space/>in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus<space/><link><target>Inheritance (computer science)</target><part>inheritance</part></link><space/>in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.</defval></listitem></list><heading level='3'>Miscellaneous</heading><list type='def'><listitem><defkey>Run-time environment</defkey><defval><space/>JavaScript typically relies on a run-time environment (e.g., a<space/><link><target>Web browser</target></link>) to provide objects and methods by which scripts can interact with the environment (e.g., a webpage DOM). It also relies on the run-time environment to provide the ability to include/import scripts (e.g.,<space/><link><target>HTML</target></link><space/><xhtml:code><extension extension_name='nowiki'>&lt;script&gt;</extension></xhtml:code><space/>elements). This is not a language feature per se, but it is common in most JavaScript implementations.</defval></listitem></list><list type='ident'><listitem>JavaScript processes<space/><link><target>Message (computer science)</target><part>messages</part></link><space/>from a<space/><link><target>Queue (abstract data type)</target><part>queue</part></link><space/>one at a time. Upon loading a new message, JavaScript calls a<space/><link><target>Subroutine</target><part>function</part></link><space/>associated with that message, which creates a<space/><link><target>call stack</target></link><space/>frame (the function's<space/><link><target>Parameter (computer programming)</target><part>arguments</part></link><space/>and<space/><link><target>Local variable</target><part>local variables</part></link>). The call stack shrinks and grows based on the function's needs. Upon function completion, when the stack is empty, JavaScript proceeds to the next message in the queue. This is called the<space/><link><target>event loop</target></link>, described as &quot;run to completion&quot; because each message is fully processed before the next message is considered. However, the language's<space/><link><target>Concurrency (computer science)</target><part>concurrency model</part></link><space/>describes the event loop as<space/><link><target>Asynchronous I/O</target><part>non-blocking</part></link>: program<space/><link><target>input/output</target></link><space/>is performed using<space/><link><target>Event (computing)</target><part>events</part></link><space/>and<space/><link><target>Callback (computer programming)</target><part>callback functions</part></link>. This means, for instance, that JavaScript can process a mouse click while waiting for a database query to return information.<extension extension_name='ref'><template><target>Cite web</target><arg name="title"><space/>Concurrency model and Event Loop</arg><arg name="url"><space/>https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop</arg><arg name="website"><space/>Mozilla Developer Network</arg><arg name="accessdate"><space/>2015-08-28</arg></template></extension></listitem></list><list type='def'><listitem><defkey>Variadic functions</defkey><defval><space/>An indefinite number of parameters can be passed to a function. The function can access them through<space/><link><target>formal parameter</target><trail>s</trail></link><space/>and also through the local<space/><template><target>mono</target><arg>arguments</arg></template><space/>object.<space/><link><target>Variadic functions</target></link><space/>can also be created by using the<space/><xhtml:code><link type='external' href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind'>bind</link></xhtml:code><space/>method.</defval></listitem></list><list type='def'><listitem><defkey>Array and object literals</defkey><defval><space/>Like many scripting languages, arrays and objects (<link><target>associative arrays</target></link><space/>in other languages) can each be created with a succinct shortcut syntax. In fact, these<space/><link><target>Object literal</target><part>literals</part></link><space/>form the basis of the<space/><link><target>JSON</target></link><space/>data format.</defval></listitem></list><list type='def'><listitem><defkey>Regular expressions</defkey><defval><space/>JavaScript also supports<space/><link><target>regular expression</target><trail>s</trail></link><space/>in a manner similar to<space/><link><target>Perl</target></link>, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Haverbeke<space/></arg><arg name="first">Marijn<space/></arg><arg name="title">Eloquent JavaScript<space/></arg><arg name="year">2011<space/></arg><arg name="publisher">No Starch Press</arg><arg name="isbn">978-1593272821</arg><arg name="pages">139–149</arg></template></extension></defval></listitem></list><heading level='3'>Vendor-specific extensions</heading><paragraph>JavaScript is officially managed by<space/><link><target>Mozilla Foundation</target></link>, and new language features are added periodically. However, only some<space/><link><target>JavaScript engine</target><trail>s</trail></link><space/>support these new features:</paragraph><list type='bullet'><listitem>property getter and setter functions (supported by WebKit, Gecko, Opera,<extension extension_name='ref'>Robert Nyman,<space/><link type='external' href='http://robertnyman.com/2009/05/28/getters-and-setters-with-javascript-code-samples-and-demos/'>Getters And Setters With JavaScript - Code Samples And Demos</link>, published 29 May 2009, accessed 2 January 2010.</extension><space/>ActionScript, and Rhino)<extension extension_name='ref'>John Resig,<space/><link type='external' href='http://ejohn.org/blog/javascript-getters-and-setters/'>JavaScript Getters and Setters</link>, 18 July 2007, accessed 2 January 2010</extension></listitem><listitem>conditional<space/><xhtml:tt>catch</xhtml:tt><space/>clauses</listitem><listitem>iterator protocol (adopted from<space/><link><target>Python (programming language)</target><part>Python</part></link>)</listitem><listitem>shallow<space/><link><target>generator (computer programming)</target><part>generators</part></link>-<link><target>coroutine</target><trail>s</trail></link><space/>(adopted from Python)</listitem><listitem><link><target>List comprehension</target><part>array comprehensions</part></link><space/>and generator expressions (adopted from Python)</listitem><listitem>proper block scope via the<space/><xhtml:tt>let</xhtml:tt><space/>keyword</listitem><listitem>array and object destructuring (limited form of<space/><link><target>pattern matching</target></link>)</listitem><listitem>concise function expressions (<xhtml:tt>function(args) expr</xhtml:tt>)</listitem><listitem><link><target>ECMAScript for XML</target></link><space/>(E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21<extension extension_name='ref'><template><target>cite web</target><arg name="title">E4X - Archive of obsolete content &#124; MDN</arg><arg name="url">https://developer.mozilla.org/en-US/docs/Archive/Web/E4X</arg><arg name="website">Mozilla Developer Network</arg><arg name="publisher">Mozilla Foundation</arg><arg name="date">Feb 14, 2014</arg><arg name="accessdate">13 July 2014</arg></template></extension>)</listitem></list><heading level='2'>Syntax</heading><paragraph><template><target>Main</target><arg>JavaScript syntax</arg></template></paragraph><heading level='3'>Simple examples</heading><paragraph><link><target>Variable (computer science)</target><part>Variables</part></link><space/>in JavaScript can be defined using the<space/><xhtml:tt>var</xhtml:tt><space/>keyword:<extension extension_name='ref'><template><target>cite web</target><arg name="url">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/var<space/></arg><arg name="title">var - JavaScript - MDN<space/></arg><arg name="publisher">The [[Mozilla Developer Network]]<space/></arg><arg name="accessdate">22 December 2012</arg></template></extension></paragraph><paragraph><extension extension_name='syntaxhighlight' lang="javascript">var x; // defines the variable x, the special value undefined (not to be confused with an undefined value) is assigned to it by defaultvar y = 2; // defines the variable y and assigns the value of 2 to it</extension></paragraph><paragraph>Note the<space/><link><target>Comment (computer programming)</target><part>comments</part></link><space/>in the example above, both of which were preceded with two<space/><link><target>Slash (punctuation)</target><part>forward slashes</part></link>.</paragraph><paragraph>There is no built-in<space/><link><target>Input/output</target><part>I/O</part></link><space/>functionality in JavaScript; the run-time environment provides that. The ECMAScript specification in edition 5.1 mentions:<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.ecma-international.org/ecma-262/5.1/#sec-4<space/></arg><arg name="title">ECMAScript Language Specification - ECMA-262 Edition 5.1</arg><arg name="publisher">[[Ecma International]]<space/></arg><arg name="accessdate">22 December 2012</arg></template></extension><extension extension_name='blockquote'>... indeed, there are no provisions in this specification for input of external data or output of computed results.</extension>However, most runtime environments have a<space/><xhtml:tt>console</xhtml:tt><space/>object<extension extension_name='ref'><template><target>cite web</target><arg name="title">console</arg><arg name="url">https://developer.mozilla.org/en-US/docs/DOM/console</arg><arg name="work">Mozilla Developer Network</arg><arg name="publisher">[[Mozilla]]</arg><arg name="accessdate">6 April 2013</arg></template></extension><space/>that can be used to print output. Here is a minimalist<space/><link><target>Hello World program</target></link>:</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="javascript">console.log(&quot;Hello World!&quot;);</extension></paragraph><paragraph>A simple<space/><link><target>Recursion (computer science)</target><part>recursive</part></link><space/>function:<extension extension_name='syntaxhighlight' lang="javascript"><paragraph>function factorial(n) {</paragraph><preblock><preline><space/><space/><space/>if (n == 0) {</preline><preline><space/><space/><space/><space/><space/><space/><space/>return 1;</preline><preline><space/><space/><space/>}</preline><preline><space/><space/><space/>return n * factorial(n - 1);</preline></preblock><paragraph>}</paragraph></extension></paragraph><paragraph><link><target>Anonymous function</target></link><space/>(or lambda) syntax and<space/><link><target>Closure (Computer Science)</target><part>closure</part></link><space/>example:<extension extension_name='syntaxhighlight' lang="javascript"><paragraph>var displayClosure = function() {</paragraph><preblock><preline><space/><space/><space/>var count = 0;</preline><preline><space/><space/><space/>return function () {</preline><preline><space/><space/><space/><space/><space/><space/><space/>return ++count;</preline><preline><space/><space/><space/>};</preline></preblock><paragraph>}var inc = displayClosure();inc(); // returns 1inc(); // returns 2inc(); // returns 3</paragraph></extension></paragraph><paragraph><link><target>Variadic function</target></link><space/>demonstration (<xhtml:tt>arguments</xhtml:tt><space/>is a special<space/><link><target>variable (programming)</target><part>variable</part></link>).<extension extension_name='ref'><template><target>cite web</target><arg name="title">arguments</arg><arg name="url">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments</arg><arg name="work">Mozilla Developer Network</arg><arg name="publisher">[[Mozilla]]</arg><arg name="accessdate">6 April 2013</arg></template></extension><extension extension_name='syntaxhighlight' lang="javascript"><paragraph>var sum = function() {</paragraph><preblock><preline><space/><space/><space/>var i, x = 0;</preline><preline><space/><space/><space/>for (i = 0; i &lt; arguments.length; ++i) {</preline><preline><space/><space/><space/><space/><space/><space/><space/>x += arguments[i];</preline><preline><space/><space/><space/>}</preline><preline><space/><space/><space/>return x;</preline></preblock><paragraph>}sum(1, 2, 3); // returns 6</paragraph></extension></paragraph><paragraph><link><target>Immediately-invoked function expression</target><trail>s</trail></link><space/>allow functions to pass around variables under their own closures.</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="JavaScript"><paragraph>var v;v = 1;var getValue = (function(v) {</paragraph><preblock><preline><space/>return function() {return v;};</preline></preblock><paragraph>})(v);</paragraph><paragraph>v = 2;</paragraph><paragraph>getValue(); // 1</paragraph></extension></paragraph><heading level='3'>More advanced example</heading><paragraph>This sample code displays various JavaScript features.</paragraph><preblock><preline></preline></preblock><paragraph><xhtml:div style="overflow:auto;"><paragraph><extension extension_name='syntaxhighlight' lang="javascript"><paragraph>/* Finds the lowest common multiple (LCM) of two numbers */function LCMCalculator(x, y) { // constructor function</paragraph><preblock><preline><space/><space/><space/>var checkInt = function (x) { // inner function</preline><preline><space/><space/><space/><space/><space/><space/><space/>if (x % 1 !== 0) {</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>throw new TypeError(x + &quot; is not an integer&quot;); // throw an exception</preline><preline><space/><space/><space/><space/><space/><space/><space/>}</preline><preline><space/><space/><space/><space/><space/><space/><space/>return x;</preline><preline><space/><space/><space/>};</preline><preline><space/><space/><space/>this.a = checkInt(x)</preline><preline><space/><space/><space/>// semicolons ^^^^ are optional, a newline is enough</preline><preline><space/><space/><space/>this.b = checkInt(y);</preline></preblock><paragraph>}// The prototype of object instances created by a constructor is// that constructor's &quot;prototype&quot; property.LCMCalculator.prototype = { // object literal</paragraph><preblock><preline><space/><space/><space/>constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately</preline><preline><space/><space/><space/>gcd: function () { // method that calculates the greatest common divisor</preline><preline><space/><space/><space/><space/><space/><space/><space/>// Euclidean algorithm:</preline><preline><space/><space/><space/><space/><space/><space/><space/>var a = Math.abs(this.a), b = Math.abs(this.b), t;</preline><preline><space/><space/><space/><space/><space/><space/><space/>if (a &lt; b) {</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>// swap variables</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>t = b;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>b = a;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>a = t;</preline><preline><space/><space/><space/><space/><space/><space/><space/>}</preline><preline><space/><space/><space/><space/><space/><space/><space/>while (b !== 0) {</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>t = b;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>b = a % b;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>a = t;</preline><preline><space/><space/><space/><space/><space/><space/><space/>}</preline><preline><space/><space/><space/><space/><space/><space/><space/>// Only need to calculate GCD once, so &quot;redefine&quot; this method.</preline><preline><space/><space/><space/><space/><space/><space/><space/>// (Actually not redefinitionit's defined on the instance itself,</preline><preline><space/><space/><space/><space/><space/><space/><space/>// so that this.gcd refers to this &quot;redefinition&quot; instead of LCMCalculator.prototype.gcd.</preline><preline><space/><space/><space/><space/><space/><space/><space/>// Note that this leads to a wrong result if the LCMCalculator object members &quot;a&quot; and/or &quot;b&quot; are altered afterwards.)</preline><preline><space/><space/><space/><space/><space/><space/><space/>// Also, 'gcd' === &quot;gcd&quot;, this['gcd'] === this.gcd</preline><preline><space/><space/><space/><space/><space/><space/><space/>this['gcd'] = function () {</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>return a;</preline><preline><space/><space/><space/><space/><space/><space/><space/>};</preline><preline><space/><space/><space/><space/><space/><space/><space/>return a;</preline><preline><space/><space/><space/>},</preline><preline><space/><space/><space/>// Object property names can be specified by strings delimited by double (&quot;) or single (') quotes.</preline><preline><space/><space/><space/>lcm : function () {</preline><preline><space/><space/><space/><space/><space/><space/><space/>// Variable names don't collide with object properties, e.g., |lcm| is not |this.lcm|.</preline><preline><space/><space/><space/><space/><space/><space/><space/>// not using |this.a * this.b| to avoid FP precision issues</preline><preline><space/><space/><space/><space/><space/><space/><space/>var lcm = this.a / this.gcd() * this.b;</preline><preline><space/><space/><space/><space/><space/><space/><space/>// Only need to calculate lcm once, so &quot;redefine&quot; this method.</preline><preline><space/><space/><space/><space/><space/><space/><space/>this.lcm = function () {</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>return lcm;</preline><preline><space/><space/><space/><space/><space/><space/><space/>};</preline><preline><space/><space/><space/><space/><space/><space/><space/>return lcm;</preline><preline><space/><space/><space/>},</preline><preline><space/><space/><space/>toString: function () {</preline><preline><space/><space/><space/><space/><space/><space/><space/>return &quot;LCMCalculator: a = &quot; + this.a + &quot;, b = &quot; + this.b;</preline><preline><space/><space/><space/>}</preline></preblock><paragraph>};</paragraph><paragraph>// Define generic output function; this implementation only works for Web browsersfunction output(x) {</paragraph><preblock><preline><space/><space/><space/>document.body.appendChild(document.createTextNode(x));</preline><preline><space/><space/><space/>document.body.appendChild(document.createElement('br'));</preline></preblock><paragraph>}</paragraph><paragraph>// Note: Array's map() and forEach() are defined in JavaScript 1.6.// They are used here to demonstrate JavaScript's inherent functional nature.<link><target>25, 55], [21, 56], [22, 58], [28, 56</target></link>.map(function (pair) { // array literal + mapping function</paragraph><preblock><preline><space/><space/><space/>return new LCMCalculator(pair[0], pair[1]);</preline></preblock><paragraph>}).sort(function (a, b) { // sort with this comparative function</paragraph><preblock><preline><space/><space/><space/>return a.lcm() - b.lcm();</preline></preblock><paragraph>}).forEach(function (obj) {</paragraph><preblock><preline><space/><space/><space/>output(obj + &quot;, gcd = &quot; + obj.gcd() + &quot;, lcm = &quot; + obj.lcm());</preline></preblock><paragraph>});</paragraph></extension></paragraph></xhtml:div></paragraph><paragraph>The following output should be displayed in the browser window.<xhtml:div style="overflow:auto;"><extension extension_name='syntaxhighlight' lang="html4strict">LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638</extension></xhtml:div></paragraph><heading level='2'>Use in web pages</heading><paragraph><template><target>See also</target><arg>Dynamic HTML</arg><arg>Ajax (programming)</arg></template></paragraph><paragraph>The most common use of JavaScript is to add client-side behavior to<space/><link><target>HTML</target></link><space/>pages, a.k.a.<space/><link><target>Dynamic HTML</target></link><space/>(DHTML). Scripts are embedded in or included from<space/><link><target>HTML</target></link><space/>pages and interact with the<space/><link><target>Document Object Model</target></link><space/>(DOM) of the page. Some simple examples of this usage are:</paragraph><list type='bullet'><listitem>Loading new page content or submitting data to the server via<space/><link><target>AJAX</target></link><space/>without reloading the page (for example, a social network might allow the user to post status updates without leaving the page)</listitem><listitem>Animation of page elements, fading them in and out, resizing them, moving them, etc.</listitem><listitem>Interactive content, for example games, and playing audio and video</listitem><listitem><link><target>Data validation</target><part>Validating</part></link><space/>input values of a<space/><link><target>Form (HTML)</target><part>Web form</part></link><space/>to make sure that they are acceptable before being submitted to the server.</listitem><listitem>Transmitting information about the user's reading habits and browsing activities to various websites. Web pages frequently do this for<space/><link><target>web analytics</target></link>,<space/><link><target>ad tracking</target></link>,<space/><link><target>personalization</target></link><space/>or other purposes.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://piwik.org/docs/javascript-tracking/<space/></arg><arg name="title">JavaScript tracking - Piwik<space/></arg><arg name="publisher">[[Piwik]]<space/></arg><arg name="accessdate">31 March 2012</arg></template></extension></listitem></list><paragraph>Because JavaScript code can run locally in a user's browser (rather than on a remote server), the browser can respond to user actions quickly, making an application more responsive. Furthermore, JavaScript code can detect user actions that HTML alone cannot, such as individual keystrokes. Applications such as<space/><link><target>Gmail</target></link><space/>take advantage of this: much of the user-interface logic is written in JavaScript, and JavaScript dispatches requests for information (such as the content of an e-mail message) to the server. The wider trend of<space/><link><target>Ajax (programming)</target><part>Ajax</part></link><space/>programming similarly exploits this strength.</paragraph><paragraph>A<space/><link><target>JavaScript engine</target></link><space/>(also known as<space/><italics>JavaScript interpreter</italics><space/>or<space/><italics>JavaScript implementation</italics>) is an<space/><link><target>interpreter (computing)</target><part>interpreter</part></link><space/>that interprets JavaScript<space/><link><target>source code</target></link><space/>and executes the<space/><link><target>computer program</target><part>script</part></link><space/>accordingly. The first JavaScript engine was created by<space/><link><target>Brendan Eich</target></link><space/>at<space/><link><target>Netscape Communications Corporation</target></link>, for the<space/><link><target>Netscape Navigator</target></link><space/><link><target>web browser</target></link>. The engine, code-named<space/><link><target>SpiderMonkey (JavaScript engine)</target><part>SpiderMonkey</part></link>, is implemented in<space/><link><target>C (programming language)</target><part>C</part></link>. It has since been updated (in JavaScript 1.5) to conform to ECMA-262 Edition 3. The<space/><link><target>Rhino (JavaScript engine)</target><part>Rhino</part></link><space/>engine, created primarily by Norris Boyd (formerly of Netscape; now at Google) is a JavaScript implementation in<space/><link><target>Java (programming language)</target><part>Java</part></link>. Rhino, like SpiderMonkey, is ECMA-262 Edition 3 compliant.</paragraph><paragraph>A web browser is by far the most common host environment for JavaScript. Web browsers typically create &quot;host objects&quot; to represent the<space/><link><target>Document Object Model</target></link><space/>(DOM) in JavaScript. The<space/><link><target>web server</target></link><space/>is another common host environment. A<space/><link><target>Server-side JavaScript</target><part>JavaScript web server</part></link><space/>would typically expose host objects representing<space/><link><target>HTTP</target></link><space/>request and response objects, which a JavaScript program could then interrogate and manipulate to dynamically generate web pages.</paragraph><paragraph>Because JavaScript is the only language that the most popular browsers share support for, it has become a<space/><link><target>target language (computing)</target><part>target language</part></link><space/>for many frameworks in other languages, even though JavaScript was never intended to be such a language.<extension extension_name='ref' name="computerworld"><template><target>cite web</target><arg name="last">Hamilton</arg><arg name="first">Naomi</arg><arg name="url">http://www.computerworld.com.au/article/255293/-z_programming_languages_javascript</arg><arg name="title">The A-Z of Programming Languages: JavaScript</arg><arg name="publisher">computerworld.com.au</arg><arg name="date">2008-07-31</arg></template></extension><space/>Despite the performance limitations inherent to its dynamic nature, the increasing speed of JavaScript engines has made the language a surprisingly feasible compilation target.</paragraph><heading level='3'>Example script</heading><paragraph>Below is a minimal example of a standards-conforming web page containing JavaScript (using<space/><link><target>HTML</target><part>HTML 5</part></link><space/>syntax) and the<space/><link><target>Document object model</target><part>DOM</part></link>:</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="html5"><paragraph>&lt;!DOCTYPE html&gt;</paragraph><paragraph>&lt;meta charset=&quot;utf-8&quot;&gt;<extension extension_name='title'>Minimal Example</extension></paragraph><paragraph><xhtml:h1 id="header">This is JavaScript</xhtml:h1></paragraph><paragraph><extension extension_name='script'><preblock><preline><space/><space/><space/>document.body.appendChild(document.createTextNode('Hello World!'));</preline></preblock><preblock><preline><space/><space/><space/>var h1 = document.getElementById('header'); // holds a reference to the &lt;h1&gt; tag</preline><preline><space/><space/><space/>h1 = document.getElementsByTagName('h1')[0]; // accessing the same &lt;h1&gt; element</preline></preblock></extension></paragraph><paragraph><extension extension_name='noscript'>Your browser either does not support JavaScript, or has it turned off.</extension></paragraph></extension></paragraph><heading level='3'>Compatibility considerations</heading><paragraph><template><target>Main</target><arg>Web interoperability</arg></template></paragraph><paragraph>Because JavaScript runs in widely varying environments, an important part of testing and debugging is to test and verify that the JavaScript works across multiple browsers.</paragraph><paragraph>The DOM interfaces for manipulating web pages are not part of the ECMAScript standard, or of JavaScript itself. Officially, the DOM interfaces are defined by a separate standardization effort by the<space/><link><target>World Wide Web Consortium</target><part>W3C</part></link>; in practice, browser implementations differ from the standards and from each other, and not all browsers execute JavaScript.</paragraph><paragraph>To deal with these differences, JavaScript authors can attempt to write standards-compliant code that will also be executed correctly by most browsers; failing that, they can write code that checks for the presence of certain browser features and behaves differently if they are not available.<extension extension_name='ref'>Peter-Paul Koch,<space/><link type='external' href='http://www.quirksmode.org/js/support.html'>Object detection</link></extension><space/>In some cases, two browsers may both implement a feature but with different behavior, and authors may find it practical to detect what browser is running and change their script's behavior to match.<extension extension_name='ref'>Peter-Paul Koch,<space/><link type='external' href='http://www.evolt.org/node/23335'>Mission Impossible - mouse position</link></extension><extension extension_name='ref'>Peter-Paul Koch,<space/><link type='external' href='http://www.quirksmode.org/js/detect.html'>Browser detect</link></extension><space/>Programmers may also use libraries or toolkits that take browser differences into account.</paragraph><paragraph>Furthermore, scripts may not work for some users. For example, a user may:</paragraph><list type='bullet'><listitem>use an old or rare browser with incomplete or unusual DOM support,</listitem><listitem>use a<space/><link><target>Personal digital assistant</target><part>PDA</part></link><space/>or<space/><link><target>mobile phone</target></link><space/>browser that cannot execute JavaScript,</listitem><listitem>have JavaScript execution disabled as a security precaution,</listitem><listitem>use a speech browser due to, for example, a visual disability.</listitem></list><paragraph>To support these users, Web authors can try to create pages that<space/><link><target>Fault-tolerant system</target><part>degrade gracefully</part></link><space/>on user agents (browsers) that do not support the page's JavaScript. In particular, the page should remain usable albeit without the extra features that the JavaScript would have added. An alternative approach that many find preferable is to first author content using basic technologies that work in all browsers, then enhance the content for users that have JavaScript enabled. This is known as<space/><link><target>progressive enhancement</target></link>.</paragraph><heading level='2'>Security</heading><paragraph><template><target>See also</target><arg>Browser security</arg></template></paragraph><paragraph>JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors contain this risk using two restrictions. First, scripts run in a<space/><link><target>Sandbox (computer security)</target><part>sandbox</part></link><space/>in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the<space/><link><target>same origin policy</target></link>: scripts from one Web site do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.</paragraph><paragraph>There are subsets of general JavaScript ADsafe, Secure ECMA Script (SES) that provide greater level of security, especially on code created by third parties (such as advertisements).<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.adsafe.org/<space/></arg><arg name="title">Making JavaScript Safe for Advertising<space/></arg><arg name="publisher">ADsafe<space/></arg><arg name="accessdate">2013-05-26</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">https://code.google.com/p/es-lab/wiki/SecureEcmaScript<space/></arg><arg name="title">Secure ECMA Script (SES)<space/></arg><arg name="publisher">Code.google.com<space/></arg><arg name="accessdate">2013-05-26</arg></template></extension></paragraph><paragraph><link><target>Content Security Policy</target></link><space/>is the main intended method of ensuring that only trusted code is executed on a web page.</paragraph><paragraph><template><target>see also</target><arg>Content Security Policy</arg></template></paragraph><heading level='3'>Cross-site vulnerabilities</heading><paragraph><template><target>Main</target><arg>Cross-site scripting</arg><arg>Cross-site request forgery</arg></template></paragraph><paragraph>A common JavaScript-related security problem is<space/><link><target>cross-site scripting</target></link>, or XSS, a violation of the<space/><link><target>same origin policy</target><part>same-origin policy</part></link>. XSS vulnerabilities occur when an attacker is able to cause a target Web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. A solution to XSS vulnerabilities is to use<space/><italics>HTML escaping</italics><space/>whenever displaying untrusted data.</paragraph><paragraph>Some browsers include partial protection against<space/><italics>reflected</italics><space/>XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server side can fully prevent XSS.</paragraph><paragraph>XSS vulnerabilities can also occur because of implementation mistakes by browser authors.<extension extension_name='ref'>MozillaZine,<space/><link type='external' href='http://www.mozillazine.org/talkback.html?article=4392'>Mozilla Cross-Site Scripting Vulnerability Reported and Fixed</link></extension></paragraph><paragraph>Another cross-site vulnerability is<space/><link><target>cross-site request forgery</target></link><space/>or CSRF. In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user didn't intend at a target site (like transferring money at a bank). It works because, if the target site relies only on cookies to authenticate requests, then requests initiated by code on the attacker's site will carry the same legitimate login credentials as requests initiated by the user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.</paragraph><paragraph>&quot;JavaScript hijacking&quot; is a type of CSRF attack in which a<space/><xhtml:code><extension extension_name='nowiki'>&lt;script&gt;</extension></xhtml:code><space/>tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include:</paragraph><list type='bullet'><listitem>requiring an authentication token in the<space/><link><target>POST (HTTP)</target><part>POST</part></link><space/>and<space/><link><target>GET (HTTP)</target><part>GET</part></link><space/>parameters for any response that returns private information</listitem></list><heading level='4'>Misplaced trust in the client</heading><paragraph>Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that his JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:</paragraph><list type='bullet'><listitem>Web site authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be<space/><link><target>obfuscated code</target><part>obfuscated</part></link>, but obfuscation can be reverse-engineered.</listitem><listitem>JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.</listitem><listitem>Scripts can be selectively disabled, so JavaScript can't be relied on to prevent operations such as right-clicking on an image to save it.<extension extension_name='ref'><template><target>cite journal</target><arg name="title"><space/>Right-click "protection"? Forget about it
<space/></arg><arg name="date"><space/>2008-06-17
<space/></arg><arg name="url"><space/>http://blog.anta.net/2008/06/17/right-click-%e2%80%9cprotection%e2%80%9d-forget-about-it/
<space/></arg><arg name="issn"><space/>1797-1993
<space/></arg><arg name="accessdate"><space/>2008-06-17<space/></arg></template></extension></listitem><listitem>It is extremely bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.</listitem></list><heading level='4'>Browser and plugin coding errors</heading><paragraph>JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as<space/><link><target>buffer overflow</target><trail>s</trail></link>. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges.</paragraph><paragraph>These flaws have affected major browsers including Firefox,<extension extension_name='ref'>Mozilla Corporation,<space/><link type='external' href='http://www.mozilla.org/security/announce/2006/mfsa2006-38.html'>Buffer overflow in crypto.signText()</link></extension><space/>Internet Explorer,<extension extension_name='ref'>Paul Festa, CNet,<space/><link type='external' href='http://archive.is/20120724070835/http://news.com.com/2100-1001-214620.html'>Buffer-overflow bug in IE</link></extension><space/>and Safari.<extension extension_name='ref'>SecurityTracker.com,<space/><link type='external' href='http://securitytracker.com/alerts/2006/Mar/1015713.html'>Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files</link></extension></paragraph><paragraph>Plugins, such as video players,<space/><link><target>Adobe Flash#Flash client security</target><part>Adobe Flash</part></link>, and the wide range of<space/><link><target>ActiveX</target></link><space/>controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).<extension extension_name='ref'>SecurityFocus,<space/><link type='external' href='http://www.securityfocus.com/bid/19030/info'>Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability</link></extension><extension extension_name='ref'>Fusion Authority,<space/><link type='external' href='http://www.fusionauthority.com/security/3234-macromedia-flash-activex-buffer-overflow.htm'>Macromedia Flash ActiveX Buffer Overflow</link></extension></paragraph><paragraph>In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.<extension extension_name='ref'>Mike Friedman,<space/><link type='external' href='http://blogs.msdn.com/ie/archive/2006/02/09/528963.aspx'>Protected Mode in Vista IE7</link></extension><space/><link><target>Google Chrome</target></link><space/>similarly confines its page renderers to their own &quot;sandbox&quot;.</paragraph><heading level='4'>Sandbox implementation errors</heading><paragraph>Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Of course, such privileges aren't meant to be granted to code from the Web.</paragraph><paragraph>Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer<extension extension_name='ref'>US CERT,<space/><link type='external' href='https://www.kb.cert.org/vuls/id/713878'>Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame</link></extension><space/>and Firefox.<extension extension_name='ref'>Mozilla Foundation,<space/><link type='external' href='http://www.mozilla.org/security/announce/2005/mfsa2005-41.html'>Mozilla Foundation Security Advisory 2005-41: Privilege escalation via DOM property overrides</link></extension><space/>In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.<extension extension_name='ref'>Microsoft Corporation,<space/><link type='external' href='http://technet.microsoft.com/en-us/library/bb457150.aspx#EHAA'>Changes to Functionality in Microsoft Windows XP Service Pack 2: Part 5: Enhanced Browsing Security</link></extension></paragraph><paragraph><link><target>Microsoft Windows</target></link><space/>allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see:<space/><link><target>Windows Script Host</target></link>). This makes JavaScript (like<space/><link><target>VBScript</target></link>) a theoretically viable vector for a<space/><link><target>Trojan horse (computing)</target><part>Trojan horse</part></link>, although JavaScript Trojan horses are uncommon in practice.<extension extension_name='ref'>For one example of a rare JavaScript Trojan Horse, see Symantec Corporation,<space/><link type='external' href='http://www.symantec.com/security_response/writeup.jsp?docid=2003-100111-0931-99'>JS.Seeker.K</link></extension></paragraph><heading level='2'>Uses outside web pages</heading><paragraph>In addition to web browsers and servers, JavaScript interpreters are embedded in a number of tools. Each of these applications provides its own<space/><link><target>object model</target></link><space/>that provides access to the host environment. The core JavaScript language remains mostly the same in each application.</paragraph><heading level='3'>Embedded scripting language</heading><list type='bullet'><listitem>Google's<space/><link><target>Google Chrome</target><part>Chrome</part></link><space/>extensions,<space/><link><target>Opera (web browser)</target><part>Opera</part></link>'s extensions, Apple's<space/><link><target>Safari (web browser)</target><part>Safari 5</part></link><space/>extensions, Apple's<space/><link><target>Dashboard (Mac OS)</target><part>Dashboard Widgets</part></link>, Microsoft's<space/><link><target>Microsoft Gadgets</target><part>Gadgets</part></link>,<space/><link><target>Yahoo! Widgets</target></link>,<space/><link><target>Google Desktop#Gadgets and plug-ins</target><part>Google Desktop Gadgets</part></link>, and<space/><link><target>Serence</target></link><space/><link><target>Klipfolio</target></link><space/>are implemented using JavaScript.</listitem><listitem>The<space/><link><target>MongoDB</target></link><space/>database accepts queries written in JavaScript.<space/><link><target>MongoDB</target></link><space/>and<space/><link><target>NodeJS</target></link><space/>are the core components of<space/><link><target>MEAN (software bundle)</target><part>MEAN</part></link>: a<space/><link><target>solution stack</target></link><space/>for creating Web applications using just JavaScript.</listitem><listitem>The<space/><link><target>Clusterpoint</target><part>Clusterpoint database</part></link><space/>accept queries written in JS/SQL, which is a combination of<space/><link><target>SQL</target></link><space/>and JavaScript.<space/><link><target>Clusterpoint</target></link><space/>has built-in computing engine that allows execution of JavaScript code right inside the<space/><link><target>distributed database</target></link>.</listitem><listitem>Adobe's<space/><link><target>Adobe Acrobat#Security</target><part>Acrobat and Adobe Reader</part></link><space/>support JavaScript in<space/><link><target>Portable Document Format</target><part>PDF</part></link><space/>files.<extension extension_name='ref'><template><target>cite web</target><arg name="url">https://www.adobe.com/devnet/acrobat/javascript.html<space/></arg><arg name="accessdate">2009-08-18<space/></arg><arg name="title"><space/>JavaScript for Acrobat</arg></template></extension></listitem><listitem>Tools in the<space/><link><target>Adobe Creative Suite</target></link>, including<space/><link><target>Adobe Photoshop</target><part>Photoshop</part></link>,<space/><link><target>Adobe Illustrator</target><part>Illustrator</part></link>,<space/><link><target>Dreamweaver</target></link>, and<space/><link><target>InDesign</target></link>, allow scripting through JavaScript.</listitem><listitem><link><target>OpenOffice.org</target></link>, an office application suite, as well as its popular fork<space/><link><target>LibreOffice</target></link>, allows JavaScript to be used as a scripting language.</listitem><listitem>The interactive music signal processing software<space/><link><target>Max/MSP</target></link><space/>released by Cycling '74, offers a JavaScript model of its environment for use by developers. It allows much more precise control than the default GUI-centric programming model.</listitem><listitem>Apple's Logic Pro X digital audio workstation (DAW) software can create custom MIDI effects plugins using JavaScript.</listitem><listitem>ECMAScript was included in the<space/><link><target>VRML</target></link>97 standard for scripting nodes of VRML scene description files.</listitem><listitem>The<space/><link><target>Open-source software</target><part>open-source</part></link><space/><italics>Re-Animator</italics><space/>framework allows developing 2D sprite-based games using JavaScript and XML.<extension extension_name='ref'><link type='external' href='https://launchpad.net/reanimator'>Re-Animator</link>, in Launchpad</extension></listitem><listitem>The<space/><link><target>Unity (game engine)</target><part>Unity</part></link><space/>game engine supports a modified version of JavaScript for scripting via Mono.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://unity3d.com/unity/workflow/scripting
</arg><arg name="title">Unity Scripting
</arg><arg name="publisher">unity3d.com
</arg><arg name="accessdate">2013-01-29
</arg></template></extension></listitem><listitem><link><target>DX Studio</target><part>DX Studio (3D engine)</part></link><space/>uses the<space/><link><target>SpiderMonkey (JavaScript engine)</target><part>SpiderMonkey</part></link><space/>implementation of JavaScript for game and simulation logic.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.dxstudio.com/features_tech.aspx
</arg><arg name="title">Technical Specification
</arg><arg name="publisher">dxstudio.com
</arg><arg name="accessdate">2009-10-20
</arg></template></extension></listitem><listitem><link><target>Maxwell Render</target></link><space/>(<link><target>Rendering (computer graphics)</target><part>rendering</part></link><space/>software) provides an ECMA standard based scripting engine for tasks automation.<extension extension_name='ref'>THINK! The Maxwell Render Resourcer Center,<space/><link type='external' href='http://think.maxwellrender.com/scripting_references-269.html'>Scripting References</link></extension></listitem><listitem><link><target>Google Apps Script</target></link><space/>in<space/><link><target>Google Spreadsheets</target></link><space/>and<space/><link><target>Google Sites</target></link><space/>allows users to create custom formulas, automate repetitive tasks and also interact with other Google products such as Gmail.<extension extension_name='ref'><link><target>Google Apps Script</target></link>,<space/><link type='external' href='http://www.google.com/google-d-s/scripts/scripts.html'>Welcome to Google Apps Script</link></extension></listitem><listitem>Many<space/><link><target>Internet Relay Chat clients</target><part>IRC clients</part></link>, like<space/><link><target>ChatZilla</target></link><space/>or<space/><link><target>XChat</target></link>, use JavaScript for their scripting abilities.<extension extension_name='ref'><template><target>cite web</target><arg name="title">ChatZilla! Frequently Asked Questions - 4.5. How do I write scripts?</arg><arg name="url">http://chatzilla.hacksrus.com/faq/#scripts</arg><arg name="publisher">Chatzilla.hacksrus.com</arg><arg name="accessdate">11 February 2011</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="title">http://unborn.ludost.net/xcdscript/</arg><arg name="url">http://unborn.ludost.net/xcdscript/</arg><arg name="accessdate">11 February 2011</arg></template></extension></listitem><listitem>SpinetiX products use the<space/><link><target>SpiderMonkey (JavaScript engine)</target><part>SpiderMonkey</part></link><space/>JavaScript engine to allow scripting within SVG files to create digital signage projects.<extension extension_name='ref'><template><target>cite web</target><arg name="title">JavaScript - SpinetiX Support Wiki</arg><arg name="url">http://support.spinetix.com/wiki/JavaScript</arg><arg name="publisher">SpinetiX</arg><arg name="accessdate">12 December 2012</arg></template></extension></listitem><listitem><link><target>RPG Maker</target><part>RPG Maker MV</part></link><space/>uses Javascript as its scripting language.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.rpgmakerweb.com/products/programs/rpg-maker-mv<space/></arg><arg name="accessdate">28 August 2015<space/></arg><arg name="title">RPG Maker MV &#124; RPG Maker &#124; Make Your Own Games!</arg></template></extension></listitem><listitem><link type='external' href='http://droidscript.org'>DroidScript</link><space/>is an Android App development tool that uses Google's<space/><link><target>V8_(JavaScript_engine)</target><part>V8</part></link><space/>Javascript engine, allowing users to create both native and HTML5 based graphical interfaces as well as accessing device hardware from the JavaScript environment<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://droidscript.org<space/></arg><arg name="accessdate">18 October 2015<space/></arg><arg name="title">droidscript.org</arg></template></extension></listitem></list><heading level='3'>Scripting engine</heading><list type='bullet'><listitem>Microsoft's<space/><link><target>Active Scripting</target></link><space/>technology supports<space/><link><target>JScript</target></link><space/>as a scripting language.<extension extension_name='ref' name="VersionInformation"><template><target>cite web</target><arg name="url">http://msdn.microsoft.com/en-us/library/s4esdbwz(v</arg><arg name="title">Version Information (JavaScript)<space/></arg><arg name="publisher">Msdn.microsoft.com<space/></arg><arg name="accessdate">2013-05-26</arg></template></extension></listitem><listitem>The<space/><link><target>Java (programming language)</target><part>Java programming language</part></link><space/>introduced the<space/><xhtml:tt>javax.script</xhtml:tt><space/>package in version 6 that includes a JavaScript implementation based on<space/><link><target>Rhino (JavaScript engine)</target><part>Mozilla Rhino</part></link>. Thus, Java applications can host scripts that access the application's variables and objects, much like web browsers host scripts that access a webpage's<space/><link><target>Document Object Model</target></link><space/>(DOM).<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://java.sun.com/javase/6/webnotes/index.html#scripting<space/></arg><arg name="title">javax.script release notes<space/></arg><arg name="publisher">Java.sun.com<space/></arg><arg name="accessdate">2009-05-19</arg></template></extension><template><target>Sfn</target><arg>Flanagan</arg><arg>2006</arg><arg name="pp">214 et seq</arg></template></listitem><listitem>The<space/><link><target>Qt (toolkit)</target><part>Qt</part></link><space/>C++ toolkit includes a<space/><xhtml:tt>QtScript</xhtml:tt><space/>module to interpret JavaScript, analogous to Java's<space/><xhtml:tt>javax.script</xhtml:tt><space/>package.<extension extension_name='ref'>Nokia Corporation,<space/><link type='external' href='http://doc.qt.nokia.com/4.6/qtscript.html'>QtScript Module</link></extension></listitem><listitem><italics>JSDB</italics><space/>(JavaScript for Databases) is an<space/><link><target>Open-source software</target><part>open-source</part></link><space/>JavaScript shell for Windows, Mac OS X, Linux, and Unix, which extends the<space/><link><target>SpiderMonkey</target><part>Mozilla JavaScript engine</part></link><space/>with file, database, email, and network objects.<extension extension_name='ref'><link type='external' href='http://www.jsdb.org/'>JSDB.org</link><space/>(Official website)</extension></listitem><listitem><italics>jslibs</italics><space/>is an open-source JavaScript shell for Windows and Linux that extends the<space/><link><target>SpiderMonkey</target><part>Mozilla JavaScript engine</part></link>. It has the ability to call functions in commonly used libraries like NSPR, SQLite, libTomCrypt, OpenGL, OpenAL, and librsvg.<extension extension_name='ref'><link type='external' href='https://code.google.com/p/jslibs/'>jslibs</link><space/>on Google Code</extension></listitem><listitem><link><target>OS X Yosemite</target></link><space/>introduced JavaScript for Automation (JXA), which is built upon<space/><link><target>JavaScriptCore</target></link><space/>and the<space/><link><target>Open Scripting Architecture</target></link>. It features an<space/><link><target>Objective-C</target></link><space/>bridge which enables entire<space/><link><target>Cocoa (API)</target><part>Cocoa</part></link><space/>applications to be programmed in JavaScript.</listitem><listitem>Late Night Software's<space/><link><target>JavaScript OSA</target></link><space/>(a.k.a. JavaScript for OSA, or JSOSA) is a freeware alternative to<space/><link><target>AppleScript</target></link><space/>for Mac OS X. It is based on the Mozilla 1.5 JavaScript implementation, with the addition of a<space/><xhtml:tt>MacOS</xhtml:tt><space/>object for interaction with the operating system and third-party applications.<extension extension_name='ref'><link><target>Open Scripting Architecture</target></link></extension></listitem></list><heading level='3'>Application platform</heading><list type='bullet'><listitem><link><target>ActionScript</target></link>, the programming language used in<space/><link><target>Adobe Flash</target></link>, is another implementation of the ECMAScript standard.</listitem><listitem><link><target>Adobe Integrated Runtime</target></link><space/>is a JavaScript runtime that allows developers to create desktop applications.</listitem><listitem><link><target>CA, Inc.</target></link>'s AutoShell cross-application scripting environment is built on the<space/><link><target>SpiderMonkey (JavaScript engine)</target><part>SpiderMonkey</part></link><space/>JavaScript engine. It contains<space/><link><target>preprocessor</target></link>-like extensions for command definition, as well as custom classes for various system-related tasks like file I/O, operation system command invocation and redirection, and COM scripting.</listitem><listitem><link><target>GNOME Shell</target></link>, the shell for the<space/><template><target>nobr</target><arg>[[GNOME|GNOME 3]]</arg></template><space/>desktop environment,<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://gnomejournal.org/article/74/behind-the-scenes-with-owen-taylor
</arg><arg name="title">Behind the Scenes with Owen Taylor
</arg><arg name="publisher">The GNOME Journal
</arg><arg name="accessdate">2010-01-23
</arg><arg name="archiveurl">http://web.archive.org/web/20121221071408/http://gnomejournal.org/article/74/behind-the-scenes-with-owen-taylor
</arg><arg name="archivedate">2012-12-21
</arg></template></extension><space/>made JavaScript its default programming language in 2013.<extension extension_name='ref'><template><target>cite web</target><arg name="url"><space/>http://treitter.livejournal.com/14871.html
</arg><arg name="title"><space/>Answering the question: "How do I develop an app for GNOME?"
</arg></template></extension></listitem><listitem>The<space/><link><target>Mozilla</target></link><space/>platform, which underlies<space/><link><target>Firefox</target></link>,<space/><link><target>Mozilla Thunderbird</target><part>Thunderbird</part></link>, and some other web browsers, uses JavaScript to implement the<space/><link><target>graphical user interface</target></link><space/>(GUI) of its various products.</listitem><listitem><link><target>Digital Airways</target><part>myNFC</part></link><space/>is a JavaScript based framework that allows developers to create applications for smart phones.<extension extension_name='ref'><template><target>cite web</target><arg name="author">Category: Project's basics<space/></arg><arg name="url">http://www.mynfc.org/<space/></arg><arg name="title">myNFC.org<space/></arg><arg name="publisher">myNFC.org<space/></arg><arg name="date">2013-05-22<space/></arg><arg name="accessdate">2013-05-26</arg></template></extension></listitem><listitem><link><target>Qt Quick</target></link>'s markup language (available since Qt 4.7) uses JavaScript for its application logic. Its declarative syntax is also similar to JavaScript.</listitem><listitem><link><target>TypeScript</target></link><space/>is a programming language based on JavaScript that adds support for optional<space/><link><target>type annotation</target><trail>s</trail></link><space/>and some other language extensions such as classes, interfaces and modules. A TS-script compiles into plain JavaScript and can be executed in any JS host supporting<space/><link><target>ECMAScript</target><part>ECMAScript 3</part></link><space/>or higher. The compiler is itself written in TypeScript.</listitem><listitem><link><target>Ubuntu Touch</target></link><space/>provides a JavaScript API for its unified usability interface.</listitem><listitem><link><target>webOS</target></link><space/>uses the<space/><link><target>WebKit</target></link><space/>implementation of JavaScript in its<space/><link><target>Software development kit</target><part>SDK</part></link><space/>to allow developers to create stand-alone applications solely in JavaScript.</listitem><listitem><link><target>Windows Runtime#JavaScript</target><part>WinJS</part></link><space/>provides a special Windows Library for JavaScript functionality in<space/><link><target>Windows 8</target></link><space/>that enables the development of<space/><link><target>Metro (design language)</target><part>Modern style</part></link><space/>(formerly<space/><italics>Metro style</italics>) applications in<space/><link><target>HTML5</target></link><space/>and JavaScript.</listitem></list><heading level='3'>Microcontrollers</heading><paragraph>As the specifications of<space/><link><target>microcontroller</target><trail>s</trail></link><space/>have increased over the last few years, it has become possible to use JavaScript to control hardware in embedded devices. There are currently two main implementations:<extension extension_name='ref'>MAKE: Magazine,<space/><link type='external' href='http://makezine.com/magazine/first-look-javascript-micro-controllers-for-web-developers/'>First Look: JavaScript Microcontrollers</link></extension></paragraph><list type='bullet'><listitem><link type='external' href='http://www.espruino.com'>Espruino</link><space/>is a JavaScript interpreter for low power microcontrollers.</listitem><listitem><link type='external' href='http://www.tessel.io'>Tessel</link><space/>is a microcontroller board with built-in WiFi.</listitem></list><heading level='2'>Development tools</heading><paragraph>Within JavaScript, access to a<space/><link><target>debugger</target></link><space/>becomes invaluable when developing large, non-trivial programs. Because there can be implementation differences between the various browsers (particularly within the<space/><link><target>Document Object Model</target></link>), it is useful to have access to a debugger for each of the browsers that a Web application targets.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.alistapart.com/articles/advanced-debugging-with-javascript/<space/></arg><arg name="title">Advanced Debugging With JavaScript<space/></arg><arg name="publisher">alistapart.com<space/></arg><arg name="date">2009-02-03<space/></arg><arg name="accessdate">2010-05-28</arg></template></extension></paragraph><paragraph>Script debuggers are integrated within<space/><link><target>Internet Explorer</target></link>,<space/><link><target>Firefox</target></link>,<space/><link><target>Safari (web browser)</target><part>Safari</part></link>,<space/><link><target>Google Chrome</target></link>,<space/><link><target>Opera (web browser)</target><part>Opera</part></link><space/>and<space/><link><target>Node.js</target></link><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://javascript.about.com/od/problemsolving/ig/JavaScript-Debugging/<space/></arg><arg name="title">The JavaScript Debugging Console<space/></arg><arg name="publisher">javascript.about.com<space/></arg><arg name="date">2010-05-28<space/></arg><arg name="accessdate">2010-05-28</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.javascript-debugger.com<space/></arg><arg name="title">SplineTech JavaScript Debugger - an independent standalone JavaScript Debugger<space/></arg><arg name="publisher">javascript-debugger.com<space/></arg><arg name="date">2013-08-26<space/></arg><arg name="accessdate">2013-08-26</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://docs.strongloop.com/display/DOC/Debugging+with+Node+Inspector<space/></arg><arg name="title">Debugging with Node Inspector<space/></arg><arg name="publisher">http://docs.strongloop.com/<space/></arg><arg name="accessdate">2014-05-07</arg></template></extension></paragraph><paragraph>In addition to the native<space/><link><target>Internet Explorer Developer Tools</target></link>, three debuggers are available for Internet Explorer:<space/><link><target>Microsoft Visual Studio</target></link><space/>is the richest of the three, closely followed by<space/><link><target>Microsoft Script Editor</target></link><space/>(a component of<space/><link><target>Microsoft Office</target></link>),<extension extension_name='ref'><link type='external' href='http://msdn2.microsoft.com/en-us/library/aa202668(office.11).aspx'>JScript development in Microsoft Office 11</link><space/>(MS InfoPath 2003)</extension><space/>and finally the free<space/><link><target>Microsoft Script Debugger</target></link><space/>that is far more basic than the other two. The free<space/><link><target>Microsoft Visual Web Developer Express</target></link><space/>provides a limited version of the JavaScript debugging functionality in Microsoft Visual Studio. Internet Explorer has included developer tools since version 8 (reached by pressing the F12 key).</paragraph><paragraph>In comparison to Internet Explorer, Firefox has a more comprehensive set of developer tools, which include a debugger as well. Old versions of Firefox without these tools used a<space/><link><target>Firefox addon</target></link><space/>called<space/><link><target>Firebug (Firefox extension)</target><part>Firebug</part></link>, or the older<space/><link><target>Venkman</target></link><space/>debugger. Also,<space/><link><target>WebKit</target></link>'s Web Inspector includes a JavaScript debugger,<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://webkit.org/blog/61/introducing-drosera/<space/></arg><arg name="title">Introducing Drosera - Surfin' Safari<space/></arg><arg name="publisher">Webkit.org<space/></arg><arg name="date">2006-06-28<space/></arg><arg name="accessdate">2009-05-19</arg></template></extension><space/>which is used in<space/><link><target>Safari (web browser)</target><part>Safari</part></link>. A modified version called Blink DevTools is used in<space/><link><target>Google Chrome</target></link>.<space/><link><target>Node.js</target></link><space/>has node-inspector, an interactive debugger that integrates with the Blink DevTools, available in<space/><link><target>Google Chrome</target></link>. Last but not least,<space/><link><target>Opera (web browser)</target><part>Opera</part></link><space/>includes a set of tools called<space/><link><target>Opera Dragonfly</target><part>Dragonfly</part></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.opera.com/dragonfly/</arg><arg name="title">Opera DragonFly</arg><arg name="publisher">Opera Software</arg></template></extension></paragraph><paragraph><template><target>Anchor</target><arg>Online dev tools</arg></template>In addition to the native computer software, there are<space/><italics>online JavaScript IDEs</italics>, debugging aids are themselves written in JavaScript and built to run on the Web. An example is the program<space/><link><target>JSLint</target></link>, developed by<space/><link><target>Douglas Crockford</target></link><space/>who has written extensively on the language. JSLint scans JavaScript code for conformance to a set of standards and guidelines. Many libraries for JavaScript, such as<space/><link><target>three.js</target></link>, provide links to demonstration code that can be edited by users. They are also used as a pedagogical tool by institutions such as<space/><link><target>Khan Academy</target></link><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.khanacademy.org/cs<space/></arg><arg name="title">Khan Academy Computer Science</arg><arg name="accessdate">28 Sep 2012</arg></template></extension><space/>to allow students to experience writing code in an environment where they can see the output of their programs, without needing any setup beyond a web browser.</paragraph><paragraph>On October 6, 2008<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://remysharp.com/2008/10/06/js-bin-for-collaborative-javascript-debugging/</arg><arg name="title">JS Bin for Collaborative JavaScript Debugging</arg><arg name="accessdate">20 Nov 2012</arg></template></extension><space/><link><target>Remy Sharp</target></link><space/>release jsbin, one of the earliest environments to support live updates of JavaScript, CSS, and HTML. He credits<space/><link><target>John Resig</target></link>'s Learning App,<space/><link type='external' href='http://ejohn.org/apps/learn/'></link><space/>as inspiration.</paragraph><heading level='2'>Version history</heading><paragraph><template><target>See also</target><arg>ECMAScript#Versions</arg><arg>ECMAScript#Version correspondence</arg></template></paragraph><paragraph>The following table is based on information from multiple sources.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.webmasterworld.com/forum91/68.htm<space/></arg><arg name="title">JavaScript - JScript - ECMAScript version history<space/></arg><arg name="publisher">Webmasterworld.com<space/></arg><arg name="accessdate">2009-12-17</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="author">John Resig<space/></arg><arg name="url">http://ejohn.org/blog/versions-of-javascript<space/></arg><arg name="title">Versions of JavaScript<space/></arg><arg name="publisher">Ejohn.org<space/></arg><arg name="accessdate">2009-05-19</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://msdn.microsoft.com/library/default.asp?url</arg><arg name="title">Version Information (JScript)<space/></arg><arg name="publisher">Msdn.microsoft.com<space/></arg><arg name="accessdate">2009-12-17</arg></template></extension></paragraph><table class="wikitable" style="text-align:center;"><tablerow><tablehead>Version</tablehead><tablehead>Release date</tablehead><tablehead>Equivalent to</tablehead><tablehead>Netscape<xhtml:br></xhtml:br>Navigator</tablehead><tablehead>Mozilla<xhtml:br></xhtml:br>Firefox</tablehead><tablehead>Internet<xhtml:br></xhtml:br>Explorer</tablehead><tablehead>Opera</tablehead><tablehead>Safari</tablehead><tablehead>Google<xhtml:br></xhtml:br>Chrome</tablehead></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.0</arg></template></tablecell><tablecell>March 1996</tablecell><tablecell></tablecell><tablecell>2.0</tablecell><tablecell></tablecell><tablecell>3.0</tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.1</arg></template></tablecell><tablecell>August 1996</tablecell><tablecell></tablecell><tablecell>3.0</tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.2</arg></template></tablecell><tablecell>June 1997</tablecell><tablecell></tablecell><tablecell>4.0-4.05</tablecell><tablecell></tablecell><tablecell></tablecell><tablecell>3<extension extension_name='ref'><link><target>History of the Opera web browser#Version 3</target></link></extension></tablecell><tablecell></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.3</arg></template></tablecell><tablecell>October 1998</tablecell><tablecell>ECMA-262 1st + 2nd edition</tablecell><tablecell>4.06-4.7x</tablecell><tablecell></tablecell><tablecell>4.0</tablecell><tablecell>5<extension extension_name='ref'><template><target>cite web</target><arg name="title">What Version of JavaScript</arg><arg name="url">http://javascript.about.com/library/bljver.htm</arg></template></extension></tablecell><tablecell></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.4</arg></template></tablecell><tablecell></tablecell><tablecell></tablecell><tablecell>Netscape<xhtml:br></xhtml:br>Server</tablecell><tablecell></tablecell><tablecell></tablecell><tablecell>6</tablecell><tablecell></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.5</arg></template></tablecell><tablecell>November 2000</tablecell><tablecell>ECMA-262 3rd edition</tablecell><tablecell>6.0</tablecell><tablecell>1.0</tablecell><tablecell>5.5 (JScript 5.5),<xhtml:br></xhtml:br>6 (JScript 5.6),<xhtml:br></xhtml:br>7 (JScript 5.7),<xhtml:br></xhtml:br>8 (JScript 5.8)</tablecell><tablecell>7.0</tablecell><tablecell>3.0-5</tablecell><tablecell>1.0-10.0.666</tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.6</arg></template></tablecell><tablecell>November 2005</tablecell><tablecell>1.5 + array extras + array and string generics +<space/><link><target>E4X</target></link></tablecell><tablecell></tablecell><tablecell>1.5</tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.7</arg></template></tablecell><tablecell>October 2006</tablecell><tablecell>1.6 +<space/><link type='external' href='https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7?redirectlocale=en-US&amp;amp;redirectslug=New_in_JavaScript_1.7#Generators'>Pythonic generators</link><space/>+ iterators + let</tablecell><tablecell></tablecell><tablecell>2.0</tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell><tablecell>28.0.1500.95</tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.8</arg></template></tablecell><tablecell>June 2008</tablecell><tablecell>1.7 +<space/><link><target>generator (computer programming)</target><part>generator expressions</part></link><space/>+<space/><link><target>closure (computer science)</target><part>expression closures</part></link></tablecell><tablecell></tablecell><tablecell>3.0</tablecell><tablecell></tablecell><tablecell>11.50</tablecell><tablecell></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.8.1</arg></template></tablecell><tablecell></tablecell><tablecell>1.8 +<space/><link><target>JSON#Native encoding and decoding in browsers</target><part>native JSON</part></link><space/>support + minor updates</tablecell><tablecell></tablecell><tablecell>3.5</tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><template><target>Version</target><arg>o<space/></arg><arg>1.8.2</arg></template></tablecell><tablecell>June 22, 2009</tablecell><tablecell>1.8.1 + minor updates</tablecell><tablecell></tablecell><tablecell>3.6</tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell><tablecell></tablecell></tablerow></table><heading level='2'>Related languages and features</heading><paragraph><link><target>JSON</target></link>, or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript's object literal syntax. Like much of JavaScript (regexps and anonymous functions as 1st class elements, closures, flexible classes, 'use strict'),<space/><link><target>JSON</target></link>, except for replacing<space/><link><target>Perl</target></link>'s key-value operator '=&gt;' by an<space/><link><target>RFC 822</target></link><extension extension_name='ref'><template><target>cite web</target><arg name="url">https://tools.ietf.org/html/rfc822#section-3.2</arg><arg name="title">RFC 822</arg></template></extension><space/>inspired ':', is syntactically pure Perl.</paragraph><paragraph><link><target>jQuery</target></link><space/>is a popular JavaScript library designed to simplify<space/><link><target>Document Object Model</target><part>DOM</part></link>-oriented client-side HTML scripting along with offering cross-browser compatibility because various browsers respond differently to certain vanilla JavaScript code.</paragraph><paragraph><link><target>Underscore.js</target></link><space/>is a utility JavaScript library for data manipulation that is used in both client-side and server-side network applications.</paragraph><paragraph>Mozilla browsers currently support<space/><link><target>LiveConnect</target></link>, a feature that allows JavaScript and Java to intercommunicate on the Web. However, Mozilla-specific support for LiveConnect is scheduled to be phased out in the future in favor of passing on the LiveConnect handling via<space/><link><target>NPAPI</target></link><space/>to the Java 1.6+ plug-in (not yet supported on the Mac<space/><template><target>as of</target><arg>March 2010</arg><arg name="lc">y</arg></template>).<extension extension_name='ref'><link type='external' href='http://java.sun.com/javase/6/webnotes/6u10/plugin2/liveconnect/'>Release Notes for the Next-Generation Java Plug-In Technology (introduced in Java SE 6 update 10)</link>. Java.sun.com. Retrieved on 2013-06-13.</extension><space/>Most browser inspection tools, such as<space/><link><target>Firebug (software)</target><part>Firebug</part></link><space/>in Firefox, include JavaScript interpreters that can act on the visible page's DOM.</paragraph><paragraph><link><target>asm.js</target></link><space/>is a subset of JavaScript that can be run in any JavaScript engine or run faster in an<space/><link><target>ahead-of-time</target></link><space/>(AOT) compiling engine.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://asmjs.org/faq.html<space/></arg><arg name="title">frequently asked questions<space/></arg><arg name="publisher">asm.js<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension></paragraph><heading level='3'>Use as an intermediate language</heading><paragraph>As JavaScript is the most widely supported client-side language that can run within a web browser, it has become an<space/><link><target>intermediate language</target></link><space/>for other languages to target. This has included both newly created languages and ports of existing languages. Some of these include:</paragraph><list type='bullet'><listitem><link><target>Objective-J</target></link>, a superset of JavaScript that compiles to standard JavaScript. It adds traditional inheritance and<space/><link><target>Smalltalk</target></link>/<link><target>Objective-C</target></link><space/>style dynamic dispatch and optional pseudo-static typing to JavaScript.</listitem><listitem><link><target>Processing.js</target></link>, a JavaScript port of Processing, a programming language designed to write visualizations, images, and interactive content. It allows web browsers to display animations, visual applications, games and other graphical rich content without the need for a Java applet or Flash plugin.</listitem><listitem><link><target>CoffeeScript</target></link>, an alternate syntax for JavaScript intended to be more concise and readable. It adds features like array comprehensions (also available in JavaScript since version 1.7)<extension extension_name='ref'><template><target>cite web</target><arg name="url">https://developer.mozilla.org/en/New_in_JavaScript_1.7#Array_comprehensions_%28Merge_into_Array_comprehensions%29<space/></arg><arg name="title">New in JavaScript 1.7<space/></arg><arg name="publisher">Developer.mozilla.org<space/></arg><arg name="date">2012-12-05<space/></arg><arg name="accessdate">2013-05-26</arg></template></extension><space/>and pattern matching. Like Objective-J, it compiles to JavaScript. Ruby and Python have been cited as influential on CoffeeScript syntax.</listitem><listitem><link><target>Google Web Toolkit</target></link><space/>translates a subset of Java to JavaScript.</listitem><listitem><link><target>Scala (programming language)</target><part>Scala</part></link>, an object-oriented and functional programming language, has an experimental Scala-to-JavaScript compiler.<extension extension_name='ref'><template><target>cite web</target><arg name="author">Sébastien Doeraene<space/></arg><arg name="url">http://lampwww.epfl.ch/~doeraene/scala-js/<space/></arg><arg name="title">Scala.js<space/></arg><arg name="publisher">Lampwww.epfl.ch<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension></listitem><listitem><link><target>Pyjamas (software)</target><part>Pyjamas</part></link>, a port of<space/><link><target>Google Web Toolkit</target></link><space/>to<space/><link><target>Python (programming language)</target><part>Python</part></link><space/>(translates a subset of Python to JavaScript)</listitem><listitem><link><target>Dart (programming language)</target><part>Dart</part></link>, an open-source programming language developed by Google, can be compiled to JavaScript.</listitem><listitem>Whalesong,<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://hashcollision.org/whalesong/<space/></arg><arg name="title">Whalesong: a Racket to JavaScript compiler<space/></arg><arg name="publisher">Hashcollision.org<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension><space/>a<space/><link><target>Racket (programming language)</target><part>Racket</part></link>-to-JavaScript compiler.</listitem><listitem><link><target>Emscripten</target></link>, a<space/><link><target>LLVM</target></link>-backend for porting native libraries to JavaScript.</listitem><listitem><link><target>Fantom (programming language)</target><part>Fantom</part></link><space/>a programming language that runs on JVM, .NET and JavaScript.</listitem><listitem><link><target>TypeScript</target></link>, a free and open-source programming language developed by Microsoft. It is a superset of JavaScript, and essentially adds optional static typing and class-based object-oriented programming to the language.</listitem><listitem><link><target>Haxe</target></link>, an open-source high-level multiplatform programming language and compiler that can produce applications and source code for many different platforms including JavaScript.</listitem><listitem>ClojureScript,<extension extension_name='ref'><template><target>cite web</target><arg name="url">https://github.com/clojure/clojurescript<space/></arg><arg name="title">clojure/clojurescript · GitHub<space/></arg><arg name="publisher">Github.com<space/></arg><arg name="accessdate">2014-04-13</arg></template></extension><space/>a compiler for<space/><link><target>Clojure</target></link><space/>that targets JavaScript. It is designed to emit JavaScript code that is compatible with the advanced compilation mode of the Google Closure optimizing compiler.</listitem><listitem><link><target>Kotlin (programming language)</target><part>Kotlin</part></link>, a<space/><link><target>Type system#Static type-checking</target><part>statically-typed</part></link><space/>language that also compiles to<space/><link><target>Java byte code</target></link>.</listitem></list><paragraph>As JavaScript has unusual limitations such as no separate integer type, using floating point languages that compile to JavaScript commonly have slightly different behavior than in other environments.</paragraph><heading level='3'>JavaScript and Java</heading><paragraph>A common misconception is that JavaScript is similar or closely related to<space/><link><target>Java (programming language)</target><part>Java</part></link>. It is true that both have a C-like syntax (the C language being their most immediate common ancestor language). They also are both typically<space/><link><target>Sandbox (computer security)</target><part>sandboxed</part></link><space/>(when used inside a browser), and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0,<extension extension_name='ref' name="popularity"><template><target>cite web</target><arg name="url">http://brendaneich.com/2008/04/popularity/<space/></arg><arg name="title">Popularity<space/></arg><arg name="author">Brendan Eich<space/></arg><arg name="date">3 April 2008<space/></arg><arg name="accessdate">2012-01-19</arg></template></extension><space/>but the similarities end there.</paragraph><paragraph>The differences between the two languages are more prominent than their similarities. Java has<space/><link><target>static typing</target></link>, while JavaScript's typing is<space/><link><target>Dynamic typing</target><part>dynamic</part></link>. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are<space/><link><target>Class-based programming</target><part>class-based</part></link>, while JavaScript's are<space/><link><target>Prototype-based programming</target><part>prototype-based</part></link>. Finally, Java did not support<space/><link><target>functional programming</target></link><space/>until Java 8, while JavaScript does, as it contains many features based on<space/><link><target>Scheme (programming language)</target><part>Scheme</part></link>.</paragraph><heading level='2'>References</heading><paragraph><template><target>reflist</target><arg>3</arg></template></paragraph><heading level='2'>Further reading</heading><paragraph><template><target>Refbegin</target><arg>33em</arg></template></paragraph><list type='bullet'><listitem><template><target>cite book</target><arg name="last">Bhangal<space/></arg><arg name="first">Sham<space/></arg><arg name="author2">Jankowski, Tomasz<space/></arg><arg name="title">Foundation Web Design: Essential HTML, JavaScript, CSS, PhotoShop, Fireworks, and Flash<space/></arg><arg name="year">2003<space/></arg><arg name="publisher">APress L. P.<space/></arg><arg name="isbn">1-59059-152-6</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Burns<space/></arg><arg name="first">Joe<space/></arg><arg name="author2">Growney, Andree S.<space/></arg><arg name="title">JavaScript Goodies<space/></arg><arg name="year">2001<space/></arg><arg name="publisher">Pearson Education<space/></arg><arg name="isbn">0-7897-2612-2</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Duffy<space/></arg><arg name="first">Scott<space/></arg><arg name="title">How to do Everything with JavaScript<space/></arg><arg name="year">2003<space/></arg><arg name="publisher">Osborne<space/></arg><arg name="isbn">0-07-222887-3<space/></arg></template></listitem><listitem><template><target>cite book</target><arg name="last1"><space/>Zakas<space/></arg><arg name="first1"><space/>Nicholas C.<space/></arg><arg name="title"><space/>Professional JavaScript for Web Developers<space/></arg><arg name="edition"><space/>3rd<space/></arg><arg name="year"><space/>2012<space/></arg><arg name="publisher"><space/>Wrox<space/></arg><arg name="isbn"><space/>978-1-1180-2669-4<space/></arg></template></listitem><listitem><template><target>cite book</target><arg name="last1"><space/>Flanagan<space/></arg><arg name="first1"><space/>David<space/></arg><arg name="title"><space/>JavaScript: The Definitive Guide<space/></arg><arg name="edition"><space/>5th<space/></arg><arg name="year"><space/>2006<space/></arg><arg name="publisher"><space/>[[O'Reilly Media|O'Reilly & Associates]]<space/></arg><arg name="isbn"><space/>0-596-10199-6<space/></arg><arg name="ref"><space/>harv</arg></template></listitem><listitem><template><target>cite book</target><arg name="last1"><space/>Flanagan<space/></arg><arg name="first1"><space/>David<space/></arg><arg name="title"><space/>JavaScript: The Definitive Guide<space/></arg><arg name="edition"><space/>6th<space/></arg><arg name="year"><space/>2011<space/></arg><arg name="publisher"><space/>[[O'Reilly Media|O'Reilly & Associates]]<space/></arg><arg name="isbn"><space/>978-0596805524<space/></arg><arg name="ref"><space/>harv</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Goodman<space/></arg><arg name="first">Danny<space/></arg><arg name="author2">Eich, Brendan<space/></arg><arg name="title">JavaScript Bible<space/></arg><arg name="year">2001<space/></arg><arg name="publisher">John Wiley & Sons<space/></arg><arg name="isbn">0-7645-3342-8</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Goodman<space/></arg><arg name="first">Danny<space/></arg><arg name="author2">Markel, Scott<space/></arg><arg name="title">JavaScript and DHTML Cookbook<space/></arg><arg name="year">2003<space/></arg><arg name="publisher">O'Reilly & Associates<space/></arg><arg name="isbn">0-596-00467-2</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Harris<space/></arg><arg name="first">Andy<space/></arg><arg name="title">JavaScript Programming for the Absolute Beginner<space/></arg><arg name="year">2001<space/></arg><arg name="publisher">Premier Press<space/></arg><arg name="isbn">0-7615-3410-5</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Haverbeke<space/></arg><arg name="first">Marijn<space/></arg><arg name="title">Eloquent JavaScript<space/></arg><arg name="year">2011<space/></arg><arg name="publisher">No Starch Press</arg><arg name="isbn">978-1593272821</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Heinle<space/></arg><arg name="first">Nick<space/></arg><arg name="author2">Koman, Richard<space/></arg><arg name="title">Designing with JavaScript<space/></arg><arg name="year">1997<space/></arg><arg name="publisher">O'Reilly & Associates<space/></arg><arg name="isbn">1-56592-300-6</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Husted<space/></arg><arg name="first">Robert<space/></arg><arg name="last2">Kuslich<space/></arg><arg name="first2">JJ<space/></arg><arg name="title">Server-Side JavaScript: Developing Integrated Web Applications<space/></arg><arg name="edition">1st<space/></arg><arg name="year">1999</arg><arg name="publisher">Addison-Wesley<space/></arg><arg name="isbn">020143329X</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">McDuffie<space/></arg><arg name="first">Tina Spain<space/></arg><arg name="title">JavaScript Concepts & Techniques: Programming Interactive Web Sites<space/></arg><arg name="year">2003<space/></arg><arg name="publisher">Franklin, Beedle & Associates<space/></arg><arg name="isbn">1-887902-69-4</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">McFarlane<space/></arg><arg name="first">Nigel<space/></arg><arg name="title">Rapid Application Development with Mozilla<space/></arg><arg name="year">2003<space/></arg><arg name="publisher">Prentice Hall Professional Technical References<space/></arg><arg name="isbn">0-13-142343-6</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Powell<space/></arg><arg name="first">Thomas A.<space/></arg><arg name="author2">Schneider, Fritz<space/></arg><arg name="title">JavaScript: The Complete Reference<space/></arg><arg name="year">2001<space/></arg><arg name="publisher">McGraw-Hill Companies<space/></arg><arg name="isbn">0-07-219127-9</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Shelly<space/></arg><arg name="first">Gary B.<space/></arg><arg name="author2">Cashman, Thomas J.<space/></arg><arg name="author3">Dorin, William J.<space/></arg><arg name="author4"><space/>Quasney, Jeffrey J.<space/></arg><arg name="title">JavaScript: Complete Concepts and Techniques<space/></arg><arg name="year">2000<space/></arg><arg name="publisher">Course Technology<space/></arg><arg name="location">Cambridge<space/></arg><arg name="isbn">0-7895-6233-2</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Vander Veer<space/></arg><arg name="first">Emily A.<space/></arg><arg name="title">JavaScript For Dummies<space/></arg><arg name="edition">4th<space/></arg><arg name="year">2004<space/></arg><arg name="publisher">Wiley Pub.<space/></arg><arg name="isbn">0-7645-7659-3</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Watt<space/></arg><arg name="first">Andrew H.<space/></arg><arg name="author2">Watt, Jonathan A.<space/></arg><arg name="author3">Simon, Jinjer L.<space/></arg><arg name="title">Teach Yourself JavaScript in 21 Days<space/></arg><arg name="year">2002<space/></arg><arg name="publisher">Pearson Education<space/></arg><arg name="isbn">0-672-32297-8</arg></template></listitem></list><paragraph><template><target>Refend</target></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>Portal</target><arg>Computer programming</arg></template><template><target>sisterlinks</target><arg name="commons">Category:JavaScript</arg><arg name="n">no</arg><arg name="v">Topic:JavaScript</arg><arg name="q">no</arg><arg name="s">no</arg><arg name="m">no</arg><arg name="voy">no</arg><arg name="species">no</arg><arg name="mw">JavaScript</arg></template><template><target>Spoken Wikipedia</target><arg>En-JavaScript.ogg</arg><arg>2013-08-20</arg></template></paragraph><list type='bullet'><listitem><link type='external' href='https://www.youtube.com/playlist?list=PL62E185BB8577B63D'>Douglas Crockford's video lectures on JavaScript</link></listitem><listitem><link><target>Douglas Crockford</target></link>:<space/><link type='external' href='http://javascript.crockford.com/survey.html'>A Survey of the JavaScript Programming Language</link></listitem><listitem><template><target>DMOZ</target><arg>Computers/Programming/Languages/JavaScript/</arg></template></listitem><listitem><link type='external' href='http://dev.opera.com/articles/javascript/'>JavaScript</link>Opera Developer Community</listitem><listitem><link type='external' href='https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS/'>List of languages that compile to JS</link></listitem></list><paragraph><template><target>JavaScript</target></template><template><target>Programming languages</target></template><template><target>ECMAScript</target></template><template><target>Web browsers</target></template><template><target>NodeJs</target></template></paragraph><paragraph><template><target>Authority control</target></template></paragraph><paragraph><template><target>DEFAULTSORT:JavaScript</target></template><link><target>Category:1995 introductions</target></link><link><target>Category:American inventions</target></link><link><target>Category:Articles with example JavaScript code</target></link><link><target>Category:Cross-platform software</target></link><link><target>Category:Dynamically typed programming languages</target></link><link><target>Category:Functional languages</target></link><link><target>Category:JavaScript</target><part></part></link><link><target>Category:Object-based programming languages</target></link><link><target>Category:Programming languages created in 1995</target></link><link><target>Category:Programming languages with an ISO standard</target></link><link><target>Category:Prototype-based programming languages</target></link><link><target>Category:Scripting languages</target></link><link><target>Category:Web programming</target></link></paragraph></article>