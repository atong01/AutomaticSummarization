<article title='Delaunay_triangulation'><paragraph><link><target>Image:Delaunay_circumcircles_vectorial.svg</target><part>right</part><part>thumb</part><part>280px</part><part>A Delaunay triangulation in the plane with circumcircles shown</part></link><space/>In<space/><link><target>mathematics</target></link><space/>and<space/><link><target>computational geometry</target></link>, a<space/><bold>Delaunay triangulation</bold><space/>for a set<space/><bold>P</bold><space/>of points in a plane is a<space/><link><target>triangulation (geometry)</target><part>triangulation</part></link><space/>DT(<bold>P</bold>) such that no point in<space/><bold>P</bold><space/>is inside the<space/><link><target>Circumcircle#Triangles</target><part>circumcircle</part></link><space/>of any<space/><link><target>triangle</target></link><space/>in DT(<bold>P</bold>). Delaunay triangulations maximize the minimum angle of all the angles of the triangles in the triangulation; they tend to avoid skinny triangles. The triangulation is named after<space/><link><target>Boris Delaunay</target></link><space/>for his work on this topic from 1934.<extension extension_name='ref' name="Delaunay1934">Delaunay, Boris:<space/><italics><link type='external' href='http://mi.mathnet.ru/eng/izv4937'>Sur la sphre vide. A la mmoire de Georges Vorono</link>, Bulletin de l'Acadmie des Sciences de l'URSS, Classe des sciences mathmatiques et naturelles, No. 6: 793800, 1934</italics></extension></paragraph><paragraph>For a set of points on the same line there is no Delaunay triangulation (the notion of triangulation is degenerate for this case). For four or more points on the same circle (e.g., the vertices of a rectangle) the Delaunay triangulation is not unique: each of the two possible triangulations that split the quadrangle into two triangles satisfies the &quot;Delaunay condition&quot;, i.e., the requirement that the circumcircles of all triangles have empty interiors.</paragraph><paragraph>By considering circumscribed spheres, the notion of Delaunay triangulation extends to three and higher dimensions. Generalizations are possible to metrics other than Euclidean. However in these cases a Delaunay triangulation is not guaranteed to exist or be unique.</paragraph><heading level='2'>Relationship with the Voronoi diagram</heading><paragraph>The Delaunay<space/><link><target>triangulation (geometry)</target><part>triangulation</part></link><space/>of a<space/><link><target>discrete space</target><part>discrete</part></link><space/>point set<space/><bold>P</bold><space/>in<space/><link><target>general position</target></link><space/>corresponds to the<space/><link><target>dual graph</target></link><space/>of the<space/><link><target>Voronoi diagram</target></link><space/>for<space/><bold>P</bold>. Special cases include the existence of three points on a line and four points on circle.<table style='border-collapse: collapse; border: 1px solid grey;'><tablerow><tablecell valign="top" align="left"><link><target>File:Delaunay_circumcircles_centers.svg</target><part>thumb</part><part>center</part><part></part></link><xhtml:br></xhtml:br>The Delaunay triangulation with all the circumcircles and their centers (in red).</tablecell><tablecell valign="top" align="left"><link><target>Image:Delaunay_Voronoi.svg</target><part>thumb</part><part>center</part><part></part></link><xhtml:br></xhtml:br>Connecting the centers of the circumcircles produces the<space/><link><target>Voronoi diagram</target></link><space/>(in red).</tablecell></tablerow></table></paragraph><preblock><preline></preline></preblock><heading level='2'><italics>d</italics>-dimensional Delaunay</heading><paragraph>For a set<space/><bold>P</bold><space/>of points in the (<italics>d</italics>-dimensional)<space/><link><target>Euclidean space</target></link>, a<space/><bold>Delaunay triangulation</bold><space/>is a<space/><link><target>Triangulation (geometry)</target><part>triangulation</part></link><space/>DT(<bold>P</bold>) such that no point in<space/><bold>P</bold><space/>is inside the<space/><link><target>circumcircle</target><part>circum-hypersphere</part></link><space/>of any<space/><link><target>simplex</target></link><space/>in DT(<bold>P</bold>). It is known<extension extension_name='ref' name="Delaunay1934"></extension><space/>that there exists a unique Delaunay triangulation for<space/><bold>P</bold><space/>if<space/><bold>P</bold><space/>is a set of points in<space/><italics><link><target>general position</target></link></italics>; that is, the affine hull of<space/><bold>P</bold><space/>is<space/><italics>d</italics>-dimensional and no set of<space/><italics>d</italics>&amp;nbsp;+&amp;nbsp;2 points in<space/><bold>P</bold><space/>lie on the boundary of a ball whose interior does not interesect<space/><bold>P</bold>.</paragraph><paragraph>The problem of finding the Delaunay triangulation of a set of points in<space/><italics>d</italics>-dimensional Euclidean space can be converted to the problem of finding the<space/><link><target>convex hull</target></link><space/>of a set of points in (<italics>d</italics>&amp;nbsp;+&amp;nbsp;1)-dimensional space, by giving each point<space/><italics>p</italics><space/>an extra coordinate equal to |<italics>p</italics>|<xhtml:sup>2</xhtml:sup>, taking the bottom side of the convex hull, and mapping back to<space/><italics>d</italics>-dimensional space by deleting the last coordinate. As the convex hull is unique, so is the triangulation, assuming all facets of the convex hull are<space/><link><target>simplex</target><part>simplices</part></link>. Nonsimplicial facets only occur when<space/><italics>d</italics>&amp;nbsp;+&amp;nbsp;2 of the original points lie on the same<space/><italics>d</italics>-<link><target>hypersphere</target></link>, i.e., the points are not in general position.</paragraph><heading level='2'>Properties</heading><paragraph><link><target>File:Example steps in Delauney triangularization.png</target><part>thumb</part><part>Example steps</part></link><link><target>File:Delaunay triangulation does not minimize edge length.gif</target><part>thumb</part><part>Each frame of the animation shows a Delaunay triangulation of the four points. Halfway through, the triangulating edge flips showing that the Delaunay triangulation maximizes the minimum angle, not the edge-length of the triangles.</part></link></paragraph><paragraph>Let<space/><italics>n</italics><space/>be the number of points and<space/><italics>d</italics><space/>the number of dimensions.</paragraph><list type='bullet'><listitem>The union of all simplices in the triangulation is the convex hull of the points.</listitem><listitem>The Delaunay triangulation contains<space/><italics>O</italics>(<italics>n</italics><xhtml:sup><italics>d</italics>&amp;nbsp;/&amp;nbsp;2</xhtml:sup>) simplices.<extension extension_name='ref'><template><target>cite journal</target><arg name="last"><space/>Seidel
<space/></arg><arg name="first"><space/>R.
<space/></arg><arg name="title"><space/>The upper bound theorem for polytopes: an easy proof of its asymptotic version
<space/></arg><arg name="journal"><space/>Computational Geometry
<space/></arg><arg name="volume"><space/>5
<space/></arg><arg name="pages"><space/>115–116
<space/></arg><arg name="year"><space/>1995
<space/></arg><arg name="url"><space/>http://www.sciencedirect.com/science?_ob</arg><arg name="doi"><space/>10.1016/0925-7721(95)00013-Y
<space/></arg><arg name="issue"><space/>2<space/></arg></template></extension></listitem><listitem>In the plane (<italics>d</italics><space/>= 2), if there are<space/><italics>b</italics><space/>vertices on the convex hull, then any triangulation of the points has at most 2<italics>n</italics>&amp;nbsp;&amp;minus;&amp;nbsp;2&amp;nbsp;&amp;minus;&amp;nbsp;<italics>b</italics><space/>triangles, plus one exterior face (see<space/><link><target>Euler characteristic</target></link>).</listitem><listitem>In the plane, each vertex has on average six surrounding triangles.</listitem><listitem>In the plane, the Delaunay triangulation maximizes the minimum angle. Compared to any other triangulation of the points, the smallest angle in the Delaunay triangulation is at least as large as the smallest angle in any other. However, the Delaunay triangulation does not necessarily minimize the maximum angle.<extension extension_name='ref'><template><target>citation</target><arg name="last1"><space/>Edelsbrunner<space/></arg><arg name="first1"><space/>Herbert<space/></arg><arg name="author1-link"><space/>Herbert Edelsbrunner
<space/></arg><arg name="last2"><space/>Tan<space/></arg><arg name="first2"><space/>Tiow Seng
<space/></arg><arg name="last3"><space/>Waupotitsch<space/></arg><arg name="first3"><space/>Roman
<space/></arg><arg name="doi"><space/>10.1137/0913058
<space/></arg><arg name="issue"><space/>4
<space/></arg><arg name="journal"><space/>SIAM Journal on Scientific and Statistical Computing
<space/></arg><arg name="mr"><space/>1166172
<space/></arg><arg name="pages"><space/>994–1008
<space/></arg><arg name="title"><space/>An ''O''(''n''<sup>2</sup>&nbsp;log&nbsp;''n'') time algorithm for the minmax angle triangulation
<space/></arg><arg name="volume"><space/>13
<space/></arg><arg name="year"><space/>1992</arg></template>.</extension><space/>The Delaunay triangulation also does not necessarily minimize the length of the edges.<space/></listitem><listitem>A circle circumscribing any Delaunay triangle does not contain any other input points in its interior.</listitem><listitem>If a circle passing through two of the input points doesn't contain any other of them in its interior, then the segment connecting the two points is an edge of a Delaunay triangulation of the given points.</listitem><listitem>Each triangle of the Delaunay triangulation of a set of points in<space/><italics>d</italics>-dimensional spaces corresponds to a facet of<space/><link><target>convex hull</target></link><space/>of the projection of the points onto a (<italics>d</italics>&amp;nbsp;+&amp;nbsp;1)-dimensional<space/><link><target>paraboloid</target></link>, and vice versa.</listitem><listitem>The closest neighbor<space/><italics>b</italics><space/>to any point<space/><italics>p</italics><space/>is on an edge<space/><italics>bp</italics><space/>in the Delaunay triangulation since the<space/><link><target>nearest neighbor graph</target></link><space/>is a subgraph of the Delaunay triangulation.</listitem><listitem>The Delaunay triangulation is a<space/><link><target>geometric spanner</target></link>: the shortest path between two vertices, along Delaunay edges, is known to be no longer than<space/><extension extension_name='math'>\frac{4\pi}{3\sqrt{3}} \approx 2.418</extension><space/>times the Euclidean distance between them.</listitem></list><heading level='2'>Visual Delaunay definition: Flipping</heading><paragraph>From the above properties an important feature arises: Looking at two triangles ABD and BCD with the common edge BD (see figures), if the sum of the angles and is less than or equal to 180, the triangles meet the Delaunay condition.</paragraph><paragraph>This is an important property because it allows the use of a<space/><italics>flipping</italics><space/>technique. If two triangles do not meet the Delaunay condition, switching the common edge BD for the common edge AC produces two triangles that do meet the Delaunay condition:</paragraph><paragraph><table style='border-collapse: collapse; border: 1px solid grey;'><tablerow><tablecell valign="top" align="left"><link><target>Image:Delaunay_geometry.png</target><part>thumb</part><part>center</part><part></part></link><xhtml:br></xhtml:br>This triangulation does not meet the Delaunay condition (the sum of and is bigger than 180).</tablecell><tablecell valign="top" align="left"><link><target>Image:Delaunay_before_flip.png</target><part>thumb</part><part>center</part><part></part></link><xhtml:br></xhtml:br>This triangulation does not meet the Delaunay condition (the circumcircles contain more than three points).</tablecell><tablecell valign="top" align="left"><link><target>Image:Delaunay_after_flip.png</target><part>thumb</part><part>center</part><part></part></link><xhtml:br></xhtml:br><italics>Flipping</italics><space/>the common edge produces a Delaunay triangulation for the four points.</tablecell></tablerow></table></paragraph><heading level='2'>Algorithms</heading><paragraph>Many algorithms for computing Delaunay triangulations rely on fast operations for detecting when a point is within a triangle's circumcircle and an efficient data structure for storing triangles and edges. In two dimensions, one way to detect if point<space/><italics>D</italics><space/>lies in the circumcircle of<space/><italics>A</italics>,<space/><italics>B</italics>,<space/><italics>C</italics><space/>is to evaluate the<space/><link><target>determinant</target></link>:<extension extension_name='ref'><template><target>cite web</target><arg name="author">Guibas, Lenoidas<space/></arg><arg name="author2">Stolfi, Jorge<space/></arg><arg name="url"><space/>http://portal.acm.org/citation.cfm?id</arg><arg name="title"><space/>Primitives for the manipulation of general subdivisions and the computation of Voronoi</arg><arg name="publisher"><space/>ACM<space/></arg><arg name="page">107<space/></arg><arg name="date"><space/>1985-04-01</arg><arg name="accessdate"><space/>2009-08-01</arg></template></extension><space/></paragraph><list type='ident'><listitem><extension extension_name='math'>\begin{vmatrix}
A_x &amp; A_y &amp; A_x^2 + A_y^2 &amp; 1\\
B_x &amp; B_y &amp; B_x^2 + B_y^2 &amp; 1\\
C_x &amp; C_y &amp; C_x^2 + C_y^2 &amp; 1\\
D_x &amp; D_y &amp; D_x^2 + D_y^2 &amp; 1
\end{vmatrix} = \begin{vmatrix}
A_x - D_x &amp; A_y - D_y &amp; (A_x^2 - D_x^2) + (A_y^2 - D_y^2) \\
B_x - D_x &amp; B_y - D_y &amp; (B_x^2 - D_x^2) + (B_y^2 - D_y^2) \\
C_x - D_x &amp; C_y - D_y &amp; (C_x^2 - D_x^2) + (C_y^2 - D_y^2)
\end{vmatrix} &gt; 0
</extension></listitem></list><paragraph>When<space/><italics>A</italics>,<space/><italics>B</italics><space/>and<space/><italics>C</italics><space/>are sorted in a<space/><link><target>counterclockwise</target></link><space/>order, this determinant is positive if and only if<space/><italics>D</italics><space/>lies inside the circumcircle.</paragraph><heading level='3'>Flip algorithms</heading><paragraph>As mentioned above, if a triangle is non-Delaunay, we can flip one of its edges. This leads to a straightforward algorithm: construct any triangulation of the points, and then flip edges until no triangle is non-Delaunay. Unfortunately, this can take O(<italics>n</italics><xhtml:sup>2</xhtml:sup>) edge flips, and does not extend to three dimensions or higher.<extension extension_name='ref' name="deBerg"><template><target>cite book</target><arg name="last"><space/>de Berg
<space/></arg><arg name="first"><space/>Mark
<space/></arg><arg name="authorlink"><space/>
<space/></arg><arg name="author2">Otfried Cheong<space/></arg><arg name="author3">Marc van Kreveld<space/></arg><arg name="author4">Mark Overmars
<space/></arg><arg name="title"><space/>Computational Geometry: Algorithms and Applications
<space/></arg><arg name="publisher"><space/>Springer-Verlag
<space/></arg><arg name="year"><space/>2008
<space/></arg><arg name="id"><space/>
<space/></arg><arg name="url"><space/>http://www.cs.uu.nl/geobook/interpolation.pdf
<space/></arg><arg name="isbn"><space/>978-3-540-77973-5<space/></arg></template></extension></paragraph><heading level='3'>Incremental</heading><paragraph>The most straightforward way of efficiently computing the Delaunay triangulation is to repeatedly add one vertex at a time, retriangulating the affected parts of the graph. When a vertex<space/><italics>v</italics><space/>is added, we split in three the triangle that contains<space/><italics>v</italics>, then we apply the flip algorithm. Done naively, this will take O(<italics>n</italics>) time: we search through all the triangles to find the one that contains<space/><italics>v</italics>, then we potentially flip away every triangle. Then the overall runtime is O(<italics>n</italics><xhtml:sup>2</xhtml:sup>).</paragraph><paragraph>If we insert vertices in random order, it turns out (by a somewhat intricate proof) that each insertion will flip, on average, only O(1) triangles although sometimes it will flip many more.<extension extension_name='ref'><template><target>cite journal</target><arg name="last"><space/>Guibas
<space/></arg><arg name="first"><space/>L.<space/></arg><arg name="author2">D. Knuth<space/></arg><arg name="author3">M. Sharir
<space/></arg><arg name="title"><space/>Randomized incremental construction of Delaunay and Voronoi diagrams
<space/></arg><arg name="journal"><space/>Algorithmica
<space/></arg><arg name="volume"><space/>7
<space/></arg><arg name="pages"><space/>381–413
<space/></arg><arg name="year"><space/>1992
<space/></arg><arg name="url"><space/>http://www.springerlink.com/content/p8377h68j82l6860
<space/></arg><arg name="doi"><space/>10.1007/BF01758770</arg></template></extension>This still leaves the point location time to improve. We can store the history of the splits and flips performed: each triangle stores a pointer to the two or three triangles that replaced it. To find the triangle that contains<space/><italics>v</italics>, we start at a root triangle, and follow the pointer that points to a triangle that contains<space/><italics>v</italics>, until we find a triangle that has not yet been replaced. On average, this will also take O(log<space/><italics>n</italics>) time. Over all vertices, then, this takes O(<italics>n</italics><space/>log<space/><italics>n</italics>) time.<extension extension_name='ref' name="deBerg"></extension><space/>While the technique extends to higher dimension (as proved by Edelsbrunner and Shah<extension extension_name='ref'><template><target>cite journal</target><arg name="last"><space/>Edelsbrunner
<space/></arg><arg name="first"><space/>Herbert
<space/></arg><arg name="authorlink"><space/>Herbert Edelsbrunner
<space/></arg><arg name="author2">Nimish Shah
<space/></arg><arg name="title"><space/>Incremental Topological Flipping Works for Regular Triangulations
<space/></arg><arg name="journal"><space/>Algorithmica
<space/></arg><arg name="volume"><space/>15
<space/></arg><arg name="pages"><space/>223–241
<space/></arg><arg name="year"><space/>1996
<space/></arg><arg name="url"><space/>http://www.springerlink.com/content/4gdja72vx1qmg44x/?p</arg><arg name="doi"><space/>10.1007/BF01975867
<space/></arg><arg name="issue"><space/>3</arg></template></extension>), the runtime can be exponential in the dimension even if the final Delaunay triangulation is small.</paragraph><paragraph>The<space/><link><target>BowyerWatson algorithm</target></link><space/>provides another approach for incremental construction. It gives an alternative to edge flipping for computing the Delaunay triangles containing a newly inserted vertex.</paragraph><heading level='3'>Divide and conquer</heading><paragraph>A<space/><link><target>divide and conquer algorithm</target></link><space/>for triangulations in two dimensions is due to Lee and Schachter which was improved by<space/><link><target>Leonidas J. Guibas</target><part>Guibas</part></link><space/>and<space/><link><target>Jorge Stolfi</target><part>Stolfi</part></link><extension extension_name='ref'><link type='external' href='http://www.geom.uiuc.edu/~samuelp/del_project.html'>Computing Constrained Delaunay Triangulations</link></extension><space/>and later by Dwyer. In this algorithm, one recursively draws a line to split the vertices into two sets. The Delaunay triangulation is computed for each set, and then the two sets are merged along the splitting line. Using some clever tricks, the merge operation can be done in time O(<italics>n</italics>), so the total running time is O(<italics>n</italics>&amp;nbsp;log&amp;nbsp;<italics>n</italics>).<extension extension_name='ref' name="Leach1992"><template><target>cite paper</target><arg name="first"><space/>G.<space/></arg><arg name="last"><space/>Leach<space/></arg><arg name="title"><space/>''Improving Worst-Case Optimal Delaunay Triangulation Algorithms.''<space/></arg><arg name="id"><space/>{{citeseerx|10.1.1.56.2323}}<space/></arg><arg name="date">June 1992<space/></arg></template></extension></paragraph><paragraph>For certain types of point sets, such as a uniform random distribution, by intelligently picking the splitting lines the expected time can be reduced to O(<italics>n</italics>&amp;nbsp;log&amp;nbsp;log&amp;nbsp;<italics>n</italics>) while still maintaining worst-case performance.</paragraph><paragraph>A divide and conquer paradigm to performing a triangulation in<space/><italics>d</italics><space/>dimensions is presented in &quot;DeWall: A fast divide and conquer Delaunay triangulation algorithm in E<xhtml:sup><italics>d</italics></xhtml:sup>&quot; by P. Cignoni, C. Montani, R. Scopigno.<extension extension_name='ref'><template><target>cite journal</target><arg name="last"><space/>Cignoni<space/></arg><arg name="first"><space/>P.<space/></arg><arg name="author2">C. Montani<space/></arg><arg name="author3">R. Scopigno<space/></arg><arg name="year"><space/>1998<space/></arg><arg name="title"><space/>DeWall: A fast divide and conquer Delaunay triangulation algorithm in E<sup>d</sup><space/></arg><arg name="journal"><space/>Computer-Aided Design<space/></arg><arg name="volume"><space/>30<space/></arg><arg name="issue"><space/>5<space/></arg><arg name="pages"><space/>333–341<space/></arg><arg name="doi"><space/>10.1016/S0010-4485(97)00082-1<space/></arg></template></extension></paragraph><paragraph>Divide and conquer has been shown to be the fastest DT generation technique.<extension extension_name='ref'>A Comparison of Sequential Delaunay Triangulation Algorithms http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf</extension><extension extension_name='ref'>http://www.cs.cmu.edu/~quake/tripaper/triangle2.html</extension></paragraph><heading level='3'>Sweepline</heading><paragraph><link><target>Fortune's algorithm</target></link><space/>uses a<space/><link><target>sweepline</target></link><space/>technique to achieve O(<italics>n</italics>&amp;nbsp;log&amp;nbsp;<italics>n</italics>) runtime in the planar case.</paragraph><heading level='3'>Sweephull</heading><paragraph>Sweephull<extension extension_name='ref'><link type='external' href='http://www.s-hull.org/paper/s_hull.pdf'>S-hull</link></extension><space/>is a hybrid technique for 2D Delaunay triangulation that uses a radially propagating sweep-hull (sequentially created from the radially sorted set of 2D points, giving a non-overlapping triangulation), paired with a nal iterative triangle ipping step.An accurate integer arithmetic variant of the algorithm is also presented.</paragraph><heading level='2'>Applications</heading><paragraph>The<space/><link><target>Euclidean minimum spanning tree</target></link><space/>of a set of points is a subset of the Delaunay triangulation of the same points, and this can be exploited to compute it efficiently.</paragraph><paragraph>For modelling terrain or other objects given a set of sample points, the Delaunay triangulation gives a nice set of triangles to use as polygons in the model. In particular, the Delaunay triangulation avoids narrow triangles (as they have large circumcircles compared to their area). See<space/><link><target>triangulated irregular network</target></link>.</paragraph><paragraph>Delaunay triangulations can be used to determine the density or intensity of points samplings by means of the<space/><link><target>Delaunay tessellation field estimator</target><part>DTFE</part></link>.</paragraph><paragraph><link><target>Image:Delaunay Triangulation (100 Points).svg</target><part>right</part><part>thumb</part><part>250px</part><part>The Delaunay triangulation of a random set of 100 points in a plane.</part></link>Delaunay triangulations are often used to build meshes for space-discretised solvers such as the<space/><link><target>finite element method</target></link><space/>and the<space/><link><target>finite volume method</target></link><space/>of physics simulation, because of the angle guarantee and because fast triangulation algorithms have been developed. Typically, the domain to be meshed is specified as a coarse<space/><link><target>simplicial complex</target></link>; for the mesh to be numerically stable, it must be refined, for instance by using<space/><link><target>Ruppert's algorithm</target></link>.</paragraph><paragraph>The increasing popularity of<space/><link><target>finite element method</target></link><space/>and<space/><link><target>boundary element method</target></link><space/>techniques increases the incentive to improve automatic meshing algorithms. However, all of these algorithms can create distorted and even unusable grid elements. Fortunately, several techniques exist which can take an existing mesh and improve its quality. For example, smoothing (also referred to as mesh refinement) is one such method, which repositions nodal locations so as to minimize element distortion. The<space/><link><target>stretched grid method</target></link><space/>allows the generation of pseudo-regular meshes that meet the Delaunay criteria easily and quickly in a one-step solution.</paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Beta skeleton</target></link></listitem><listitem><link><target>Constrained Delaunay triangulation</target></link></listitem><listitem><link><target>Delaunay tessellation field estimator</target></link></listitem><listitem><link><target>Gabriel graph</target></link></listitem><listitem><link><target>Gradient pattern analysis</target></link></listitem><listitem><link><target>Pitteway triangulation</target></link></listitem><listitem><link><target>Urquhart graph</target></link></listitem><listitem><link><target>Voronoi diagram</target></link></listitem><listitem><link><target>Convex hull algorithms</target></link></listitem><listitem><link><target>Quasitriangulation</target></link></listitem></list><heading level='2'>References</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem>Delaunay triangulation in<space/><link><target>CGAL</target></link>, the Computational Geometry Algorithms Library:<list type='bullet'><listitem><template><target>cite web</target><arg name="last"><space/>Yvinec<space/></arg><arg name="first"><space/>Mariette
<space/></arg><arg name="title"><space/>2D Triangulation
<space/></arg><arg name="url"><space/>http://www.cgal.org/Pkg/Triangulation2
<space/></arg><arg name="accessdate"><space/>April 2010
</arg></template></listitem><listitem><template><target>cite web</target><arg name="last1"><space/>Pion<space/></arg><arg name="first1"><space/>Sylvain
<space/></arg><arg name="last2"><space/>Teillaud<space/></arg><arg name="first2"><space/>Monique
<space/></arg><arg name="title"><space/>3D Triangulations
<space/></arg><arg name="url"><space/>http://www.cgal.org/Pkg/Triangulation3
<space/></arg><arg name="accessdate"><space/>April 2010
</arg></template></listitem><listitem><template><target>cite web</target><arg name="last1"><space/>Hornus<space/></arg><arg name="first1"><space/>Samuel
<space/></arg><arg name="last2"><space/>Devillers<space/></arg><arg name="first2"><space/>Olivier
<space/></arg><arg name="last3"><space/>Jamin<space/></arg><arg name="first3"><space/>Clément
<space/></arg><arg name="title"><space/>dD Triangulations
<space/></arg><arg name="url"><space/>http://www.cgal.org/Pkg/Triangulations
</arg></template></listitem><listitem><template><target>cite web</target><arg name="last1"><space/>Hert<space/></arg><arg name="first"><space/>Susan
<space/></arg><arg name="last2"><space/>Seel<space/></arg><arg name="first2"><space/>Michael
<space/></arg><arg name="title"><space/>dD Convex Hulls and Delaunay Triangulations
<space/></arg><arg name="url"><space/>http://www.cgal.org/Pkg/ConvexHullD
<space/></arg><arg name="accessdate"><space/>April 2010
</arg></template></listitem></list></listitem><listitem><template><target>cite web</target><arg name="title"><space/>Delaunay triangulation
<space/></arg><arg name="publisher"><space/>Wolfram MathWorld
<space/></arg><arg name="url"><space/>http://mathworld.wolfram.com/DelaunayTriangulation.html
<space/></arg><arg name="accessdate"><space/>April 2010
</arg></template></listitem><listitem><template><target>cite web</target><arg name="title"><space/>Qhull
<space/></arg><arg name="url"><space/>http://www.qhull.org
<space/></arg><arg name="accessdate"><space/>April 2010
</arg></template><space/>&amp;mdash; Code for Convex Hull, Delaunay Triangulation, Voronoi Diagram, and Halfspace Intersection</listitem><listitem><template><target>cite web</target><arg name="last"><space/>Shewchuk<space/></arg><arg name="first"><space/>Jonathan Richard
<space/></arg><arg name="title"><space/>Triangle
<space/></arg><arg name="url"><space/>http://www.cs.cmu.edu/~quake/triangle.html
<space/></arg><arg name="accessdate"><space/>April 2010
</arg></template><space/>A Two-Dimensional Quality Mesh Generator and Delaunay Triangulator</listitem><listitem><template><target>cite web</target><arg name="last1"><space/>Kumar<space/></arg><arg name="first1"><space/>Piyush
<space/></arg><arg name="last2"><space/>Mohanty<space/></arg><arg name="first2"><space/>Somya
<space/></arg><arg name="title"><space/>Triangle++
<space/></arg><arg name="url"><space/>http://www.compgeom.com/~piyush/scripts/triangle/
</arg></template><space/>A C++ wrapper on Triangle</listitem><listitem><template><target>cite web</target><arg name="title"><space/>Poly2Tri
<space/></arg><arg name="url"><space/>http://code.google.com/p/poly2tri/
<space/></arg><arg name="publisher"><space/>Google Code
<space/></arg><arg name="accessdate"><space/>April 2010
</arg></template><space/>A sweepline Constrained Delaunay Triangulation (CDT) library, available in ActionScript 3, C, C++, C#, Go, Haxe, Java, Javascript, Python and Ruby<space/></listitem><listitem><link type='external' href='https://code.google.com/p/daedalus-lib/'>Daedalus Lib</link><space/>Open Source. Daedalus Lib manages fully dynamic constrained Delaunay triangulations.</listitem><listitem><template><target>cite web</target><arg name="title"><space/>Robust Divide & Conquer Delaunay
<space/></arg><arg name="url"><space/>https://github.com/eloraiby/delaunay
<space/></arg><arg name="accessdate"><space/>May 2015
</arg></template></listitem></list><paragraph><template><target>DEFAULTSORT:Delaunay Triangulation</target></template><link><target>Category:Triangulation (geometry)</target></link></paragraph></article>