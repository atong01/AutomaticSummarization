<article title='COBOL'><paragraph><template><target>about</target><arg>the compiled programming language</arg></template><template><target>good article</target></template><template><target>Use American English</target><arg name="date">October 2014</arg></template><template><target>Infobox programming language</target><arg name="name"><space/>COBOL
</arg><arg name="logo">
</arg><arg name="paradigm"><space/>[[Procedural programming|procedural]], [[imperative programming|imperative]], [[Object-oriented programming|object-oriented]]
</arg><arg name="year"><space/>{{Start date and age|1959}}
</arg><arg name="designers"><space/>{{nowrap|Howard Bromberg}}, {{nowrap|Howard Discount}}, {{nowrap|Vernon Reeves}}, {{nowrap|[[Jean E. Sammet]]}}, {{nowrap|William Selden}}, {{nowrap|Gertrude Tierney}}
</arg><arg name="developers"><space/>[[CODASYL]], [[ANSI]], [[ISO]]
</arg><arg name="latest release version"><space/>ISO/IEC 1989:2014
</arg><arg name="latest release date"><space/>2014
</arg><arg name="typing"><space/>[[weak typing|weak]], [[static typing|static]]
</arg><arg name="implementations"><space/>{{nowraplinks|[[GnuCOBOL]], [[IBM COBOL]]}}, {{nowrap|[[Micro Focus]] Visual COBOL}}
</arg><arg name="dialects"><space/>ACUCOBOL-GT, COBOL-IT, COBOL/2, DEC COBOL-10, DEC VAX COBOL, DOSVS COBOL, Fujitsu COBOL, Hitachi COBOL2002, HP3000 COBOL/II, IBM COBOL SAA, IBM COBOL/400, IBM COBOL/II, IBM Enterprise COBOL, IBM ILE COBOL, IBM OS/VS COBOL, ICL COBOL, isCOBOL, Micro Focus COBOL, Microsoft COBOL, Realia COBOL, Ryan McFarland RM/COBOL, Ryan McFarland RM/COBOL-85, Tandem (NonStop) COBOL85, Tandem (NonStop) SCOBOL, UNIVAC COBOL, Unisys MCP COBOL74, Unisys MCP COBOL85, Unix COBOL X/Open, Visual COBOL, Wang VS COBOL
</arg><arg name="influenced_by"><space/>[[AIMACO]], [[C++]],{{efn|name</arg><arg name="influenced"><space/>CobolScript,<ref>{{cite conference | title</arg><arg name="file_ext"><space/><code>.cbl</code>,<space/><code>.cob</code>,<space/><code>.cpy</code>
</arg><arg name="wikibooks"><space/>COBOL
</arg></template><bold>COBOL</bold><space/>(<template><target>IPAc-en</target><arg>ˈ</arg><arg>k</arg><arg>oʊ</arg><arg>b</arg><arg>ɒ</arg><arg>l</arg></template>, an<space/><link><target>acronym</target></link><space/>for<space/><italics>co</italics>mmon<space/><italics>b</italics>usiness-<italics>o</italics>riented<space/><italics>l</italics>anguage) is a<space/><link><target>compiled</target></link><space/>English-like<space/><link><target>computer programming language</target></link><space/>designed for business use. It is<space/><link><target>imperative programming</target><part>imperative</part></link>,<space/><link><target>procedural programming</target><part>procedural</part></link><space/>and, since 2002,<space/><link><target>object-oriented programming</target><part>object-oriented</part></link>. COBOL is primarily used in business, finance, and administrative systems for companies and governments. In 1997,<space/><link><target>Gartner Group</target></link><space/>estimated that there were a total of 200 billion lines of COBOL in existence, which ran 80% of all business programs.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://fcw.com/Articles/2009/07/13/TECH-COBOL-turns-50.aspx<space/></arg><arg name="title">Cobol remains old standby at agencies despite showing its age<space/></arg><arg name="publisher">Public Sector Media Group<space/></arg><arg name="work">FCW<space/></arg><arg name="accessdate">26 April 2014<space/></arg><arg name="date">9 July 2009<space/></arg><arg name="last">Robinson<space/></arg><arg name="first">Brian</arg></template></extension><template><target>better source</target><arg name="reason">While this claim is ubiquitous, the actual Gartner report is needed to verify the claim.<space/></arg><arg name="date">January 2015</arg></template><space/>COBOL is still widely used in legacy applications deployed on<space/><link><target>mainframe computer</target><trail>s</trail></link>, such as large-scale<space/><link><target>batch processing</target><part>batch</part></link><space/>and<space/><link><target>transaction processing</target></link><space/>jobs. But due to its declining popularity and the retirement of experienced COBOL programmers, programs are being migrated to new platforms, rewritten in modern languages or replaced with software packages.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.computerworld.com/article/2502420/data-center/brain-drain-where-cobol-systems-go-from-here.html<space/></arg><arg name="title">Brain drain: Where Cobol systems go from here<space/></arg><arg name="work">Computerworld<space/></arg><arg name="date">14 March 2012<space/></arg><arg name="accessdate">9 February 2015<space/></arg><arg name="first">Robert L.<space/></arg><arg name="last">Mitchell</arg></template></extension><space/>Most programming in COBOL is now purely to maintain existing applications.<extension extension_name='ref' name="Computerworld Not Dead Yet"></extension></paragraph><paragraph>COBOL was designed in 1959, by the<space/><link><target>Conference on Data Systems Languages</target></link><space/>(CODASYL) and was partly based on previous programming language design work by<space/><link><target>Grace Hopper</target></link>, commonly referred to as &quot;the (grand)mother of COBOL&quot;.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Captain Grace M. Hopper: the Mother of COBOL<space/></arg><arg name="journal">InfoWorld<space/></arg><arg name="volume">3<space/></arg><arg name="issue">20<space/></arg><arg name="page">33<space/></arg><arg name="first">Vicki<space/></arg><arg name="last">Porter Adams<space/></arg><arg name="date">5 October 1981<space/></arg><arg name="issn">0199-6649</arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Grace Hopper, mother of Cobol, dies<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">26<space/></arg><arg name="issue">1<space/></arg><arg name="page">14<space/></arg><arg name="first">Mitch<space/></arg><arg name="last">Betts<space/></arg><arg name="date">6 Jan 1992<space/></arg><arg name="issn">0010-4841</arg></template></extension><extension extension_name='ref'><template><target>cite book</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Go To: The Story of the Math Majors, Bridge Players, Engineers, Chess Wizards, Maverick Scientists, and Iconoclasts--The Programmers Who Created the Software Revolution<space/></arg><arg name="publisher">[[Basic Books]]<space/></arg><arg name="year">2008<space/></arg><arg name="page">52<space/></arg><arg name="isbn">978-0786730766<space/></arg><arg name="first">Steve<space/></arg><arg name="last">Lohr</arg></template></extension><space/>It was created as part of a<space/><link><target>US Department of Defense</target></link><space/>effort to create a<space/><link><target>Software portability</target><part>portable</part></link><space/>programming language for data processing. Intended as a stopgap, the Department of Defense promptly forced computer manufacturers to provide it, resulting in its widespread adoption.<extension extension_name='ref'><template><target>cite book</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">The Computer Boys Take Over: Computers, Programmers, and the Politics of Technical Expertise<space/></arg><arg name="publisher">[[MIT Press]]<space/></arg><arg name="year">2009<space/></arg><arg name="page">100<space/></arg><arg name="isbn">978-0262050937<space/></arg><arg name="first">Nathan L.<space/></arg><arg name="last">Ensmenger<space/></arg><arg name="lccn">2009052638</arg></template></extension><space/>It was<space/><link><target>standardized</target></link><space/>in 1968 and has since been revised four times. Expansions include support for<space/><link><target>structured programming</target><part>structured</part></link><space/>and<space/><link><target>object-oriented programming</target><part>object-oriented</part></link><space/>programming. The current standard is<space/><italics><link><target>ISO</target></link>/<link><target>International Electrotechnical Commission</target><part>IEC</part></link><space/>1989:2014</italics>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber</arg><arg name="title">ISO/IEC 1989:2014<space/></arg><arg name="publisher">ISO<space/></arg><arg name="date">26 May 2014<space/></arg><arg name="accessdate">7 June 2014</arg></template></extension></paragraph><paragraph>COBOL has an English-like syntax, which was designed to be self-documenting and highly readable. However, it is verbose and uses over 300<space/><link><target>reserved word</target><trail>s</trail></link>. In contrast with modern, succinct syntax like<space/><template><target>code</target><arg name="1">y<space/></arg><arg name="lang">c</arg></template>, COBOL has a more English-like syntax (in this case,<space/><template><target>code</target><arg>MOVE x TO y</arg><arg name="lang">cobolfree</arg></template>).COBOL code is split into four divisions (identification, environment, data and procedure) containing a rigid hierarchy of sections, paragraphs and sentences. Lacking a large<space/><link><target>standard library</target></link>, the standard specifies 43 statements, 87 functions and just one class.</paragraph><paragraph>Academic computer scientists were generally uninterested in business applications when COBOL was created and were not involved in its design.COBOL has been criticized throughout its life for its verbosity, design process and poor support for<space/><link><target>structured programming</target></link>, which resulted in monolithic and incomprehensible programs.</paragraph><heading level='2'>History and specification</heading><heading level='3'>Background</heading><paragraph>In the late 1950s, computer users and manufacturers were becoming concerned about the rising cost of programming. A 1959 survey had found that in any data processing installation, the programming cost US$800,000 on average and that translating programs to run on new hardware would cost $600,000. At a time when new<space/><link><target>Timeline of programming languages</target><part>programming languages were proliferating</part></link><space/>at an ever increasing rate, the same survey suggested that if a common business-oriented language were used, conversion would be far cheaper and faster.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">282</arg></template></paragraph><paragraph><link><target>File:Grace Hopper.jpg</target><part>thumb</part><part>alt=caption</part><part><link><target>Grace Hopper</target></link>, the inventor of<space/><link><target>FLOW-MATIC</target></link>, a predecessor to COBOL</part></link></paragraph><paragraph>In April 1959, representatives from academia, computer users and manufacturers met at the<space/><link><target>University of Pennsylvania</target></link><space/>to organize a formal meeting on common business languages. Representatives among others, included<space/><link><target>Grace Hopper</target></link>, inventor of the English-like data processing language<space/><link><target>FLOW-MATIC</target></link>,<space/><link><target>Jean Sammet</target></link><space/>and<space/><link><target>Saul Gorn</target></link>.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="pp">281–282</arg></template><template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">200</arg></template></paragraph><paragraph>The group asked the<space/><link><target>United States Department of Defense</target><part>Department of Defense</part></link><space/>(DoD) to sponsor an effort to create a common business language. The delegation impressed Charles A. Phillips, director of the Data System Research Staff at the DoD, who thought that they &quot;thoroughly understood&quot; the DoD's problems. The DoD operated 225 computers, had a further 175 on order and had spent over $200 million on implementing programs to run on them. Portable programs would save time, reduce costs and ease modernization.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">283</arg></template></paragraph><paragraph>Phillips agreed to sponsor the meeting and tasked the delegation with drafting the agenda.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">284</arg></template></paragraph><heading level='3'>COBOL 60</heading><paragraph>On May 28 and 29 of 1959 (exactly one year after the Zrich<space/><link><target>ALGOL 58</target></link><space/>meeting), a meeting was held at the Pentagon to discuss the creation of a common programming language for business. It was attended by 41 people and was chaired by Phillips.<extension extension_name='ref'><template><target>Cite journal</target><arg name="doi"><space/>10.1109/MAHC.1985.10047</arg><arg name="title"><space/>Early Meetings of the Conference on Data Systems Languages</arg><arg name="journal"><space/>IEEE Annals of the History of Computing</arg><arg name="volume"><space/>7</arg><arg name="issue"><space/>4</arg><arg name="pages"><space/>316</arg><arg name="year"><space/>1985</arg></template></extension><space/>The Department of Defense was concerned about whether it could run the same data processing programs on different computers.<space/><link><target>FORTRAN</target></link>, the only mainstream language at the time, lacked the features needed to write such programs.<template><target>sfn</target><arg>Sammet</arg><arg>2004</arg><arg name="p">104</arg></template></paragraph><paragraph>Representatives enthusiastically described a language that could work in a wide variety of environments, from banking and insurance to utilities and inventory control. They agreed unanimously that more people should be able to program and that the new language should not be restricted by the limitations of contemporary technology. A majority agreed that the language should make maximal use of English, be capable of change, be machine-independent and be easy to use, even at the expense of power.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">286</arg></template></paragraph><paragraph>The meeting resulted in the creation of a<space/><link><target>steering committee</target></link><space/>and short-, intermediate- and long-range committees. The short-range committee was given to September (three months) to produce specifications for an interim language, which would then be improved upon by the other committees.<template><target>sfn</target><arg>Conner</arg><arg>1984</arg><arg name="p">ID/9</arg></template><template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">201</arg></template><space/>Their official mission, however, was to identify the strengths and weaknesses of existing programming languages and did not explicitly direct them to create a new language.<template><target>sfn</target><arg>Sammet</arg><arg>2004</arg><arg name="p">104</arg></template>The deadline was met with disbelief by the short-range committee.<template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">132</arg></template>One member,<space/><link><target>Betty Holberton</target></link>, described the three-month deadline as &quot;gross optimism&quot; and doubted that the language really would be a stopgap.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">288</arg></template></paragraph><paragraph>The steering committee met on June 4 and agreed to name the entire activity as the<space/><italics>Committee on Data Systems Languages</italics>, or<space/><link><target>CODASYL</target></link>, and to form an executive committee.<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">203</arg></template></paragraph><paragraph>The short-range committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were<space/><link><target>Burroughs Corporation</target></link>,<space/><link><target>IBM</target></link>,<space/><link><target>Honeywell</target><part>Minneapolis-Honeywell</part></link><space/>(Honeywell Labs),<space/><link><target>RCA</target></link>,<space/><link><target>Sperry Rand</target></link>, and<space/><link><target>Sylvania Electric Products</target></link>. The three government agencies were the<space/><link><target>US Air Force</target></link>, the Navy's<space/><link><target>David Taylor Model Basin</target></link>, and the<space/><link><target>National Bureau of Standards</target></link><space/>(now the National Institute of Standards and Technology).<template><target>sfn</target><arg>CODASYL</arg><arg>1969</arg><arg name="loc">§ I.2.1.1</arg></template><space/>The committee was chaired by<space/><link><target>Joseph Wegstein</target></link><space/>of the US National Bureau of Standards. Work began by investigating data description, statements, existing applications and user experiences.<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">204</arg></template></paragraph><paragraph>The committee mainly examined the<space/><link><target>FLOW-MATIC</target></link>,<space/><link><target>AIMACO</target></link><space/>and<space/><link><target>COMTRAN</target></link><space/>programming languages.<template><target>sfn</target><arg>Sammet</arg><arg>2004</arg><arg name="p">104</arg></template><template><target>sfn</target><arg>CODASYL</arg><arg>1969</arg><arg name="loc">§ I.1.2</arg></template>The FLOW-MATIC language was particularly influential because it had been implemented and because AIMACO was a derivative of it with only minor changes.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">290</arg></template><extension extension_name='ref' name="cisn"><template><target>cite journal</target><arg name="last"><space/>Sammet<space/></arg><arg name="first"><space/>Jean<space/></arg><arg name="authorlink"><space/>Jean Sammet<space/></arg><arg name="title"><space/>The Early History of COBOL<space/></arg><arg name="journal"><space/>ACM SIGPLAN Notices<space/></arg><arg name="volume"><space/>13<space/></arg><arg name="issue"><space/>8<space/></arg><arg name="pages"><space/>121–161<space/></arg><arg name="publisher"><space/>Association for Computing Machinery, Inc.<space/></arg><arg name="year"><space/>1978<space/></arg><arg name="url">http://portal.acm.org/citation.cfm?id</arg><arg name="doi">10.1145/960118.808378<space/></arg><arg name="accessdate"><space/>14 January 2010</arg></template></extension>FLOW-MATIC's inventor, Grace Hopper, also served as a technical adviser to the committee.<template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">132</arg></template><space/>FLOW-MATIC's major contributions to COBOL were long variable names, English words for commands and the separation of data descriptions and instructions.<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">217</arg></template></paragraph><paragraph>IBM's COMTRAN language, invented by<space/><link><target>Bob Bemer</target></link>, was regarded as a competitor to FLOW-MATIC<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">292</arg></template><template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">131</arg></template><space/>by a short-range committee made up of colleagues of Grace Hopper.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">296</arg></template>Some of its features were not incorporated into COBOL so that it would not look like IBM had dominated the design process,<template><target>sfn</target><arg>Conner</arg><arg>1984</arg><arg name="p">ID/9</arg></template><space/>and Jean Sammet said in 1981 that there had been a &quot;strong anti-IBM bias&quot; from some committee members (herself included).<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">221</arg></template>In one case, after Roy Goldfinger, author of the COMTRAN manual and intermediate-range committee member, attended a subcommittee meeting to support his language and encourage the use of algebraic expressions, Grace Hopper sent a memo to the short-range committee reiterating Sperry Rand's efforts to create a language based on English.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">291</arg></template>In 1980, Grace Hopper commented that &quot;COBOL 60 is 95% FLOW-MATIC&quot; and that COMTRAN had had an &quot;extremely small&quot; influence. Furthermore, she said that she would claim that work was influenced by both FLOW-MATIC and COMTRAN only to &quot;keep other people happy [so they] wouldn't try to knock us out&quot;.<extension extension_name='ref' name="Hopper Oral History"><template><target>cite web</target><arg name="url">http://archive.computerhistory.org/resources/text/Oral_History/Hopper_Grace/102702026.05.01.pdf<space/></arg><arg name="title">Oral History of Captain Grace Hopper<space/></arg><arg name="publisher">[[Computer History Museum]]<space/></arg><arg name="date">December 1980<space/></arg><arg name="accessdate">28 June 2014<space/></arg><arg name="format">PDF<space/></arg><arg name="page">37</arg></template></extension>Features from COMTRAN incorporated into COBOL included formulas,<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">218</arg></template><space/>the<space/><link><target>#PICTURE clause</target><part><template><target>code</target><arg>PICTURE</arg></template><space/>clause</part></link>,<template><target>sfn</target><arg>Marcotty</arg><arg>1978</arg><arg name="p">268</arg></template><space/>an improved<space/><xhtml:code>IF</xhtml:code><space/>statement, which obviated the need for<space/><link><target>GO TO</target><trail>s</trail></link>, and a more robust file management system.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">292</arg></template></paragraph><paragraph>The usefulness of the committee's work was subject of great debate. While some members thought the language had too many compromises and was the result of design by committee, others felt it was better than the three languages examined. Some felt the language was too complex; others, too simple.<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="pp">205–206</arg></template>Controversial features included those some considered useless or too advanced for data processing users. Such features included<space/><link><target>boolean expression</target><trail>s</trail></link>,<space/><link><target>formula</target><trail>s</trail></link><space/>and table<space/><italics><template><target>dfn</target><arg>subscripts</arg></template></italics><space/>(indices).<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="loc">Figure 8</arg></template><template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="pp">230–231</arg></template><space/>Another point of controversy was whether to make keywords context-sensitive and the effect that would have on readability.<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="loc">Figure 8</arg></template><space/>Although context-sensitive keywords were rejected, the approach was later used in<space/><link><target>PL/I</target></link><space/>and partially in COBOL from 2002.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2001</arg><arg name="p">846</arg></template><space/>Little consideration was given to<space/><link><target>interactivity</target></link>, interaction with<space/><link><target>operating system</target><trail>s</trail></link><space/>(few existed at that time) and functions (thought of as purely mathematical and of no use in data processing).<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">220</arg></template><template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">228</arg></template></paragraph><paragraph>The specifications were presented to the Executive Committee on September 4. They fell short of expectations: Joseph Wegstein noted that &quot;it contains rough spots and requires some additions&quot;, and Bob Bemer later described them as a &quot;hodgepodge&quot;. The subcommittee was given until December to improve it.<template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">132</arg></template></paragraph><paragraph>At a mid-September meeting, the committee discussed the new language's name. Suggestions included &quot;BUSY&quot; (Business System), &quot;INFOSYL&quot; (Information System Language) and &quot;COCOSYL&quot; (Common Computer Systems Language).<template><target>sfn</target><arg>Sammet</arg><arg>1978a</arg><arg name="p">210</arg></template><space/>The name &quot;COBOL&quot; was suggested by Bob Bemer.<extension extension_name='ref'><template><target>cite news</target><arg name="url">http://www.washingtonpost.com/wp-dyn/articles/A4138-2004Jun24.html<space/></arg><arg name="title">Computer Pioneer Bob Bemer, 84<space/></arg><arg name="work">The Washington Post<space/></arg><arg name="date">25 June 2004<space/></arg><arg name="accessdate">28 June 2014<space/></arg><arg name="page">B06<space/></arg><arg name="first">Patricia<space/></arg><arg name="last">Sullivan</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.bobbemer.com/<space/></arg><arg name="title">Thoughts on the Past and Future<space/></arg><arg name="accessdate">28 June 2014<space/></arg><arg name="first">Bob<space/></arg><arg name="last">Bemer<space/></arg><arg name="deadurl">no<space/></arg><arg name="archiveurl">http://web.archive.org/web/20140516214531/http://bobbemer.com/<space/></arg><arg name="archivedate">16 May 2014</arg></template></extension></paragraph><paragraph>In October, the intermediate-range committee received copies of the<space/><link><target>FACT (computer language)</target><part>FACT</part></link><space/>language specification created by<space/><link><target>Roy Nutt</target></link>. Its features impressed the committee so much that they passed a resolution to base COBOL on it.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">293</arg></template>This was a blow to the short-range committee, who had made good progress on the specification. Despite being technically superior, FACT had not been created with portability in mind or through manufacturer and user consensus. It also lacked a demonstrable implementation,<template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">132</arg></template><space/>allowing supporters of a FLOW-MATIC-based COBOL to overturn the resolution. RCA representative Howard Bromberg also blocked FACT, so that RCA's work on a COBOL implementation would not go to waste.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">294</arg></template></paragraph><paragraph><template><target>quotebox</target><arg name="quote"><poem>
'And what name do you want inscribed?'
I said, 'I'll write it for you.' I wrote the name down: COBOL.
'What kind of name is that?'
'Well it's a Polish name. We shortened it and got rid of a lot of unnecessary notation.'
</poem>
<space/></arg><arg name="source">Howard Bromberg on how he bought the COBOL tombstone<ref name</arg><arg name="quoted">1
</arg></template></paragraph><paragraph>It soon became apparent that the committee was too large for any further progress to be made quickly. A frustrated Howard Bromberg bought a $15 tombstone with &quot;COBOL&quot; engraved on it and sent it to Charles Phillips to demonstrate his displeasure.<template><target>efn</target><arg name="The tombstone is currently at the [[Computer History Museum]].<ref>{{cite web | title">COBOL Tombstone | url</arg></template><extension extension_name='ref' name="Tombstone story"></extension><template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">130</arg></template>A sub-committee was formed to analyze existing languages and was made up of six individuals:<template><target>sfn</target><arg>Sammet</arg><arg>2004</arg><arg name="p">104</arg></template><template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">289</arg></template></paragraph><list type='bullet'><listitem>William Selden and Gertrude Tierney of IBM,</listitem><listitem>Howard Bromberg and Howard Discount of RCA,</listitem><listitem>Vernon Reeves and<space/><link><target>Jean E. Sammet</target></link><space/>of Sylvania Electric Products.</listitem></list><paragraph>The sub-committee did most of the work creating the specification, leaving the short-range committee to review and modify their work before producing the finished specification.<template><target>sfn</target><arg>Sammet</arg><arg>2004</arg><arg name="p">104</arg></template></paragraph><paragraph><link><target>File:COBOL Report Apr60.djvu</target><part>thumb</part><part>alt=COBOL. Report to Conference on Data Systems Languages including initial specifications for a Common Business Oriented Language (COBOL) for programming digital electronic computers. Department of Defense, April 1960.</part><part>The cover of the ''COBOL 60'' report</part></link></paragraph><paragraph>The specifications were approved by the Executive Committee on January 3, 1960, and sent to the government printing office, which printed these as<space/><italics>COBOL 60</italics>. The language's stated objectives were to allow efficient, portable programs to be easily written, to allow users to move to new systems with minimal effort and cost, and to be suitable for inexperienced programmers.<template><target>sfn</target><arg>CODASYL</arg><arg>1969</arg><arg name="loc">§ I.1.1</arg></template>The CODASYL Executive Committee later created the COBOL Maintenance Committee to answer questions from users and vendors and to improve and expand the specifications.<template><target>sfn</target><arg>Brown</arg><arg>1976</arg><arg name="p">47</arg></template></paragraph><paragraph>During 1960, the list of manufacturers planning to build COBOL compilers grew. By September, five more manufacturers had joined CODASYL (<link><target>Bendix Corporation</target><part>Bendix</part></link>,<space/><link><target>Control Data Corporation</target></link>,<space/><link><target>General Electric</target></link><space/>(GE),<space/><link><target>National Cash Register</target></link><space/>and<space/><link><target>Philco</target></link>), and all represented manufacturers had announced COBOL compilers. GE and IBM planned to integrate COBOL into their own languages, GECOM and COMTRAN, respectively. In contrast,<space/><link><target>International Computers and Tabulators</target></link><space/>planned to replace their language, CODEL, with COBOL.<template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">133</arg></template></paragraph><paragraph>Meanwhile, RCA and Sperry Rand worked on creating COBOL compilers. The first COBOL program ran on 17 August on an RCA 501.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">297</arg></template>On December 6 and 7, the same COBOL program (albeit with minor changes) ran on an RCA computer and a Remington-Rand<space/><link><target>Univac</target></link><space/>computer, demonstrating that compatibility could be achieved.<extension extension_name='ref' name="Williams12"><template><target>cite book</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Grace Hopper: Admiral of the Cyber Sea<space/></arg><arg name="publisher">US Naval Institute Press<space/></arg><arg name="isbn">978-1612512655<space/></arg><arg name="date">10 November 2012<space/></arg><arg name="last">Williams<space/></arg><arg name="first">Kathleen Broome<space/></arg><arg name="oclc">818867202</arg></template></extension></paragraph><paragraph>The relative influences of which languages were used continues to this day in the recommended advisory printed in all COBOL reference manuals:<template><target>quote</target><arg>COBOL is an industry language and is not the property of any company or group of companies, or of any organization or group of organizations.
No warranty, expressed or implied, is made by any contributor or by the CODASYL COBOL Committee as to the accuracy and functioning of the
programming system and language. Moreover, no responsibility is assumed by any contributor, or by the committee, in connection therewith. The authors and copyright holders of the copyrighted material used herein are as follows:

:FLOW-MATIC (trademark of Unisys Corporation), Programming for the UNIVAC (R) I and II, Data Automation Systems, copyrighted 1958, 1959, by Unisys Corporation; IBM Commercial Translator Form No. F28-8013, copyrighted 1959 by IBM; FACT, DSI 27A5260-2760, copyrighted 1960 by Minneapolis-Honeywell.
They have specifically authorized the use of this material, in whole or in part, in the COBOL specifications. Such authorization extends to the reproduction and use of COBOL specifications in programming manuals or similar publications.<ref>Compaq Computer Corporation: ''Compaq COBOL Reference Manual'', Order Number: AA–Q2G0F–TK October 2000, Page xviii; Fujitsu Corporation: ''Net Cobol Language Reference'', Version 15, January 2009; IBM Corporation: ''Enterprise COBOL for z/OS Language Reference'', Version 4 Release 1, SC23-8528-00, December 2007</ref></arg></template></paragraph><heading level='3'>COBOL-61 to COBOL-65</heading><paragraph><template><target>quotebox</target><arg name="quote">It is rather unlikely that Cobol will be around by the end of the decade.
<space/></arg><arg name="width">30%
<space/></arg><arg name="qouted">1
<space/></arg><arg name="source">Anonymous, June 1960<ref>{{cite journal | url</arg></template></paragraph><paragraph>Many logical flaws were found in<space/><italics>COBOL 60</italics>, leading GE's<space/><link><target>Charles Katz</target></link><space/>to warn that it could not be interpreted unambiguously. A reluctant short-term committee enacted a total cleanup and, by March 1963, it was reported that COBOL's syntax was as definable as<space/><link><target>ALGOL</target></link>'s, although semantic ambiguities remained.<template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">133</arg></template></paragraph><paragraph>Early COBOL compilers were primitive and slow. A 1962 US Navy evaluation found compilation speeds of 311 statements per minute. By mid-1964, they had increased to 111000 statements per minute. It was observed that increasing memory would drastically increase speed and that compilation costs varied wildly: costs per statement were between $0.23 and $18.91.<template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">134</arg></template></paragraph><paragraph>In late 1962, IBM announced that COBOL would be their primary development language and that development of COMTRAN would cease.<template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">134</arg></template></paragraph><paragraph>The COBOL specification was revised three times in the five years after its publication.COBOL-60 was replaced in 1961 by COBOL-61. This was then replaced by the COBOL-61 Extended specifications in 1963, which introduced the sort and report writer facilities.<template><target>sfn</target><arg>Brown</arg><arg>1976</arg><arg name="p">48</arg></template>The added facilities corrected flaws identified by Honeywell in late 1959 in a letter to the short-range committee.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">297</arg></template>COBOL Edition 1965 brought further clarifications to the specifications and introduced facilities for handling<space/><link><target>mass storage</target></link><space/>files and<space/><link><target>table (information)</target><part>tables</part></link>.<template><target>sfn</target><arg>CODASYL</arg><arg>1969</arg><arg name="loc">§ I.2.2.4</arg></template></paragraph><heading level='3'>COBOL-68</heading><paragraph>Efforts began to standardize COBOL to overcome incompatibilities between versions. In late 1962, both ISO and the United States of America Standards Institute (now<space/><link><target>ANSI</target></link>) formed groups to create standards. ANSI produced<space/><italics>USA Standard COBOL X3.23</italics><space/>in August 1968, which became the cornerstone for later versions.<template><target>sfn</target><arg>CODASYL</arg><arg>1969</arg><arg name="loc">§ I.2.3</arg></template><space/>This version was known as American National Standard (ANS) COBOL and was adopted by ISO in 1972.<extension extension_name='ref' name="FS2003"><template><target>cite book</target><arg name="url">http://dl.acm.org/citation.cfm?id</arg><arg name="title">Programming language standards<space/></arg><arg name="work">Encyclopedia of Computer Science<space/></arg><arg name="publisher">Wiley<space/></arg><arg name="year">2003<space/></arg><arg name="page">1467<space/></arg><arg name="isbn">0470864125<space/></arg><arg name="last1">Follet<space/></arg><arg name="first1">Robert H.<space/></arg><arg name="last2">Sammet<space/></arg><arg name="first2">Jean E.<space/></arg><arg name="authorlink2">Jean E. Sammet<space/></arg><arg name="edition">4th<space/></arg><arg name="editor1-first">Anthony<space/></arg><arg name="editor1-last">Ralston<space/></arg><arg name="editor2-first">Edwin D.<space/></arg><arg name="editor2-last">Reilly<space/></arg><arg name="editor3-first">David<space/></arg><arg name="editor3-last">Hemmendinger</arg></template></extension></paragraph><heading level='3'>COBOL-74</heading><paragraph>By 1970, COBOL had become the most widely used programming language in the world.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">301</arg></template></paragraph><paragraph>Independently of the ANSI committee, the CODASYL Programming Language Committee was working on improving the language. They described new versions in 1968, 1969, 1970 and 1973, including changes such as new inter-program communication, debugging and file merging facilities as well as improved string-handling and<space/><link><target>library (computing)</target><part>library</part></link><space/>inclusion features.<template><target>sfn</target><arg>Brown</arg><arg>1976</arg><arg name="p">49</arg></template>Although CODASYL was independent of the ANSI committee, the<space/><italics>CODASYL Journal of Development</italics><space/>was used by ANSI to identify features that were popular enough to warrant implementing.<template><target>sfn</target><arg>Brown</arg><arg>1976</arg><arg name="p">52</arg></template>The Programming Language Committee also liaised with<space/><link><target>Ecma International</target><part>ECMA</part></link><space/>and the Japanese COBOL Standard committee.<template><target>sfn</target><arg>Brown</arg><arg>1976</arg><arg name="p">49</arg></template></paragraph><paragraph>The Programming Language Committee was not well-known, however. The vice-president, William Rinehuls, complained that two-thirds of the COBOL community did not know of the committee's existence. It was also poor, lacking the funds to make public documents, such as minutes of meetings and change proposals, freely available.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">https://books.google.co.uk/books?id</arg><arg name="title">Few Realise Wasted Resources of Local DP Schools<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">6<space/></arg><arg name="issue">31<space/></arg><arg name="pages">11<space/></arg><arg name="first">Alan<space/></arg><arg name="last">Taylor<space/></arg><arg name="date">2 August 1972</arg></template></extension></paragraph><paragraph>In 1974, ANSI published a revised version of (ANS) COBOL, containing new features such as<space/><link><target>COBOL#Files</target><part>file organizations</part></link>, the<space/><template><target>code</target><arg>DELETE</arg></template><space/>statement<extension extension_name='ref'><template><target>cite book</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Programming in COBOL: A Course of Twelve Television Lectures<space/></arg><arg name="publisher">Manchester University Press<space/></arg><arg name="year">1974<space/></arg><arg name="page">87<space/></arg><arg name="isbn">0719005922<space/></arg><arg name="last">Triance<space/></arg><arg name="first">J. M.</arg></template></extension><space/>and the<space/><link><target>memory segmentation</target><part>segmentation</part></link><space/>module.<template><target>sfn</target><arg>Klein</arg><arg>2010</arg><arg name="p">16</arg></template>Deleted features included the<space/><template><target>code</target><arg>NOTE</arg></template><space/>statement, the<space/><template><target>code</target><arg>EXAMINE</arg></template><space/>statement (which was replaced by<space/><template><target>code</target><arg>INSPECT</arg></template>) and the implementer-defined random access module (which was superseded by the new sequential and relative I/O modules). These made up 44 changes, which rendered existing statements incompatible with the new standard.<extension extension_name='ref'><template><target>cite techreport</target><arg name="url">http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf<space/></arg><arg name="title">Programming Language Standards — Who Needs Them?<space/></arg><arg name="date">May 1977<space/></arg><arg name="accessdate">7 January 2014<space/></arg><arg name="pages">19–21<space/></arg><arg name="first1">George N.<space/></arg><arg name="last1">Baird<space/></arg><arg name="first2">Paul<space/></arg><arg name="last2">Oliver<space/></arg><arg name="section">1974 Standard (X3.23–1974)<space/></arg><arg name="archiveurl">https://web.archive.org/web/20140107192439/http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf<space/></arg><arg name="archivedate">7 January 2014<space/></arg><arg name="deadurl">no</arg></template></extension>The report writer was slated to be removed from COBOL, but was reinstated before the standard was published.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">'Spotty' Availability A Problem...<space/></arg><arg name="page">17<space/></arg><arg name="date">23 July 1975<space/></arg><arg name="last">Culleton, John R., Jr.<space/></arg><arg name="work">Computerworld<space/></arg><arg name="issn">0010-4841<space/></arg><arg name="volume">9<space/></arg><arg name="issue">30</arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Does Cobol's Report Writer Really Miss the Mark?<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">9<space/></arg><arg name="issue">25<space/></arg><arg name="page">20<space/></arg><arg name="first">Williams B.<space/></arg><arg name="last">Simmons<space/></arg><arg name="date">18 June 1975<space/></arg><arg name="issn">0010-4841</arg></template></extension><space/>ISO later adopted the updated standard in 1978.<extension extension_name='ref' name="FS2003"></extension></paragraph><heading level='3'>COBOL-85</heading><paragraph>In June 1978, work began on revising COBOL-74. The proposed standard (commonly called COBOL-80) differed significantly from the previous one, causing concerns about incompatibility and conversion costs. In January 1981, Joseph T. Brophy, Senior Vice-President of Travelers Insurance, threatened to sue the standard committee because it was not<space/><link><target>forward compatibility</target><part>upwards compatible</part></link><space/>with COBOL-74. Mr. Brophy described previous conversions of their 40-million-line code base as &quot;non-productive&quot; and a &quot;complete waste of our programmer resources&quot;.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">User Threatens Suit Over Ansi Cobol-80<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">15<space/></arg><arg name="issue">4<space/></arg><arg name="pages">1, 8<space/></arg><arg name="first">Rita<space/></arg><arg name="last">Shoor<space/></arg><arg name="issn">0010-4841<space/></arg><arg name="date">26 January 1981</arg></template></extension>Later that year, the<space/><link><target>Data Processing Management Association</target></link><space/>(DPMA) said it was &quot;strongly opposed&quot; to the new standard, citing &quot;prohibitive&quot; conversion costs and enhancements that were &quot;forced on the user&quot;.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">DPMA Takes Stand Against Cobol Draft<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">15<space/></arg><arg name="issue">43<space/></arg><arg name="pages">1–2<space/></arg><arg name="date">26 October 1981<space/></arg><arg name="first">Rita<space/></arg><arg name="last">Shoor<space/></arg><arg name="issn">0010-4841</arg></template></extension><extension extension_name='ref' name="Computerworld 19 37"><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Revised Cobol standard may be ready in late '85<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">19<space/></arg><arg name="issue">37<space/></arg><arg name="pages">1, 8<space/></arg><arg name="first">John<space/></arg><arg name="last">Gallant<space/></arg><arg name="date">16 September 1985<space/></arg><arg name="issn">0010-4841</arg></template></extension></paragraph><paragraph>During the first public review period, the committee received 2,200 responses, of which 1,700 were negative form letters.<extension extension_name='ref' name="Computerworld Garfunkel"><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Expert addresses Cobol 85 standard<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">19<space/></arg><arg name="issue">37<space/></arg><arg name="pages">41, 48<space/></arg><arg name="author"><space/></arg><arg name="date">16 September 1985<space/></arg><arg name="issn">0010-4841</arg></template></extension>Other responses were detailed analyses of the effect COBOL-80 would have on their systems; conversion costs were predicted to be at least 50 cents per line of code. Fewer than a dozen of the responses were in favor of the proposed standard.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Responses to Cobol-80 Overwhelmingly Negative<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">16<space/></arg><arg name="issue">11<space/></arg><arg name="pages">1, 5<space/></arg><arg name="date">15 March 1982<space/></arg><arg name="first">Lois<space/></arg><arg name="last">Paul<space/></arg><arg name="issn">0010-4841</arg></template></extension></paragraph><paragraph>In 1983, the DPMA withdrew its opposition to the standard, citing the responsiveness of the committee to public concerns. In the same year, a National Bureau of Standards study concluded that the proposed standard would present few problems.<extension extension_name='ref' name="Computerworld 19 37"></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="url">https://books.google.co.uk/books?id</arg><arg name="title">Study Sees Few Problems Switching to Cobol-8X<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">17<space/></arg><arg name="issue">17<space/></arg><arg name="pages">1, 6<space/></arg><arg name="first">Lois<space/></arg><arg name="last">Paul<space/></arg><arg name="date">25 April 1983</arg></template></extension><space/>A year later, a COBOL-80 compiler was released to<space/><link><target>DEC VAX</target></link><space/>users, who noted that conversion of COBOL-74 programs posed few problems. The new<space/><xhtml:code>EVALUATE</xhtml:code><space/>statement and inline<space/><xhtml:code>PERFORM</xhtml:code><space/>were particularly well received and improved productivity, thanks to simplified<space/><link><target>control flow</target></link><space/>and<space/><link><target>debugging</target></link>.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">DEC users get head start implementing Cobol-80<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">18<space/></arg><arg name="issue">47<space/></arg><arg name="pages">1, 6<space/></arg><arg name="first">Paul<space/></arg><arg name="last">Gillin<space/></arg><arg name="date">19 November 1984<space/></arg><arg name="issn">0010-4841</arg></template></extension></paragraph><paragraph>The second public review drew another 1,000 (mainly negative) responses, while the last drew just 25, by which time many concerns had been addressed.<extension extension_name='ref' name="Computerworld 19 37"></extension></paragraph><paragraph>In late 1985, ANSI published the revised standard. 60 features were changed or deprecated and many<template><target>quantify</target><arg name="date">March 2014</arg></template><space/>were added, such as:<template><target>sfn</target><arg>Garfunkel</arg><arg>1987</arg><arg name="p">150</arg></template><extension extension_name='ref'><template><target>cite book</target><arg name="url">https://books.google.co.uk/books?id</arg><arg name="title">COBOL Programming: Problems and Solutions<space/></arg><arg name="publisher">McGraw-Hill Education<space/></arg><arg name="pages">438–451<space/></arg><arg name="isbn">978-0074603185<space/></arg><arg name="first1">M. K.<space/></arg><arg name="last1">Roy<space/></arg><arg name="first2">D. Ghost<space/></arg><arg name="last2">Dastidar<space/></arg><arg name="date">1 June 1989<space/></arg><arg name="edition">2nd<space/></arg><arg name="section">Features of COBOL-85</arg></template></extension></paragraph><list type='bullet'><listitem>scope terminators (<xhtml:code>END-IF</xhtml:code>,<space/><xhtml:code>END-PERFORM</xhtml:code>,<space/><xhtml:code>END-READ</xhtml:code>, etc.)</listitem><listitem>nested subprograms</listitem><listitem><xhtml:code>CONTINUE</xhtml:code>, a<space/><link><target>Placeholder (Computer syntax)</target><part>no-operation statement</part></link></listitem><listitem><xhtml:code>EVALUATE</xhtml:code>, a<space/><link><target>switch statement</target></link></listitem><listitem><xhtml:code>INITIALIZE</xhtml:code>, a statement that can set groups of data to their default values</listitem><listitem>inline<space/><xhtml:code>PERFORM</xhtml:code><space/>loop bodies previously, loop bodies had to be specified in a separate procedure</listitem><listitem>reference modification, which allows access to substrings</listitem><listitem>I/O status codes</listitem></list><paragraph>The standard was adopted by ISO the same year.<extension extension_name='ref' name="FS2003"></extension><space/>Two amendments followed in 1989 and 1993, the first introducing intrinsic functions and the other providing corrections. ISO adopted the amendments in 1991 and 1994 respectively,<extension extension_name='ref' name="FS2003"></extension><space/>before subsequently taking primary ownership and development of the standard.</paragraph><heading level='3'>COBOL 2002 and object-oriented COBOL</heading><paragraph>In the early 1990s, work began on adding object-orientation in the next full revision of COBOL. Object-oriented features were taken from<space/><link><target>C++</target></link><space/>and<space/><link><target>Smalltalk</target></link>.<extension extension_name='ref' name="SW95"><template><target>cite web</target><arg name="url">http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9510/9510e/9510e.htm<space/></arg><arg name="title">COBOL '97: A Status Report<space/></arg><arg name="work">Dr. Dobb's Journal<space/></arg><arg name="date">October 1995<space/></arg><arg name="accessdate">21 April 2014<space/></arg><arg name="last1">Saade<space/></arg><arg name="first1">Henry<space/></arg><arg name="first2">Ann<space/></arg><arg name="last2">Wallace</arg></template></extension><extension extension_name='ref' name="Arranga98"><template><target>cite book</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Object-Oriented COBOL<space/></arg><arg name="publisher">[[Cambridge University Press]]<space/></arg><arg name="page">15<space/></arg><arg name="isbn">978-0132611404<space/></arg><arg name="first1">Edmund C.<space/></arg><arg name="last1">Arranga<space/></arg><arg name="first2">Frank P.<space/></arg><arg name="last2">Coyle<space/></arg><arg name="date">February 1998<space/></arg><arg name="quote">Object-Oriented COBOL's style reflects the influence of Smalltalk and C++.</arg></template></extension>The initial estimate was to have this revision completed by 1997, and an ISO Committee Draft (CD) was available by 1997. Some vendors (including<space/><link><target>Micro Focus International</target><part>Micro Focus</part></link>,<space/><link><target>Fujitsu</target></link>, and<space/><link><target>IBM</target></link>) introduced object-oriented syntax based on drafts of the full revision. The final approved ISO standard was approved and published in late 2002.<extension extension_name='ref' name="cobolstandards.com"><template><target>cite web</target><arg name="url">http://www.cobolstandards.com/<space/></arg><arg name="title">COBOL Standards<space/></arg><arg name="accessdate">2 September 2014<space/></arg><arg name="archiveurl">https://web.archive.org/web/20040331054413/http://www.cobolstandards.com/<space/></arg><arg name="archivedate">31 March 2004<space/></arg><arg name="publisher">Micro Focus<space/></arg><arg name="deadurl">yes</arg></template></extension></paragraph><paragraph>Fujitsu/GTSoftware,<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.netcobol.com/product/netcobol-for-net/<space/></arg><arg name="title">NetCOBOL for .Net<space/></arg><arg name="publisher">GTSoftware<space/></arg><arg name="work">netcobol.com<space/></arg><arg name="year">2013<space/></arg><arg name="accessdate">29 January 2014<space/></arg><arg name="deadurl">yes<space/></arg><arg name="archiveurl">https://web.archive.org/web/20140708210107/http://www.netcobol.com/product/netcobol-for-net/<space/></arg><arg name="archivedate">8 July 2014</arg></template></extension><space/>Micro Focus and<space/><link><target>RainCode</target></link><space/>introduced object-oriented COBOL compilers targeting the<space/><link><target>.NET Framework</target></link>.</paragraph><paragraph>There were many other new features, many of which had been in the<space/><italics>CODASYL COBOL Journal of Development</italics><space/>since 1978 and had missed the opportunity to be included in COBOL-85.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">A list of Codasyl Cobol features<space/></arg><arg name="work">Computerworld<space/></arg><arg name="date">10 September 1984<space/></arg><arg name="accessdate">8 June 2014<space/></arg><arg name="author"><space/></arg><arg name="page">ID/28<space/></arg><arg name="issn">0010-4841<space/></arg><arg name="volume">18<space/></arg><arg name="issue">37</arg></template></extension><space/>These other features included:<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2001</arg><arg name="loc">Annex F</arg></template><template><target>sfn</target><arg>Klein</arg><arg>2010</arg><arg name="p">21</arg></template></paragraph><list type='bullet'><listitem>free-form code</listitem><listitem><link><target>user-defined function</target><trail>s</trail></link></listitem><listitem><link><target>recursion</target></link></listitem><listitem><link><target>locale</target></link>-based processing</listitem><listitem>support for extended character sets such as<space/><link><target>Unicode</target></link></listitem><listitem><link><target>floating-point</target></link><space/>and<space/><link><target>binary number</target><part>binary</part></link><space/>data types (until then, binary items were truncated based on their declaration's<space/><link><target>base-10</target></link><space/>specification)</listitem><listitem>portable arithmetic results</listitem><listitem><link><target>bit</target></link><space/>and<space/><link><target>Boolean data type</target><part>boolean</part></link><space/>data types</listitem><listitem><link><target>pointer (computer programming)</target><part>pointers</part></link><space/>and syntax for getting and freeing storage</listitem><listitem>the<space/><template><target>code</target><arg>SCREEN SECTION</arg></template><space/>for<space/><link><target>text-based user interface</target><trail>s</trail></link></listitem><listitem>the<space/><template><target>code</target><arg>VALIDATE</arg></template><space/>facility</listitem><listitem>improved interoperability with other programming languages and<space/><link><target>Application framework</target><part>framework environments</part></link><space/>such as .NET and<space/><link><target>Java (platform)</target><part>Java</part></link>.</listitem></list><paragraph>Three<space/><link><target>Erratum</target><part>corrigenda</part></link><space/>were published for the standard: two in 2006 and one in 2009.<extension extension_name='ref' name="WG4 Website"><template><target>cite web</target><arg name="url">http://www.cobolstandard.info/wg4/wg4.html<space/></arg><arg name="title">JTC1/SC22/WG4 - COBOL<space/></arg><arg name="publisher">ISO<space/></arg><arg name="date">30 June 2010<space/></arg><arg name="accessdate">27 April 2014</arg></template></extension></paragraph><heading level='3'>COBOL 2014</heading><paragraph>Between 2003 and 2009, three technical reports were produced describing<space/><link><target>finalizer</target><part>object finalization</part></link>,<space/><link><target>XML</target></link><space/>processing and<space/><link><target>collection class</target><trail>es</trail></link><space/>for COBOL.<extension extension_name='ref' name="WG4 Website"></extension></paragraph><paragraph>COBOL 2002 suffered from poor support: no compilers completely supported the standard. Micro Focus found that it was due to a lack of user demand for the new features and due to the abolition of the<space/><link><target>NIST</target></link><space/>test suite, which had been used to test compiler conformance. The standardization process was also found to be slow and under-resourced.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.cobolstandard.info/j4/files/08-0034.pdf<space/></arg><arg name="title">Thoughts on the Future of COBOL Standardization<space/></arg><arg name="date">27 February 2008<space/></arg><arg name="accessdate">14 August 2014<space/></arg><arg name="format">PDF<space/></arg><arg name="first1">John<space/></arg><arg name="last1">Billman<space/></arg><arg name="first2">Huib<space/></arg><arg name="last2">Klink</arg></template></extension></paragraph><paragraph>COBOL 2014 includes the following changes:<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">Annex E</arg></template></paragraph><list type='bullet'><listitem>Portable arithmetic results have been replaced by<space/><link><target>IEEE 754</target></link><space/>data types</listitem><listitem>Major features have been made optional, such as object-orientation, the<space/><xhtml:code>VALIDATE</xhtml:code><space/>facility, the report writer and the screen-handling facility.</listitem><listitem>Method overloading</listitem><listitem>Dynamic capacity tables (a feature dropped from the draft of COBOL 2002)<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.microfocus.com/Standards/<space/></arg><arg name="title">J4: COBOL Standardization<space/></arg><arg name="publisher">Micro Focus<space/></arg><arg name="date">2 December 1998<space/></arg><arg name="accessdate">12 July 2014<space/></arg><arg name="archiveurl">https://web.archive.org/web/19990224043617/http://www.microfocus.com/Standards/<space/></arg><arg name="archivedate">24 February 1999<space/></arg><arg name="deadurl">yes<space/></arg><arg name="first">Don<space/></arg><arg name="last">Schricker</arg></template></extension></listitem></list><heading level='3'>Legacy</heading><paragraph>COBOL programs are used globally in governments and businesses and are running on diverse operating systems such as<space/><link><target>z/OS</target></link>,<space/><link><target>ICL VME</target><part>VME</part></link>,<space/><link><target>Unix</target></link><space/>and<space/><link><target>Microsoft Windows</target><part>Windows</part></link>. In 1997, the<space/><link><target>Gartner Group</target></link><space/>reported that 80% of the world's business ran on COBOL with over 200 billion lines of code and 5 billion lines more being written annually.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://proc.isecon.org/2000/126/ISECON.2000.Kizior.pdf<space/></arg><arg name="title">Does COBOL Have a Future?<space/></arg><arg name="accessdate">2012-09-30<space/></arg><arg name="first1">Ronald J.<space/></arg><arg name="last1">Kizior<space/></arg><arg name="first2">Donald<space/></arg><arg name="last2">Carr<space/></arg><arg name="first3">Paul<space/></arg><arg name="last3">Halpern<space/></arg><arg name="journal">The Proceedings of the Information Systems Education Conference 2000<space/></arg><arg name="volume">17<space/></arg><arg name="issue">126</arg></template></extension></paragraph><paragraph>Near the end of the 20th century, the<space/><link><target>year 2000 problem</target></link><space/>(Y2K) was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required to correct COBOL code has been attributed<template><target>by whom</target><arg name="date">March 2014</arg></template><space/>to the large amount of business-oriented COBOL, as business applications use dates heavily, and to fixed-length data fields. After the clean-up effort put into these programs for Y2K, a 2003 survey found that many remained in use.<template><target>sfn</target><arg>Carr</arg><arg>Kizior</arg><arg>2003</arg><arg name="p">16</arg></template>The authors said that the survey data suggest &quot;a gradual decline in the importance of Cobol in application development over the [following] 10 years unless ... integration with other languages and technologies can be adopted&quot;.<template><target>sfn</target><arg>Carr</arg><arg>Kizior</arg><arg>2003</arg><arg name="p">10</arg></template></paragraph><paragraph>In 2006 and 2012,<space/><italics><link><target>Computerworld</target></link></italics><space/>surveys found that over 60% of organizations used COBOL (more than<space/><link><target>C++</target></link><space/>and<space/><link><target>Visual Basic .NET</target></link>) and that for half of those, COBOL was used for the majority of their internal software.<extension extension_name='ref' name="Computerworld Not Dead Yet"><template><target>cite web</target><arg name="url">http://www.computerworld.com/s/article/266156/Cobol_Not_Dead_Yet<space/></arg><arg name="title">Cobol: Not Dead Yet<space/></arg><arg name="work">Computerworld<space/></arg><arg name="date">4 October 2006<space/></arg><arg name="accessdate">27 April 2014<space/></arg><arg name="last">Mitchell<space/></arg><arg name="first">Robert L.</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.computerworld.com/s/article/9225099/Cobol_brain_drain_Survey_results<space/></arg><arg name="title">Cobol brain drain: Survey results<space/></arg><arg name="work">Computerworld<space/></arg><arg name="date">14 March 2012<space/></arg><arg name="accessdate">27 April 2014<space/></arg><arg name="author"></arg></template></extension><space/>36% of managers said they planned to migrate from COBOL, and 25% said they would like to if it was cheaper. Instead, some businesses have migrated their systems from expensive mainframes to cheaper, more modern systems, while maintaining their COBOL programs.<extension extension_name='ref' name="Computerworld Not Dead Yet"></extension></paragraph><heading level='2'>Features</heading><heading level='3'>Syntax</heading><paragraph>COBOL has an English-like syntax, which is used to describe nearly everything in a program. For example, a condition can be expressed as &amp;nbsp;<template><target>code</target><arg>x IS GREATER THAN y</arg><arg name="lang">cobolfree</arg></template><space/>or more concisely as &amp;nbsp;<template><target>code</target><arg>x GREATER y</arg><arg name="lang">cobolfree</arg></template>&amp;nbsp; or &amp;nbsp;<template><target>code</target><arg>x ><space/>y</arg><arg name="lang">cobolfree</arg></template>. More complex conditions can be &quot;abbreviated&quot; by removing repeated conditions and variables. For example, &amp;nbsp;<template><target>code</target><arg name="1">a ><space/>b AND a ><space/>c OR a<space/></arg><arg name="lang">cobolfree</arg></template>&amp;nbsp; can be shortened to<space/><template><target>code</target><arg name="1">a ><space/>b AND c OR<space/></arg><arg name="lang">cobolfree</arg></template>. As a consequence of this English-like syntax, COBOL has over 300<space/><link><target>keyword (computer programming)</target><part>keywords</part></link>.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 8.9</arg></template><template><target>efn</target><arg name="Vendor-specific extensions cause many implementations to have far more: one implementation recognizes over 1,100 keywords.<ref>{{cite web | url">http://documentation.microfocus.com/help/topic/com.microfocus.eclipse.infocenter.visualcobol.vs2013/HRLHLHARES01U005.html | title</arg></template><space/>Some of the keywords are simple alternative or pluralized spellings of the same word, which provides for more English-like statements and clauses; e.g., the<space/><template><target>code</target><arg>IN</arg></template><space/>and<space/><template><target>code</target><arg>OF</arg></template><space/>keywords can be used interchangeably, as can<space/><template><target>code</target><arg>IS</arg></template><space/>and<space/><template><target>code</target><arg>ARE</arg></template>, and<space/><template><target>code</target><arg>VALUE</arg></template><space/>and<space/><template><target>code</target><arg>VALUES</arg></template>.</paragraph><paragraph>Each COBOL program is made up of four basic<space/><link><target>lexical items</target></link>: words, literals, picture character-strings (see<space/><template><target>slink</target><arg></arg><arg>PICTURE clause</arg></template>) and separators. Words include reserved words and user-defined identifiers. They are up to 31 characters long and may include letters, digits, hyphens and underscores. Literals include numerals (e.g.<space/><template><target>code</target><arg>12</arg></template>) and strings (e.g.<space/><template><target>code</target><arg>'Hello!'</arg></template>).<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 8.3.1</arg></template><space/>Separators include the space character and commas and semi-colons followed by a space.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 8.3.2</arg></template></paragraph><paragraph>A COBOL program is split into four divisions: the identification division, the environment division, the data division and the procedure division. The identification division specifies the name and type of the source element and is where classes and interfaces are specified. The environment division specifies any program features that depend on the system running it, such as<space/><link><target>computer files</target><part>files</part></link><space/>and<space/><link><target>character sets</target></link>. The data division is used to declare<space/><link><target>variable (computer science)</target><part>variable</part><trail>s</trail></link><space/>and<space/><link><target>parameter (computer programming)</target><part>parameter</part><trail>s</trail></link>. The procedure division contains the program's<space/><link><target>statement (computer science)</target><part>statement</part><trail>s</trail></link>. Each division is sub-divided into sections, which are made up of paragraphs.</paragraph><heading level='3'>Code format</heading><paragraph>COBOL can be written in two formats: fixed (the default) or free. In fixed-format, code must be aligned to fit in certain areas. Until COBOL 2002, these were:</paragraph><table class="wikitable"><tablerow><tablehead>Name</tablehead><tablehead>Column(s)</tablehead><tablehead>Usage</tablehead></tablerow><tablerow><tablecell>Sequence number area</tablecell><tablecell>16</tablecell><tablecell>Originally used for card/line numbers, this area is ignored by the compiler</tablecell></tablerow><tablerow><tablecell>Indicator area</tablecell><tablecell>7</tablecell><tablecell><paragraph>The following characters are allowed here:</paragraph><list type='bullet'><listitem><xhtml:code><list type='bullet'><listitem></listitem></list></xhtml:code><space/>a comment line</listitem><listitem><xhtml:code>/</xhtml:code><space/>a comment line that will be printed on a new page of a source listing</listitem><listitem><xhtml:code>-</xhtml:code><space/>a continuation line, where words or literals from the previous line are continued</listitem><listitem><xhtml:code>D</xhtml:code><space/>a line enabled in debugging mode, which is otherwise ignored</listitem></list></tablecell></tablerow><tablerow><tablecell>Area A</tablecell><tablecell>811</tablecell><tablecell>This contains:<space/><xhtml:code>DIVISION</xhtml:code>,<space/><xhtml:code>SECTION</xhtml:code><space/>and procedure headers; 01 and 77 level numbers and file/report descriptors</tablecell></tablerow><tablerow><tablecell>Area B</tablecell><tablecell>1272</tablecell><tablecell>Any other code not allowed in Area A</tablecell></tablerow><tablerow><tablecell>Program name area</tablecell><tablecell>73</tablecell><tablecell>Historically up to column 80 for punched cards, it is used to identify the program or sequence the card belongs to</tablecell></tablerow></table><paragraph>In COBOL 2002, Areas A and B were merged and extended to column 255, and the program name area was removed.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2001</arg><arg name="loc">§ F.2</arg></template></paragraph><paragraph>COBOL 2002 also introduced free-format code.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2001</arg><arg name="loc">§ F.2</arg></template><space/>Free-format code can be placed in any column of the file, as in newer programming languages. Comments are specified using<space/><xhtml:code><list type='bullet'><listitem>&gt;</listitem></list></xhtml:code>, which can be placed anywhere and can also be used in fixed-format source code. Continuation lines are not present, and the<space/><xhtml:code>&gt;&gt;PAGE</xhtml:code><space/>directive replaces the<space/><xhtml:code>/</xhtml:code><space/>indicator.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ D.2</arg></template></paragraph><heading level='3'>Identification division</heading><paragraph>The identification division identifies the following code entity and contains the definition of a class or interface.</paragraph><heading level='4'>Object-oriented programming</heading><paragraph><link><target>class (computer programming)</target><part>Classes</part></link><space/>and<space/><link><target>Interface (object-oriented programming)</target><part>interfaces</part></link><space/>have been in COBOL since 2002. Classes have factory objects, containing class<space/><link><target>method (computer programming)</target><part>methods</part></link><space/>and variables, and instance objects, containing instance methods and variables.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ D.18.2</arg></template><space/>Inheritance and interfaces provide<space/><link><target>polymorphism (computer science)</target><part>polymorphism</part></link>. Support for<space/><link><target>generic programming</target></link><space/>is provided through parameterized classes, which can be instantiated to use any class or interface. Objects are stored as references which may be restricted to a certain type. There are two ways of called a method: the<space/><template><target>code</target><arg>INVOKE</arg></template><space/>statement, which acts similarly to<space/><template><target>code</target><arg>CALL</arg></template>, or through inline method invocation, which is analogous to using functions.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ D.18</arg></template></paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobolfree"><list type='bullet'><listitem>&gt; These are equivalent.</listitem></list><paragraph>INVOKE my-class &quot;foo&quot; RETURNING varMOVE my-class::&quot;foo&quot; TO var *&gt; Inline method invocation</paragraph></extension></paragraph><paragraph>COBOL does not provide a way to<space/><link><target>Member visibility</target><part>hide</part></link><space/>methods. Class data can be hidden, however, by declaring it without a<space/><link><target>property (programming)</target><part><template><target>code</target><arg>PROPERTY</arg></template></part></link><space/>clause, which leaves the user with no way to access it.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="p">100</arg></template><space/><link><target>Method overloading</target></link><space/>was added in COBOL 2014.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="p">871</arg></template></paragraph><heading level='3'>Environment division</heading><paragraph>The environment division contains the configuration section and the input-output section. The configuration section is used to specify variable features suchas currency signs, locales and character sets. The input-output section contains file-related information.</paragraph><heading level='4'>Files</heading><paragraph>COBOL supports three file formats, or<space/><italics><template><target>dfn</target><arg>organizations</arg></template></italics>: sequential, indexed and relative. In sequential files, records are contiguous and must be traversed<space/><link><target>sequential access</target><part>sequentially</part></link>, similarly to a<space/><link><target>linked list</target></link>. Indexed files have one or more indexes which allow records to be<space/><link><target>random access</target><part>randomly accessed</part></link><space/>and which can be sorted on them. Each record must have a<space/><link><target>unique key</target></link>, but other,<space/><italics><template><target>dfn</target><arg>alternate</arg></template></italics>, record keys need not be unique. Implementations of indexed files vary between vendors, although common implementations, such as<space/><link><target>C-ISAM</target><part>C&amp;#8209;ISAM</part></link><space/>and<space/><link><target>VSAM</target></link>, are based on IBM's<space/><link><target>ISAM</target></link>. Relative files, like indexed files, have a unique record key, but they do not have alternate keys. A relative record's key is its ordinal position; for example, the 10th record has a key of 10. This means that creating a record with a key of 5 may require the creation of (empty) preceding records. Relative files also allow for both sequential and random access.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ D.2.1</arg></template></paragraph><paragraph>A common non-standard extension is the<space/><italics><template><target>dfn</target><arg>line sequential</arg></template></italics><space/>organization, used to process text files. Records in a file are terminated by a<space/><link><target>newline</target></link><space/>and may be of varying length.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://supportline.microfocus.com/documentation/books/nx30books/fhorgs.htm<space/></arg><arg name="title">File Organizations<space/></arg><arg name="publisher">Micro Focus<space/></arg><arg name="work">File Handling<space/></arg><arg name="date">1998<space/></arg><arg name="accessdate">27 June 2014</arg></template></extension></paragraph><heading level='3'>Data division</heading><paragraph>The data division is split into six sections which declare different items: the file section, for file records; the working-storage section, for<space/><link><target>static variable</target><trail>s</trail></link>; the local-storage section, for<space/><link><target>automatic variable</target><trail>s</trail></link>; the linkage section, for parameters and the return value; the report section and the screen section, for<space/><link><target>text-based user interface</target><trail>s</trail></link>.</paragraph><heading level='4'>Aggregated data</heading><paragraph>Data items in COBOL are declared hierarchically through the use of level-numbers which indicate if a data item is part of another. An item with a higher level-number is subordinate to an item with a lower one. Top-level data items, with a level-number of 1, are called<space/><italics><template><target>dfn</target><arg>records</arg></template></italics>. Items that have subordinate aggregate data are called<space/><italics><template><target>dfn</target><arg>group items</arg></template></italics>; those that do not are called<space/><italics><template><target>dfn</target><arg>elementary items</arg></template></italics>. Level-numbers used to describe standard data items are between 1 and 49.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 8.5.1.2</arg></template><template><target>sfn</target><arg>Cutler</arg><arg>2014</arg><arg name="loc">Appendix A</arg></template></paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobol"><preblock><preline><space/><space/><space/><space/><space/><space/>01 some-record. *&gt; Aggregate group record item</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>05 num PIC 9(10). *&gt; Elementary item</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>05 the-date. *&gt; Aggregate (sub)group record item</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>10 the-year PIC 9(4). *&gt; Elementary item</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>10 the-month PIC 99. *&gt; Elementary item</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>10 the-day PIC 99. *&gt; Elementary item</preline></preblock></extension></paragraph><paragraph>In the above example, elementary item<space/><template><target>code</target><arg>num</arg></template><space/>and group item<space/><template><target>code</target><arg>the-date</arg></template><space/>are subordinate to the record<space/><template><target>code</target><arg>some-record</arg></template>, while elementary items<space/><template><target>code</target><arg>the-year</arg></template>,<space/><template><target>code</target><arg>the-month</arg></template>, and<space/><template><target>code</target><arg>the-day</arg></template><space/>are part of the group item<space/><template><target>code</target><arg>the-date</arg></template>.</paragraph><paragraph>Subordinate items can be disambiguated with the<space/><template><target>code</target><arg>IN</arg></template><space/>(or<space/><template><target>code</target><arg>OF</arg></template>) keyword. For example, consider the example code above along with the following example:<extension extension_name='syntaxhighlight' lang="cobol"><preblock><preline><space/><space/><space/><space/><space/><space/>01 sale-date.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>05 the-year PIC 9(4).</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>05 the-month PIC 99.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>05 the-day PIC 99.</preline></preblock></extension></paragraph><paragraph>The names<space/><template><target>code</target><arg>the-year</arg></template>,<space/><template><target>code</target><arg>the-month</arg></template>, and<space/><template><target>code</target><arg>the-day</arg></template><space/>are ambiguous by themselves, since more than one data item is defined with those names. To specify a particular data item, for instance one of the items contained within the<space/><template><target>code</target><arg>sale-date</arg></template><space/>group, the programmer would use<space/><template><target>code</target><arg>the-year IN sale-date</arg></template><space/>(or the equivalent<space/><template><target>code</target><arg>the-year OF sale-date</arg></template>). (This syntax is similar to the &quot;dot notation&quot; supported by most contemporary languages.)</paragraph><heading level='4'>Other data levels</heading><paragraph>A level-number of 66 is used to declare a re-grouping of previously defined items, irrespective of how those items are structured. This data level, also known referred to by the associated<space/><template><target>dfn</target><arg>{{code|RENAMES}} clause</arg></template>, is rarely used<extension extension_name='ref'><template><target>cite book</target><arg name="title">Sams Teach Yourself COBOL in 24 hours<space/></arg><arg name="publisher">[[Sams|SAMS Publishing]]<space/></arg><arg name="year">1999<space/></arg><arg name="pages">40<space/></arg><arg name="isbn">978-0672314537<space/></arg><arg name="first">Thane<space/></arg><arg name="last">Hubbell<space/></arg><arg name="lccn">98087215</arg></template></extension><space/>and, circa 1988, was usually found in old programs. Its ability to ignore the hierarchical and logical structure data meant its use was not recommended and many installations forbade its use.<template><target>sfn</target><arg>McCracken</arg><arg>Golden</arg><arg>1988</arg><arg name="loc">§ 19.9</arg></template><extension extension_name='syntaxhighlight' lang="cobol"><preblock><preline><space/><space/><space/><space/><space/><space/>01 customer-record.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>05 cust-key PIC X(10).</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>05 cust-name.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>10 cust-first-name PIC X(30).</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>10 cust-last-name PIC X(30).</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>05 cust-dob PIC 9(8).</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>05 cust-balance PIC 9(7)V99.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/></preline><preline><space/><space/><space/><space/><space/><space/>66 cust-personal-details RENAMES cust-name THRU cust-dob.</preline><preline><space/><space/><space/><space/><space/><space/>66 cust-all-details RENAMES cust-name THRU cust-balance.</preline></preblock></extension></paragraph><paragraph>A 77 level-number indicates the item is stand-alone, and in such situations is equivalent to the level-number 01. For example, the following code declares two 77-level data items,<space/><template><target>code</target><arg>property-name</arg></template><space/>and<space/><template><target>code</target><arg>sales-region</arg></template>, which are non-group data items that are independent of (not subordinate to) any other data items:<extension extension_name='syntaxhighlight' lang="cobol"><preblock><preline><space/><space/><space/><space/><space/><space/>77 property-name PIC X(80).</preline><preline><space/><space/><space/><space/><space/><space/>77 sales-region PIC 9(5).</preline></preblock></extension></paragraph><paragraph>An 88 level-number declares a<space/><italics><template><target>dfn</target><arg>condition name</arg></template></italics><space/>(a so-called 88-level) which is true when its parent data item contains one of the values specified in it<space/><template><target>code</target><arg>VALUE</arg></template><space/>clause.<template><target>sfn</target><arg>Cutler</arg><arg>2014</arg><arg name="loc">§ 5.8.5</arg></template><space/>For example, the following code defines two 88-level condition-name items that are true or false depending on the current character data value of the<space/><template><target>code</target><arg>wage-type</arg></template><space/>data item. When the data item contains a value of<space/><template><target>code</target><arg>'H'</arg></template>, the condition-name<space/><template><target>code</target><arg>wage-is-hourly</arg></template><space/>is true, whereas when it contains a value of<space/><template><target>code</target><arg>'S'</arg></template><space/>or<space/><template><target>code</target><arg>'Y'</arg></template>, the condition-name<space/><template><target>code</target><arg>wage-is-yearly</arg></template><space/>is true. If the data item contains some other value, both of the condition-names are false.<extension extension_name='syntaxhighlight' lang="cobol"><preblock><preline><space/><space/><space/><space/><space/><space/>01 wage-type PIC X.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>88 wage-is-hourly VALUE &quot;H&quot;.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>88 wage-is-yearly VALUE &quot;S&quot;, &quot;Y&quot;.</preline></preblock></extension></paragraph><heading level='4'>Data types</heading><paragraph>Standard COBOL provides the following data types:<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 8.5.2</arg></template></paragraph><table class="wikitable"><tablerow><tablehead>Data type</tablehead><tablehead>Sample declaration</tablehead><tablehead>Notes</tablehead></tablerow><tablerow><tablecell>Alphabetic</tablecell><tablecell><template><target>code</target><arg>PIC A(30)</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell>May only contain letters or spaces</tablecell></tablerow><tablerow><tablecell>Alphanumeric</tablecell><tablecell><template><target>code</target><arg>PIC X(30)</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell>May contain any characters</tablecell></tablerow><tablerow><tablecell>Boolean</tablecell><tablecell><template><target>code</target><arg>PIC 1 USAGE BIT</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell>Data stored in the form of 0s and 1s, as a binary number</tablecell></tablerow><tablerow><tablecell>Index</tablecell><tablecell><template><target>code</target><arg>USAGE INDEX</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell>Used to reference table elements</tablecell></tablerow><tablerow><tablecell>National</tablecell><tablecell><template><target>code</target><arg>PIC N(30)</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell>Similar to alphanumeric, but using an extended character set, e.g.<space/><link><target>UTF-8</target></link></tablecell></tablerow><tablerow><tablecell>Numeric</tablecell><tablecell><template><target>code</target><arg>PIC 9(5)V9(5)</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell>May contain only numbers</tablecell></tablerow><tablerow><tablecell>Object</tablecell><tablecell><template><target>code</target><arg>USAGE OBJECT REFERENCE</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell>May reference either an object or<space/><xhtml:code>NULL</xhtml:code></tablecell></tablerow><tablerow><tablecell>Pointer</tablecell><tablecell><template><target>code</target><arg>USAGE POINTER</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell></tablecell></tablerow></table><paragraph>Type safety is variable in COBOL. Numeric data is converted between different representations and sizes silently and alphanumeric data can be placed in any data item that can be stored as a string, including numeric and group data.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 14.9.24</arg></template><space/>In contrast, object references and pointers may only be assigned from items of the same type and their values may be restricted to a certain type.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 14.9.35</arg></template></paragraph><heading level='5'>PICTURE clause</heading><paragraph>A<space/><template><target>code</target><arg>PICTURE</arg></template><space/>(or<space/><template><target>code</target><arg>PIC</arg></template>) clause is a string of characters, each of which represents a portion of the data item and what it may contain. Some picture characters specify the type of the item and how many characters or digits it occupies in memory. For example, a<space/><template><target>code</target><arg>9</arg></template><space/>indicates a decimal digit, and an<space/><template><target>code</target><arg>S</arg></template><space/>indicates that the item is<space/><link><target>signedness</target><part>signed</part></link>. Other picture characters (called<space/><italics><template><target>dfn</target><arg>insertion</arg></template></italics><space/>and<space/><italics><template><target>dfn</target><arg>editing</arg></template></italics><space/>characters) specify how an item should be formatted. For example, a series of<space/><template><target>code</target><arg>+</arg></template><space/>characters define character positions as well as how a leading sign character is to be positioned within the final character data; the rightmost non-numeric character will contain the item's sign, while other character positions corresponding to a<space/><template><target>code</target><arg>+</arg></template><space/>to the left of this position will contain a space. Repeated characters can be specified more concisely by specifying a number in parentheses after a picture character; for example,<space/><template><target>code</target><arg>9(7)</arg></template><space/>is equivalent to<space/><template><target>code</target><arg>9999999</arg></template>. Picture specifications containing only digit (<template><target>code</target><arg>9</arg></template>) and sign (<template><target>code</target><arg>S</arg></template>) characters define purely<space/><italics><template><target>dfn</target><arg>numeric</arg></template></italics><space/>data items, while picture specifications containing alphabetic (<template><target>code</target><arg>A</arg></template>) or alphanumeric (<template><target>code</target><arg>X</arg></template>) characters define<space/><italics><template><target>dfn</target><arg>alphanumeric</arg></template></italics><space/>data items. The presence of other formatting characters define<space/><italics><template><target>dfn</target><arg>edited numeric</arg></template></italics><space/>or<space/><italics><template><target>dfn</target><arg>edited alphanumeric</arg></template></italics><space/>data items.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 13.18.39</arg></template></paragraph><table class="wikitable"><tablecaption>Examples</tablecaption><tablerow><tablehead><template><target>code</target><arg>PICTURE</arg></template><space/>clause</tablehead><tablehead>Value in</tablehead><tablehead>Value out</tablehead></tablerow><tablerow><tablecell rowspan="2"><template><target>code</target><arg>PIC 9(5)</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell><template><target>code</target><arg>100</arg></template></tablecell><tablecell><template><target>code</target><arg>00100</arg></template></tablecell></tablerow><tablerow><tablecell><template><target>code</target><arg>"Hello"</arg></template></tablecell><tablecell><template><target>code</target><arg>"Hello"</arg></template><space/>(this is legal, but results in<space/><link><target>undefined behavior</target></link>)<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 14.9.24</arg></template></tablecell></tablerow><tablerow><tablecell><template><target>code</target><arg>PIC +++++</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell><template><target>code</target><arg>-10</arg></template></tablecell><tablecell><xhtml:code>&quot;&amp;nbsp;&amp;nbsp;-10&quot;</xhtml:code><space/>(note leading spaces)</tablecell></tablerow><tablerow><tablecell><template><target>code</target><arg>PIC 99/99/9(4)</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell><template><target>code</target><arg>31042003</arg></template></tablecell><tablecell><template><target>code</target><arg>"31/04/2003"</arg></template></tablecell></tablerow><tablerow><tablecell rowspan="2"><template><target>code</target><arg>PIC *(4)9.99</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell><template><target>code</target><arg>100.50</arg></template></tablecell><tablecell><template><target>code</target><arg>"**100.50"</arg></template></tablecell></tablerow><tablerow><tablecell><xhtml:code>0</xhtml:code></tablecell><tablecell><template><target>code</target><arg>"****0.00"</arg></template></tablecell></tablerow><tablerow><tablecell><template><target>code</target><arg>PIC X(3)BX(3)BX(3)</arg><arg name="lang">cobolfree</arg></template></tablecell><tablecell><template><target>code</target><arg>"ABCDEFGHI"</arg></template></tablecell><tablecell><template><target>code</target><arg>"ABC DEF GHI"</arg></template></tablecell></tablerow></table><heading level='5'>USAGE clause</heading><paragraph>The<space/><template><target>code</target><arg>USAGE</arg></template><space/>clause declares the format data is stored in. Depending on the data type, it can either complement or be used instead of a<space/><template><target>code</target><arg>PICTURE</arg></template><space/>clause. While it can be used to declare pointers and object references, it is mostly geared towards specifying numeric types. These numeric formats are:<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 13.18.59.3</arg></template></paragraph><list type='bullet'><listitem>Binary, where a minimum size is either specified by the<space/><xhtml:code>PICTURE</xhtml:code><space/>clause or by a<space/><xhtml:code>USAGE</xhtml:code><space/>clause such as<space/><xhtml:code>BINARY-LONG</xhtml:code>.</listitem><listitem><template><target>code</target><arg>USAGE COMPUTATIONAL</arg><arg name="lang">cobolfree</arg></template>, where data may be stored in whatever format the implementation provides; often equivalent to &amp;nbsp;<template><target>code</target><arg>USAGE BINARY</arg><arg name="lang">cobolfree</arg></template></listitem><listitem><template><target>code</target><arg>USAGE DISPLAY</arg><arg name="lang">cobolfree</arg></template>, the default format, where data is stored as a string</listitem><listitem>Floating-point, in either an implementation-dependent format or according to IEEE 754.</listitem><listitem><template><target>code</target><arg>USAGE NATIONAL</arg><arg name="lang">cobolfree</arg></template>, where data is stored as a string using an extended character set</listitem><listitem><template><target>code</target><arg>USAGE PACKED-DECIMAL</arg><arg name="lang">cobolfree</arg></template>, where data is stored in the smallest possible decimal format (typically<space/><link><target>packed binary-coded decimal</target></link>)</listitem></list><heading level='4'>Report writer</heading><paragraph>The report writer is a<space/><link><target>declarative programming</target><part>declarative</part></link><space/>facility for creating reports. The programmer need only specify the report layout and the data required to produce it, freeing them from having to write code to handle things like page breaks, data formatting, and headings and footings.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="p">835</arg></template></paragraph><paragraph>Reports are associated with report files, which are files which may only be written to through report writer statements.</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobol"><preblock><preline><space/><space/><space/><space/><space/><space/>FD report-out REPORT sales-report.</preline></preblock></extension></paragraph><paragraph>Each report is defined in the report section of the data division. A report is split into report groups which define the report's headings, footings and details. Reports work around hierarchical<space/><italics><template><target>dfn</target><arg>control breaks</arg></template></italics>. Control breaks occur when a key variable changes it value; for example, when creating a report detailing customers' orders, a control break could occur when the program reaches a different customer's orders. Here is an example report description for a report which gives a salesperson's sales and which warns of any invalid records:</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobol"><preblock><preline><space/><space/><space/><space/><space/><space/>RD sales-report</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>PAGE LIMITS 60 LINES</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>FIRST DETAIL 3</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>CONTROLS seller-name.</preline></preblock><preblock><preline><space/><space/><space/><space/><space/><space/>01 TYPE PAGE HEADING.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 1 VALUE &quot;Sales Report&quot;.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 74 VALUE &quot;Page&quot;.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 79 PIC Z9 SOURCE PAGE-COUNTER.</preline></preblock><preblock><preline><space/><space/><space/><space/><space/><space/>01 sales-on-day TYPE DETAIL, LINE + 1.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 3 VALUE &quot;Sales on&quot;.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 12 PIC 99/99/9999 SOURCE sales-date.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 21 VALUE &quot;were&quot;.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 26 PIC $$$$9.99 SOURCE sales-amount.</preline></preblock><preblock><preline><space/><space/><space/><space/><space/><space/>01 invalid-sales TYPE DETAIL, LINE + 1.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 3 VALUE &quot;INVALID RECORD:&quot;.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 19 PIC X(34) SOURCE sales-record.</preline></preblock><preblock><preline><space/><space/><space/><space/><space/><space/>01 TYPE CONTROL HEADING seller-name, LINE + 2.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 1 VALUE &quot;Seller:&quot;.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>03 COL 9 PIC X(30) SOURCE seller-name.</preline></preblock></extension></paragraph><paragraph>The above report description describes the following layout:<xhtml:pre><paragraph>Sales Report Page 1</paragraph><paragraph>Seller: Howard Bromberg</paragraph><preblock><preline><space/>Sales on 10/12/2008 were $1000.00</preline><preline><space/>Sales on 12/12/2008 were $0.00</preline><preline><space/>Sales on 13/12/2008 were $31.47</preline><preline><space/>INVALID RECORD: Howard Bromberg XXXXYY</preline></preblock><paragraph>Seller: Howard Discount...Sales Report Page 12</paragraph><preblock><preline><space/>Sales on 08/05/2014 were $543.98</preline><preline><space/>INVALID RECORD: William Selden 12O52014FOOFOO</preline><preline><space/>Sales on 30/05/2014 were $0.00</preline></preblock></xhtml:pre></paragraph><paragraph>Four statements control the report writer:<space/><template><target>code</target><arg>INITIATE</arg></template>, which prepares the report writer for printing;<space/><template><target>code</target><arg>GENERATE</arg></template>, which prints a report group;<space/><template><target>code</target><arg>SUPPRESS</arg></template>, which suppresses the printing of a report group; and<space/><template><target>code</target><arg>TERMINATE</arg></template>, which terminates report processing. For the above sales report example, the procedure division might look like this:</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobol"><preblock><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>OPEN INPUT sales, OUTPUT report-out</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>INITIATE sales-report</preline><preline></preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>PERFORM UNTIL 1 &lt;&gt; 1</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>READ sales</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>AT END</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>EXIT PERFORM</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>END-READ</preline><preline></preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>VALIDATE sales-record</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>IF valid-record</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>GENERATE sales-on-day</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>ELSE</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>GENERATE invalid-sales</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>END-IF</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>END-PERFORM</preline><preline></preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>TERMINATE sales-report</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>CLOSE sales, report-out</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>.</preline></preblock></extension></paragraph><heading level='3'>Procedure division</heading><heading level='4'>Procedures</heading><paragraph>The sections and paragraphs in the procedure division (collectively called procedures) can be used as<space/><link><target>label (programming)</target><part>labels</part></link><space/>and as simple<space/><link><target>subroutines</target></link>. Unlike in other divisions, paragraphs do not need to be in sections.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 14.4</arg></template>Execution goes down through the procedures of a program until it is terminated.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ 14.6.3</arg></template>To use procedures as subroutines, the<space/><template><target>code</target><arg>PERFORM</arg></template><space/>verb is used. This transfers control to the specified range of procedures and returns only upon reaching the end.</paragraph><paragraph><link><target>File:COBOL Mine.svg</target><part>thumb</part><part>left</part><part>upright</part><part>alt=PROCEDURE DIVISION. PERFORM update-screen. GOBACK. fix-screen SECTION. MOVE &quot;Error fixed&quot; TO screen-line. PERFORM update-screen. update-screen SECTION. IF invalid-screen, GO TO fix-screen. END-IF.</part><part>A mine is &quot;armed&quot; when the screen is invalid.</part></link></paragraph><paragraph>Unusual control flow can trigger<space/><italics><template><target>dfn</target><arg>mines</arg></template></italics>, which cause control in performed procedures to return at unexpected times to unexpected locations. Procedures can be reached in three ways: they can be called with<space/><template><target>code</target><arg>PERFORM</arg></template>, jumped to from a<space/><template><target>code</target><arg>GO TO</arg></template><space/>or through execution &quot;falling through&quot; the bottom of an above paragraph. Combinations of these invoke<space/><link><target>undefined behavior</target></link>, creating mines. Specifically, mines occur when execution of a range of procedures would cause control flow to go past the last statement of a range of procedures already being performed.<extension extension_name='ref' name="FR99"><template><target>cite proceedings</target><arg name="url">http://pages.cs.wisc.edu/~ramali/Papers/paste99.pdf<space/></arg><arg name="title">Identifying Procedural Structure in Cobol Programs<space/></arg><arg name="doi">10.1145/381788.316163<space/></arg><arg name="first1">John<space/></arg><arg name="last1">Field<space/></arg><arg name="first2">G.<space/></arg><arg name="last2">Ramalingam<space/></arg><arg name="format">PDF<space/></arg><arg name="conference">PASTE '99<space/></arg><arg name="ISBN">1581131372<space/></arg><arg name="conferenceurl">http://cseweb.ucsd.edu/~wgg/paste99.html<space/></arg><arg name="date">September 1999</arg></template></extension><extension extension_name='ref' name="VV07"><template><target>cite journal</target><arg name="url">http://www.cs.vu.nl/~nveerman/research/minefield/minefield.pdf<space/></arg><arg name="title">Cobol minefield detection<space/></arg><arg name="journal">Software—Practice and Experience<space/></arg><arg name="date">November 2006<space/></arg><arg name="volume">36<space/></arg><arg name="issue">14<space/></arg><arg name="doi">10.1002/spe.v36:14<space/></arg><arg name="archiveurl">https://web.archive.org/web/20070306135410/http://www.cs.vu.nl/~nveerman/research/minefield/minefield.pdf<space/></arg><arg name="deadurl">yes<space/></arg><arg name="archivedate">6 March 2007<space/></arg><arg name="publisher">Wiley<space/></arg><arg name="last1">Veerman<space/></arg><arg name="first1">Niels<space/></arg><arg name="last2">Verhoeven<space/></arg><arg name="first2">Ernst-Jan<space/></arg><arg name="format">PDF</arg></template></extension></paragraph><paragraph>For example, in the code in the adjacent image, a mine is tripped at the end of<space/><template><target>code</target><arg>update-screen</arg></template><space/>when the screen is invalid. When the screen is invalid, control jumps to the<space/><template><target>code</target><arg>fix-screen</arg></template><space/>section, which, when done, performs<space/><template><target>code</target><arg>update-screen</arg></template>. This recursion triggers undefined behavior as there are now two overlapping ranges of procedures being performed. The mine is then triggered upon reaching the end of<space/><template><target>code</target><arg>update-screen</arg></template><space/>and means control could return to one of two locations:</paragraph><list type='bullet'><listitem>the first<space/><template><target>code</target><arg>PERFORM</arg></template><space/>statement</listitem><listitem>the<space/><template><target>code</target><arg>PERFORM</arg></template><space/>statement in<space/><template><target>code</target><arg>fix-screen</arg></template>, where it would then &quot;fall-through&quot; into<space/><template><target>code</target><arg>update-screen</arg></template><space/>and return to the first<space/><template><target>code</target><arg>PERFORM</arg></template><space/>statement upon reaching the end</listitem></list><heading level='4'>Statements</heading><paragraph>COBOL 2014 has 47 statements (also called<space/><italics><template><target>dfn</target><arg>verbs</arg></template></italics>),<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG4</arg><arg>2010</arg><arg name="loc">§ 14.9</arg></template><space/>which can be grouped into the following broad categories: control flow, I/O, data manipulation and the report writer. The report writer statements are covered in the<space/><link><target>#Report writer</target><part>report writer section</part></link>.</paragraph><heading level='5'>Control flow</heading><paragraph>COBOL's<space/><link><target>conditional (computer programming)</target><part>conditional statements</part></link><space/>are<space/><template><target>code</target><arg>IF</arg></template><space/>and<space/><template><target>code</target><arg>EVALUATE</arg></template>.<space/><template><target>code</target><arg>EVALUATE</arg></template><space/>is a<space/><link><target>switch statement</target><part>switch-like statement</part></link><space/>with the added capability of evaluating multiple values and conditions. This can be used to implement<space/><link><target>decision table</target><trail>s</trail></link>. For example, the following might be used to control a<space/><link><target>CNC lathe</target></link>:<space/></paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobolfree"><paragraph>EVALUATE TRUE ALSO desired-speed ALSO current-speed</paragraph><preblock><preline><space/><space/><space/>WHEN lid-closed ALSO min-speed THRU max-speed ALSO LESS THAN desired-speed</preline><preline><space/><space/><space/><space/><space/><space/><space/>PERFORM slow-down-machine</preline><preline><space/><space/><space/>WHEN lid-closed ALSO min-speed THRU max-speed ALSO GREATER THAN desired-speed</preline><preline><space/><space/><space/><space/><space/><space/><space/>PERFORM speed-up-machine</preline><preline><space/><space/><space/>WHEN lid-open ALSO ANY ALSO NOT ZERO</preline><preline><space/><space/><space/><space/><space/><space/><space/>PERFORM emergency-stop</preline><preline><space/><space/><space/>WHEN OTHER</preline><preline><space/><space/><space/><space/><space/><space/><space/>CONTINUE</preline></preblock><paragraph>END-EVALUATE</paragraph></extension></paragraph><paragraph>The<space/><template><target>code</target><arg>PERFORM</arg></template><space/>statement is used to define loops which are executed until a condition is true (not<space/><template><target>em</target><arg>while</arg></template>, unlike other languages). It is also used to call procedures or ranges of procedures (see the<space/><link><target>#Procedures</target><part>procedures section</part></link><space/>for more details).<space/><template><target>code</target><arg>CALL</arg></template><space/>and<space/><template><target>code</target><arg>INVOKE</arg></template><space/>call subprograms and methods, respectively. The name of the subprogram/method is contained in a string which may be a literal or a data item.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§§ 14.9.4, 14.9.22</arg></template><space/>Parameters can be passed<space/><link><target>call by reference</target><part>by reference</part></link>, by content (where a copy is passed by reference) or<space/><link><target>call by value</target><part>by value</part></link><space/>(but only if a<space/><link><target>function prototype</target><part>prototype</part></link><space/>is available).<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="loc">§ D.6.5.2.2</arg></template><template><target>code</target><arg>CANCEL</arg></template><space/>unloads subprograms from memory.<space/><template><target>code</target><arg>GO TO</arg></template><space/>causes the program to jump to a specified procedure.</paragraph><paragraph>The<space/><template><target>code</target><arg>GOBACK</arg></template><space/>statement is a<space/><link><target>return statement</target></link><space/>and the<space/><template><target>code</target><arg>STOP</arg></template><space/>statement stops the program. The<space/><template><target>code</target><arg>EXIT</arg></template><space/>statement has six different formats: it can be used as a return statement, a<space/><link><target>break statement</target></link>, a<space/><link><target>continue statement</target></link>, an end marker or to leave a procedure.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="p">481</arg></template></paragraph><paragraph><link><target>Exception handling</target><part>Exceptions</part></link><space/>are raised by a<space/><template><target>code</target><arg>RAISE</arg></template><space/>statement and caught with a handler, or<space/><italics><template><target>dfn</target><arg>declarative</arg></template></italics>, defined in the<space/><template><target>code</target><arg>DECLARATIVES</arg></template><space/>portion of the procedure division. Declaratives are sections beginning with a<space/><template><target>code</target><arg>USE</arg></template><space/>statement which specify the errors to handle. Exceptions can be names or objects.<space/><template><target>code</target><arg>RESUME</arg></template><space/>is used in a declarative to jump to the statement after the one that raised the exception or to a procedure outside the<space/><template><target>code</target><arg>DECLARATIVES</arg></template>. Unlike other languages, uncaught exceptions may not terminate the program and the program can proceed unaffected.</paragraph><heading level='5'>I/O</heading><paragraph>File I/O is handled by the self-describing<space/><template><target>code</target><arg>OPEN</arg></template>,<space/><template><target>code</target><arg>CLOSE</arg></template>,<space/><template><target>code</target><arg>READ</arg></template>, and<space/><template><target>code</target><arg>WRITE</arg></template><space/>statements along with a further three:<space/><template><target>code</target><arg>REWRITE</arg></template>, which updates a record;<space/><template><target>code</target><arg>START</arg></template>, which selects subsequent records to access by finding a record with a certain key; and<space/><template><target>code</target><arg>UNLOCK</arg></template>, which releases a<space/><link><target>lock (database)</target><part>lock</part></link><space/>on the last record accessed.</paragraph><paragraph>User interaction is done using<space/><template><target>code</target><arg>ACCEPT</arg></template><space/>and<space/><template><target>code</target><arg>DISPLAY</arg></template>.</paragraph><heading level='5'>Data manipulation</heading><paragraph>The following verbs manipulate data:</paragraph><list type='bullet'><listitem><template><target>code</target><arg>INITIALIZE</arg></template>, which sets data items to their default values.</listitem><listitem><template><target>code</target><arg>MOVE</arg></template>, which<space/><link><target>assignment (computer science)</target><part>assigns</part></link><space/>values to data items.</listitem><listitem><template><target>code</target><arg>SET</arg></template>, which has 15 formats: it can modify indices, assign object references and alter table capacities, among other functions.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="pp">557–559</arg></template></listitem><listitem><template><target>code</target><arg>ADD</arg></template>,<space/><template><target>code</target><arg>SUBTRACT</arg></template>,<space/><template><target>code</target><arg>MULTIPLY</arg></template>,<space/><template><target>code</target><arg>DIVIDE</arg></template>, and<space/><template><target>code</target><arg>COMPUTE</arg></template>, which handle arithmetic (with<space/><template><target>code</target><arg>COMPUTE</arg></template><space/>assigning the result of a formula to a variable).</listitem><listitem><template><target>code</target><arg>ALLOCATE</arg></template><space/>and<space/><template><target>code</target><arg>FREE</arg></template>, which handle<space/><link><target>dynamic memory</target></link>.</listitem><listitem><template><target>code</target><arg>VALIDATE</arg></template>, which validates and distributes data as specified in an item's description in the data division.</listitem><listitem><template><target>code</target><arg>STRING</arg></template><space/>and<space/><template><target>code</target><arg>UNSTRING</arg></template>, which<space/><link><target>Concatenation</target><part>concatenate</part></link><space/>and split<space/><link><target>string (computer science)</target><part>string</part><trail>s</trail></link>, respectively.</listitem><listitem><template><target>code</target><arg>INSPECT</arg></template>, which tallies or replaces instances of specified<space/><link><target>substring</target><trail>s</trail></link><space/>within a string.</listitem><listitem><template><target>code</target><arg>SEARCH</arg></template>, which searches a table for the first entry satisfying a condition.</listitem></list><paragraph>Files and tables are sorted using<space/><template><target>code</target><arg>SORT</arg></template><space/>and the<space/><template><target>code</target><arg>MERGE</arg></template><space/>verb merges and sorts files. The<space/><template><target>code</target><arg>RELEASE</arg></template><space/>verb provides records to sort and<space/><template><target>code</target><arg>RETURN</arg></template><space/>retrieves sorted records in order.</paragraph><heading level='4'>Scope termination</heading><paragraph>Some statements, such as<space/><template><target>code</target><arg>IF</arg></template><space/>and<space/><template><target>code</target><arg>READ</arg></template>, may themselves contain statements. Such statements may be terminated in two ways: by a period (<italics><template><target>dfn</target><arg>implicit termination</arg></template></italics>), which terminates<space/><italics>all</italics><space/>unterminated statements contained, or by a scope terminator, which terminates the nearest matching open statement.</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobolfree"><list type='bullet'><listitem>&gt; Terminator period (&quot;implicit termination&quot;)</listitem></list><paragraph>IF invalid-record</paragraph><preblock><preline><space/><space/><space/>IF no-more-records</preline><preline><space/><space/><space/><space/><space/><space/><space/>NEXT SENTENCE</preline><preline><space/><space/><space/>ELSE</preline><preline><space/><space/><space/><space/><space/><space/><space/>READ record-file</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>AT END SET no-more-records TO TRUE.</preline></preblock><list type='bullet'><listitem>&gt; Scope terminators (&quot;explicit termination&quot;)</listitem></list><paragraph>IF invalid-record</paragraph><preblock><preline><space/><space/><space/>IF no-more-records</preline><preline><space/><space/><space/><space/><space/><space/><space/>CONTINUE</preline><preline><space/><space/><space/>ELSE</preline><preline><space/><space/><space/><space/><space/><space/><space/>READ record-file</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>AT END SET no-more-records TO TRUE</preline><preline><space/><space/><space/><space/><space/><space/><space/>END-READ</preline><preline><space/><space/><space/>END-IF</preline></preblock><paragraph>END-IF</paragraph></extension></paragraph><paragraph>Nested statements terminated with a period are a common source of bugs.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2010</arg><arg name="p">873</arg></template><template><target>sfn</target><arg>McCracken</arg><arg>Golden</arg><arg>1988</arg><arg name="loc">§ 8.4</arg></template><space/>For example, examine the following code:</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobolfree"><paragraph>IF x</paragraph><preblock><preline><space/><space/><space/>DISPLAY y.</preline><preline><space/><space/><space/>DISPLAY z.</preline></preblock></extension></paragraph><paragraph>Here, the intent is to display<space/><xhtml:code>y</xhtml:code><space/>and<space/><xhtml:code>z</xhtml:code><space/>if condition<space/><xhtml:code>x</xhtml:code><space/>is true. However,<space/><xhtml:code>z</xhtml:code><space/>will be displayed whatever the value of<space/><xhtml:code>x</xhtml:code><space/>because the<space/><xhtml:code>IF</xhtml:code><space/>statement is terminated by an erroneous period after<space/><template><target>code</target><arg>DISPLAY y</arg><arg name="lang">cobolfree</arg></template>.</paragraph><paragraph>Another bug is a result of the<space/><link><target>dangling else problem</target></link>, when two<space/><xhtml:code>IF</xhtml:code><space/>statements can associate with an<space/><xhtml:code>ELSE</xhtml:code>.</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobolfree"><paragraph>IF x</paragraph><preblock><preline><space/><space/><space/>IF y</preline><preline><space/><space/><space/><space/><space/><space/><space/>DISPLAY a</preline></preblock><paragraph>ELSE</paragraph><preblock><preline><space/><space/><space/>DISPLAY b.</preline></preblock></extension></paragraph><paragraph>In the above fragment, the<space/><xhtml:code>ELSE</xhtml:code><space/>associates with the &amp;nbsp;<template><target>code</target><arg>IF y</arg><arg name="lang">cobolfree</arg></template>&amp;nbsp; statement instead of the &amp;nbsp;<template><target>code</target><arg>IF x</arg><arg name="lang">cobolfree</arg></template>&amp;nbsp; statement, causing a bug. Prior to the introduction of explicit scope terminators, preventing it would require &amp;nbsp;<template><target>code</target><arg>ELSE NEXT SENTENCE</arg><arg name="lang">cobolfree</arg></template>&amp;nbsp; to be placed after the inner<space/><xhtml:code>IF</xhtml:code>.<template><target>sfn</target><arg>McCracken</arg><arg>Golden</arg><arg>1988</arg><arg name="loc">§ 8.4</arg></template></paragraph><heading level='4'>Self-modifying code</heading><paragraph>The original COBOL specification supported the infamous &amp;nbsp;<template><target>code</target><arg>ALTER X TO PROCEED TO Y</arg><arg name="lang">cobolfree</arg></template>&amp;nbsp; statement, for which many compilers generated<space/><link><target>self-modifying code</target></link>.<space/><xhtml:code>X</xhtml:code><space/>and<space/><xhtml:code>Y</xhtml:code><space/>are procedure labels, and the single &amp;nbsp;<template><target>code</target><arg>GO TO</arg><arg name="lang">cobolfree</arg></template>&amp;nbsp; statement in procedure<space/><xhtml:code>X</xhtml:code><space/>executed after such an<space/><template><target>code</target><arg>ALTER</arg></template><space/>statement means &amp;nbsp;<template><target>code</target><arg>GO TO Y</arg><arg name="lang">cobolfree</arg></template>&amp;nbsp; instead. Many compilers still support it,<extension extension_name='ref'><paragraph>Examples of compiler support for<space/><template><target>code</target><arg>ALTER</arg></template><space/>can be seen in the following:</paragraph><list type='bullet'><listitem><template><target>cite web</target><arg name="last">Tiffin<space/></arg><arg name="first">Brian<space/></arg><arg name="title">September 2014<space/></arg><arg name="url">http://sourceforge.net/p/open-cobol/discussion/cobol/thread/7dc2941f/#5ee9<space/></arg><arg name="work">GNU Cobol<space/></arg><arg name="date">18 September 2013<space/></arg><arg name="accessdate">5 January 2014</arg></template></listitem><listitem><template><target>cite web</target><arg name="url">http://documentation.microfocus.com/help/topic/com.microfocus.eclipse.infocenter.visualcobol.vs2013/HRLHLHPDF803.html<space/></arg><arg name="title">The ALTER Statement</arg><arg name="publisher">Micro Focus<space/></arg><arg name="work">Micro Focus Visual COBOL 2.2 for Visual Studio 2013 COBOL Language Reference<space/></arg><arg name="accessdate">5 January 2014</arg></template></listitem><listitem><template><target>cite web</target><arg name="url">http://www.csim.scu.edu.tw/~kuo/COBOL/COBOLCompiler/COBOL%E6%89%8B%E5%86%8A/cob_lrf.pdf<space/></arg><arg name="title">ALTER Statement (Nucleus)<space/></arg><arg name="publisher">Fujitsu<space/></arg><arg name="work">COBOL85 Reference Manual<space/></arg><arg name="date">November 1996<space/></arg><arg name="accessdate">5 January 2014<space/></arg><arg name="page">555<space/></arg><arg name="format">PDF<space/></arg><arg name="archiveurl">http://web.archive.org/web/20140106031540/http://www.csim.scu.edu.tw/~kuo/COBOL/COBOLCompiler/COBOL%E6%89%8B%E5%86%8A/cob_lrf.pdf<space/></arg><arg name="archivedate">6 January 2014<space/></arg><arg name="deadurl">yes</arg></template></listitem><listitem><template><target>cite web</target><arg name="url">http://pic.dhe.ibm.com/infocenter/pdthelp/v1r1/topic/com.ibm.entcobol.doc_5.1/PGandLR/ref/rlpsalte.html<space/></arg><arg name="title">ALTER Statement<space/></arg><arg name="publisher">IBM<space/></arg><arg name="work">Enterprise COBOL for z/OS Language Reference<space/></arg><arg name="date">June 2013<space/></arg><arg name="accessdate">5 January 2014</arg></template></listitem></list></extension>but it was deemed<space/><link><target>deprecation</target><part>obsolete</part></link><space/>in the COBOL 1985 standard and deleted in 2002.<template><target>sfn</target><arg>ISO/IEC JTC 1/SC 22/WG 4</arg><arg>2001</arg><arg name="loc">§ F.1</arg></template></paragraph><heading level='3'>Hello, world</heading><paragraph>A &quot;<link><target>Hello, world</target></link>&quot; program in COBOL:<extension extension_name='syntaxhighlight' lang="cobol"><preblock><preline><space/><space/><space/><space/><space/><space/>IDENTIFICATION DIVISION.</preline><preline><space/><space/><space/><space/><space/><space/>PROGRAM-ID. hello-world.</preline><preline><space/><space/><space/><space/><space/><space/>PROCEDURE DIVISION.</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>DISPLAY &quot;Hello, world!&quot;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>.</preline></preblock></extension></paragraph><heading level='4'>HELLO, WORLD</heading><paragraph>When the now famous<space/><link><target>Hello world program</target></link><space/>example in<space/><italics><link><target>The C Programming Language (book)</target><part>The C Programming Language</part></link></italics><space/>was first published in 1978 a similar mainframe COBOL program sample would have been submitted through<space/><link><target>Job Control Language</target><part>JCL</part></link>, very likely using a punch card reader, and 80 column punch cards. The listing below,<space/><italics>with an empty DATA DIVISION</italics>, was tested using GNU/Linux and the System/370<space/><link><target>Hercules emulator</target></link><space/>running<space/><link><target>MVS</target></link><space/>3.8J. The JCL, written in July 2015, is derived from the Hercules tutorials and samples hosted by Jay Moseley.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.jaymoseley.com/hercules/compilers/cobol.htm<space/></arg><arg name="title">COBOL Compiler from MVT<space/></arg><arg name="date">17 January 2015<space/></arg><arg name="accessdate">19 July 2015<space/></arg><arg name="first">Jay<space/></arg><arg name="last">Moseley</arg></template></extension><space/>In keeping with COBOL programming of that era, HELLO, WORLD is displayed in all capital letters.</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="cobolfree"><paragraph>//COBUCLG JOB (001),'COBOL BASE TEST', 00010000// CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1) 00020000//BASETEST EXEC COBUCLG 00030000//COB.SYSIN DD * 00040000</paragraph><preblock><preline>00000* VALIDATION OF BASE COBOL INSTALL 00050000</preline><preline>01000 IDENTIFICATION DIVISION. 00060000</preline><preline>01100 PROGRAM-ID. 'HELLO'. 00070000</preline><preline>02000 ENVIRONMENT DIVISION. 00080000</preline><preline>02100 CONFIGURATION SECTION. 00090000</preline><preline>02110 SOURCE-COMPUTER. GNULINUX. 00100000</preline><preline>02120 OBJECT-COMPUTER. HERCULES. 00110000</preline><preline>02200 SPECIAL-NAMES. 00120000</preline><preline>02210 CONSOLE IS CONSL. 00130000</preline><preline>03000 DATA DIVISION. 00140000</preline><preline>04000 PROCEDURE DIVISION. 00150000</preline><preline>04100 00-MAIN. 00160000</preline><preline>04110 DISPLAY 'HELLO, WORLD' UPON CONSL. 00170000</preline><preline>04900 STOP RUN. 00180000</preline></preblock><paragraph>//LKED.SYSLIB DD DSNAME=SYS1.COBLIB,DISP=SHR 00190000// DD DSNAME=SYS1.LINKLIB,DISP=SHR 00200000//GO.SYSPRINT DD SYSOUT=A 00210000// 00220000</paragraph></extension></paragraph><paragraph>After submitting the JCL, the MVS console displayed:</paragraph><paragraph><extension extension_name='syntaxhighlight' lang="text" highlight="10"><preblock><preline><space/><space/><space/>19.52.48 JOB 3 $HASP100 COBUCLG ON READER1 COBOL BASE TEST</preline><preline><space/><space/><space/>19.52.48 JOB 3 IEF677I WARNING MESSAGE(S) FOR JOB COBUCLG ISSUED</preline><preline><space/><space/><space/>19.52.48 JOB 3 $HASP373 COBUCLG STARTED - INIT 1 - CLASS A - SYS BSP1</preline><preline><space/><space/><space/>19.52.48 JOB 3 IEC130I SYSPUNCH DD STATEMENT MISSING</preline><preline><space/><space/><space/>19.52.48 JOB 3 IEC130I SYSLIB DD STATEMENT MISSING</preline><preline><space/><space/><space/>19.52.48 JOB 3 IEC130I SYSPUNCH DD STATEMENT MISSING</preline><preline><space/><space/><space/>19.52.48 JOB 3 IEFACTRT - Stepname Procstep Program Retcode</preline><preline><space/><space/><space/>19.52.48 JOB 3 COBUCLG BASETEST COB IKFCBL00 RC= 0000</preline><preline><space/><space/><space/>19.52.48 JOB 3 COBUCLG BASETEST LKED IEWL RC= 0000</preline><preline><space/><space/><space/>19.52.48 JOB 3 +HELLO, WORLD</preline><preline><space/><space/><space/>19.52.48 JOB 3 COBUCLG BASETEST GO PGM=*.DD RC= 0000</preline><preline><space/><space/><space/>19.52.48 JOB 3 $HASP395 COBUCLG ENDED</preline></preblock></extension></paragraph><paragraph><italics>Line 10 of the console listing above is highlighted for effect, the highlighting is not part of the actual console output</italics>.</paragraph><paragraph>The associated compiler listing generated over four pages of technical detail and job run information, for the single line of output from the 14 lines of COBOL.</paragraph><heading level='2'>Criticism and defense</heading><heading level='3'>Lack of structure</heading><paragraph>In the 1970s, programmers began moving away from unstructured<space/><link><target>spaghetti code</target></link><space/>to the<space/><link><target>structured programming</target></link><space/>paradigm. In his letter to an editor in 1975 entitled &quot;How do we tell truths that might hurt?&quot; which was critical of several of COBOL's contemporaries, computer scientist and<space/><link><target>Turing Award</target></link><space/>recipient<space/><link><target>Edsger Dijkstra</target></link><space/>remarked that &quot;The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense.&quot;<extension extension_name='ref' name="Dijkstra1"><template><target>cite web</target><arg name="url">http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html</arg><arg name="title">E. W. Dijkstra Archive: How do we tell truths that might hurt? (EWD498)</arg><arg name="accessdate">August 29, 2007</arg><arg name="publisher">University of Texas at Austin</arg><arg name="year">2006</arg><arg name="author">Dijkstra, Edsger W.</arg></template></extension>In his dissenting response to Dijkstra's article and the above &quot;offensive statement,&quot; computer scientist Howard E. Tompkins defended structured COBOL: &quot;COBOL programs with convoluted control flow indeed tend to 'cripple the mind',&quot; but this was because &quot;There are too many such business application programs written by programmers that have never had the benefit of structured COBOL taught well...&quot;<extension extension_name='ref'><template><target>Cite journal</target><arg name="doi"><space/>10.1145/948176.948186</arg><arg name="title"><space/>In defense of teaching structured COBOL as computer science</arg><arg name="journal"><space/>ACM SIGPLAN Notices</arg><arg name="volume"><space/>18</arg><arg name="issue"><space/>4</arg><arg name="pages"><space/>86</arg><arg name="year"><space/>1983</arg><arg name="last1"><space/>Tompkins<space/></arg><arg name="first1"><space/>H. E.<space/></arg></template></extension></paragraph><paragraph>One cause of spaghetti code was the<space/><template><target>code</target><arg>GO TO</arg></template><space/>statement. Attempts to remove<space/><template><target>code</target><arg>GO TO</arg></template>s from COBOL code, however, resulted in convoluted programs and reduced code quality.<template><target>sfn</target><arg>Riehle</arg><arg>1992</arg><arg name="p">125</arg></template><space/><template><target>code</target><arg>GO TO</arg></template>s were largely replaced by the<space/><template><target>code</target><arg>PERFORM</arg></template><space/>statement and procedures, which promoted<space/><link><target>modular programming</target></link><template><target>sfn</target><arg>Riehle</arg><arg>1992</arg><arg name="p">125</arg></template><space/>and gave easy access to powerful looping facilities. However,<space/><template><target>code</target><arg>PERFORM</arg></template><space/>could only be used with procedures so loop bodies were not located where they were used, making programs harder to understand.<template><target>sfn</target><arg>Shneiderman</arg><arg>1985</arg><arg name="pp">349–350</arg></template></paragraph><paragraph>COBOL programs were infamous for being monolithic and lacking modularization.<extension extension_name='ref'><template><target>cite book</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Beginning COBOL for Programmers<space/></arg><arg name="publisher">Apress<space/></arg><arg name="accessdate">13 August 2014<space/></arg><arg name="page">4<space/></arg><arg name="first">Michael<space/></arg><arg name="last">Coughlan<space/></arg><arg name="isbn">1430262532<space/></arg><arg name="date">16 March 2014</arg></template></extension>COBOL code could only be modularized through procedures, which were found to be inadequate for large systems. It was impossible to restrict access to data, meaning a procedure could access and modify<space/><template><target>em</target><arg>any</arg></template><space/>data item. Furthermore, there was no way to pass<space/><link><target>parameter (computer programming)</target><part>parameter</part><trail>s</trail></link><space/>to a procedure, an omission Jean Sammet regarded as the committee's biggest mistake.<template><target>sfn</target><arg>Sammet</arg><arg>1978b</arg><arg name="p">258</arg></template>Another complication stemmed from the ability to<space/><template><target>code</target><arg>PERFORM THRU</arg></template><space/>a specified sequence of procedures. This meant that control could jump to and return from any procedure, creating convoluted control flow and permitting a programmer to break the &quot;single entry, single exit&quot; rule.<template><target>sfn</target><arg>Riehle</arg><arg>1992</arg><arg name="p">126</arg></template></paragraph><paragraph>This situation improved as COBOL adopted more features. COBOL-74 added subprograms, giving programmers the ability to control the data each part of the program could access. COBOL-85 then added nested subprograms, allowing programmers to hide subprograms.<template><target>sfn</target><arg>Riehle</arg><arg>1992</arg><arg name="p">127</arg></template><space/>Further control over data and code came in 2002 when object-oriented programming, user-defined functions and user-defined data types were included.</paragraph><heading level='3'>Compatibility issues</heading><paragraph>COBOL was intended to a be a highly portable, &quot;common&quot; language. However, by 2001, around 300 dialects had been created.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://www.cs.vu.nl/grammarware/500/500.pdf<space/></arg><arg name="title">Cracking the 500-language problem<space/></arg><arg name="journal">IEEE Software<space/></arg><arg name="date">November–December 2001<space/></arg><arg name="volume">18<space/></arg><arg name="issue">6<space/></arg><arg name="page">79<space/></arg><arg name="doi">10.1109/52.965809<space/></arg><arg name="first1">Ralf<space/></arg><arg name="last1">Lämmel<space/></arg><arg name="first2">Chris<space/></arg><arg name="last2">Verhoef<space/></arg><arg name="author-link2"><space/>Chris Verhoef</arg><arg name="format">PDF</arg></template></extension></paragraph><paragraph>COBOL-85 was not fully compatible with earlier versions, and its development was controversial. Joseph T. Brophy, the<space/><link><target>Chief Information Officer</target><part>CIO</part></link><space/>of<space/><link><target>St. Paul Travelers</target><part>Travelers Insurance</part></link>, spearheaded an effort to inform users of COBOL of the heavy reprogramming costs of implementing the new standard.<template><target>sfn</target><arg>Garfunkel</arg><arg>1987</arg><arg name="p">11</arg></template><space/>As a result, the ANSI COBOL Committee received more than 2,200 letters from the public, mostly negative, requiring the committee to make changes. On the other hand, conversion to COBOL-85 was thought to increase productivity in future years, thus justifying the conversion costs.<template><target>sfn</target><arg>Garfunkel</arg><arg>1987</arg></template><template><target>page needed</target><arg name="date">August 2014</arg></template></paragraph><heading level='3'>Verbose syntax</heading><paragraph><template><target>quotebox</target><arg name="title">COBOL: /koh′bol/, n.
<space/></arg><arg name="tstyle">text-align: left;
<space/></arg><arg name="quote">A weak, verbose, and flabby language used by code grinders to do boring mindless things on dinosaur mainframes. [...] Its very name is seldom uttered without ritual expressions of disgust or horror.
<space/></arg><arg name="source">[[The Jargon File]] 4.4.8.<ref>{{cite web | url</arg><arg name="align">right
<space/></arg><arg name="width">30%
<space/></arg><arg name="quoted">1
</arg></template></paragraph><paragraph>COBOL syntax has often been criticized for its verbosity. Proponents say that this was intended to make the code<space/><link><target>self-documenting</target></link>, easing program maintenance.<template><target>sfn</target><arg>Brown</arg><arg>1976</arg><arg name="p">53</arg></template><space/>COBOL was also intended to be easy for programmers to learn and use,<template><target>sfn</target><arg>CODASYL</arg><arg>1969</arg><arg name="loc">§ II.1.1</arg></template><space/>while still being readable to non-technical staff such as managers.<template><target>sfn</target><arg>Shneiderman</arg><arg>1985</arg><arg name="p">350</arg></template><template><target>sfn</target><arg>Sammet</arg><arg>1961</arg><arg name="p">381</arg></template><template><target>sfn</target><arg>Conner</arg><arg>1984</arg><arg name="p">ID/10</arg></template><template><target>sfn</target><arg>Marcotty</arg><arg>1978</arg><arg name="p">263</arg></template>The desire for readability led to the use of English-like syntax and structural elements, such as nouns, verbs, clauses, sentences, sections, and divisions. Yet by 1984, maintainers of COBOL programs were struggling to deal with &quot;incomprehensible&quot; code<template><target>sfn</target><arg>Conner</arg><arg>1984</arg><arg name="p">ID/10</arg></template><space/>and the main changes in COBOL-85 were there to help ease maintenance.<extension extension_name='ref' name="Computerworld Garfunkel"></extension></paragraph><paragraph>Jean Sammet, a short-range committee member, noted that &quot;little attempt was made to cater to the professional programmer, in fact people whose main interest is programming tend to be very unhappy with COBOL&quot; which she attributed to COBOL's verbose syntax.<template><target>sfn</target><arg>Conner</arg><arg>1984</arg><arg name="p">ID/14</arg></template></paragraph><heading level='3'>Isolation from the computer science community</heading><paragraph>The COBOL community has always been isolated from the computer science community. No academic computer scientists participated in the design of COBOL; all of those on the committee came from commerce or government. Computer scientists at the time were more interested in fields like numerical analysis, physics and system programming than the commercial file-processing problems which COBOL development tackled.<template><target>sfn</target><arg>Sammet</arg><arg>1961</arg><arg name="p">380</arg></template><space/>Jean Sammet attributed COBOL's unpopularity to an initial &quot;snob reaction&quot; due to its inelegance, the lack of influential computer scientists participating in the design process and a disdain for business data processing.<template><target>sfn</target><arg>Marcotty</arg><arg>1978</arg><arg name="p">266</arg></template><space/>The COBOL specification used a unique &quot;notation&quot;, or<space/><link><target>metalanguage</target></link>, to define its syntax rather than the new<space/><link><target>BackusNaur form</target></link><space/>because few committee members had heard of it. This resulted in &quot;severe&quot; criticism.<template><target>sfn</target><arg>Sammet</arg><arg>1978b</arg><arg name="p">255</arg></template><template><target>sfn</target><arg>CODASYL</arg><arg>1969</arg><arg name="loc">§ 2.2.5</arg></template><template><target>sfn</target><arg>Shneiderman</arg><arg>1985</arg><arg name="pp">348–349</arg></template><template><target>sfn</target><arg>Bemer</arg><arg>1971</arg><arg name="p">133</arg></template></paragraph><paragraph>Later, COBOL suffered from a shortage of material covering it; it took until 1963 for introductory books to appear. By 1985, there were twice as many books on Fortran and four times as many on BASIC as on COBOL in the<space/><link><target>Library of Congress</target></link>.<template><target>sfn</target><arg>Shneiderman</arg><arg>1985</arg><arg name="p">349</arg></template><space/>University professors taught more modern, state-of-the-art languages and techniques instead of COBOL which was said to have a &quot;trade school&quot; nature.<template><target>sfn</target><arg>Shneiderman</arg><arg>1985</arg><arg name="p">351</arg></template><space/>Donald Nelson, the chair of the CODASYL COBOL committee said in 1984 that &quot;academics ... hate COBOL&quot; and that computer science graduates &quot;had 'hate COBOL' drilled into them&quot;.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">An interview: Cobol defender<space/></arg><arg name="work">Computerworld<space/></arg><arg name="date">10 September 1984<space/></arg><arg name="accessdate">8 June 2014<space/></arg><arg name="author"><space/></arg><arg name="pages">ID/29–ID/32<space/></arg><arg name="issn">0010-4841<space/></arg><arg name="volume">18<space/></arg><arg name="issue">37</arg></template></extension><space/>A 2013 poll by<space/><link><target>Micro Focus</target></link><space/>found that 20% of university academics thought COBOL was outdated or dead and that 55% believed their students thought COBOL was outdated or dead. The same poll also found that only 25% of academics had COBOL programming on their curriculum even though 60% thought they should teach it.<extension extension_name='ref'><template><target>cite press release</target><arg name="url">http://www.microfocus.com/about/press/pressreleases/2013/pr070320131001.aspx<space/></arg><arg name="title">Academia needs more support to tackle the IT skills gap<space/></arg><arg name="publisher">Micro Focus<space/></arg><arg name="date">7 March 2013<space/></arg><arg name="accessdate">4 August 2014</arg></template></extension>In contrast, in 2003, COBOL featured in 80% of<space/><link><target>information systems</target></link><space/>curricula in the United States, the same proportion as<space/><link><target>C++</target></link><space/>and<space/><link><target>Java (Programming language)</target><part>Java</part></link>.<template><target>sfn</target><arg>Carr</arg><arg>Kizior</arg><arg>2003</arg><arg name="p">13</arg></template></paragraph><heading level='3'>Concerns about the design process</heading><paragraph>There were doubts about the effectiveness of the design process (sometimes from those taking part in it). Short-term committee member Howard Bromberg said that there was &quot;little control&quot; over the development process and that it was &quot;plagued by discontinuity of personnel and ... a lack of talent&quot;.<template><target>sfn</target><arg>Beyer</arg><arg>2009</arg><arg name="p">301</arg></template></paragraph><paragraph>COBOL standards have repeatedly suffered from delays: COBOL-85 arrived five years later than hoped,<extension extension_name='ref'><template><target>cite conference</target><arg name="url">http://www.computer.org/csdl/proceedings/afips/1978/5086/00/50861107.pdf<space/></arg><arg name="title">Data Base Facility for COBOL 80<space/></arg><arg name="first">Margaret M.<space/></arg><arg name="last">Cook<space/></arg><arg name="conference">1978 National Computer Conference<space/></arg><arg name="quote">The earliest date that a new COBOL standard could be developed and approved is the year 1980 [...].<space/></arg><arg name="pages">1107–1112<space/></arg><arg name="publisher">AFIPS Press<space/></arg><arg name="date">June 1978<space/></arg><arg name="location">Anaheim, California<space/></arg><arg name="accessdate">2 September 2014<space/></arg><arg name="format">PDF<space/></arg><arg name="editor1-last">Ghosh<space/></arg><arg name="editor1-first">Sakti P.<space/></arg><arg name="editor2-last">Liu<space/></arg><arg name="editor2-first">Leonard Y.</arg></template></extension>COBOL 2002 was five years late,<extension extension_name='ref' name="SW95"></extension>and COBOL 2014 was six years late.<extension extension_name='ref' name="cobolstandards.com"></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.cobolstandard.info/wg4/open/wg4n0188.doc<space/></arg><arg name="title">Resolutions from WG4 meeting 24 - June 26-28, 2003 Las Vegas, Nevada, USA<space/></arg><arg name="date">11 July 2003<space/></arg><arg name="accessdate">29 June 2014<space/></arg><arg name="format">doc<space/></arg><arg name="quote">a June 2008 revision of the COBOL standard<space/></arg><arg name="page">1</arg></template></extension>To combat delays, the standard committee allowed the creation of optional addenda which would add features more quickly than by waiting for the next standard revision. However, some committee members raised concerns about incompatibilities between implementations and frequent modifications of the standard.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Cobol standard add-ons flayed<space/></arg><arg name="journal">Computerworld<space/></arg><arg name="volume">20<space/></arg><arg name="issue">28<space/></arg><arg name="pages">1, 12<space/></arg><arg name="first">Charles<space/></arg><arg name="last">Babcock<space/></arg><arg name="date">14 July 1986</arg></template></extension></paragraph><heading level='3'>Influences on other languages</heading><paragraph>COBOL's data structures influenced subsequent programming languages. Its record and file structure influenced PL/I and<space/><link><target>Pascal (programming language)</target><part>Pascal</part></link>, and the<space/><xhtml:code>REDEFINES</xhtml:code><space/>clause was a predecessor to Pascal's variant records. Explicit file structure definitions preceded the development of<space/><link><target>database management systems</target></link><space/>and aggregated data was a significant advance over Fortran's arrays.<template><target>sfn</target><arg>Shneiderman</arg><arg>1985</arg><arg name="p">349</arg></template></paragraph><paragraph>COBOL's<space/><template><target>code</target><arg>COPY</arg></template><space/>facility, although considered &quot;primitive&quot;,<extension extension_name='ref'><template><target>cite conference</target><arg name="first">Michael<space/></arg><arg name="last">Marcotty<space/></arg><arg name="title">Full text of all questions submitted<space/></arg><arg name="editor1-last"><space/>Wexelblat<space/></arg><arg name="editor1-first"><space/>Richard L.<space/></arg><arg name="conference"><space/>History of Programming Languages<space/></arg><arg name="year">1978<space/></arg><arg name="publisher"><space/>Academic Press<space/></arg><arg name="publication-date">1981<space/></arg><arg name="isbn"><space/>0127450408<space/></arg><arg name="doi"><space/>10.1145/800025.1198371<space/></arg><arg name="page">274</arg></template></extension>influenced the development of<space/><link><target>include directive</target><trail>s</trail></link>.<template><target>sfn</target><arg>Shneiderman</arg><arg>1985</arg><arg name="p">349</arg></template></paragraph><paragraph>The focus on portability and standardization meant programs written in COBOL could be portable and facilitated the spread of the language to a wide variety of hardware platforms and operating systems.<extension extension_name='ref'><paragraph>This can be seen in:</paragraph><list type='bullet'><listitem><template><target>cite web</target><arg name="url">http://www-304.ibm.com/partnerworld/gsd/solutiondetails.do?solution</arg><arg name="title">Visual COBOL<space/></arg><arg name="publisher">[[IBM]]<space/></arg><arg name="work">IBM PartnerWorld<space/></arg><arg name="date">21 August 2013<space/></arg><arg name="accessdate">5 February 2014<space/></arg><arg name="quote">Micro Focus Visual COBOL delivers the next generation of COBOL development and deployment for Linux x86-64, Linux for System z, AIX, HP/UX, Solaris, and Windows.<space/></arg><arg name="archiveurl">https://web.archive.org/web/20140712183624/http://www-304.ibm.com/partnerworld/gsd/solutiondetails.do?solution</arg><arg name="archivedate">12 July 2014<space/></arg><arg name="deadurl">no</arg></template></listitem><listitem><template><target>cite web</target><arg name="url">https://www-03.ibm.com/software/products/en/cobocompfami<space/></arg><arg name="title">COBOL Compilers family<space/></arg><arg name="publisher">[[IBM]]<space/></arg><arg name="work">ibm.com<space/></arg><arg name="accessdate">5 February 2014<space/></arg><arg name="archiveurl">https://web.archive.org/web/20140223004754/https://www-03.ibm.com/software/products/en/cobocompfami<space/></arg><arg name="archivedate">23 February 2014<space/></arg><arg name="deadurl">no</arg></template></listitem><listitem><template><target>cite web</target><arg name="url">http://opencobol.add1tocobol.com/gnucobol/#what-platforms-are-supported-by-gnucobol<space/></arg><arg name="title">What platforms are supported by GNU Cobol?<space/></arg><arg name="date">4 January 2014<space/></arg><arg name="accessdate">5 February 2014<space/></arg><arg name="author">Tiffin, Brian<space/></arg><arg name="archiveurl">https://web.archive.org/web/20131214110557/http://opencobol.add1tocobol.com/gnucobol/#what-platforms-are-supported-by-gnu-cobol<space/></arg><arg name="archivedate">14 December 2013<space/></arg><arg name="deadurl">yes</arg></template></listitem></list></extension><space/>Additionally, the well-defined division structure restricts the definition of external references to the Environment Division, which simplifies platform changes in particular.<extension extension_name='ref' name="cobol-intro"><template><target>cite web</target><arg name="url">http://www.csis.ul.ie/cobol/course/COBOLIntro.htm#part1<space/></arg><arg name="title">Introduction to COBOL<space/></arg><arg name="year">2002<space/></arg><arg name="accessdate">3 February 2014<space/></arg><arg name="author">Coughlan, Michael</arg></template></extension></paragraph><heading level='2'>See also</heading><paragraph><template><target>Portal</target><arg>Computer programming</arg></template></paragraph><list type='bullet'><listitem><link><target>Generational list of programming languages#COBOL based</target><part>Programming language genealogies</part></link></listitem><listitem><link><target>Alphabetical list of programming languages</target></link></listitem><listitem><link><target>Comparison of programming languages</target></link></listitem><listitem><link><target>CODASYL</target></link></listitem></list><heading level='2'>Notes</heading><paragraph><template><target>notelist</target></template></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg></template></paragraph><heading level='2'>Sources</heading><paragraph><template><target>refbegin</target><arg>2</arg></template></paragraph><list type='bullet'><listitem><template><target>cite journal</target><arg name="ref">harv
<space/></arg><arg name="url">http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-8-pdf/k-8-u2776-Honeywell-mag-History-Cobol.pdf
<space/></arg><arg name="title">A View of the History of COBOL
<space/></arg><arg name="publisher">[[Honeywell]]
<space/></arg><arg name="work">Honeywell Computer Journal
<space/></arg><arg name="accessdate">28 June 2014
<space/></arg><arg name="volume">5
<space/></arg><arg name="issue">3
<space/></arg><arg name="date">1971
<space/></arg><arg name="first">Bob
<space/></arg><arg name="last">Bemer
<space/></arg><arg name="authorlink">Bob Bemer
<space/></arg><arg name="format">PDF
</arg></template></listitem><listitem><template><target>cite book</target><arg name="ref">harv
<space/></arg><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Grace Hopper and the Invention of the Information Age
<space/></arg><arg name="publisher">MIT Press
<space/></arg><arg name="year">2009
<space/></arg><arg name="isbn">978-0262013109
<space/></arg><arg name="first">Kurt
<space/></arg><arg name="last">Beyer
<space/></arg><arg name="lccn">2008044229
</arg></template></listitem><listitem><template><target>cite book</target><arg name="ref">harv
<space/></arg><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Encyclopedia of Computer Science and Technology: Volume 5
<space/></arg><arg name="publisher">[[CRC Press]]
<space/></arg><arg name="isbn">978-0824722555
<space/></arg><arg name="date">1 December 1976
<space/></arg><arg name="section">COBOL
<space/></arg><arg name="first">William R.
<space/></arg><arg name="last">Brown
<space/></arg><arg name="editor1-first">Jack
<space/></arg><arg name="editor1-last">Belzer
<space/></arg><arg name="editor2-first">Albert G.
<space/></arg><arg name="editor2-last">Holzman
<space/></arg><arg name="editor3-first">Allen
<space/></arg><arg name="editor3-last">Kent
</arg></template></listitem></list><list type='bullet'><listitem><template><target>cite journal</target><arg name="ref">harv
<space/></arg><arg name="url">http://www.isedj.org/1/52/ISEDJ.1(52).Carr.pdf
<space/></arg><arg name="title">Continued Relevance of COBOL in Business and Academia: Current Situation and Comparison to the Year 2000 Study
<space/></arg><arg name="date">31 December 2003
<space/></arg><arg name="accessdate">4 August 2014
<space/></arg><arg name="format">PDF
<space/></arg><arg name="last1">Carr
<space/></arg><arg name="first1">Donald E.
<space/></arg><arg name="last2">Kizior
<space/></arg><arg name="first2">Ronald J.
<space/></arg><arg name="journal">Information Systems Education Journal
<space/></arg><arg name="volume">1
<space/></arg><arg name="issue">52
<space/></arg><arg name="issn">1545-679X
<space/></arg><arg name="publisher">[[Association of Information Technology Professionals|AITP]]
</arg></template></listitem><listitem><template><target>cite book</target><arg name="ref">harv
<space/></arg><arg name="url">https://archive.org/details/codasylcoboljour00conf
<space/></arg><arg name="title">CODASYL COBOL Journal of Development 1968<space/></arg><arg name="date">July 1969 
<space/></arg><arg name="lccn">73601243
<space/></arg><arg name="author">CODASYL
<space/></arg><arg name="authorlink">CODASYL
<space/></arg><arg name="publisher">[[National Bureau of Standards]]
</arg></template></listitem><listitem><template><target>cite journal</target><arg name="ref">harv
<space/></arg><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Cobol, your age is showing
<space/></arg><arg name="journal">Computerworld
<space/></arg><arg name="volume">18
<space/></arg><arg name="issue">20
<space/></arg><arg name="pages">ID/7–ID/18
<space/></arg><arg name="first">Richard L.
<space/></arg><arg name="last">Conner
<space/></arg><arg name="date">14 May 1984
<space/></arg><arg name="issn">0010-4841
<space/></arg><arg name="publisher">[[International Data Group]]
</arg></template></listitem><listitem><template><target>cite web</target><arg name="ref">harv
<space/></arg><arg name="url">http://opencobol.add1tocobol.com/guides/GNU%20COBOL%202.1%2023NOV2013%20Programmers%20Guide%20(US%20Letter).pdf
<space/></arg><arg name="title">GNU COBOL Programmer's Guide
<space/></arg><arg name="date">9 April 2014
<space/></arg><arg name="accessdate">25 February 2014
<space/></arg><arg name="last">Cutler
<space/></arg><arg name="first">Gary
<space/></arg><arg name="edition">3rd
</arg></template></listitem><listitem><template><target>cite book</target><arg name="ref">harv
<space/></arg><arg name="title">The COBOL 85 Example Book
<space/></arg><arg name="first">Jerome
<space/></arg><arg name="last">Garfunkel
<space/></arg><arg name="publisher">[[John Wiley & Sons|Wiley]]
<space/></arg><arg name="year">1987
<space/></arg><arg name="isbn">0471804614
</arg></template></listitem><listitem><template><target>cite web</target><arg name="ref">harv
<space/></arg><arg name="url">http://www.ncits.org/tc_home/j4htm/cobolv200112.zip
<space/></arg><arg name="title">ISO/IEC IS 1989:2001 – Programming language COBOL
<space/></arg><arg name="author">ISO/IEC JTC 1/SC 22/WG 4
<space/></arg><arg name="authorlink">ISO/IEC JTC 1/SC 22
<space/></arg><arg name="publisher">[[ISO]]
<space/></arg><arg name="date">4 December 2001
<space/></arg><arg name="accessdate">2 September 2014
<space/></arg><arg name="archiveurl">https://web.archive.org/web/20020124065139/http://www.ncits.org/tc_home/j4htm/cobolv200112.zip
<space/></arg><arg name="archivedate">23 January 2002
<space/></arg><arg name="deadurl">yes
<space/></arg><arg name="format">ZIP of PDF
</arg></template></listitem><listitem><template><target>cite web</target><arg name="ref">harv
<space/></arg><arg name="url">http://www.open-std.org/jtc1/sc22/open/ISO-IECJTC1-SC22_N4561_ISO_IEC_FCD_1989__Information_technol.pdf
<space/></arg><arg name="title">ISO/IEC 1989:20xx FCD 1.0 – Programming language COBOL
<space/></arg><arg name="author">ISO/IEC JTC 1/SC 22/WG 4
<space/></arg><arg name="format">PDF
<space/></arg><arg name="publisher">ISO
<space/></arg><arg name="date">13 July 2010
<space/></arg><arg name="accessdate">9 February 2014
</arg></template></listitem><listitem><template><target>cite web</target><arg name="ref">harv
<space/></arg><arg name="url">http://home.comcast.net/~wmklein/DOX/History.pdf
<space/></arg><arg name="title">The History of COBOL
<space/></arg><arg name="date">4 October 2010
<space/></arg><arg name="accessdate">7 January 2014
<space/></arg><arg name="last">Klein
<space/></arg><arg name="first">William M.
<space/></arg><arg name="archiveurl">https://web.archive.org/web/20140107192608/http://home.comcast.net/~wmklein/DOX/History.pdf
<space/></arg><arg name="archivedate">7 January 2013
<space/></arg><arg name="deadurl">no
<space/></arg><arg name="format">PDF
</arg></template></listitem><listitem><template><target>cite conference</target><arg name="ref">harv
<space/></arg><arg name="first">Michael
<space/></arg><arg name="last">Marcotty
<space/></arg><arg name="p">263
<space/></arg><arg name="title">Transcript of question and answer session
<space/></arg><arg name="editor1-last"><space/>Wexelblat
<space/></arg><arg name="editor1-first"><space/>Richard L.
<space/></arg><arg name="conference"><space/>History of Programming Languages
<space/></arg><arg name="year">1978
<space/></arg><arg name="publisher"><space/>Academic Press
<space/></arg><arg name="publication-date">1981
<space/></arg><arg name="isbn"><space/>0127450408
<space/></arg><arg name="doi"><space/>10.1145/800025.1198370
</arg></template></listitem><listitem><template><target>cite book</target><arg name="ref">harv
<space/></arg><arg name="title">A Simplified Guide to Structured COBOL Programming
<space/></arg><arg name="publisher">Wiley
<space/></arg><arg name="year">1988
<space/></arg><arg name="isbn">0471610542
<space/></arg><arg name="first1">Daniel D.
<space/></arg><arg name="last1">McCracken
<space/></arg><arg name="first2">Donald G.
<space/></arg><arg name="last2">Golden
<space/></arg><arg name="edition">2nd
<space/></arg><arg name="lccn">87034608
<space/></arg><arg name="authorlink1">Daniel D. McCracken
</arg></template></listitem><listitem><template><target>cite journal</target><arg name="ref">harv
<space/></arg><arg name="title">PERFORM considered harmful
<space/></arg><arg name="journal">Communications of the ACM
<space/></arg><arg name="date">August 1992
<space/></arg><arg name="doi">10.1145/135226.376106 
<space/></arg><arg name="volume">35
<space/></arg><arg name="issue">8
<space/></arg><arg name="pages">125–128
<space/></arg><arg name="first">Richard L.
<space/></arg><arg name="last">Riehle
<space/></arg><arg name="publisher">[[Association for Computing Machinery|ACM]]
</arg></template></listitem><listitem><template><target>Cite conference</target><arg name="ref">harv
<space/></arg><arg name="title">A method of combining ALGOL and COBOL
<space/></arg><arg name="first">Jean E.
<space/></arg><arg name="last">Sammet
<space/></arg><arg name="authorlink">Jean E. Sammet
<space/></arg><arg name="date">May 1961
<space/></arg><arg name="conference">Papers presented at the May 9–11, 1961, western joint IRE–AIEE–ACM computer conference
<space/></arg><arg name="doi">10.1145/1460690.1460734
<space/></arg><arg name="pages">379–387
<space/></arg><arg name="publisher">[[Association for Computing Machinery|ACM]]
</arg></template></listitem><listitem><template><target>cite conference</target><arg name="ref">harv
<space/></arg><arg name="first">Jean E.
<space/></arg><arg name="last">Sammet
<space/></arg><arg name="title">The early history of COBOL
<space/></arg><arg name="editor1-last"><space/>Wexelblat
<space/></arg><arg name="editor1-first"><space/>Richard L.
<space/></arg><arg name="conference"><space/>History of Programming Languages
<space/></arg><arg name="year">1978a
<space/></arg><arg name="publisher"><space/>Academic Press
<space/></arg><arg name="publication-date">1981
<space/></arg><arg name="isbn"><space/>0127450408
<space/></arg><arg name="doi"><space/>10.1145/800025.1198367
</arg></template></listitem><listitem><template><target>cite conference</target><arg name="ref">harv
<space/></arg><arg name="first">Jean E.
<space/></arg><arg name="last">Sammet
<space/></arg><arg name="title">Transcript of presentation
<space/></arg><arg name="editor1-last"><space/>Wexelblat
<space/></arg><arg name="editor1-first"><space/>Richard L.
<space/></arg><arg name="conference"><space/>History of Programming Languages
<space/></arg><arg name="year">1978b
<space/></arg><arg name="publisher"><space/>Academic Press
<space/></arg><arg name="publication-date">1981
<space/></arg><arg name="isbn"><space/>0127450408
<space/></arg><arg name="doi"><space/>10.1145/800025.1198368
</arg></template></listitem><listitem><template><target>cite book</target><arg name="ref">harv
<space/></arg><arg name="url">http://books.google.co.uk/books?id</arg><arg name="title">Concise Encyclopedia of Computer Science
<space/></arg><arg name="publisher">Wiley
<space/></arg><arg name="first">Jean E.
<space/></arg><arg name="last">Sammet
<space/></arg><arg name="oclc">249810423
<space/></arg><arg name="isbn">978-0470090954
<space/></arg><arg name="editor-first">Edwin D.
<space/></arg><arg name="editor-last">Reilly
<space/></arg><arg name="date">23 July 2004
<space/></arg><arg name="section">COBOL
</arg></template></listitem><listitem><template><target>cite journal</target><arg name="ref">harv
<space/></arg><arg name="title">The Relationship Between COBOL and Computer Science
<space/></arg><arg name="journal">[[Annals of the History of Computing]]<space/></arg><arg name="date">October 1985 
<space/></arg><arg name="volume">7
<space/></arg><arg name="issue">4
<space/></arg><arg name="pages">348–352
<space/></arg><arg name="first">B.
<space/></arg><arg name="last">Shneiderman
<space/></arg><arg name="publisher">[[IEEE]]
<space/></arg><arg name="doi">10.1109/MAHC.1985.10041
</arg></template></listitem></list><paragraph><template><target>refend</target></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>sisterlinks</target><arg name="d">Q131140</arg><arg name="n">no</arg><arg name="voy">no</arg><arg name="s">no</arg><arg name="q">no</arg><arg name="m">no</arg><arg name="mw">no</arg><arg name="species">no</arg><arg name="commons">Category:COBOL</arg></template></paragraph><list type='bullet'><listitem><template><target>Official website</target><arg>http://cobolstandard.info/</arg></template></listitem><listitem><template><target>DMOZ</target><arg>Computers/Programming/Languages/Cobol/</arg></template></listitem><listitem><link type='external' href='http://sourceforge.net/projects/open-cobol/'>GnuCobol</link></listitem><listitem><link type='external' href='http://mainframe.wiki/cobolSandBox.php/'>Sandbox for GnuCobol tinkering</link></listitem><listitem><link type='external' href='http://vintagebigblue.org/Compilerator/COBOL/dosvsCOBOLCompile.php/'>Web enabled COBOL-F compiler for small experiments</link></listitem></list><paragraph><template><target>Major programming languages</target></template><template><target>ISO standards</target></template></paragraph><paragraph><template><target>Authority control</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Cobol</target></template><link><target>Category:COBOL</target><part></part></link><link><target>Category:Object-oriented programming languages</target></link><link><target>Category:.NET programming languages</target></link><link><target>Category:Programming languages created in 1959</target></link><link><target>Category:Programming languages with an ISO standard</target></link><link><target>Category:Procedural programming languages</target></link><link><target>Category:Cross-platform software</target></link><link><target>Category:Statically typed programming languages</target></link><link><target>Category:Class-based programming languages</target></link><link><target>Category:Programming languages created by women</target></link></paragraph></article>