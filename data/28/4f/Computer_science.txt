{{use mdy dates|datdae=December 2014|date=August 2015}}
<div class="thumb tright">
<div class="thumbinner" style="width:300px;">
{| style="border:1px solid #ccc;"
|-
| [[File:Lambda lc.svg|144px|alt=large capital lambda|Programming language theory|link=Programming language theory]]
| [[File:Sorting quicksort anim frame.png|144px|alt=Plot of a quicksort algorithm|Computational complexity theory|link=Computational complexity theory]]
|-
| [[File:Utah teapot simple 2.png|144px|alt=Utah teapot representing computer graphics|Computer graphics|link=Computer graphics (computer science)]]
| [[File:3-Tastenmaus Microsoft.jpg|144px|alt=Microsoft Tastenmaus mouse representing human-computer interaction|Human–computer interaction|link=Human–computer interaction]]
|}
<div class="thumbcaption">Computer science deals with the theoretical foundations of information and computation, together with practical techniques for the implementation and application of these foundations.</div>
</div>
</div>

'''Computer science''' is the [[science|scientific]] and practical approach to [[computation]] and its applications. It is the systematic study of the feasibility, structure, expression, and mechanization of the methodical [[Procedure (computer science)|procedures]] (or [[algorithm]]s) that underlie the acquisition, representation, processing, storage, communication of, and access to [[information]]. An alternate, more succinct definition of computer science is the study of automating algorithmic processes that scale. A [[computer scientist]] specializes in the theory of computation and the design of computational systems.<ref>{{cite web |url=http://wordnetweb.princeton.edu/perl/webwn?s=computer%20scientist |title=WordNet Search—3.1 |publisher=Wordnetweb.princeton.edu |accessdate=2012-05-14}}</ref>
 
Its fields can be divided into a variety of theoretical and practical disciplines. Some fields, such as [[computational complexity theory]] (which explores the fundamental properties of [[Computational problem|computational]] and intractable problems), are highly abstract, while fields such as [[Computer graphics (computer science)|computer graphics]] emphasize real-world visual applications. Still other fields focus on the challenges in implementing computation. For example, [[programming language theory]] considers various approaches to the description of computation, while the study of [[computer programming]] itself investigates various aspects of the use of [[programming language]] and [[complex systems]]. [[Human–computer interaction]] considers the challenges in making computers and computations useful, usable, and [[Computer accessibility|universally accessible]] to humans.
{{TOClimit|4}}

==History==
{{main|History of computer science }}

[[File:Babbage40.png|upright|thumb|[[Charles Babbage]] is credited with inventing the first mechanical computer.]]
[[File:Ada lovelace.jpg|upright|thumb|[[Ada Lovelace]] is credited with writing the first [[algorithm]] intended for processing on a computer.]]

The earliest foundations of what would become computer science predate the invention of the modern [[digital computer]]. Machines for calculating fixed numerical tasks such as the [[abacus]] have existed since antiquity, aiding in computations such as multiplication and division. Further, [[algorithm]]s for performing computations have existed since antiquity, even before the development of sophisticated computing equipment. The ancient [[Sanskrit]] treatise [[Shulba Sutras]], or "Rules of the Chord", is a book of algorithms written in 800 BC for constructing geometric objects like altars using a peg and chord, an early precursor of the modern field of [[computational geometry]].

[[Blaise Pascal]] designed and constructed the first working mechanical calculator, [[Pascal's calculator]], in 1642.<ref>{{cite web|title=Blaise Pascal|url=http://www-history.mcs.st-andrews.ac.uk/Biographies/Pascal.html|publisher=School of Mathematics and Statistics University of St Andrews, Scotland}}</ref> In 1673, [[Gottfried Leibniz]] demonstrated a digital mechanical calculator, called the [[Stepped Reckoner]].<ref>{{cite web|title=A Brief History of Computing|url=http://blogs.royalsociety.org/history-of-science/2012/06/25/history-of-computing/}}</ref> He may be considered the first computer scientist and information theorist, for, among other reasons, documenting the binary number system. In 1820, [[Charles Xavier Thomas|Thomas de Colmar]] launched the [[mechanical calculator]] industry<ref group=note>In 1851</ref> when he released his simplified [[arithmometer]], which was the first calculating machine strong enough and reliable enough to be used daily in an office environment. [[Charles Babbage]] started the design of the first ''automatic mechanical calculator'', his [[Difference Engine]], in 1822, which eventually gave him the idea of the first ''programmable mechanical calculator'', his [[Analytical Engine]].<ref>{{cite web |url=http://www.sciencemuseum.org.uk/on-line/babbage/index.asp |title=Science Museum—Introduction to Babbage |accessdate=2006-09-24 |archiveurl=https://web.archive.org/web/20060908054017/http://www.sciencemuseum.org.uk/on-line/babbage/index.asp |archivedate=2006-09-08}}</ref> He started developing this machine in 1834 and "in less than two years he had sketched out many of the salient features of the modern [[computer]]".<ref name="Hyman1982">{{cite book |author=Anthony Hyman |title=Charles Babbage, pioneer of the computer |year=1982}}</ref> "A crucial step was the adoption of a punched card system derived from the Jacquard loom"<ref name="Hyman1982" /> making it infinitely programmable.<ref group=note>"The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new, something much more than a sophisticated calculating machine." [[#COLLIER|Bruce Collier]], 1970</ref> In 1843, during the translation of a French article on the Analytical Engine, [[Ada Lovelace]] wrote, in one of the many notes she included, an algorithm to compute the [[Bernoulli number]]s, which is considered to be the first computer program.<ref>{{cite web|url=http://www.scottlan.edu/Lriddle/women/ada-love.htm |title=A Selection and Adaptation From Ada's Notes found in Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA |accessdate=2006-05-04 |deadurl=yes |archiveurl=https://web.archive.org/20060210172109/http://www.scottlan.edu:80/lriddle/women/ada-love.htm |archivedate=10 February 2006 }}</ref> Around 1885, [[Herman Hollerith]] invented the [[tabulating machine|tabulator]], which used [[punched card]]s to process statistical information; eventually his company became part of [[IBM]]. In 1937, one hundred years after Babbage's impossible dream, [[Howard H. Aiken|Howard Aiken]] convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business<ref>"In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another", [[#AIKEN|Bernard Cohen]], p.44 (2000)</ref> to develop his giant programmable calculator, the [[Harvard Mark I|ASCC/Harvard Mark I]], based on Babbage's Analytical Engine, which itself used cards and a central computing unit. When the machine was finished, some hailed it as "Babbage's dream come true".<ref>[[#ORIGINS|Brian Randell]], p. 187, 1975</ref>

During the 1940s, as new and more powerful [[computing]] machines were developed, the term ''computer'' came to refer to the machines rather than their human predecessors.<ref>The [[Association for Computing Machinery]] (ACM) was founded in 1947.</ref> As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study [[computation]] in general. Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.<ref name="Denning_cs_discipline"/><ref>{{cite web |url=http://www.cl.cam.ac.uk/conference/EDSAC99/statistics.html |title=Some EDSAC statistics |publisher=Cl.cam.ac.uk |accessdate=2011-11-19}}</ref> The world's first computer science degree program, the [[Cambridge Diploma in Computer Science]], began at the [[University of Cambridge]] [[Cambridge Computer Lab|Computer Laboratory]] in 1953. The first computer science degree program in the United States was formed at [[Purdue University]] in 1962.<ref>{{cite web |url=http://www.cs.purdue.edu/about/conte.html |title=Computer science pioneer Samuel D. Conte dies at 85 |date=July 1, 2002 |publisher=Purdue Computer Science |accessdate=December 12, 2014}}</ref> Since practical computers became available, many applications of computing have become distinct areas of study in their own rights.

Although many initially believed it was impossible that computers themselves could actually be a scientific field of study, in the late fifties it gradually became accepted among the greater academic population.<ref name="Levy1984">{{cite book |authorlink=Steven Levy |last=Levy |first=Steven |title=[[Hackers: Heroes of the Computer Revolution]] |year=1984 |isbn=0-385-19195-2 |publisher=Doubleday }}</ref><ref name="Tedre2014">{{cite book |last=Tedre |first=Matti |title=The Science of Computing: Shaping a Discipline |year=2014 |publisher=Taylor and Francis / CRC Press }}</ref> It is the now well-known [[IBM]] brand that formed part of the computer science revolution during this time. IBM (short for International Business Machines) released the IBM 704<ref>{{cite web|url=http://www.computerhistory.org/revolution/computer-graphics-music-and-art/15/222/633 |title=IBM 704 Electronic Data Processing System—CHM Revolution |publisher=Computerhistory.org |accessdate=2013-07-07}}</ref> and later the IBM 709<ref>{{cite web |title=IBM 709: a powerful new data processing system |publisher=Computer History Museum |url=http://archive.computerhistory.org/resources/text/IBM/IBM.709.1957.102646304.pdf |accessdate=December 12, 2014}}</ref> computers, which were widely used during the exploration period of such devices. "Still, working with the IBM [computer] was frustrating […] if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again".<ref name="Levy1984"/> During the late 1950s, the computer science discipline was very much in its developmental stages, and such issues were commonplace.<ref name="Tedre2014"/>

Time has seen significant improvements in the usability and effectiveness of computing technology. Modern society has seen a significant shift in the users of computer technology, from usage only by experts and professionals, to a near-ubiquitous user base. Initially, computers were quite costly, and some degree of human aid was needed for efficient use—in part from professional computer operators. As computer adoption became more widespread and affordable, less human assistance was needed for common usage.

===Contributions===
[[File:Enigma.jpg|thumb|upright|The [[Germany|German]] military used the [[Enigma machine]] (shown here) during [[World War II]] for communications they wanted kept secret. The large-scale decryption of Enigma traffic at [[Bletchley Park]] was an important factor that contributed to Allied victory in WWII.<ref name="kahnbook"/>]]

Despite its short history as a formal academic discipline, computer science has made a number of fundamental contributions to [[science]] and [[society]]—in fact, along with [[electronics]], it is a founding science of the current epoch of human history called the [[Information Age]] and a driver of the [[information revolution|Information Revolution]], seen as the third major leap in human technological progress after the [[Industrial Revolution]] (1750–1850 CE) and the [[Neolithic Revolution|Agricultural Revolution]] (8000–5000 BC).

These contributions include:
* The start of the "[[Digital Revolution|digital revolution]]", which includes the current [[Information Age]] and the [[Internet]].<ref name="bgu">http://www.cis.cornell.edu/Dean/Presentations/Slides/bgu.pdf{{dead link|date=December 2014}}</ref>
* A formal definition of [[computation]] and [[computability]], and proof that there are computationally [[Undecidable problem|unsolvable]] and [[Computational complexity theory#Intractability|intractable]] problems.<ref>{{Cite journal |author=Constable, R. L. |date=March 2000 |url=http://www.cs.cornell.edu/cis-dean/bgu.pdf | title=Computer Science: Achievements and Challenges circa 2000 |format=PDF}}</ref>
* The concept of a [[programming language]], a tool for the precise expression of methodological information at various levels of abstraction.<ref>{{cite book |last=Abelson |first=H. |authorlink=Hal Abelson |author2=G.J. Sussman with J. Sussman |year=1996 |title=[[Structure and Interpretation of Computer Programs]] |edition=2nd |publisher=MIT Press |isbn=0-262-01153-0 |quote=The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called ''procedural epistemology'' — the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects.}}</ref>
* In [[cryptography]], [[Cryptanalysis of the Enigma|breaking the Enigma code]] was an important factor contributing to the Allied victory in World War II.<ref name="kahnbook">[[David Kahn (writer)|David Kahn]], [[The Codebreakers]], 1967, ISBN 0-684-83130-9.</ref>
* [[Computational science|Scientific computing]] enabled practical evaluation of processes and situations of great complexity, as well as experimentation entirely by software. It also enabled advanced study of the mind, and mapping of the human genome became possible with the [[Human Genome Project]].<ref name="bgu"/> [[Distributed computing]] projects such as [[Folding@home]] explore [[protein folding]].
* [[Algorithmic trading]] has increased the [[Economic efficiency|efficiency]] and [[Market liquidity|liquidity]] of financial markets by using [[artificial intelligence]], [[machine learning]], and other [[statistics|statistical]] and [[Numerical analysis|numerical]] techniques on a large scale.<ref>{{cite news|url=http://www.telegraph.co.uk/money/main.jhtml?xml=/money/2006/08/27/ccsoft27.xml |title=Black box traders are on the march |newspaper=The Telegraph |date=August 26, 2006 |deadurl=yes |archiveurl=https://web.archive.org/20141008080148/http://www.telegraph.co.uk/money/main.jhtml?xml=/money/2006/08/27/ccsoft27.xml |archivedate=8 October 2014 }}</ref> High frequency algorithmic trading can also exacerbate [[volatility (finance)|volatility]].<ref>{{cite web |url=http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1686004 |title=The Impact of High Frequency Trading on an Electronic Market |doi=10.2139/ssrn.1686004 |publisher=Papers.ssrn.com |accessdate=2012-05-14}}</ref>
* [[Computer graphics]] and [[computer-generated imagery]] have become ubiquitous in modern [[entertainment]], particularly in [[television]], [[Filmmaking|cinema]], [[advertising]], [[animation]] and [[video game]]s. Even films that feature no explicit [[computer-generated imagery|CGI]] are usually "filmed" now on [[digital camera]]s, or [[video editing|edited]] or [[Video post-processing|postprocessed]] using a digital video editor. {{Citation needed|date=October 2010}}
* [[Simulation]] of various processes, including computational [[fluid dynamics]], physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are [[SPICE]], as well as software for physical realization of new (or modified) designs. The latter includes essential design software for [[integrated circuit]]s.{{Citation needed|date=October 2010}}
* [[Artificial intelligence]] is becoming increasingly important as it gets more efficient and complex. There are many applications of AI, some of which can be seen at home, such as [[robotic vacuum cleaner]]s. It is also present in video games and on the modern battlefield in drones, anti-missile systems, and [[Legged Squad Support System|squad support robots]].

==Philosophy==
{{main|Philosophy of computer science}}
A number of computer scientists have argued for the distinction of three separate paradigms in computer science. [[Peter Wegner]] argued that those paradigms are science, technology, and mathematics.<ref>{{cite conference |author=Wegner, P. |title=Research paradigms in computer science—Proceedings of the 2nd international Conference on Software Engineering |location=San Francisco, California, United States |date=October 13–15, 1976 |publisher=IEEE Computer Society Press, Los Alamitos, CA}}</ref> [[Peter J. Denning|Peter Denning]]'s working group argued that they are theory, abstraction (modeling), and design.<ref>{{Cite journal | last1 = Denning | first1 = P. J. | last2 = Comer | first2 = D. E. | last3 = Gries | first3 = D. | last4 = Mulder | first4 = M. C. | last5 = Tucker | first5 = A. | last6 = Turner | first6 = A. J. | last7 = Young | first7 = P. R. | title = Computing as a discipline | journal = Communications of the ACM | volume = 32 | pages = 9–23 | date = Jan 1989 | month = | doi = 10.1145/63238.63239}}</ref> Amnon H. Eden described them as the "rationalist paradigm" (which treats computer science as a branch of mathematics, which is prevalent in theoretical computer science, and mainly employs [[deductive reasoning]]), the "technocratic paradigm" (which might be found in [[engineering]] approaches, most prominently in [[software engineering]]), and the "scientific paradigm" (which approaches computer-related artifacts from the empirical perspective of [[natural science]]s, identifiable in some branches of [[artificial intelligence]]).<ref>{{Cite journal | first1 = A. H. | title = Three Paradigms of Computer Science | journal = [[Minds and Machines]] | last1 = Eden| volume = 17 | issue = 2 | year = 2007 | url = http://www.eden-study.org/articles/2007/three_paradigms_of_computer_science.pdf| doi = 10.1007/s11023-007-9060-8 | pages = 135–167}}</ref>

===Name of the field===
Although first proposed in 1956,<ref name="Tedre2014"/> the term "computer science" appears in a 1959 article in ''[[Communications of the ACM]]'',<ref name="Fine_1959">
{{cite journal
 |author=Louis Fine
 |year=1959
 |title=The Role of the University in Computers, Data Processing, and Related Fields
 |journal=Communications of the ACM
 |volume=2 |issue=9 |pages=7–14
 |doi=10.1145/368424.368427
}}</ref>
in which Louis Fein argues for the creation of a ''Graduate School in Computer Sciences'' analogous to the creation of [[Harvard Business School]] in 1921,<ref>{{cite web|title=Stanford University Oral History|url=http://library.stanford.edu/guides/stanford-university-oral-history|publisher=Stanford University|accessdate=May 30, 2013}}</ref> justifying the name by arguing that, like [[management science]], the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.<ref name="Fine_1959"/>
His efforts, and those of others such as [[numerical analysis|numerical analyst]] [[George Forsythe]], were rewarded: universities went on to create such programs, starting with Purdue in 1962.<ref>[[Donald Knuth]] (1972). ''[http://www.stanford.edu/dept/ICME/docs/history/forsythe_knuth.pdf "George Forsythe and the Development of Computer Science"]. ''Comms. ACM''. {{wayback|url=http://www.stanford.edu/dept/ICME/docs/history/forsythe_knuth.pdf |date=20140812013839 }}</ref> Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.<ref>{{cite web |author=Matti Tedre |date=2006 |url=http://epublications.uef.fi/pub/urn_isbn_952-458-867-6/urn_isbn_952-458-867-6.pdf |title=The Development of Computer Science: A Sociocultural Perspective |page=260 |accessdate=December 12, 2014}}</ref> Certain departments of major universities prefer the term ''computing science'', to emphasize precisely that difference. Danish scientist [[Peter Naur]] suggested the term ''datalogy'',<ref>
{{cite journal
 |author=Peter Naur
 |year=1966
 |title=The science of datalogy
 |journal=Communications of the ACM
 |volume=9 |issue=7 |page=485
 |doi=10.1145/365719.366510
}}</ref> to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. An alternative term, also proposed by Naur, is [[data science]]; this is now used for a distinct field of data analysis, including statistics and databases.

Also, in the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the ''Communications of the ACM''—''turingineer'', ''turologist'', ''flow-charts-man'', ''applied meta-mathematician'', and ''applied [[epistemology|epistemologist]]''.<ref>{{cite journal |title=Communications of the ACM |date=<!-- missing! --> |journal=Communications of the ACM |volume=1 |issue=4 |page=6| doi = 10.1145/368796.368802}}</ref> Three months later in the same journal, ''comptologist'' was suggested, followed next year by ''hypologist''.<ref>Communications of the ACM 2(1):p.4</ref> The term ''computics'' has also been suggested.<ref>IEEE Computer 28(12):p.136</ref> In Europe, terms derived from contracted translations of the expression "automatic information" (e.g. "informazione automatica" in Italian) or "information and mathematics" are often used, e.g. ''informatique'' (French), ''Informatik'' (German), ''informatica'' (Italy, The Netherlands), ''informática'' (Spain, Portugal), ''informatika'' ([[Slavic languages]] and [[Hungarian language|Hungarian]]) or ''pliroforiki'' (''πληροφορική'', which means informatics) in [[Greek language|Greek]]. Similar words have also been adopted in the UK (as in ''the School of Informatics of the University of Edinburgh'').<ref>P. Mounier-Kuhn, ''L'Informatique en France, de la seconde guerre mondiale au Plan Calcul. L'émergence d'une science'', Paris, PUPS, 2010, ch. 3 & 4.</ref>

A folkloric quotation, often attributed to—but almost certainly not first formulated by—[[Edsger W. Dijkstra|Edsger Dijkstra]], states that "computer science is no more about computers than astronomy is about telescopes."<ref group=note>See the entry
"[[q:Computer science|Computer science]]" on Wikiquote for the history of this quotation.</ref> The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of [[computer hardware]] is usually considered part of [[computer engineering]], while the study of commercial [[computer system]]s and their deployment is often called [[information technology]] or [[information system]]s. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as [[philosophy]], [[cognitive science]], [[computational linguistics|linguistics]], [[mathematics]], [[physics]], [[biology]], [[computational statistics|statistics]], and [[logic]].

Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.<ref name="Denning_cs_discipline" /> Early computer science was strongly influenced by the work of mathematicians such as [[Kurt Gödel]] and [[Alan Turing]], and there continues to be a useful interchange of ideas between the two fields in areas such as [[mathematical logic]], [[category theory]], [[domain theory]], and [[algebra]].<ref name="Tedre2014"/>

The relationship between computer science and [[software engineering]] is a contentious issue, which is further muddied by [[Software engineer#Use of the title .22Engineer.22|disputes]] over what the term "software engineering" means, and how computer science is defined.<ref>{{Cite journal | last1 = Tedre | first1 = M. | title = Computing as a Science: A Survey of Competing Viewpoints | doi = 10.1007/s11023-011-9240-4 | journal = Minds and Machines | volume = 21 | issue = 3 | pages = 361–387 | year = 2011 | pmid =  | pmc = }}</ref> [[David Parnas]], taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.<ref>{{Cite journal | last1 = Parnas | first1 = D. L. | journal = Annals of Software Engineering | volume = 6 | pages = 19–37 | year = 1998 | doi = 10.1023/A:1018949113292|title=Software engineering programmes are not computer science programmes}}, p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, […]"</ref>

The academic, political, and funding aspects of computer science tend to depend on whether a department formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with [[computational science]]. Both types of departments tend to make efforts to bridge the field educationally if not across all research.

==Areas of computer science==
{{further|Outline of computer science}}
As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.<ref name="CSAB1997">{{cite web|author=Computing Sciences Accreditation Board|title=Computer Science as a Profession|url=http://www.csab.org/comp_sci_profession.html |date=May 28, 1997| accessdate=2010-05-23 |archiveurl = https://web.archive.org/web/20080617030847/http://www.csab.org/comp_sci_profession.html |archivedate = 2008-06-17}}</ref><ref>{{cite book |author=Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council |title=Computer Science: Reflections on the Field, Reflections from the Field|url=http://www.nap.edu/catalog.php?record_id=11106#toc|publisher=National Academies Press|isbn=978-0-309-09301-9|year=2004}}</ref>
[[CSAB (professional organization)|CSAB]], formerly called ''Computing Sciences Accreditation Board''—which is made up of representatives of the [[Association for Computing Machinery]] (ACM), and the [[IEEE Computer Society]] (IEEE CS)<ref>{{cite web |url=http://www.csab.org/ |title=CSAB Leading Computer Education |publisher=CSAB |date=2011-08-03 |accessdate=2011-11-19}}</ref>—identifies four areas that it considers crucial to the discipline of computer science: ''theory of computation'', ''algorithms and data structures'', ''programming methodology and languages'', and ''computer elements and architecture''. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, human–computer interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.<ref name="CSAB1997"/>

===Theoretical computer science===
{{main|Theoretical computer science}}
The broader field of [[theoretical computer science]] encompasses both the classical theory of computation and a wide range of other topics that focus on the more abstract, logical, and mathematical aspects of computing.

====Theory of computation====
{{main|Theory of computation}}
According to [[Peter J. Denning|Peter Denning]], the fundamental question underlying computer science is, "What can be (efficiently) automated?"<ref name="Denning_cs_discipline">{{cite journal | last=Denning | first=Peter J. | authorlink=Peter J. Denning | year=2000 | title=Computer Science: The Discipline | url=http://www.idi.ntnu.no/emner/dif8916/denning.pdf | journal=Encyclopedia of Computer Science | format=PDF |archiveurl = https://web.archive.org/web/20060525195404/http://www.idi.ntnu.no/emner/dif8916/denning.pdf |archivedate = 2006-05-25}}</ref> Theory of computation is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question, [[computability theory]] examines which computational problems are solvable on various theoretical [[models of computation]]. The second question is addressed by [[computational complexity theory]], which studies the time and space costs associated with different approaches to solving a multitude of computational problems.

The famous [[P versus NP problem|P = NP?]] problem, one of the [[Millennium Prize Problems]],<ref>[http://www.claymath.org/millennium/P_vs_NP/ Clay Mathematics Institute] P = NP {{wayback|url=http://www.claymath.org/millennium/P_vs_NP/ | date=20131014194456}}</ref> is an open problem in the theory of computation.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| [[File:DFAexample.svg|96px]]
| [[File:Wang tiles.png|96px]]
| '''P = NP?'''
| '''GNITIRW-TERCES'''
| [[File:Blochsphere.svg|96px]]
|-
| [[Automata theory]]
| [[Computability theory]]
| [[Computational complexity theory]]
| [[Cryptography]]
| [[Quantum computer|Quantum computing theory]]
|}

====Information and coding theory====
{{main|Information theory|Coding theory}}
Information theory is related to the quantification of information. This was developed by [[Claude Shannon]] to find fundamental limits on [[signal processing]] operations such as compressing data and on reliably storing and communicating data.<ref>{{cite web |date=October 14, 2002 |last=P. Collins |first=Graham |title=Claude E. Shannon: Founder of Information Theory |url=http://www.scientificamerican.com/article.cfm?id=claude-e-shannon-founder |publisher=Scientific American |accessdate=December 12, 2014}}</ref>
Coding theory is the study of the properties of [[code]]s (systems for converting information from one form to another) and their fitness for a specific application. Codes are used for [[data compression]], [[cryptography]], [[error detection and correction]], and more recently also for [[Linear network coding|network coding]]. Codes are studied for the purpose of designing efficient and reliable [[data transmission]] methods.

====Algorithms and data structures====
Algorithms and data structures is the study of commonly used computational methods and their computational efficiency.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| <math>O(n^2)</math>
| [[File:Sorting quicksort anim.gif|96px]]
| [[File:Singly linked list.png|96px]]
| [[File:TSP Deutschland 3.png|96px]]
| [[File:SimplexRangeSearching.png|96px]]
|-
| [[Analysis of algorithms]]
| [[Algorithm]]s
| [[Data structures]]
| [[Combinatorial optimization]]
| [[Computational geometry]]
|}

====Programming language theory====
{{main|Programming language theory}}
Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of [[programming language]]s and their individual [[Programming language#Elements|features]]. It falls within the discipline of computer science, both depending on and affecting [[mathematics]], [[software engineering]] and [[linguistics]]. It is an active research area, with numerous dedicated academic journals.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| <math>\Gamma\vdash x: \text{Int}</math>
| [[File:Compiler.svg|96px]]
| [[File:Python add5 syntax.svg|96px]]
|-
| [[Type theory]]
| [[Compiler construction|Compiler design]]
| [[Programming language]]s
|}

====Formal methods====
{{main|Formal methods}}
Formal methods are a particular kind of [[Mathematics|mathematically]] based technique for the [[formal specification|specification]], development and [[formal verification|verification]] of [[software]] and [[computer hardware|hardware]] systems. The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and [[life-critical system]]s, where [[safety]] or [[computer security|security]] is of utmost importance. Formal methods are best described as the application of a fairly broad variety of [[theoretical computer science]] fundamentals, in particular [[logic in computer science|logic]] calculi, [[formal language]]s, [[automata theory]], and [[program semantics]], but also [[type systems]] and [[algebraic data types]] to problems in software and hardware specification and verification.

===Applied computer science===
Applied computer science aims at identifying certain computer science concepts that can be used directly in solving real world problems.

====Artificial intelligence====
{{main|Artificial intelligence}}
Artificial intelligence (AI) aims to or is required to synthesise goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning and communication found in humans and animals. From its origins in [[cybernetics]] and in the [[History of artificial intelligence|Dartmouth Conference]] (1956), artificial intelligence research has been necessarily cross-disciplinary, drawing on areas of expertise such as [[applied mathematics]], [[Mathematical logic|symbolic logic]], [[semiotics]], [[electrical engineering]], [[philosophy of mind]], [[neurophysiology]], and [[social intelligence]]. AI is associated in the popular mind with [[Robotics|robotic development]], but the main field of practical application has been as an embedded component in areas of [[software development]], which require computational understanding. The starting-point in the late 1940s was [[Alan Turing]]'s question "Can computers think?", and the question remains effectively unanswered although the [[Turing test]] is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| [[File:Nicolas P. Rougier's rendering of the human brain.png|96px]]
| [[File:Human eye, rendered from Eye.png|96px]]
| [[File:Corner.png|96px]]
|-
| [[Machine learning]]
| [[Computer vision]]
| [[Image processing]]
|-
| [[File:KnnClassification.svg|96px]]
| [[File:Julia iteration data.png|96px]]
| [[File:sky.png|96px]]
|-
| [[Pattern recognition]]
| [[Data mining]]
| [[Evolutionary computation]]
|-
| [[File:neuron.svg|96px]]
| [[File:english.png|96px]]
| [[File:HONDA ASIMO.jpg|64px]]
|-
| [[Knowledge representation]]
| [[Natural language processing]]
| [[Robotics]]
|}

====Computer architecture and engineering====
{{main|Computer architecture|Computer engineering}}
Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory.<ref>{{cite web|last=A. Thisted|first=Ronald|title=Computer Architecture |url=http://galton.uchicago.edu/~thisted/Distribute/comparch.pdf|publisher=The University of Chicago|date=April 7, 1997}}</ref> The field often involves disciplines of computer engineering and electrical engineering, selecting and interconnecting hardware components to create computers that meet functional, performance, and cost goals.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| [[File:NOR ANSI.svg|96px]]
| [[File:Fivestagespipeline.png|96px]]
| [[File:SIMD.svg|96px]]
|-
| [[Boolean algebra|Digital logic]]
| [[Microarchitecture]]
| [[Multiprocessing]]
|-
| [[File:Roomba original.jpg|96px]]
| [[File:flowchart.png|96px]]
| [[File:Operating system placement.svg|96px]]
|-
| [[Ubiquitous computing]]
| [[Systems architecture]]
| [[Operating system]]s
|}

====Computer performance analysis====
{{main|Computer performance}}
Computer performance analysis is the study of work flowing through computers with the general goals of improving [[throughput]], controlling [[Response time (technology)|response time]], using resources efficiently, eliminating [[Bottleneck#Computing|bottlenecks]], and predicting performance under anticipated peak loads.<ref>{{cite book | last = Wescott | first = Bob | title = The Every Computer Performance Book, Chapter 3: Useful laws  | publisher = [[CreateSpace]] | date = 2013 | isbn = 1482657759}}</ref>

====Computer graphics and visualization====
{{main|Computer graphics (computer science)}}
Computer graphics is the study of digital visual contents, and involves synthesis and manipulation of image data. The study is connected to many other fields in computer science, including [[computer vision]], [[image processing]], and [[computational geometry]], and is heavily applied in the fields of [[special effects]] and [[video games]].

====Computer security and cryptography====
{{main|Computer security|Cryptography}}
Computer security is a branch of computer technology, whose objective includes protection of information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users. Cryptography is the practice and study of hiding (encryption) and therefore deciphering (decryption) information. Modern cryptography is largely related to computer science, for many encryption and decryption algorithms are based on their computational complexity.

====Computational science====
[[Computational science]] (or [[scientific computing]]) is the field of study concerned with constructing [[scientific modelling|mathematical models]] and [[numerical analysis|quantitative analysis]] techniques and using computers to analyze and solve [[Science|scientific]] problems. In practical use, it is typically the application of [[computer simulation]] and other forms of [[computation]] to problems in various scientific disciplines.

{| style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"
|-
| [[File:Lorenz attractor yb.svg|96px]]
| [[File:Quark wiki.jpg|96px]]
| [[File:Naphthalene-3D-balls.png|96px]]
| [[File:1u04-argonaute.png|96px]]
|-
| [[Numerical analysis]]
| [[Computational physics]]
| [[Computational chemistry]]
| [[Bioinformatics]]
|}

====Computer networks====
{{main|Computer network}}
This branch of computer science aims to manage networks between computers worldwide.

====Concurrent, parallel and distributed systems====
{{main|Concurrency (computer science)|Distributed computing}}
Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. A number of mathematical models have been developed for general concurrent computation including [[Petri net]]s, [[Process calculus|process calculi]] and the [[Parallel random-access machine|Parallel Random Access Machine]] model. A distributed system extends the idea of concurrency onto multiple computers connected through a network. Computers within the same distributed system have their own private memory, and information is often exchanged among themselves to achieve a common goal.

====Databases====
{{main|Database}}
A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through [[database model]]s and [[query language]]s.

====Software engineering====
{{main|Software engineering}}
{{see also|Computer programming}}
Software engineering is the study of designing, implementing, and modifying software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software—it doesn't just deal with the creation or manufacture of new software, but its internal maintenance and arrangement. Both computer applications software engineers and computer systems software engineers are projected to be among the fastest growing occupations from 2008 to 2018.

==The great insights of computer science==
The philosopher of computing [[William J. Rapaport|Bill Rapaport]] noted three ''Great Insights of Computer Science'':<ref>{{cite web|url=http://www.cse.buffalo.edu/~rapaport/computation.html|title=What Is Computation?|work=buffalo.edu}}</ref>
* [[Gottfried Wilhelm Leibniz]]'s, [[George Boole]]'s, [[Alan Turing]]'s, [[Claude Shannon]]'s, and [[Samuel Morse]]'s insight: there are only ''two objects'' that a computer has to deal with in order to represent "anything".
:: All the information about any computable problem can be represented using only 0 and 1 (or any other bistable pair that can flip-flop between two easily distinguishable states, such as "on/off", "magnetized/de-magnetized", "high-voltage/low-voltage", etc.).
{{see also|Digital physics}}
* [[Alan Turing]]'s insight: there are only ''five actions'' that a computer has to perform in order to do "anything".
:: Every algorithm can be expressed in a language for a computer consisting of only five basic instructions:
::* move left one location;
::* move right one location;
::* read symbol at current location;
::* print 0 at current location;
::* print 1 at current location.
{{see also|Turing machine}}
* [[Corrado Böhm]] and [[Giuseppe Jacopini]]'s insight: there are only ''three ways of combining'' these actions (into more complex ones) that are needed in order for a computer to do "anything".
:: Only three rules are needed to combine any set of basic instructions into more complex ones:
::* ''sequence'': first do this, then do that;
::* '' selection'': IF such-and-such is the case, THEN do this, ELSE do that;
::* ''repetition'': WHILE such-and-such is the case DO this.
:: Note that the three rules of Boehm's and Jacopini's insight can be further simplified with the use of [[goto]] (which means it is more elementary than [[structured programming]]).
{{see also|Elementary function arithmetic#Friedman's grand conjecture}}

==Academia==
{{further|List of computer science conferences|Category:Computer science journals}}
Conferences are important events for computer science research. During these conferences, researchers from the public and private sectors present their recent work and meet. Unlike in most other academic fields, in computer science, the prestige of [[proceedings|conference papers]] is greater than that of journal publications.<ref>{{cite journal|last1=Meyer|first1=Bertrand|title=Viewpoint: Research evaluation for computer science|journal=Communications of the ACM|date=April 2009|volume=25|issue=4|pages=31–34|doi=10.1145/1498765.1498780}}</ref><ref>{{cite web|last1=Patterson|first1=David|title=Evaluating Computer Scientists and Engineers For Promotion and Tenure|url=http://cra.org/resources/bp-view/evaluating_computer_scientists_and_engineers_for_promotion_and_tenure/|publisher=Computing Research Association|date=August 1999}}</ref> One proposed explanation for this is the quick development of this relatively new field requires rapid review and distribution of results, a task better handled by conferences than by journals.<ref>{{cite journal|last1=Fortnow|first1=Lance|title=Viewpoint: Time for Computer Science to Grow Up|journal=Communications of the ACM|date=August 2009|volume=52|issue=8|pages=33–35|doi=10.1145/1536616.1536631|url=http://cacm.acm.org/magazines/2009/8/34492-viewpoint-time-for-computer-science-to-grow-up/fulltext}}</ref>

==Education==
{{see also|Women in computing}}
Since computer science is a relatively new field, it is not as widely taught in schools and universities as other academic subjects. For example, in 2014, [[Code.org]] estimated that only 10 percent of high schools in the United States offered computer science education.<ref>{{cite news|title=Computer Science: Not Just an Elective Anymore|url=http://www.edweek.org/ew/articles/2014/02/26/22computer_ep.h33.html|work=Education Week|date=February 25, 2014}}</ref> A 2010 report by Association for Computing Machinery (ACM) and Computer Science Teachers Association (CSTA) revealed that only 14 out of 50 states have adopted significant education standards for high school computer science.<ref>{{cite web|title=Running On Empty|url=http://runningonempty.acm.org/fullreport2.pdf | date= October 2010}}</ref> However, computer science education is growing. Some countries, such as Israel, New Zealand and South Korea, have already included computer science in their respective national secondary education curriculum.<ref>{{cite news|title=A is for algorithm|url=http://www.economist.com/news/international/21601250-global-push-more-computer-science-classrooms-starting-bear-fruit|work=The Economist|date=April 26, 2014}}</ref><ref>{{cite web|title=Computing at School International comparisons|url=http://www.computingatschool.org.uk/data/uploads/internationalcomparisons-v5.pdf|accessdate=20 July 2015}}</ref> Several countries are following suit.<ref>{{cite news|title=Adding Coding to the Curriculum|url=http://www.nytimes.com/2014/03/24/world/europe/adding-coding-to-the-curriculum.html|work=New York Times|date=March 23, 2014}}</ref>

In most countries, there is a significant gender gap in computer science education. For example, in the US about 20% of computer science degrees in 2012 were conferred to women.<ref>{{cite web|title=IT gender gap: Where are the female programmers?|url=http://www.randalolson.com/2014/06/14/percentage-of-bachelors-degrees-conferred-to-women-by-major-1970-2012/|accessdate=20 July 2015}}</ref> This gender gap also exists in other Western countries.<ref name="gender">{{cite web|title=IT gender gap: Where are the female programmers?|url=http://www.techrepublic.com/blog/software-engineer/it-gender-gap-where-are-the-female-programmers/}}</ref> However, in some parts of the world, the gap is small or nonexistent. In 2011, approximately half of all computer science degrees in [[Malaysia]] were conferred to women.<ref>{{cite web|title=what gender is science|url=http://www.soc.ucsb.edu/faculty/mariacharles/documents/WhatGenderisScience.pdf|accessdate=20 July 2015}}</ref> In 2001, women made up 54.5% of computer science graduates in [[Guyana]].<ref name="gender"/>

==See also==
{{main|Outline of computer science}}
{{portal|Computer science}}
{{colbegin|2}}
* [[Academic genealogy of computer scientists]]
* [[Informatics]]
* [[List of academic computer science departments]]
* [[List of computer scientists]]
* [[List of important publications in computer science|List of publications in computer science]]
* [[List of pioneers in computer science]]
* [[List of unsolved problems in computer science]]
* [[Outline of software engineering]]
* [[Technology transfer in computer science]]
* [[Turing Award]]
{{Wikipedia books link|Computer science}}
{{colend}}

==Notes==
{{reflist|group=note}}

==References==
{{reflist|30em}}

==Further reading==
{{refbegin|30em}}
; Overview
* {{cite book|first=Allen B.|last=Tucker|authorlink=Allen B. Tucker|title=Computer Science Handbook|edition=2nd|publisher=Chapman and Hall/CRC|year=2004|isbn=1-58488-360-X}}
** "Within more than 70 chapters, every one new or significantly revised, one can find any kind of information and references about computer science one can imagine. […] all in all, there is absolute nothing about Computer Science that can not be found in the 2.5 kilogram-encyclopaedia with its 110 survey articles […]." (Christoph Meinel, ''[[Zentralblatt MATH]]'')
* {{cite book|first=Jan|last=van Leeuwen|authorlink=Jan van Leeuwen|title=Handbook of Theoretical Computer Science|publisher=The MIT Press|year=1994|isbn=0-262-72020-5}}
** "[…] this set is the most unique and possibly the most useful to the [theoretical computer science] community, in support both of teaching and research […]. The books can be used by anyone wanting simply to gain an understanding of one of these areas, or by someone desiring to be in research in a topic, or by instructors wishing to find timely information on a subject they are teaching outside their major areas of expertise." (Rocky Ross, ''[[SIGACT News]]'')
* {{cite book|title=Encyclopedia of Computer Science|edition=4th|first1=Anthony|last1=Ralston|authorlink=Anthony Ralston|first2=Edwin D.|last2=Reilly|authorlink2=Edwin D. Reilly|first3=David|last3=Hemmendinger|authorlink3=David Hemmendinger|publisher=Grove's Dictionaries|year=2000|isbn=1-56159-248-X|url=http://portal.acm.org/ralston.cfm}}
** "Since 1976, this has been the definitive reference work on computer, computing, and computer science. […] Alphabetically arranged and classified into broad subject areas, the entries cover hardware, computer systems, information and data, software, the mathematics of computing, theory of computation, methodologies, applications, and computing milieu. The editors have done a commendable job of blending historical perspective and practical reference information. The encyclopedia remains essential for most public and academic library reference collections." (Joe Accardin, Northeastern Illinois Univ., Chicago)
* {{cite book|url=https://books.google.com/books?id=JTYPKxug49IC&printsec=frontcover#v=onepage&q&f=false|title=Milestones in Computer Science and Information Technology|author=Edwin D. Reilly| publisher=Greenwood Publishing Group|year=2003|isbn=978-1-57356-521-9}}
;Selected papers
* {{cite book|first=Donald E.|last=Knuth|authorlink=Donald Knuth|title=Selected Papers on Computer Science|publisher=CSLI Publications, [[Cambridge University Press]]|year=1996}}
* {{cite book|ref=COLLIER|last=Collier|first=Bruce|title=The little engine that could've: The calculating machines of Charles Babbage|publisher=Garland Publishing Inc|isbn=0-8240-0043-9|url=http://robroy.dyndns.info/collier/index.html}}
* {{cite book|ref=HAIKEN|first=Bernard|last=Cohen|title=Howard Aiken, Portrait of a computer pioneer|publisher=The MIT press|year=2000|isbn=978-0-2625317-9-5}}
* {{cite book|first=Matti|last=Tedre|title=The Science of Computing: Shaping a Discipline|publisher=CRC Press, [[Taylor & Francis]]|year=2014}}
* {{cite book|title=The origins of Digital computers, Selected Papers|last=Randell|first=Brian |year=1973|publisher=Springer-Verlag|isbn=3-540-06169-X}}
** "Covering a period from 1966 to 1993, its interest lies not only in the content of each of these papers — still timely today — but also in their being put together so that ideas expressed at different times complement each other nicely." (N. Bernard, ''Zentralblatt MATH'')
;Articles
* Peter J. Denning. ''[http://portal.acm.org/citation.cfm?id=1053309&coll=&dl=ACM&CFID=15151515&CFTOKEN=6184618 Is computer science science?]'', Communications of the ACM, April 2005.
* Peter J. Denning, ''[http://portal.acm.org/citation.cfm?id=971303&dl=ACM&coll=&CFID=15151515&CFTOKEN=6184618 Great principles in computing curricula]'', Technical Symposium on Computer Science Education, 2004.
* Research evaluation for computer science, Informatics Europe [http://www.eqanie.eu/media/Como%20Conference/Tanca-Research_Assessment_A_new_Initiative_by_Informatics_Europe.pdf report]. Shorter journal version: Bertrand Meyer, Christine Choppy, Jan van Leeuwen and Jorgen Staunstrup, ''Research evaluation for computer science'', in [[Communications of the ACM]], vol. 52, no. 4, pp.&nbsp;31–34, April 2009.
; Curriculum and classification
* [[Association for Computing Machinery]]. [http://www.acm.org/class/1998/overview.html 1998 ACM Computing Classification System]. 1998.
* Joint Task Force of Association for Computing Machinery (ACM), [[Association for Information Systems]] (AIS) and [[IEEE Computer Society]] (IEEE CS). [http://www.acm.org/education/curric_vols/CC2005-March06Final.pdf Computing Curricula 2005: The Overview Report]. September 30, 2005.
* [[Norman Gibbs]], [[Allen Tucker]]. "A model curriculum for a liberal arts degree in computer science". ''Communications of the ACM'', Volume 29 Issue 3, March 1986.
{{refend}}

==External links==
{{Sister project links}}
{{Library resources box}}
* {{dmoz|Computers/Computer_Science/}}
* [http://www.lib.uwaterloo.ca/society/compsci_soc.html Scholarly Societies in Computer Science]
* [http://jeffhuang.com/best_paper_awards.html Best Papers Awards in Computer Science since 1996]
* [http://se.ethz.ch/~meyer/gallery/ Photographs of computer scientists] by [[Bertrand Meyer]]
* [http://www.eecs.berkeley.edu/department/history.shtml EECS.berkeley.edu]
; Bibliography and academic search engines
* [http://citeseerx.ist.psu.edu/ CiteSeer<sup>''x''</sup>] ([[CiteSeerX|article]]): search engine, digital library and repository for scientific and academic papers with a focus on computer and information science.
* [http://dblp.uni-trier.de/ DBLP Computer Science Bibliography] ([[Digital Bibliography & Library Project|article]]): computer science bibliography website hosted at Universität Trier, in Germany.
* [http://liinwww.ira.uka.de/bibliography/ The Collection of Computer Science Bibliographies] ([[Collection of Computer Science Bibliographies|article]])
; Professional organizations
* [http://www.acm.org/ Association for Computing Machinery]
* [http://www.computer.org/ IEEE Computer Society]
* [http://www.informatics-europe.org/ Informatics Europe]
* [http://www.aaai.org/home.html AAAI]
* [http://membercentral.aaas.org/categories/computer-science AAAS Computer Science]
; Misc
* [http://cs.stackexchange.com/ Computer Science—Stack Exchange]: a community-run question-and-answer site for computer science
* [http://www.cs.bu.edu/AboutCS/WhatIsCS.pdf What is computer science]
* [http://www.cs.mtu.edu/~john/jenning.pdf Is computer science science?]

{{Computer science}}
{{Technology}}
{{Sub-disciplines of computing}}

{{Authority control}}

[[Category:Electrical engineering]]
[[Category:Electronic engineering]]
[[Category:Computer engineering]]
[[Category:Computer science]]