<article title='Computer_science'><paragraph><template><target>use mdy dates</target><arg name="datdae">December 2014</arg><arg name="date">August 2015</arg></template><xhtml:div class="thumb tright"><paragraph><xhtml:div class="thumbinner" style="width:300px;"><table style="border:1px solid #ccc;"><tablerow><tablecell><link><target>File:Lambda lc.svg</target><part>144px</part><part>alt=large capital lambda</part><part>Programming language theory</part><part>link=Programming language theory</part></link></tablecell><tablecell><link><target>File:Sorting quicksort anim frame.png</target><part>144px</part><part>alt=Plot of a quicksort algorithm</part><part>Computational complexity theory</part><part>link=Computational complexity theory</part></link></tablecell></tablerow><tablerow><tablecell><link><target>File:Utah teapot simple 2.png</target><part>144px</part><part>alt=Utah teapot representing computer graphics</part><part>Computer graphics</part><part>link=Computer graphics (computer science)</part></link></tablecell><tablecell><link><target>File:3-Tastenmaus Microsoft.jpg</target><part>144px</part><part>alt=Microsoft Tastenmaus mouse representing human-computer interaction</part><part>Humancomputer interaction</part><part>link=Humancomputer interaction</part></link></tablecell></tablerow></table><paragraph><xhtml:div class="thumbcaption">Computer science deals with the theoretical foundations of information and computation, together with practical techniques for the implementation and application of these foundations.</xhtml:div></paragraph></xhtml:div></paragraph></xhtml:div></paragraph><paragraph><bold>Computer science</bold><space/>is the<space/><link><target>science</target><part>scientific</part></link><space/>and practical approach to<space/><link><target>computation</target></link><space/>and its applications. It is the systematic study of the feasibility, structure, expression, and mechanization of the methodical<space/><link><target>Procedure (computer science)</target><part>procedures</part></link><space/>(or<space/><link><target>algorithm</target><trail>s</trail></link>) that underlie the acquisition, representation, processing, storage, communication of, and access to<space/><link><target>information</target></link>. An alternate, more succinct definition of computer science is the study of automating algorithmic processes that scale. A<space/><link><target>computer scientist</target></link><space/>specializes in the theory of computation and the design of computational systems.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://wordnetweb.princeton.edu/perl/webwn?s</arg><arg name="title">WordNet Search—3.1<space/></arg><arg name="publisher">Wordnetweb.princeton.edu<space/></arg><arg name="accessdate">2012-05-14</arg></template></extension></paragraph><preblock><preline></preline></preblock><paragraph>Its fields can be divided into a variety of theoretical and practical disciplines. Some fields, such as<space/><link><target>computational complexity theory</target></link><space/>(which explores the fundamental properties of<space/><link><target>Computational problem</target><part>computational</part></link><space/>and intractable problems), are highly abstract, while fields such as<space/><link><target>Computer graphics (computer science)</target><part>computer graphics</part></link><space/>emphasize real-world visual applications. Still other fields focus on the challenges in implementing computation. For example,<space/><link><target>programming language theory</target></link><space/>considers various approaches to the description of computation, while the study of<space/><link><target>computer programming</target></link><space/>itself investigates various aspects of the use of<space/><link><target>programming language</target></link><space/>and<space/><link><target>complex systems</target></link>.<space/><link><target>Humancomputer interaction</target></link><space/>considers the challenges in making computers and computations useful, usable, and<space/><link><target>Computer accessibility</target><part>universally accessible</part></link><space/>to humans.<template><target>TOClimit</target><arg>4</arg></template></paragraph><heading level='2'>History</heading><paragraph><template><target>main</target><arg>History of computer science<space/></arg></template></paragraph><paragraph><link><target>File:Babbage40.png</target><part>upright</part><part>thumb</part><part><link><target>Charles Babbage</target></link><space/>is credited with inventing the first mechanical computer.</part></link><link><target>File:Ada lovelace.jpg</target><part>upright</part><part>thumb</part><part><link><target>Ada Lovelace</target></link><space/>is credited with writing the first<space/><link><target>algorithm</target></link><space/>intended for processing on a computer.</part></link></paragraph><paragraph>The earliest foundations of what would become computer science predate the invention of the modern<space/><link><target>digital computer</target></link>. Machines for calculating fixed numerical tasks such as the<space/><link><target>abacus</target></link><space/>have existed since antiquity, aiding in computations such as multiplication and division. Further,<space/><link><target>algorithm</target><trail>s</trail></link><space/>for performing computations have existed since antiquity, even before the development of sophisticated computing equipment. The ancient<space/><link><target>Sanskrit</target></link><space/>treatise<space/><link><target>Shulba Sutras</target></link>, or &quot;Rules of the Chord&quot;, is a book of algorithms written in 800 BC for constructing geometric objects like altars using a peg and chord, an early precursor of the modern field of<space/><link><target>computational geometry</target></link>.</paragraph><paragraph><link><target>Blaise Pascal</target></link><space/>designed and constructed the first working mechanical calculator,<space/><link><target>Pascal's calculator</target></link>, in 1642.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Blaise Pascal</arg><arg name="url">http://www-history.mcs.st-andrews.ac.uk/Biographies/Pascal.html</arg><arg name="publisher">School of Mathematics and Statistics University of St Andrews, Scotland</arg></template></extension><space/>In 1673,<space/><link><target>Gottfried Leibniz</target></link><space/>demonstrated a digital mechanical calculator, called the<space/><link><target>Stepped Reckoner</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="title">A Brief History of Computing</arg><arg name="url">http://blogs.royalsociety.org/history-of-science/2012/06/25/history-of-computing/</arg></template></extension><space/>He may be considered the first computer scientist and information theorist, for, among other reasons, documenting the binary number system. In 1820,<space/><link><target>Charles Xavier Thomas</target><part>Thomas de Colmar</part></link><space/>launched the<space/><link><target>mechanical calculator</target></link><space/>industry<extension extension_name='ref' group="note">In 1851</extension><space/>when he released his simplified<space/><link><target>arithmometer</target></link>, which was the first calculating machine strong enough and reliable enough to be used daily in an office environment.<space/><link><target>Charles Babbage</target></link><space/>started the design of the first<space/><italics>automatic mechanical calculator</italics>, his<space/><link><target>Difference Engine</target></link>, in 1822, which eventually gave him the idea of the first<space/><italics>programmable mechanical calculator</italics>, his<space/><link><target>Analytical Engine</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.sciencemuseum.org.uk/on-line/babbage/index.asp<space/></arg><arg name="title">Science Museum—Introduction to Babbage<space/></arg><arg name="accessdate">2006-09-24<space/></arg><arg name="archiveurl">https://web.archive.org/web/20060908054017/http://www.sciencemuseum.org.uk/on-line/babbage/index.asp<space/></arg><arg name="archivedate">2006-09-08</arg></template></extension><space/>He started developing this machine in 1834 and &quot;in less than two years he had sketched out many of the salient features of the modern<space/><link><target>computer</target></link>&quot;.<extension extension_name='ref' name="Hyman1982"><template><target>cite book</target><arg name="author">Anthony Hyman<space/></arg><arg name="title">Charles Babbage, pioneer of the computer<space/></arg><arg name="year">1982</arg></template></extension><space/>&quot;A crucial step was the adoption of a punched card system derived from the Jacquard loom&quot;<extension extension_name='ref' name="Hyman1982"></extension><space/>making it infinitely programmable.<extension extension_name='ref' group="note">&quot;The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new, something much more than a sophisticated calculating machine.&quot;<space/><link><target>#COLLIER</target><part>Bruce Collier</part></link>, 1970</extension><space/>In 1843, during the translation of a French article on the Analytical Engine,<space/><link><target>Ada Lovelace</target></link><space/>wrote, in one of the many notes she included, an algorithm to compute the<space/><link><target>Bernoulli number</target><trail>s</trail></link>, which is considered to be the first computer program.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.scottlan.edu/Lriddle/women/ada-love.htm<space/></arg><arg name="title">A Selection and Adaptation From Ada's Notes found in Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA<space/></arg><arg name="accessdate">2006-05-04<space/></arg><arg name="deadurl">yes<space/></arg><arg name="archiveurl">https://web.archive.org/20060210172109/http://www.scottlan.edu:80/lriddle/women/ada-love.htm<space/></arg><arg name="archivedate">10 February 2006<space/></arg></template></extension><space/>Around 1885,<space/><link><target>Herman Hollerith</target></link><space/>invented the<space/><link><target>tabulating machine</target><part>tabulator</part></link>, which used<space/><link><target>punched card</target><trail>s</trail></link><space/>to process statistical information; eventually his company became part of<space/><link><target>IBM</target></link>. In 1937, one hundred years after Babbage's impossible dream,<space/><link><target>Howard H. Aiken</target><part>Howard Aiken</part></link><space/>convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business<extension extension_name='ref'>&quot;In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another&quot;,<space/><link><target>#AIKEN</target><part>Bernard Cohen</part></link>, p.44 (2000)</extension><space/>to develop his giant programmable calculator, the<space/><link><target>Harvard Mark I</target><part>ASCC/Harvard Mark I</part></link>, based on Babbage's Analytical Engine, which itself used cards and a central computing unit. When the machine was finished, some hailed it as &quot;Babbage's dream come true&quot;.<extension extension_name='ref'><link><target>#ORIGINS</target><part>Brian Randell</part></link>, p. 187, 1975</extension></paragraph><paragraph>During the 1940s, as new and more powerful<space/><link><target>computing</target></link><space/>machines were developed, the term<space/><italics>computer</italics><space/>came to refer to the machines rather than their human predecessors.<extension extension_name='ref'>The<space/><link><target>Association for Computing Machinery</target></link><space/>(ACM) was founded in 1947.</extension><space/>As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study<space/><link><target>computation</target></link><space/>in general. Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.<extension extension_name='ref' name="Denning_cs_discipline"></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.cl.cam.ac.uk/conference/EDSAC99/statistics.html<space/></arg><arg name="title">Some EDSAC statistics<space/></arg><arg name="publisher">Cl.cam.ac.uk<space/></arg><arg name="accessdate">2011-11-19</arg></template></extension><space/>The world's first computer science degree program, the<space/><link><target>Cambridge Diploma in Computer Science</target></link>, began at the<space/><link><target>University of Cambridge</target></link><space/><link><target>Cambridge Computer Lab</target><part>Computer Laboratory</part></link><space/>in 1953. The first computer science degree program in the United States was formed at<space/><link><target>Purdue University</target></link><space/>in 1962.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.cs.purdue.edu/about/conte.html<space/></arg><arg name="title">Computer science pioneer Samuel D. Conte dies at 85<space/></arg><arg name="date">July 1, 2002<space/></arg><arg name="publisher">Purdue Computer Science<space/></arg><arg name="accessdate">December 12, 2014</arg></template></extension><space/>Since practical computers became available, many applications of computing have become distinct areas of study in their own rights.</paragraph><paragraph>Although many initially believed it was impossible that computers themselves could actually be a scientific field of study, in the late fifties it gradually became accepted among the greater academic population.<extension extension_name='ref' name="Levy1984"><template><target>cite book</target><arg name="authorlink">Steven Levy<space/></arg><arg name="last">Levy<space/></arg><arg name="first">Steven<space/></arg><arg name="title">[[Hackers: Heroes of the Computer Revolution]]<space/></arg><arg name="year">1984<space/></arg><arg name="isbn">0-385-19195-2<space/></arg><arg name="publisher">Doubleday<space/></arg></template></extension><extension extension_name='ref' name="Tedre2014"><template><target>cite book</target><arg name="last">Tedre<space/></arg><arg name="first">Matti<space/></arg><arg name="title">The Science of Computing: Shaping a Discipline<space/></arg><arg name="year">2014<space/></arg><arg name="publisher">Taylor and Francis / CRC Press<space/></arg></template></extension><space/>It is the now well-known<space/><link><target>IBM</target></link><space/>brand that formed part of the computer science revolution during this time. IBM (short for International Business Machines) released the IBM 704<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.computerhistory.org/revolution/computer-graphics-music-and-art/15/222/633<space/></arg><arg name="title">IBM 704 Electronic Data Processing System—CHM Revolution<space/></arg><arg name="publisher">Computerhistory.org<space/></arg><arg name="accessdate">2013-07-07</arg></template></extension><space/>and later the IBM 709<extension extension_name='ref'><template><target>cite web</target><arg name="title">IBM 709: a powerful new data processing system<space/></arg><arg name="publisher">Computer History Museum<space/></arg><arg name="url">http://archive.computerhistory.org/resources/text/IBM/IBM.709.1957.102646304.pdf<space/></arg><arg name="accessdate">December 12, 2014</arg></template></extension><space/>computers, which were widely used during the exploration period of such devices. &quot;Still, working with the IBM [computer] was frustrating [] if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again&quot;.<extension extension_name='ref' name="Levy1984"></extension><space/>During the late 1950s, the computer science discipline was very much in its developmental stages, and such issues were commonplace.<extension extension_name='ref' name="Tedre2014"></extension></paragraph><paragraph>Time has seen significant improvements in the usability and effectiveness of computing technology. Modern society has seen a significant shift in the users of computer technology, from usage only by experts and professionals, to a near-ubiquitous user base. Initially, computers were quite costly, and some degree of human aid was needed for efficient usein part from professional computer operators. As computer adoption became more widespread and affordable, less human assistance was needed for common usage.</paragraph><heading level='3'>Contributions</heading><paragraph><link><target>File:Enigma.jpg</target><part>thumb</part><part>upright</part><part>The<space/><link><target>Germany</target><part>German</part></link><space/>military used the<space/><link><target>Enigma machine</target></link><space/>(shown here) during<space/><link><target>World War II</target></link><space/>for communications they wanted kept secret. The large-scale decryption of Enigma traffic at<space/><link><target>Bletchley Park</target></link><space/>was an important factor that contributed to Allied victory in WWII.<extension extension_name='ref' name="kahnbook"></extension></part></link></paragraph><paragraph>Despite its short history as a formal academic discipline, computer science has made a number of fundamental contributions to<space/><link><target>science</target></link><space/>and<space/><link><target>society</target></link>in fact, along with<space/><link><target>electronics</target></link>, it is a founding science of the current epoch of human history called the<space/><link><target>Information Age</target></link><space/>and a driver of the<space/><link><target>information revolution</target><part>Information Revolution</part></link>, seen as the third major leap in human technological progress after the<space/><link><target>Industrial Revolution</target></link><space/>(17501850 CE) and the<space/><link><target>Neolithic Revolution</target><part>Agricultural Revolution</part></link><space/>(80005000 BC).</paragraph><paragraph>These contributions include:</paragraph><list type='bullet'><listitem>The start of the &quot;<link><target>Digital Revolution</target><part>digital revolution</part></link>&quot;, which includes the current<space/><link><target>Information Age</target></link><space/>and the<space/><link><target>Internet</target></link>.<extension extension_name='ref' name="bgu">http://www.cis.cornell.edu/Dean/Presentations/Slides/bgu.pdf<template><target>dead link</target><arg name="date">December 2014</arg></template></extension></listitem><listitem>A formal definition of<space/><link><target>computation</target></link><space/>and<space/><link><target>computability</target></link>, and proof that there are computationally<space/><link><target>Undecidable problem</target><part>unsolvable</part></link><space/>and<space/><link><target>Computational complexity theory#Intractability</target><part>intractable</part></link><space/>problems.<extension extension_name='ref'><template><target>Cite journal</target><arg name="author">Constable, R. L.<space/></arg><arg name="date">March 2000<space/></arg><arg name="url">http://www.cs.cornell.edu/cis-dean/bgu.pdf<space/></arg><arg name="title">Computer Science: Achievements and Challenges circa 2000<space/></arg><arg name="format">PDF</arg></template></extension></listitem><listitem>The concept of a<space/><link><target>programming language</target></link>, a tool for the precise expression of methodological information at various levels of abstraction.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Abelson<space/></arg><arg name="first">H.<space/></arg><arg name="authorlink">Hal Abelson<space/></arg><arg name="author2">G.J. Sussman with J. Sussman<space/></arg><arg name="year">1996<space/></arg><arg name="title">[[Structure and Interpretation of Computer Programs]]<space/></arg><arg name="edition">2nd<space/></arg><arg name="publisher">MIT Press<space/></arg><arg name="isbn">0-262-01153-0<space/></arg><arg name="quote">The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called ''procedural epistemology'' — the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects.</arg></template></extension></listitem><listitem>In<space/><link><target>cryptography</target></link>,<space/><link><target>Cryptanalysis of the Enigma</target><part>breaking the Enigma code</part></link><space/>was an important factor contributing to the Allied victory in World War II.<extension extension_name='ref' name="kahnbook"><link><target>David Kahn (writer)</target><part>David Kahn</part></link>,<space/><link><target>The Codebreakers</target></link>, 1967, ISBN 0-684-83130-9.</extension></listitem><listitem><link><target>Computational science</target><part>Scientific computing</part></link><space/>enabled practical evaluation of processes and situations of great complexity, as well as experimentation entirely by software. It also enabled advanced study of the mind, and mapping of the human genome became possible with the<space/><link><target>Human Genome Project</target></link>.<extension extension_name='ref' name="bgu"></extension><space/><link><target>Distributed computing</target></link><space/>projects such as<space/><link><target>Folding@home</target></link><space/>explore<space/><link><target>protein folding</target></link>.</listitem><listitem><link><target>Algorithmic trading</target></link><space/>has increased the<space/><link><target>Economic efficiency</target><part>efficiency</part></link><space/>and<space/><link><target>Market liquidity</target><part>liquidity</part></link><space/>of financial markets by using<space/><link><target>artificial intelligence</target></link>,<space/><link><target>machine learning</target></link>, and other<space/><link><target>statistics</target><part>statistical</part></link><space/>and<space/><link><target>Numerical analysis</target><part>numerical</part></link><space/>techniques on a large scale.<extension extension_name='ref'><template><target>cite news</target><arg name="url">http://www.telegraph.co.uk/money/main.jhtml?xml</arg><arg name="title">Black box traders are on the march<space/></arg><arg name="newspaper">The Telegraph<space/></arg><arg name="date">August 26, 2006<space/></arg><arg name="deadurl">yes<space/></arg><arg name="archiveurl">https://web.archive.org/20141008080148/http://www.telegraph.co.uk/money/main.jhtml?xml</arg><arg name="archivedate">8 October 2014<space/></arg></template></extension><space/>High frequency algorithmic trading can also exacerbate<space/><link><target>volatility (finance)</target><part>volatility</part></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://papers.ssrn.com/sol3/papers.cfm?abstract_id</arg><arg name="title">The Impact of High Frequency Trading on an Electronic Market<space/></arg><arg name="doi">10.2139/ssrn.1686004<space/></arg><arg name="publisher">Papers.ssrn.com<space/></arg><arg name="accessdate">2012-05-14</arg></template></extension></listitem><listitem><link><target>Computer graphics</target></link><space/>and<space/><link><target>computer-generated imagery</target></link><space/>have become ubiquitous in modern<space/><link><target>entertainment</target></link>, particularly in<space/><link><target>television</target></link>,<space/><link><target>Filmmaking</target><part>cinema</part></link>,<space/><link><target>advertising</target></link>,<space/><link><target>animation</target></link><space/>and<space/><link><target>video game</target><trail>s</trail></link>. Even films that feature no explicit<space/><link><target>computer-generated imagery</target><part>CGI</part></link><space/>are usually &quot;filmed&quot; now on<space/><link><target>digital camera</target><trail>s</trail></link>, or<space/><link><target>video editing</target><part>edited</part></link><space/>or<space/><link><target>Video post-processing</target><part>postprocessed</part></link><space/>using a digital video editor.<space/><template><target>Citation needed</target><arg name="date">October 2010</arg></template></listitem><listitem><link><target>Simulation</target></link><space/>of various processes, including computational<space/><link><target>fluid dynamics</target></link>, physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are<space/><link><target>SPICE</target></link>, as well as software for physical realization of new (or modified) designs. The latter includes essential design software for<space/><link><target>integrated circuit</target><trail>s</trail></link>.<template><target>Citation needed</target><arg name="date">October 2010</arg></template></listitem><listitem><link><target>Artificial intelligence</target></link><space/>is becoming increasingly important as it gets more efficient and complex. There are many applications of AI, some of which can be seen at home, such as<space/><link><target>robotic vacuum cleaner</target><trail>s</trail></link>. It is also present in video games and on the modern battlefield in drones, anti-missile systems, and<space/><link><target>Legged Squad Support System</target><part>squad support robots</part></link>.</listitem></list><heading level='2'>Philosophy</heading><paragraph><template><target>main</target><arg>Philosophy of computer science</arg></template>A number of computer scientists have argued for the distinction of three separate paradigms in computer science.<space/><link><target>Peter Wegner</target></link><space/>argued that those paradigms are science, technology, and mathematics.<extension extension_name='ref'><template><target>cite conference</target><arg name="author">Wegner, P.<space/></arg><arg name="title">Research paradigms in computer science—Proceedings of the 2nd international Conference on Software Engineering<space/></arg><arg name="location">San Francisco, California, United States<space/></arg><arg name="date">October 13–15, 1976<space/></arg><arg name="publisher">IEEE Computer Society Press, Los Alamitos, CA</arg></template></extension><space/><link><target>Peter J. Denning</target><part>Peter Denning</part></link>'s working group argued that they are theory, abstraction (modeling), and design.<extension extension_name='ref'><template><target>Cite journal</target><arg name="last1"><space/>Denning<space/></arg><arg name="first1"><space/>P. J.<space/></arg><arg name="last2"><space/>Comer<space/></arg><arg name="first2"><space/>D. E.<space/></arg><arg name="last3"><space/>Gries<space/></arg><arg name="first3"><space/>D.<space/></arg><arg name="last4"><space/>Mulder<space/></arg><arg name="first4"><space/>M. C.<space/></arg><arg name="last5"><space/>Tucker<space/></arg><arg name="first5"><space/>A.<space/></arg><arg name="last6"><space/>Turner<space/></arg><arg name="first6"><space/>A. J.<space/></arg><arg name="last7"><space/>Young<space/></arg><arg name="first7"><space/>P. R.<space/></arg><arg name="title"><space/>Computing as a discipline<space/></arg><arg name="journal"><space/>Communications of the ACM<space/></arg><arg name="volume"><space/>32<space/></arg><arg name="pages"><space/>9–23<space/></arg><arg name="date"><space/>Jan 1989<space/></arg><arg name="month"><space/></arg><arg name="doi"><space/>10.1145/63238.63239</arg></template></extension><space/>Amnon H. Eden described them as the &quot;rationalist paradigm&quot; (which treats computer science as a branch of mathematics, which is prevalent in theoretical computer science, and mainly employs<space/><link><target>deductive reasoning</target></link>), the &quot;technocratic paradigm&quot; (which might be found in<space/><link><target>engineering</target></link><space/>approaches, most prominently in<space/><link><target>software engineering</target></link>), and the &quot;scientific paradigm&quot; (which approaches computer-related artifacts from the empirical perspective of<space/><link><target>natural science</target><trail>s</trail></link>, identifiable in some branches of<space/><link><target>artificial intelligence</target></link>).<extension extension_name='ref'><template><target>Cite journal</target><arg name="first1"><space/>A. H.<space/></arg><arg name="title"><space/>Three Paradigms of Computer Science<space/></arg><arg name="journal"><space/>[[Minds and Machines]]<space/></arg><arg name="last1"><space/>Eden</arg><arg name="volume"><space/>17<space/></arg><arg name="issue"><space/>2<space/></arg><arg name="year"><space/>2007<space/></arg><arg name="url"><space/>http://www.eden-study.org/articles/2007/three_paradigms_of_computer_science.pdf</arg><arg name="doi"><space/>10.1007/s11023-007-9060-8<space/></arg><arg name="pages"><space/>135–167</arg></template></extension></paragraph><heading level='3'>Name of the field</heading><paragraph>Although first proposed in 1956,<extension extension_name='ref' name="Tedre2014"></extension><space/>the term &quot;computer science&quot; appears in a 1959 article in<space/><italics><link><target>Communications of the ACM</target></link></italics>,<extension extension_name='ref' name="Fine_1959"><template><target>cite journal</target><arg name="author">Louis Fine
<space/></arg><arg name="year">1959
<space/></arg><arg name="title">The Role of the University in Computers, Data Processing, and Related Fields
<space/></arg><arg name="journal">Communications of the ACM
<space/></arg><arg name="volume">2<space/></arg><arg name="issue">9<space/></arg><arg name="pages">7–14
<space/></arg><arg name="doi">10.1145/368424.368427
</arg></template></extension>in which Louis Fein argues for the creation of a<space/><italics>Graduate School in Computer Sciences</italics><space/>analogous to the creation of<space/><link><target>Harvard Business School</target></link><space/>in 1921,<extension extension_name='ref'><template><target>cite web</target><arg name="title">Stanford University Oral History</arg><arg name="url">http://library.stanford.edu/guides/stanford-university-oral-history</arg><arg name="publisher">Stanford University</arg><arg name="accessdate">May 30, 2013</arg></template></extension><space/>justifying the name by arguing that, like<space/><link><target>management science</target></link>, the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.<extension extension_name='ref' name="Fine_1959"></extension>His efforts, and those of others such as<space/><link><target>numerical analysis</target><part>numerical analyst</part></link><space/><link><target>George Forsythe</target></link>, were rewarded: universities went on to create such programs, starting with Purdue in 1962.<extension extension_name='ref'><link><target>Donald Knuth</target></link><space/>(1972).<space/><italics><link type='external' href='http://www.stanford.edu/dept/ICME/docs/history/forsythe_knuth.pdf'>&quot;George Forsythe and the Development of Computer Science&quot;</link>.<space/></italics>Comms. ACM''.<space/><template><target>wayback</target><arg name="url">http://www.stanford.edu/dept/ICME/docs/history/forsythe_knuth.pdf<space/></arg><arg name="date">20140812013839<space/></arg></template></extension><space/>Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.<extension extension_name='ref'><template><target>cite web</target><arg name="author">Matti Tedre<space/></arg><arg name="date">2006<space/></arg><arg name="url">http://epublications.uef.fi/pub/urn_isbn_952-458-867-6/urn_isbn_952-458-867-6.pdf<space/></arg><arg name="title">The Development of Computer Science: A Sociocultural Perspective<space/></arg><arg name="page">260<space/></arg><arg name="accessdate">December 12, 2014</arg></template></extension><space/>Certain departments of major universities prefer the term<space/><italics>computing science</italics>, to emphasize precisely that difference. Danish scientist<space/><link><target>Peter Naur</target></link><space/>suggested the term<space/><italics>datalogy</italics>,<extension extension_name='ref'><template><target>cite journal</target><arg name="author">Peter Naur
<space/></arg><arg name="year">1966
<space/></arg><arg name="title">The science of datalogy
<space/></arg><arg name="journal">Communications of the ACM
<space/></arg><arg name="volume">9<space/></arg><arg name="issue">7<space/></arg><arg name="page">485
<space/></arg><arg name="doi">10.1145/365719.366510
</arg></template></extension><space/>to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. An alternative term, also proposed by Naur, is<space/><link><target>data science</target></link>; this is now used for a distinct field of data analysis, including statistics and databases.</paragraph><paragraph>Also, in the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the<space/><italics>Communications of the ACM</italics><italics>turingineer</italics>,<space/><italics>turologist</italics>,<space/><italics>flow-charts-man</italics>,<space/><italics>applied meta-mathematician</italics>, and<space/><italics>applied<space/><link><target>epistemology</target><part>epistemologist</part></link></italics>.<extension extension_name='ref'><template><target>cite journal</target><arg name="title">Communications of the ACM<space/></arg><arg name="date"><space/></arg><arg name="journal">Communications of the ACM<space/></arg><arg name="volume">1<space/></arg><arg name="issue">4<space/></arg><arg name="page">6</arg><arg name="doi"><space/>10.1145/368796.368802</arg></template></extension><space/>Three months later in the same journal,<space/><italics>comptologist</italics><space/>was suggested, followed next year by<space/><italics>hypologist</italics>.<extension extension_name='ref'>Communications of the ACM 2(1):p.4</extension><space/>The term<space/><italics>computics</italics><space/>has also been suggested.<extension extension_name='ref'>IEEE Computer 28(12):p.136</extension><space/>In Europe, terms derived from contracted translations of the expression &quot;automatic information&quot; (e.g. &quot;informazione automatica&quot; in Italian) or &quot;information and mathematics&quot; are often used, e.g.<space/><italics>informatique</italics><space/>(French),<space/><italics>Informatik</italics><space/>(German),<space/><italics>informatica</italics><space/>(Italy, The Netherlands),<space/><italics>informtica</italics><space/>(Spain, Portugal),<space/><italics>informatika</italics><space/>(<link><target>Slavic languages</target></link><space/>and<space/><link><target>Hungarian language</target><part>Hungarian</part></link>) or<space/><italics>pliroforiki</italics><space/>(<italics></italics>, which means informatics) in<space/><link><target>Greek language</target><part>Greek</part></link>. Similar words have also been adopted in the UK (as in<space/><italics>the School of Informatics of the University of Edinburgh</italics>).<extension extension_name='ref'>P. Mounier-Kuhn,<space/><italics>L'Informatique en France, de la seconde guerre mondiale au Plan Calcul. L'mergence d'une science</italics>, Paris, PUPS, 2010, ch. 3 &amp; 4.</extension></paragraph><paragraph>A folkloric quotation, often attributed tobut almost certainly not first formulated by<link><target>Edsger W. Dijkstra</target><part>Edsger Dijkstra</part></link>, states that &quot;computer science is no more about computers than astronomy is about telescopes.&quot;<extension extension_name='ref' group="note">See the entry&quot;<link><target>q:Computer science</target><part>Computer science</part></link>&quot; on Wikiquote for the history of this quotation.</extension><space/>The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of<space/><link><target>computer hardware</target></link><space/>is usually considered part of<space/><link><target>computer engineering</target></link>, while the study of commercial<space/><link><target>computer system</target><trail>s</trail></link><space/>and their deployment is often called<space/><link><target>information technology</target></link><space/>or<space/><link><target>information system</target><trail>s</trail></link>. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as<space/><link><target>philosophy</target></link>,<space/><link><target>cognitive science</target></link>,<space/><link><target>computational linguistics</target><part>linguistics</part></link>,<space/><link><target>mathematics</target></link>,<space/><link><target>physics</target></link>,<space/><link><target>biology</target></link>,<space/><link><target>computational statistics</target><part>statistics</part></link>, and<space/><link><target>logic</target></link>.</paragraph><paragraph>Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.<extension extension_name='ref' name="Denning_cs_discipline"></extension><space/>Early computer science was strongly influenced by the work of mathematicians such as<space/><link><target>Kurt Gdel</target></link><space/>and<space/><link><target>Alan Turing</target></link>, and there continues to be a useful interchange of ideas between the two fields in areas such as<space/><link><target>mathematical logic</target></link>,<space/><link><target>category theory</target></link>,<space/><link><target>domain theory</target></link>, and<space/><link><target>algebra</target></link>.<extension extension_name='ref' name="Tedre2014"></extension></paragraph><paragraph>The relationship between computer science and<space/><link><target>software engineering</target></link><space/>is a contentious issue, which is further muddied by<space/><link><target>Software engineer#Use of the title .22Engineer.22</target><part>disputes</part></link><space/>over what the term &quot;software engineering&quot; means, and how computer science is defined.<extension extension_name='ref'><template><target>Cite journal</target><arg name="last1"><space/>Tedre<space/></arg><arg name="first1"><space/>M.<space/></arg><arg name="title"><space/>Computing as a Science: A Survey of Competing Viewpoints<space/></arg><arg name="doi"><space/>10.1007/s11023-011-9240-4<space/></arg><arg name="journal"><space/>Minds and Machines<space/></arg><arg name="volume"><space/>21<space/></arg><arg name="issue"><space/>3<space/></arg><arg name="pages"><space/>361–387<space/></arg><arg name="year"><space/>2011<space/></arg><arg name="pmid"><space/></arg><arg name="pmc"><space/></arg></template></extension><space/><link><target>David Parnas</target></link>, taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.<extension extension_name='ref'><template><target>Cite journal</target><arg name="last1"><space/>Parnas<space/></arg><arg name="first1"><space/>D. L.<space/></arg><arg name="journal"><space/>Annals of Software Engineering<space/></arg><arg name="volume"><space/>6<space/></arg><arg name="pages"><space/>19–37<space/></arg><arg name="year"><space/>1998<space/></arg><arg name="doi"><space/>10.1023/A:1018949113292</arg><arg name="title">Software engineering programmes are not computer science programmes</arg></template>, p. 19: &quot;Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, []&quot;</extension></paragraph><paragraph>The academic, political, and funding aspects of computer science tend to depend on whether a department formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with<space/><link><target>computational science</target></link>. Both types of departments tend to make efforts to bridge the field educationally if not across all research.</paragraph><heading level='2'>Areas of computer science</heading><paragraph><template><target>further</target><arg>Outline of computer science</arg></template>As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.<extension extension_name='ref' name="CSAB1997"><template><target>cite web</target><arg name="author">Computing Sciences Accreditation Board</arg><arg name="title">Computer Science as a Profession</arg><arg name="url">http://www.csab.org/comp_sci_profession.html<space/></arg><arg name="date">May 28, 1997</arg><arg name="accessdate">2010-05-23<space/></arg><arg name="archiveurl"><space/>https://web.archive.org/web/20080617030847/http://www.csab.org/comp_sci_profession.html<space/></arg><arg name="archivedate"><space/>2008-06-17</arg></template></extension><extension extension_name='ref'><template><target>cite book</target><arg name="author">Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council<space/></arg><arg name="title">Computer Science: Reflections on the Field, Reflections from the Field</arg><arg name="url">http://www.nap.edu/catalog.php?record_id</arg><arg name="publisher">National Academies Press</arg><arg name="isbn">978-0-309-09301-9</arg><arg name="year">2004</arg></template></extension><link><target>CSAB (professional organization)</target><part>CSAB</part></link>, formerly called<space/><italics>Computing Sciences Accreditation Board</italics>which is made up of representatives of the<space/><link><target>Association for Computing Machinery</target></link><space/>(ACM), and the<space/><link><target>IEEE Computer Society</target></link><space/>(IEEE CS)<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.csab.org/<space/></arg><arg name="title">CSAB Leading Computer Education<space/></arg><arg name="publisher">CSAB<space/></arg><arg name="date">2011-08-03<space/></arg><arg name="accessdate">2011-11-19</arg></template></extension>identifies four areas that it considers crucial to the discipline of computer science:<space/><italics>theory of computation</italics>,<space/><italics>algorithms and data structures</italics>,<space/><italics>programming methodology and languages</italics>, and<space/><italics>computer elements and architecture</italics>. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, humancomputer interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.<extension extension_name='ref' name="CSAB1997"></extension></paragraph><heading level='3'>Theoretical computer science</heading><paragraph><template><target>main</target><arg>Theoretical computer science</arg></template>The broader field of<space/><link><target>theoretical computer science</target></link><space/>encompasses both the classical theory of computation and a wide range of other topics that focus on the more abstract, logical, and mathematical aspects of computing.</paragraph><heading level='4'>Theory of computation</heading><paragraph><template><target>main</target><arg>Theory of computation</arg></template>According to<space/><link><target>Peter J. Denning</target><part>Peter Denning</part></link>, the fundamental question underlying computer science is, &quot;What can be (efficiently) automated?&quot;<extension extension_name='ref' name="Denning_cs_discipline"><template><target>cite journal</target><arg name="last">Denning<space/></arg><arg name="first">Peter J.<space/></arg><arg name="authorlink">Peter J. Denning<space/></arg><arg name="year">2000<space/></arg><arg name="title">Computer Science: The Discipline<space/></arg><arg name="url">http://www.idi.ntnu.no/emner/dif8916/denning.pdf<space/></arg><arg name="journal">Encyclopedia of Computer Science<space/></arg><arg name="format">PDF<space/></arg><arg name="archiveurl"><space/>https://web.archive.org/web/20060525195404/http://www.idi.ntnu.no/emner/dif8916/denning.pdf<space/></arg><arg name="archivedate"><space/>2006-05-25</arg></template></extension><space/>Theory of computation is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question,<space/><link><target>computability theory</target></link><space/>examines which computational problems are solvable on various theoretical<space/><link><target>models of computation</target></link>. The second question is addressed by<space/><link><target>computational complexity theory</target></link>, which studies the time and space costs associated with different approaches to solving a multitude of computational problems.</paragraph><paragraph>The famous<space/><link><target>P versus NP problem</target><part>P = NP?</part></link><space/>problem, one of the<space/><link><target>Millennium Prize Problems</target></link>,<extension extension_name='ref'><link type='external' href='http://www.claymath.org/millennium/P_vs_NP/'>Clay Mathematics Institute</link><space/>P = NP<space/><template><target>wayback</target><arg name="url">http://www.claymath.org/millennium/P_vs_NP/<space/></arg><arg name="date">20131014194456</arg></template></extension><space/>is an open problem in the theory of computation.</paragraph><table style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"><tablerow><tablecell><link><target>File:DFAexample.svg</target><part>96px</part></link></tablecell><tablecell><link><target>File:Wang tiles.png</target><part>96px</part></link></tablecell><tablecell><bold>P = NP?</bold></tablecell><tablecell><bold>GNITIRW-TERCES</bold></tablecell><tablecell><link><target>File:Blochsphere.svg</target><part>96px</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Automata theory</target></link></tablecell><tablecell><link><target>Computability theory</target></link></tablecell><tablecell><link><target>Computational complexity theory</target></link></tablecell><tablecell><link><target>Cryptography</target></link></tablecell><tablecell><link><target>Quantum computer</target><part>Quantum computing theory</part></link></tablecell></tablerow></table><heading level='4'>Information and coding theory</heading><paragraph><template><target>main</target><arg>Information theory</arg><arg>Coding theory</arg></template>Information theory is related to the quantification of information. This was developed by<space/><link><target>Claude Shannon</target></link><space/>to find fundamental limits on<space/><link><target>signal processing</target></link><space/>operations such as compressing data and on reliably storing and communicating data.<extension extension_name='ref'><template><target>cite web</target><arg name="date">October 14, 2002<space/></arg><arg name="last">P. Collins<space/></arg><arg name="first">Graham<space/></arg><arg name="title">Claude E. Shannon: Founder of Information Theory<space/></arg><arg name="url">http://www.scientificamerican.com/article.cfm?id</arg><arg name="publisher">Scientific American<space/></arg><arg name="accessdate">December 12, 2014</arg></template></extension>Coding theory is the study of the properties of<space/><link><target>code</target><trail>s</trail></link><space/>(systems for converting information from one form to another) and their fitness for a specific application. Codes are used for<space/><link><target>data compression</target></link>,<space/><link><target>cryptography</target></link>,<space/><link><target>error detection and correction</target></link>, and more recently also for<space/><link><target>Linear network coding</target><part>network coding</part></link>. Codes are studied for the purpose of designing efficient and reliable<space/><link><target>data transmission</target></link><space/>methods.</paragraph><heading level='4'>Algorithms and data structures</heading><paragraph>Algorithms and data structures is the study of commonly used computational methods and their computational efficiency.</paragraph><table style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"><tablerow><tablecell><extension extension_name='math'>O(n^2)</extension></tablecell><tablecell><link><target>File:Sorting quicksort anim.gif</target><part>96px</part></link></tablecell><tablecell><link><target>File:Singly linked list.png</target><part>96px</part></link></tablecell><tablecell><link><target>File:TSP Deutschland 3.png</target><part>96px</part></link></tablecell><tablecell><link><target>File:SimplexRangeSearching.png</target><part>96px</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Analysis of algorithms</target></link></tablecell><tablecell><link><target>Algorithm</target><trail>s</trail></link></tablecell><tablecell><link><target>Data structures</target></link></tablecell><tablecell><link><target>Combinatorial optimization</target></link></tablecell><tablecell><link><target>Computational geometry</target></link></tablecell></tablerow></table><heading level='4'>Programming language theory</heading><paragraph><template><target>main</target><arg>Programming language theory</arg></template>Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of<space/><link><target>programming language</target><trail>s</trail></link><space/>and their individual<space/><link><target>Programming language#Elements</target><part>features</part></link>. It falls within the discipline of computer science, both depending on and affecting<space/><link><target>mathematics</target></link>,<space/><link><target>software engineering</target></link><space/>and<space/><link><target>linguistics</target></link>. It is an active research area, with numerous dedicated academic journals.</paragraph><table style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"><tablerow><tablecell><extension extension_name='math'>\Gamma\vdash x: \text{Int}</extension></tablecell><tablecell><link><target>File:Compiler.svg</target><part>96px</part></link></tablecell><tablecell><link><target>File:Python add5 syntax.svg</target><part>96px</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Type theory</target></link></tablecell><tablecell><link><target>Compiler construction</target><part>Compiler design</part></link></tablecell><tablecell><link><target>Programming language</target><trail>s</trail></link></tablecell></tablerow></table><heading level='4'>Formal methods</heading><paragraph><template><target>main</target><arg>Formal methods</arg></template>Formal methods are a particular kind of<space/><link><target>Mathematics</target><part>mathematically</part></link><space/>based technique for the<space/><link><target>formal specification</target><part>specification</part></link>, development and<space/><link><target>formal verification</target><part>verification</part></link><space/>of<space/><link><target>software</target></link><space/>and<space/><link><target>computer hardware</target><part>hardware</part></link><space/>systems. The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and<space/><link><target>life-critical system</target><trail>s</trail></link>, where<space/><link><target>safety</target></link><space/>or<space/><link><target>computer security</target><part>security</part></link><space/>is of utmost importance. Formal methods are best described as the application of a fairly broad variety of<space/><link><target>theoretical computer science</target></link><space/>fundamentals, in particular<space/><link><target>logic in computer science</target><part>logic</part></link><space/>calculi,<space/><link><target>formal language</target><trail>s</trail></link>,<space/><link><target>automata theory</target></link>, and<space/><link><target>program semantics</target></link>, but also<space/><link><target>type systems</target></link><space/>and<space/><link><target>algebraic data types</target></link><space/>to problems in software and hardware specification and verification.</paragraph><heading level='3'>Applied computer science</heading><paragraph>Applied computer science aims at identifying certain computer science concepts that can be used directly in solving real world problems.</paragraph><heading level='4'>Artificial intelligence</heading><paragraph><template><target>main</target><arg>Artificial intelligence</arg></template>Artificial intelligence (AI) aims to or is required to synthesise goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning and communication found in humans and animals. From its origins in<space/><link><target>cybernetics</target></link><space/>and in the<space/><link><target>History of artificial intelligence</target><part>Dartmouth Conference</part></link><space/>(1956), artificial intelligence research has been necessarily cross-disciplinary, drawing on areas of expertise such as<space/><link><target>applied mathematics</target></link>,<space/><link><target>Mathematical logic</target><part>symbolic logic</part></link>,<space/><link><target>semiotics</target></link>,<space/><link><target>electrical engineering</target></link>,<space/><link><target>philosophy of mind</target></link>,<space/><link><target>neurophysiology</target></link>, and<space/><link><target>social intelligence</target></link>. AI is associated in the popular mind with<space/><link><target>Robotics</target><part>robotic development</part></link>, but the main field of practical application has been as an embedded component in areas of<space/><link><target>software development</target></link>, which require computational understanding. The starting-point in the late 1940s was<space/><link><target>Alan Turing</target></link>'s question &quot;Can computers think?&quot;, and the question remains effectively unanswered although the<space/><link><target>Turing test</target></link><space/>is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.</paragraph><table style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"><tablerow><tablecell><link><target>File:Nicolas P. Rougier's rendering of the human brain.png</target><part>96px</part></link></tablecell><tablecell><link><target>File:Human eye, rendered from Eye.png</target><part>96px</part></link></tablecell><tablecell><link><target>File:Corner.png</target><part>96px</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Machine learning</target></link></tablecell><tablecell><link><target>Computer vision</target></link></tablecell><tablecell><link><target>Image processing</target></link></tablecell></tablerow><tablerow><tablecell><link><target>File:KnnClassification.svg</target><part>96px</part></link></tablecell><tablecell><link><target>File:Julia iteration data.png</target><part>96px</part></link></tablecell><tablecell><link><target>File:sky.png</target><part>96px</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Pattern recognition</target></link></tablecell><tablecell><link><target>Data mining</target></link></tablecell><tablecell><link><target>Evolutionary computation</target></link></tablecell></tablerow><tablerow><tablecell><link><target>File:neuron.svg</target><part>96px</part></link></tablecell><tablecell><link><target>File:english.png</target><part>96px</part></link></tablecell><tablecell><link><target>File:HONDA ASIMO.jpg</target><part>64px</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Knowledge representation</target></link></tablecell><tablecell><link><target>Natural language processing</target></link></tablecell><tablecell><link><target>Robotics</target></link></tablecell></tablerow></table><heading level='4'>Computer architecture and engineering</heading><paragraph><template><target>main</target><arg>Computer architecture</arg><arg>Computer engineering</arg></template>Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory.<extension extension_name='ref'><template><target>cite web</target><arg name="last">A. Thisted</arg><arg name="first">Ronald</arg><arg name="title">Computer Architecture<space/></arg><arg name="url">http://galton.uchicago.edu/~thisted/Distribute/comparch.pdf</arg><arg name="publisher">The University of Chicago</arg><arg name="date">April 7, 1997</arg></template></extension><space/>The field often involves disciplines of computer engineering and electrical engineering, selecting and interconnecting hardware components to create computers that meet functional, performance, and cost goals.</paragraph><table style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"><tablerow><tablecell><link><target>File:NOR ANSI.svg</target><part>96px</part></link></tablecell><tablecell><link><target>File:Fivestagespipeline.png</target><part>96px</part></link></tablecell><tablecell><link><target>File:SIMD.svg</target><part>96px</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Boolean algebra</target><part>Digital logic</part></link></tablecell><tablecell><link><target>Microarchitecture</target></link></tablecell><tablecell><link><target>Multiprocessing</target></link></tablecell></tablerow><tablerow><tablecell><link><target>File:Roomba original.jpg</target><part>96px</part></link></tablecell><tablecell><link><target>File:flowchart.png</target><part>96px</part></link></tablecell><tablecell><link><target>File:Operating system placement.svg</target><part>96px</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Ubiquitous computing</target></link></tablecell><tablecell><link><target>Systems architecture</target></link></tablecell><tablecell><link><target>Operating system</target><trail>s</trail></link></tablecell></tablerow></table><heading level='4'>Computer performance analysis</heading><paragraph><template><target>main</target><arg>Computer performance</arg></template>Computer performance analysis is the study of work flowing through computers with the general goals of improving<space/><link><target>throughput</target></link>, controlling<space/><link><target>Response time (technology)</target><part>response time</part></link>, using resources efficiently, eliminating<space/><link><target>Bottleneck#Computing</target><part>bottlenecks</part></link>, and predicting performance under anticipated peak loads.<extension extension_name='ref'><template><target>cite book</target><arg name="last"><space/>Wescott<space/></arg><arg name="first"><space/>Bob<space/></arg><arg name="title"><space/>The Every Computer Performance Book, Chapter 3: Useful laws<space/></arg><arg name="publisher"><space/>[[CreateSpace]]<space/></arg><arg name="date"><space/>2013<space/></arg><arg name="isbn"><space/>1482657759</arg></template></extension></paragraph><heading level='4'>Computer graphics and visualization</heading><paragraph><template><target>main</target><arg>Computer graphics (computer science)</arg></template>Computer graphics is the study of digital visual contents, and involves synthesis and manipulation of image data. The study is connected to many other fields in computer science, including<space/><link><target>computer vision</target></link>,<space/><link><target>image processing</target></link>, and<space/><link><target>computational geometry</target></link>, and is heavily applied in the fields of<space/><link><target>special effects</target></link><space/>and<space/><link><target>video games</target></link>.</paragraph><heading level='4'>Computer security and cryptography</heading><paragraph><template><target>main</target><arg>Computer security</arg><arg>Cryptography</arg></template>Computer security is a branch of computer technology, whose objective includes protection of information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users. Cryptography is the practice and study of hiding (encryption) and therefore deciphering (decryption) information. Modern cryptography is largely related to computer science, for many encryption and decryption algorithms are based on their computational complexity.</paragraph><heading level='4'>Computational science</heading><paragraph><link><target>Computational science</target></link><space/>(or<space/><link><target>scientific computing</target></link>) is the field of study concerned with constructing<space/><link><target>scientific modelling</target><part>mathematical models</part></link><space/>and<space/><link><target>numerical analysis</target><part>quantitative analysis</part></link><space/>techniques and using computers to analyze and solve<space/><link><target>Science</target><part>scientific</part></link><space/>problems. In practical use, it is typically the application of<space/><link><target>computer simulation</target></link><space/>and other forms of<space/><link><target>computation</target></link><space/>to problems in various scientific disciplines.</paragraph><table style="border:1px solid #ccc; text-align:center; margin:auto;" cellspacing="15"><tablerow><tablecell><link><target>File:Lorenz attractor yb.svg</target><part>96px</part></link></tablecell><tablecell><link><target>File:Quark wiki.jpg</target><part>96px</part></link></tablecell><tablecell><link><target>File:Naphthalene-3D-balls.png</target><part>96px</part></link></tablecell><tablecell><link><target>File:1u04-argonaute.png</target><part>96px</part></link></tablecell></tablerow><tablerow><tablecell><link><target>Numerical analysis</target></link></tablecell><tablecell><link><target>Computational physics</target></link></tablecell><tablecell><link><target>Computational chemistry</target></link></tablecell><tablecell><link><target>Bioinformatics</target></link></tablecell></tablerow></table><heading level='4'>Computer networks</heading><paragraph><template><target>main</target><arg>Computer network</arg></template>This branch of computer science aims to manage networks between computers worldwide.</paragraph><heading level='4'>Concurrent, parallel and distributed systems</heading><paragraph><template><target>main</target><arg>Concurrency (computer science)</arg><arg>Distributed computing</arg></template>Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. A number of mathematical models have been developed for general concurrent computation including<space/><link><target>Petri net</target><trail>s</trail></link>,<space/><link><target>Process calculus</target><part>process calculi</part></link><space/>and the<space/><link><target>Parallel random-access machine</target><part>Parallel Random Access Machine</part></link><space/>model. A distributed system extends the idea of concurrency onto multiple computers connected through a network. Computers within the same distributed system have their own private memory, and information is often exchanged among themselves to achieve a common goal.</paragraph><heading level='4'>Databases</heading><paragraph><template><target>main</target><arg>Database</arg></template>A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through<space/><link><target>database model</target><trail>s</trail></link><space/>and<space/><link><target>query language</target><trail>s</trail></link>.</paragraph><heading level='4'>Software engineering</heading><paragraph><template><target>main</target><arg>Software engineering</arg></template><template><target>see also</target><arg>Computer programming</arg></template>Software engineering is the study of designing, implementing, and modifying software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of softwareit doesn't just deal with the creation or manufacture of new software, but its internal maintenance and arrangement. Both computer applications software engineers and computer systems software engineers are projected to be among the fastest growing occupations from 2008 to 2018.</paragraph><heading level='2'>The great insights of computer science</heading><paragraph>The philosopher of computing<space/><link><target>William J. Rapaport</target><part>Bill Rapaport</part></link><space/>noted three<space/><italics>Great Insights of Computer Science</italics>:<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.cse.buffalo.edu/~rapaport/computation.html</arg><arg name="title">What Is Computation?</arg><arg name="work">buffalo.edu</arg></template></extension></paragraph><list type='bullet'><listitem><link><target>Gottfried Wilhelm Leibniz</target></link>'s,<space/><link><target>George Boole</target></link>'s,<space/><link><target>Alan Turing</target></link>'s,<space/><link><target>Claude Shannon</target></link>'s, and<space/><link><target>Samuel Morse</target></link>'s insight: there are only<space/><italics>two objects</italics><space/>that a computer has to deal with in order to represent &quot;anything&quot;.</listitem></list><list type='ident'><listitem><list type='ident'><listitem>All the information about any computable problem can be represented using only 0 and 1 (or any other bistable pair that can flip-flop between two easily distinguishable states, such as &quot;on/off&quot;, &quot;magnetized/de-magnetized&quot;, &quot;high-voltage/low-voltage&quot;, etc.).</listitem></list></listitem></list><paragraph><template><target>see also</target><arg>Digital physics</arg></template></paragraph><list type='bullet'><listitem><link><target>Alan Turing</target></link>'s insight: there are only<space/><italics>five actions</italics><space/>that a computer has to perform in order to do &quot;anything&quot;.</listitem></list><list type='ident'><listitem><list type='ident'><listitem>Every algorithm can be expressed in a language for a computer consisting of only five basic instructions:<list type='bullet'><listitem>move left one location;</listitem><listitem>move right one location;</listitem><listitem>read symbol at current location;</listitem><listitem>print 0 at current location;</listitem><listitem>print 1 at current location.</listitem></list></listitem></list></listitem></list><paragraph><template><target>see also</target><arg>Turing machine</arg></template></paragraph><list type='bullet'><listitem><link><target>Corrado Bhm</target></link><space/>and<space/><link><target>Giuseppe Jacopini</target></link>'s insight: there are only<space/><italics>three ways of combining</italics><space/>these actions (into more complex ones) that are needed in order for a computer to do &quot;anything&quot;.</listitem></list><list type='ident'><listitem><list type='ident'><listitem>Only three rules are needed to combine any set of basic instructions into more complex ones:<list type='bullet'><listitem><italics>sequence</italics>: first do this, then do that;</listitem><listitem><italics><space/>selection</italics>: IF such-and-such is the case, THEN do this, ELSE do that;</listitem><listitem><italics>repetition</italics>: WHILE such-and-such is the case DO this.</listitem></list></listitem><listitem>Note that the three rules of Boehm's and Jacopini's insight can be further simplified with the use of<space/><link><target>goto</target></link><space/>(which means it is more elementary than<space/><link><target>structured programming</target></link>).</listitem></list></listitem></list><paragraph><template><target>see also</target><arg>Elementary function arithmetic#Friedman's grand conjecture</arg></template></paragraph><heading level='2'>Academia</heading><paragraph><template><target>further</target><arg>List of computer science conferences</arg><arg>Category:Computer science journals</arg></template>Conferences are important events for computer science research. During these conferences, researchers from the public and private sectors present their recent work and meet. Unlike in most other academic fields, in computer science, the prestige of<space/><link><target>proceedings</target><part>conference papers</part></link><space/>is greater than that of journal publications.<extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Meyer</arg><arg name="first1">Bertrand</arg><arg name="title">Viewpoint: Research evaluation for computer science</arg><arg name="journal">Communications of the ACM</arg><arg name="date">April 2009</arg><arg name="volume">25</arg><arg name="issue">4</arg><arg name="pages">31–34</arg><arg name="doi">10.1145/1498765.1498780</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="last1">Patterson</arg><arg name="first1">David</arg><arg name="title">Evaluating Computer Scientists and Engineers For Promotion and Tenure</arg><arg name="url">http://cra.org/resources/bp-view/evaluating_computer_scientists_and_engineers_for_promotion_and_tenure/</arg><arg name="publisher">Computing Research Association</arg><arg name="date">August 1999</arg></template></extension><space/>One proposed explanation for this is the quick development of this relatively new field requires rapid review and distribution of results, a task better handled by conferences than by journals.<extension extension_name='ref'><template><target>cite journal</target><arg name="last1">Fortnow</arg><arg name="first1">Lance</arg><arg name="title">Viewpoint: Time for Computer Science to Grow Up</arg><arg name="journal">Communications of the ACM</arg><arg name="date">August 2009</arg><arg name="volume">52</arg><arg name="issue">8</arg><arg name="pages">33–35</arg><arg name="doi">10.1145/1536616.1536631</arg><arg name="url">http://cacm.acm.org/magazines/2009/8/34492-viewpoint-time-for-computer-science-to-grow-up/fulltext</arg></template></extension></paragraph><heading level='2'>Education</heading><paragraph><template><target>see also</target><arg>Women in computing</arg></template>Since computer science is a relatively new field, it is not as widely taught in schools and universities as other academic subjects. For example, in 2014,<space/><link><target>Code.org</target></link><space/>estimated that only 10 percent of high schools in the United States offered computer science education.<extension extension_name='ref'><template><target>cite news</target><arg name="title">Computer Science: Not Just an Elective Anymore</arg><arg name="url">http://www.edweek.org/ew/articles/2014/02/26/22computer_ep.h33.html</arg><arg name="work">Education Week</arg><arg name="date">February 25, 2014</arg></template></extension><space/>A 2010 report by Association for Computing Machinery (ACM) and Computer Science Teachers Association (CSTA) revealed that only 14 out of 50 states have adopted significant education standards for high school computer science.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Running On Empty</arg><arg name="url">http://runningonempty.acm.org/fullreport2.pdf<space/></arg><arg name="date"><space/>October 2010</arg></template></extension><space/>However, computer science education is growing. Some countries, such as Israel, New Zealand and South Korea, have already included computer science in their respective national secondary education curriculum.<extension extension_name='ref'><template><target>cite news</target><arg name="title">A is for algorithm</arg><arg name="url">http://www.economist.com/news/international/21601250-global-push-more-computer-science-classrooms-starting-bear-fruit</arg><arg name="work">The Economist</arg><arg name="date">April 26, 2014</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="title">Computing at School International comparisons</arg><arg name="url">http://www.computingatschool.org.uk/data/uploads/internationalcomparisons-v5.pdf</arg><arg name="accessdate">20 July 2015</arg></template></extension><space/>Several countries are following suit.<extension extension_name='ref'><template><target>cite news</target><arg name="title">Adding Coding to the Curriculum</arg><arg name="url">http://www.nytimes.com/2014/03/24/world/europe/adding-coding-to-the-curriculum.html</arg><arg name="work">New York Times</arg><arg name="date">March 23, 2014</arg></template></extension></paragraph><paragraph>In most countries, there is a significant gender gap in computer science education. For example, in the US about 20% of computer science degrees in 2012 were conferred to women.<extension extension_name='ref'><template><target>cite web</target><arg name="title">IT gender gap: Where are the female programmers?</arg><arg name="url">http://www.randalolson.com/2014/06/14/percentage-of-bachelors-degrees-conferred-to-women-by-major-1970-2012/</arg><arg name="accessdate">20 July 2015</arg></template></extension><space/>This gender gap also exists in other Western countries.<extension extension_name='ref' name="gender"><template><target>cite web</target><arg name="title">IT gender gap: Where are the female programmers?</arg><arg name="url">http://www.techrepublic.com/blog/software-engineer/it-gender-gap-where-are-the-female-programmers/</arg></template></extension><space/>However, in some parts of the world, the gap is small or nonexistent. In 2011, approximately half of all computer science degrees in<space/><link><target>Malaysia</target></link><space/>were conferred to women.<extension extension_name='ref'><template><target>cite web</target><arg name="title">what gender is science</arg><arg name="url">http://www.soc.ucsb.edu/faculty/mariacharles/documents/WhatGenderisScience.pdf</arg><arg name="accessdate">20 July 2015</arg></template></extension><space/>In 2001, women made up 54.5% of computer science graduates in<space/><link><target>Guyana</target></link>.<extension extension_name='ref' name="gender"></extension></paragraph><heading level='2'>See also</heading><paragraph><template><target>main</target><arg>Outline of computer science</arg></template><template><target>portal</target><arg>Computer science</arg></template><template><target>colbegin</target><arg>2</arg></template></paragraph><list type='bullet'><listitem><link><target>Academic genealogy of computer scientists</target></link></listitem><listitem><link><target>Informatics</target></link></listitem><listitem><link><target>List of academic computer science departments</target></link></listitem><listitem><link><target>List of computer scientists</target></link></listitem><listitem><link><target>List of important publications in computer science</target><part>List of publications in computer science</part></link></listitem><listitem><link><target>List of pioneers in computer science</target></link></listitem><listitem><link><target>List of unsolved problems in computer science</target></link></listitem><listitem><link><target>Outline of software engineering</target></link></listitem><listitem><link><target>Technology transfer in computer science</target></link></listitem><listitem><link><target>Turing Award</target></link></listitem></list><paragraph><template><target>Wikipedia books link</target><arg>Computer science</arg></template><template><target>colend</target></template></paragraph><heading level='2'>Notes</heading><paragraph><template><target>reflist</target><arg name="group">note</arg></template></paragraph><heading level='2'>References</heading><paragraph><template><target>reflist</target><arg>30em</arg></template></paragraph><heading level='2'>Further reading</heading><paragraph><template><target>refbegin</target><arg>30em</arg></template></paragraph><list type='def'><listitem><defkey>Overview</defkey></listitem></list><list type='bullet'><listitem><template><target>cite book</target><arg name="first">Allen B.</arg><arg name="last">Tucker</arg><arg name="authorlink">Allen B. Tucker</arg><arg name="title">Computer Science Handbook</arg><arg name="edition">2nd</arg><arg name="publisher">Chapman and Hall/CRC</arg><arg name="year">2004</arg><arg name="isbn">1-58488-360-X</arg></template><list type='bullet'><listitem>&quot;Within more than 70 chapters, every one new or significantly revised, one can find any kind of information and references about computer science one can imagine. [] all in all, there is absolute nothing about Computer Science that can not be found in the 2.5 kilogram-encyclopaedia with its 110 survey articles [].&quot; (Christoph Meinel,<space/><italics><link><target>Zentralblatt MATH</target></link></italics>)</listitem></list></listitem><listitem><template><target>cite book</target><arg name="first">Jan</arg><arg name="last">van Leeuwen</arg><arg name="authorlink">Jan van Leeuwen</arg><arg name="title">Handbook of Theoretical Computer Science</arg><arg name="publisher">The MIT Press</arg><arg name="year">1994</arg><arg name="isbn">0-262-72020-5</arg></template><list type='bullet'><listitem>&quot;[] this set is the most unique and possibly the most useful to the [theoretical computer science] community, in support both of teaching and research []. The books can be used by anyone wanting simply to gain an understanding of one of these areas, or by someone desiring to be in research in a topic, or by instructors wishing to find timely information on a subject they are teaching outside their major areas of expertise.&quot; (Rocky Ross,<space/><italics><link><target>SIGACT News</target></link></italics>)</listitem></list></listitem><listitem><template><target>cite book</target><arg name="title">Encyclopedia of Computer Science</arg><arg name="edition">4th</arg><arg name="first1">Anthony</arg><arg name="last1">Ralston</arg><arg name="authorlink">Anthony Ralston</arg><arg name="first2">Edwin D.</arg><arg name="last2">Reilly</arg><arg name="authorlink2">Edwin D. Reilly</arg><arg name="first3">David</arg><arg name="last3">Hemmendinger</arg><arg name="authorlink3">David Hemmendinger</arg><arg name="publisher">Grove's Dictionaries</arg><arg name="year">2000</arg><arg name="isbn">1-56159-248-X</arg><arg name="url">http://portal.acm.org/ralston.cfm</arg></template><list type='bullet'><listitem>&quot;Since 1976, this has been the definitive reference work on computer, computing, and computer science. [] Alphabetically arranged and classified into broad subject areas, the entries cover hardware, computer systems, information and data, software, the mathematics of computing, theory of computation, methodologies, applications, and computing milieu. The editors have done a commendable job of blending historical perspective and practical reference information. The encyclopedia remains essential for most public and academic library reference collections.&quot; (Joe Accardin, Northeastern Illinois Univ., Chicago)</listitem></list></listitem><listitem><template><target>cite book</target><arg name="url">https://books.google.com/books?id</arg><arg name="title">Milestones in Computer Science and Information Technology</arg><arg name="author">Edwin D. Reilly</arg><arg name="publisher">Greenwood Publishing Group</arg><arg name="year">2003</arg><arg name="isbn">978-1-57356-521-9</arg></template></listitem></list><list type='def'><listitem><defkey>Selected papers</defkey></listitem></list><list type='bullet'><listitem><template><target>cite book</target><arg name="first">Donald E.</arg><arg name="last">Knuth</arg><arg name="authorlink">Donald Knuth</arg><arg name="title">Selected Papers on Computer Science</arg><arg name="publisher">CSLI Publications, [[Cambridge University Press]]</arg><arg name="year">1996</arg></template></listitem><listitem><template><target>cite book</target><arg name="ref">COLLIER</arg><arg name="last">Collier</arg><arg name="first">Bruce</arg><arg name="title">The little engine that could've: The calculating machines of Charles Babbage</arg><arg name="publisher">Garland Publishing Inc</arg><arg name="isbn">0-8240-0043-9</arg><arg name="url">http://robroy.dyndns.info/collier/index.html</arg></template></listitem><listitem><template><target>cite book</target><arg name="ref">HAIKEN</arg><arg name="first">Bernard</arg><arg name="last">Cohen</arg><arg name="title">Howard Aiken, Portrait of a computer pioneer</arg><arg name="publisher">The MIT press</arg><arg name="year">2000</arg><arg name="isbn">978-0-2625317-9-5</arg></template></listitem><listitem><template><target>cite book</target><arg name="first">Matti</arg><arg name="last">Tedre</arg><arg name="title">The Science of Computing: Shaping a Discipline</arg><arg name="publisher">CRC Press, [[Taylor & Francis]]</arg><arg name="year">2014</arg></template></listitem><listitem><template><target>cite book</target><arg name="title">The origins of Digital computers, Selected Papers</arg><arg name="last">Randell</arg><arg name="first">Brian<space/></arg><arg name="year">1973</arg><arg name="publisher">Springer-Verlag</arg><arg name="isbn">3-540-06169-X</arg></template><list type='bullet'><listitem>&quot;Covering a period from 1966 to 1993, its interest lies not only in the content of each of these papers still timely today but also in their being put together so that ideas expressed at different times complement each other nicely.&quot; (N. Bernard,<space/><italics>Zentralblatt MATH</italics>)</listitem></list></listitem></list><list type='def'><listitem><defkey>Articles</defkey></listitem></list><list type='bullet'><listitem>Peter J. Denning.<space/><italics><link type='external' href='http://portal.acm.org/citation.cfm?id=1053309&amp;amp;coll=&amp;amp;dl=ACM&amp;amp;CFID=15151515&amp;amp;CFTOKEN=6184618'>Is computer science science?</link></italics>, Communications of the ACM, April 2005.</listitem><listitem>Peter J. Denning,<space/><italics><link type='external' href='http://portal.acm.org/citation.cfm?id=971303&amp;amp;dl=ACM&amp;amp;coll=&amp;amp;CFID=15151515&amp;amp;CFTOKEN=6184618'>Great principles in computing curricula</link></italics>, Technical Symposium on Computer Science Education, 2004.</listitem><listitem>Research evaluation for computer science, Informatics Europe<space/><link type='external' href='http://www.eqanie.eu/media/Como%20Conference/Tanca-Research_Assessment_A_new_Initiative_by_Informatics_Europe.pdf'>report</link>. Shorter journal version: Bertrand Meyer, Christine Choppy, Jan van Leeuwen and Jorgen Staunstrup,<space/><italics>Research evaluation for computer science</italics>, in<space/><link><target>Communications of the ACM</target></link>, vol. 52, no. 4, pp.&amp;nbsp;3134, April 2009.</listitem></list><list type='def'><listitem><defkey>Curriculum and classification</defkey></listitem></list><list type='bullet'><listitem><link><target>Association for Computing Machinery</target></link>.<space/><link type='external' href='http://www.acm.org/class/1998/overview.html'>1998 ACM Computing Classification System</link>. 1998.</listitem><listitem>Joint Task Force of Association for Computing Machinery (ACM),<space/><link><target>Association for Information Systems</target></link><space/>(AIS) and<space/><link><target>IEEE Computer Society</target></link><space/>(IEEE CS).<space/><link type='external' href='http://www.acm.org/education/curric_vols/CC2005-March06Final.pdf'>Computing Curricula 2005: The Overview Report</link>. September 30, 2005.</listitem><listitem><link><target>Norman Gibbs</target></link>,<space/><link><target>Allen Tucker</target></link>. &quot;A model curriculum for a liberal arts degree in computer science&quot;.<space/><italics>Communications of the ACM</italics>, Volume 29 Issue 3, March 1986.</listitem></list><paragraph><template><target>refend</target></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>Sister project links</target></template><template><target>Library resources box</target></template></paragraph><list type='bullet'><listitem><template><target>dmoz</target><arg>Computers/Computer_Science/</arg></template></listitem><listitem><link type='external' href='http://www.lib.uwaterloo.ca/society/compsci_soc.html'>Scholarly Societies in Computer Science</link></listitem><listitem><link type='external' href='http://jeffhuang.com/best_paper_awards.html'>Best Papers Awards in Computer Science since 1996</link></listitem><listitem><link type='external' href='http://se.ethz.ch/~meyer/gallery/'>Photographs of computer scientists</link><space/>by<space/><link><target>Bertrand Meyer</target></link></listitem><listitem><link type='external' href='http://www.eecs.berkeley.edu/department/history.shtml'>EECS.berkeley.edu</link></listitem></list><list type='def'><listitem><defkey>Bibliography and academic search engines</defkey></listitem></list><list type='bullet'><listitem><link type='external' href='http://citeseerx.ist.psu.edu/'>CiteSeer&lt;sup&gt;''x''&lt;/sup&gt;</link><space/>(<link><target>CiteSeerX</target><part>article</part></link>): search engine, digital library and repository for scientific and academic papers with a focus on computer and information science.</listitem><listitem><link type='external' href='http://dblp.uni-trier.de/'>DBLP Computer Science Bibliography</link><space/>(<link><target>Digital Bibliography &amp; Library Project</target><part>article</part></link>): computer science bibliography website hosted at Universitt Trier, in Germany.</listitem><listitem><link type='external' href='http://liinwww.ira.uka.de/bibliography/'>The Collection of Computer Science Bibliographies</link><space/>(<link><target>Collection of Computer Science Bibliographies</target><part>article</part></link>)</listitem></list><list type='def'><listitem><defkey>Professional organizations</defkey></listitem></list><list type='bullet'><listitem><link type='external' href='http://www.acm.org/'>Association for Computing Machinery</link></listitem><listitem><link type='external' href='http://www.computer.org/'>IEEE Computer Society</link></listitem><listitem><link type='external' href='http://www.informatics-europe.org/'>Informatics Europe</link></listitem><listitem><link type='external' href='http://www.aaai.org/home.html'>AAAI</link></listitem><listitem><link type='external' href='http://membercentral.aaas.org/categories/computer-science'>AAAS Computer Science</link></listitem></list><list type='def'><listitem><defkey>Misc</defkey></listitem></list><list type='bullet'><listitem><link type='external' href='http://cs.stackexchange.com/'>Computer ScienceStack Exchange</link>: a community-run question-and-answer site for computer science</listitem><listitem><link type='external' href='http://www.cs.bu.edu/AboutCS/WhatIsCS.pdf'>What is computer science</link></listitem><listitem><link type='external' href='http://www.cs.mtu.edu/~john/jenning.pdf'>Is computer science science?</link></listitem></list><paragraph><template><target>Computer science</target></template><template><target>Technology</target></template><template><target>Sub-disciplines of computing</target></template></paragraph><paragraph><template><target>Authority control</target></template></paragraph><paragraph><link><target>Category:Electrical engineering</target></link><link><target>Category:Electronic engineering</target></link><link><target>Category:Computer engineering</target></link><link><target>Category:Computer science</target></link></paragraph></article>