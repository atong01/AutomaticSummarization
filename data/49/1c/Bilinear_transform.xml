<article title='Bilinear_transform'><paragraph><template><target>refimprove</target><arg name="date">June 2009</arg><arg name="bot">yes</arg></template>The<space/><bold>bilinear transform</bold><space/>(also known as<space/><bold><link><target>Arnold Tustin</target><part>Tustin</part></link>'s method</bold>) is used in<space/><link><target>digital signal processing</target></link><space/>and discrete-time<space/><link><target>control theory</target></link><space/>to transform continuous-time system representations to discrete-time and vice versa.</paragraph><paragraph>The bilinear transform is a special case of a<space/><link><target>conformal map</target><trail>ping</trail></link><space/>(namely, the<space/><link><target>Mbius transformation</target></link>), often used to convert a<space/><link><target>transfer function</target></link><space/><extension extension_name='math'><space/>H_a(s) \<space/></extension><space/>of a<space/><link><target>linear</target></link>,<space/><link><target>time-invariant</target></link><space/>(<link><target>LTI system theory</target><part>LTI</part></link>) filter in the<space/><link><target>continuous function</target><part>continuous</part></link>-time domain (often called an<space/><link><target>analog filter</target></link>) to a transfer function<space/><extension extension_name='math'><space/>H_d(z) \<space/></extension><space/>of a linear, shift-invariant filter in the<space/><link><target>discrete signal</target><part>discrete</part></link>-time domain (often called a<space/><link><target>digital filter</target></link><space/>although there are analog filters constructed with<space/><link><target>switched capacitor</target><trail>s</trail></link><space/>that are discrete-time filters). It maps positions on the<space/><extension extension_name='math'><space/>j \omega \<space/></extension><space/>axis,<space/><extension extension_name='math'><space/>Re[s]=0 \<space/></extension>, in the<space/><link><target>s-plane</target></link><space/>to the<space/><link><target>unit circle</target></link>,<space/><extension extension_name='math'><space/>|z| = 1 \<space/></extension>, in the<space/><link><target>complex plane</target><part>z-plane</part></link>. Other bilinear transforms can be used to warp the<space/><link><target>frequency response</target></link><space/>of any discrete-time linear system (for example to approximate the non-linear frequency resolution of the human auditory system) and are implementable in the discrete domain by replacing a system's unit delays<space/><extension extension_name='math'><space/>\left( z^{-1} \right) \<space/></extension><space/>with first order<space/><link><target>all-pass filter</target><trail>s</trail></link>.</paragraph><paragraph>The transform preserves<space/><link><target>BIBO stability</target><part>stability</part></link><space/>and maps every point of the<space/><link><target>frequency response</target></link><space/>of the continuous-time filter,<space/><extension extension_name='math'><space/>H_a(j \omega_a) \<space/></extension><space/>to a corresponding point in the frequency response of the discrete-time filter,<space/><extension extension_name='math'><space/>H_d(e^{j \omega_d T}) \<space/></extension><space/>although to a somewhat different frequency, as shown in the<space/><link><target>#Frequency warping</target><part>Frequency warping</part></link><space/>section below. This means that for every feature that one sees in the frequency response of the analog filter, there is a corresponding feature, with identical gain and phase shift, in the frequency response of the digital filter but, perhaps, at a somewhat different frequency. This is barely noticeable at low frequencies but is quite evident at frequencies close to the<space/><link><target>Nyquist frequency</target></link>.</paragraph><heading level='2'>Discrete-time approximation</heading><paragraph>The bilinear transform is a first-order approximation of the natural logarithm function that is an exact mapping of the<space/><italics>z</italics>-plane to the<space/><italics>s</italics>-plane. When the<space/><link><target>Laplace transform</target></link><space/>is performed on a discrete-time signal (with each element of the discrete-time sequence attached to a correspondingly delayed<space/><link><target>Dirac delta function</target><part>unit impulse</part></link>), the result is precisely the<space/><link><target>Z transform</target></link><space/>of the discrete-time sequence with the substitution of</paragraph><list type='ident'><listitem><extension extension_name='math'>
\begin{align}
z &amp;= e^{sT} \\
 &amp;= \frac{e^{sT/2}}{e^{-sT/2}} \\
 &amp;\approx \frac{1 + s T / 2}{1 - s T / 2}
\end{align}
</extension></listitem></list><paragraph>where<space/><extension extension_name='math'><space/>T \<space/></extension><space/>is the<space/><link><target>numerical integration</target></link><space/>step size of the<space/><link><target>trapezoidal rule</target></link><space/>used in the bilinear transform derivation;<extension extension_name='ref'><template><target>cite book</target><arg name="title">Discrete Time Signal Processing Third Edition<space/></arg><arg name="last">Oppenheim<space/></arg><arg name="first">Alan<space/></arg><arg name="year">2010<space/></arg><arg name="publisher">Pearson Higher Education, Inc.<space/></arg><arg name="location">Upper Saddle River, NJ<space/></arg><arg name="isbn">978-0-13-198842-2<space/></arg><arg name="page">504</arg></template></extension><space/>or, in other words, the sampling period. The above bilinear approximation can be solved for<space/><extension extension_name='math'><space/>s \<space/></extension><space/>or a similar approximation for<space/><extension extension_name='math'><space/>s = (1/T) \ln(z) \ \<space/></extension><space/>can be performed.</paragraph><paragraph>The inverse of this mapping (and its first-order bilinear approximation) is</paragraph><list type='ident'><listitem><extension extension_name='math'>
\begin{align}
s &amp;= \frac{1}{T} \ln(z) \\
 &amp;= \frac{2}{T} \left[\frac{z-1}{z+1} + \frac{1}{3} \left( \frac{z-1}{z+1} \right)^3 + \frac{1}{5} \left( \frac{z-1}{z+1} \right)^5 + \frac{1}{7} \left( \frac{z-1}{z+1} \right)^7 + \cdots \right] \\
 &amp;\approx \frac{2}{T} \frac{z - 1}{z + 1} \\
 &amp;= \frac{2}{T} \frac{1 - z^{-1}}{1 + z^{-1}}
\end{align}
</extension></listitem></list><paragraph>The bilinear transform essentially uses this first order approximation and substitutes into the continuous-time transfer function,<space/><extension extension_name='math'><space/>H_a(s) \<space/></extension></paragraph><list type='ident'><listitem><extension extension_name='math'>s \leftarrow \frac{2}{T} \frac{z - 1}{z + 1}.</extension></listitem></list><paragraph>That is</paragraph><list type='ident'><listitem><extension extension_name='math'>H_d(z) = H_a(s) \bigg|_{s = \frac{2}{T} \frac{z - 1}{z + 1}}= H_a \left( \frac{2}{T} \frac{z-1}{z+1} \right). \<space/></extension></listitem></list><heading level='2'>Stability and minimum-phase property preserved</heading><paragraph>A continuous-time causal filter is<space/><link><target>BIBO stability</target><part>stable</part></link><space/>if the<space/><link><target>Pole (complex analysis)</target><part>poles</part></link><space/>of its transfer function fall in the left half of the<space/><link><target>complex number</target><part>complex</part></link><space/><link><target>s-plane</target></link>. A discrete-time causal filter is stable if the poles of its transfer function fall inside the<space/><link><target>unit circle</target></link><space/>in the<space/><link><target>complex plane</target><part>complex z-plane</part></link>. The bilinear transform maps the left half of the complex s-plane to the interior of the unit circle in the z-plane. Thus filters designed in the continuous-time domain that are stable are converted to filters in the discrete-time domain that preserve that stability.</paragraph><paragraph>Likewise, a continuous-time filter is<space/><link><target>minimum-phase</target></link><space/>if the<space/><link><target>Zero (complex analysis)</target><part>zeros</part></link><space/>of its transfer function fall in the left half of the complex s-plane. A discrete-time filter is minimum-phase if the zeros of its transfer function fall inside the unit circle in the complex z-plane. Then the same mapping property assures that continuous-time filters that are minimum-phase are converted to discrete-time filters that preserve that property of being minimum-phase.</paragraph><heading level='2'>Example</heading><paragraph>As an example take a simple<space/><link><target>low-pass</target></link><space/><link><target>RC filter</target></link>. This continuous-time filter has a transfer function</paragraph><list type='ident'><listitem><extension extension_name='math'>\begin{align}
H_a(s) &amp;= \frac{1/sC}{R+1/sC} \\
&amp;= \frac{1}{1 + RC s}.
\end{align}</extension></listitem></list><paragraph>If we wish to implement this filter as a digital filter, we can apply the bilinear transform by substituting for<space/><extension extension_name='math'>s</extension><space/>the formula above; after some reworking, we get the following filter representation:</paragraph><list type='ident'><listitem><table><tablerow><tablecell><extension extension_name='math'>H_d(z) \<space/></extension></tablecell><tablecell><extension extension_name='math'><space/>=H_a \left( \frac{2}{T} \frac{z-1}{z+1}\right) \<space/></extension></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><extension extension_name='math'>= \frac{1}{1 + RC \left( \frac{2}{T} \frac{z-1}{z+1}\right)} \<space/></extension></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><extension extension_name='math'>= \frac{1 + z}{(1 - 2 RC / T) + (1 + 2RC / T) z} \<space/></extension></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><extension extension_name='math'>= \frac{1 + z^{-1}}{(1 + 2RC / T) + (1 - 2RC / T) z^{-1}}. \<space/></extension></tablecell></tablerow></table>The coefficients of the denominator are the 'feed-backward' coefficients and the coefficients of the numerator are the 'feed-forward' coefficients used to implement a real-time<space/><link><target>digital filter</target></link>.</listitem></list><heading level='2'>General second-order biquad transformation</heading><paragraph>It is possible to relate the coefficients of a continuous-time, analog filter with those of a similar discrete-time digital filter created through the bilinear transform process. Transforming a general, second-order continuous-time filter with the given transfer function</paragraph><list type='ident'><listitem><extension extension_name='math'>H_a(s) = \frac{b_0 s^2 + b_1 s + b_2}{a_0 s^2 + a_1 s + a_2} = \frac{b_0 + b_1 s^{-1} + b_2 s^{-2}}{a_0 + a_1 s^{-1} + a_2 s^{-2}}</extension></listitem></list><paragraph>using the bilinear transform (without prewarping any frequency specification) requires the substitution of</paragraph><list type='ident'><listitem><extension extension_name='math'>s \leftarrow K \frac{1 - z^{-1}}{1 + z^{-1}}</extension></listitem></list><paragraph>where<space/><extension extension_name='math'>K \triangleq \frac{2}{T}<space/></extension>.</paragraph><paragraph>This results in a discrete-time<space/><link><target>digital biquad filter</target></link><space/>with coefficients expressed in terms of the coefficients of the original continuous time filter:</paragraph><list type='ident'><listitem><extension extension_name='math'>H_d(z)=\frac{(b_0 K^2 + b_1 K + b_2) + (2b_2 - 2b_0 K^2)z^{-1} + (b_0 K^2 - b_1 K + b_2)z^{-2}}{(a_0 K^2 + a_1 K + a_2) + (2a_2 - 2a_0 K^2)z^{-1} + (a_0 K^2 - a_1 K + a_2)z^{-2}}</extension></listitem></list><paragraph>Normally the constant term in the denominator must be normalized to 1 before deriving the corresponding<space/><link><target>difference equation</target></link>. This results in</paragraph><list type='ident'><listitem><extension extension_name='math'>H_d(z)=\frac{\frac{b_0 K^2 + b_1 K + b_2}{a_0 K^2 + a_1 K + a_2} + \frac{2b_2 - 2b_0 K^2}{a_0 K^2 + a_1 K + a_2}z^{-1} + \frac{b_0 K^2 - b_1 K + b_2}{a_0 K^2 + a_1 K + a_2}z^{-2}}{1 + \frac{2a_2 - 2a_0 K^2}{a_0 K^2 + a_1 K + a_2}z^{-1} + \frac{a_0 K^2 - a_1 K + a_2}{a_0 K^2 + a_1 K + a_2}z^{-2}}.<space/></extension></listitem></list><paragraph>The difference equation (using the<space/><link><target>Digital filter#Direct Form I</target><part>Direct Form I</part></link>) is</paragraph><list type='ident'><listitem><extension extension_name='math'>
\begin{align}
y[n] ={} &amp; \frac{b_0 K^2 + b_1 K + b_2}{a_0 K^2 + a_1 K + a_2} \cdot x[n] + \frac{2b_2 - 2b_0 K^2}{a_0 K^2 + a_1 K + a_2} \cdot x[n-1] \\[8pt]
&amp; {} + \frac{b_0 K^2 - b_1 K + b_2}{a_0 K^2 + a_1 K + a_2} \cdot x[n-2] - \frac{2a_2 - 2a_0 K^2}{a_0 K^2 + a_1 K + a_2} \cdot y[n-1] \\[8pt]
&amp; {} - \frac{a_0 K^2 - a_1 K + a_2}{a_0 K^2 + a_1 K + a_2} \cdot y[n-2].
\end{align}
</extension></listitem></list><heading level='2'>Frequency warping</heading><paragraph>To determine the frequency response of a continuous-time filter, the<space/><link><target>transfer function</target></link><space/><extension extension_name='math'><space/>H_a(s) \<space/></extension><space/>is evaluated at<space/><extension extension_name='math'>s = j \omega \<space/></extension><space/>which is on the<space/><extension extension_name='math'><space/>j \omega \<space/></extension><space/>axis. Likewise, to determine the frequency response of a discrete-time filter, the transfer function<space/><extension extension_name='math'><space/>H_d(z) \<space/></extension><space/>is evaluated at<space/><xhtml:span style="vertical-align:+30%;"><extension extension_name='math'>z = e^{ j \omega T} \<space/></extension></xhtml:span><space/>which is on the unit circle,<space/><extension extension_name='math'><space/>|z| = 1 \<space/></extension>. When the actual frequency of<space/><extension extension_name='math'><space/>\omega \<space/></extension><space/>is input to the discrete-time filter designed by use of the bilinear transform, it is desired to know at what frequency,<space/><extension extension_name='math'><space/>\omega_a \<space/></extension>, for the continuous-time filter that this<space/><extension extension_name='math'><space/>\omega \<space/></extension><space/>is mapped to.</paragraph><list type='ident'><listitem><extension extension_name='math'>H_d(z) = H_a \left( \frac{2}{T} \frac{z-1}{z+1}\right) \<space/></extension></listitem></list><list type='ident'><listitem><table><tablerow><tablecell><extension extension_name='math'>H_d(e^{ j \omega T}) \<space/></extension></tablecell><tablecell><extension extension_name='math'>= H_a \left( \frac{2}{T} \frac{e^{ j \omega T} - 1}{e^{ j \omega T} + 1}\right) \<space/></extension></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><extension extension_name='math'>= H_a \left( \frac{2}{T} \cdot \frac{e^{j \omega T/2} \left(e^{j \omega T/2} - e^{-j \omega T/2}\right)}{e^{j \omega T/2} \left(e^{j \omega T/2} + e^{-j \omega T/2 }\right)}\right) \<space/></extension></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><extension extension_name='math'>= H_a \left( \frac{2}{T} \cdot \frac{\left(e^{j \omega T/2} - e^{-j \omega T/2}\right)}{\left(e^{j \omega T/2} + e^{-j \omega T/2 }\right)}\right) \<space/></extension></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><extension extension_name='math'>= H_a \left(j \frac{2}{T} \cdot \frac{ \left(e^{j \omega T/2} - e^{-j \omega T/2}\right) /(2j)}{\left(e^{j \omega T/2} + e^{-j \omega T/2 }\right) / 2}\right) \<space/></extension></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><extension extension_name='math'>= H_a \left(j \frac{2}{T} \cdot \frac{ \sin(\omega T/2) }{ \cos(\omega T/2) }\right) \<space/></extension></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><extension extension_name='math'>= H_a \left(j \frac{2}{T} \cdot \tan \left( \omega T/2 \right) \right) \<space/></extension></tablecell></tablerow></table>This shows that every point on the unit circle in the discrete-time filter z-plane,<space/><xhtml:span style="vertical-align:+30%;"><extension extension_name='math'>z = e^{ j \omega T} \<space/></extension></xhtml:span><space/>is mapped to a point on the<space/><extension extension_name='math'>j \omega \<space/></extension><space/>axis on the continuous-time filter s-plane,<space/><extension extension_name='math'>s = j \omega_a \<space/></extension>. That is, the discrete-time to continuous-time frequency mapping of the bilinear transform is</listitem></list><list type='ident'><listitem><extension extension_name='math'><space/>\omega_a = \frac{2}{T} \tan \left( \omega \frac{T}{2} \right)<space/></extension></listitem></list><paragraph>and the inverse mapping is</paragraph><list type='ident'><listitem><extension extension_name='math'><space/>\omega = \frac{2}{T} \arctan \left( \omega_a \frac{T}{2} \right).<space/></extension></listitem></list><paragraph>The discrete-time filter behaves at frequency<space/><extension extension_name='math'>\omega \<space/></extension><space/>the same way that the continuous-time filter behaves at frequency<space/><extension extension_name='math'><space/>(2/T) \tan(\omega T/2) \<space/></extension>. Specifically, the gain and phase shift that the discrete-time filter has at frequency<space/><extension extension_name='math'>\omega \<space/></extension><space/>is the same gain and phase shift that the continuous-time filter has at frequency<space/><extension extension_name='math'><space/>(2/T) \tan(\omega T/2) \<space/></extension>. This means that every feature, every &quot;bump&quot; that is visible in the frequency response of the continuous-time filter is also visible in the discrete-time filter, but at a different frequency. For low frequencies (that is, when<space/><extension extension_name='math'>\omega \ll 2/T</extension><space/>or<space/><extension extension_name='math'>\omega_a \ll 2/T</extension>),<space/><extension extension_name='math'>\omega \approx \omega_a \<space/></extension>.</paragraph><paragraph>One can see that the entire continuous frequency range</paragraph><list type='ident'><listitem><extension extension_name='math'><space/>-\infty &lt; \omega_a &lt; +\infty \<space/></extension></listitem></list><paragraph>is mapped onto the fundamental frequency interval</paragraph><list type='ident'><listitem><extension extension_name='math'><space/>-\frac{\pi}{T} &lt; \omega &lt; +\frac{\pi}{T}. \<space/></extension></listitem></list><paragraph>The continuous-time filter frequency<space/><extension extension_name='math'><space/>\omega_a = 0 \<space/></extension><space/>corresponds to the discrete-time filter frequency<space/><extension extension_name='math'><space/>\omega = 0 \<space/></extension><space/>and the continuous-time filter frequency<space/><extension extension_name='math'><space/>\omega_a = \pm \infty \<space/></extension><space/>correspond to the discrete-time filter frequency<space/><extension extension_name='math'><space/>\omega = \pm \pi / T. \<space/></extension></paragraph><paragraph>One can also see that there is a nonlinear relationship between<space/><extension extension_name='math'><space/>\omega_a \<space/></extension><space/>and<space/><extension extension_name='math'><space/>\omega. \<space/></extension><space/>This effect of the bilinear transform is called<space/><bold><italics>frequency warping</italics></bold>. The continuous-time filter can be designed to compensate for this frequency warping by setting<space/><extension extension_name='math'><space/>\omega_a = \frac{2}{T} \tan \left( \omega \frac{T}{2} \right) \<space/></extension><space/>for every frequency specification that the designer has control over (such as corner frequency or center frequency). This is called<space/><bold><italics>pre-warping</italics></bold><space/>the filter design.</paragraph><paragraph>When designing a digital filter as an approximation of a continuous time filter, the frequency response (both amplitude and phase) of the digital filter can be made to match the frequency response of the continuous filter at frequency<space/><extension extension_name='math'><space/>\omega_0<space/></extension><space/>if the following transform is substituted into the continuous filter transfer function.<extension extension_name='ref'>Astrom, Karl J.<space/><italics>Computer Controlled Systems, Theory and Design</italics><space/>Second Edition. ISBN 0131686003. Prentice-Hall, 1990, pp 212</extension><space/>This is a modified version of Tustin's transform shown above. However, note that this transform becomes the above transform as<space/><extension extension_name='math'><space/>\omega_0 \to 0<space/></extension>. That is to say, the above transform causes the digital filter response to match the analog filter response at DC.</paragraph><list type='ident'><listitem><extension extension_name='math'>s \leftarrow \frac{\omega_0}{\tan(\frac{\omega_0 T}{2})} \frac{z - 1}{z + 1}.</extension></listitem></list><paragraph>The main advantage of the warping phenomenon is the absence of aliasing distortion of the frequency response characteristic, such as observed with<space/><link><target>Impulse invariance</target></link>. It is necessary, however, to compensate for the frequency warping by pre-warping the given frequency specifications of the continuous-time system. These pre-warped specifications may then be used in the bilinear transform to obtain the desired discrete-time system.</paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Impulse invariance</target></link></listitem><listitem><link><target>Matched Z-transform method</target></link></listitem></list><heading level='2'>References</heading><paragraph><template><target>refimprove</target><arg name="date">February 2011</arg></template><template><target>reflist</target></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://ocw.mit.edu/courses/mechanical-engineering/2-161-signal-processing-continuous-and-discrete-fall-2008/lecture-notes/lecture_19.pdf'>MIT OpenCourseWare Signal Processing: Continuous to Discrete Filter Design</link></listitem><listitem><link type='external' href='http://web.cecs.pdx.edu/~tymerski/ece452/6.pdf'>Lecture Notes on Discrete Equivalents</link></listitem></list><paragraph><template><target>DSP</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Bilinear Transform</target></template><link><target>Category:Digital signal processing</target></link><link><target>Category:Transforms</target></link><link><target>Category:Control theory</target></link></paragraph></article>