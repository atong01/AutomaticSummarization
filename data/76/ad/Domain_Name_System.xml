<article title='Domain_Name_System'><paragraph><template><target>redirect</target><arg>DNS</arg></template><template><target>IPstack</target></template>The<space/><bold>Domain Name System</bold><space/>(<bold>DNS</bold>) is a<space/><link><target>hierarchical</target></link><space/>distributed naming system for computers, services, or any resource connected to the<space/><link><target>Internet</target></link><space/>or a<space/><link><target>private network</target></link>. It associates various information with<space/><link><target>domain name</target><trail>s</trail></link><space/>assigned to each of the participating entities. Most prominently, it translates<space/><link><target>domain name</target><trail>s</trail></link>, which can be easily memorized by humans, to the numerical<space/><link><target>IP address</target><trail>es</trail></link><space/>needed for the purpose of computer services and devices worldwide. The Domain Name System is an essential component of the functionality of most<space/><link><target>Internet</target></link><space/>services because it is the Internet's primary<space/><link><target>directory service</target></link>.</paragraph><paragraph>The Domain Name System distributes the responsibility of assigning domain names and mapping those names to IP addresses by designating<space/><link><target>authoritative name server</target><trail>s</trail></link><space/>for each domain. Authoritative name servers are assigned to be responsible for their supported domains, and may delegate authority over<space/><link><target>sub-domain</target><trail>s</trail></link><space/>to other name servers. This mechanism provides distributed and fault tolerant service and was designed to avoid the need for a single central database.</paragraph><paragraph>The Domain Name System also specifies the technical functionality of the<space/><link><target>database</target></link><space/>service which is at its core. It defines the DNS protocol, a detailed specification of the data structures and data communication exchanges used in DNS, as part of the<space/><link><target>Internet Protocol Suite</target></link>. Historically, other directory services preceding DNS were not scalable to large or global directories as they were originally based on text files, prominently the<space/><link><target>HOSTS.TXT</target></link><space/>resolver. DNS has been in wide use since the 1980s.</paragraph><paragraph>The Internet maintains two principal<space/><link><target>namespace</target><trail>s</trail></link>, the domain name hierarchy<extension extension_name='ref' name="rfc1034">RFC 1034,<space/><italics>Domain Names - Concepts and Facilities</italics>, P. Mockapetris, The Internet Society (November 1987)</extension><space/>and the<space/><link><target>Internet Protocol</target></link><space/>(IP)<space/><link><target>address space</target><trail>s</trail></link>.<extension extension_name='ref' name="rfc781">RFC 781,<space/><italics>Internet Protocol - DARPA Internet Program Protocol Specification</italics>, Information Sciences Institute, J. Postel (Ed.), The Internet Society (September 1981)</extension><space/>The Domain Name System maintains the domain name hierarchy and provides translation services between it and the address spaces. Internet<space/><link><target>name server</target><trail>s</trail></link><space/>and a communication<space/><link><target>network protocol</target><part>protocol</part></link><space/>implement the Domain Name System.<extension extension_name='ref' name="rfc1035">RFC 1035,<space/><italics>Domain Names - Implementation and Specification</italics>, P. Mockapetris, The Internet Society (November 1987)</extension><space/>A DNS name server is a server that stores the DNS records for a domain name; a DNS name server responds with answers to queries against its database.</paragraph><paragraph>The most common types of records stored in the DNS database are for<space/><link><target>DNS zone</target></link><space/>authority (SOA),<space/><link><target>IP address</target><trail>es</trail></link><space/>(A and AAAA),<space/><link><target>SMTP</target></link><space/><link><target>mail exchanger</target><trail>s</trail></link><space/>(MX),<space/><link><target>name server</target><trail>s</trail></link><space/>(NS), pointers for<space/><link><target>reverse DNS lookup</target><trail>s</trail></link><space/>(PTR), and<space/><link><target>domain name alias</target><trail>es</trail></link><space/>(CNAME). Although not intended to be a general purpose database, DNS can store records for other types of data for either automatic machine lookups, such as<space/><link><target>DNSSEC</target></link><space/>records, or for human queries such as<space/><italics>responsible person</italics><space/>(RP) records. As a general purpose database, DNS has also seen use in combating<space/><link><target>unsolicited email</target></link><space/>(spam) by using a<space/><link><target>real-time blackhole list</target></link><space/>stored in the DNS. Whether for Internet naming or for general purpose uses, the DNS database is traditionally stored in a structured<space/><link><target>zone file</target></link>.</paragraph><heading level='2'>Function</heading><paragraph>An often-used analogy to explain the Domain Name System is that it serves as the<space/><link><target>telephone directory</target><part>phone book</part></link><space/>for the Internet by translating human-friendly computer<space/><link><target>hostname</target><trail>s</trail></link><space/>into IP addresses. For example, the domain name<space/><link><target>example.com</target><part>www.example.com</part></link><space/>translates to the addresses 93.184.216.119 (<link><target>IPv4</target></link>) and 2606:2800:220:6d:26bf:1447:1097:aa7 (<link><target>IPv6</target></link>). Unlike a phone book, the DNS can be quickly updated, allowing a service's location on the network to change without affecting the end users, who continue to use the same host name. Users take advantage of this when they use meaningful<space/><link><target>Uniform Resource Locator</target><trail>s</trail></link><space/>(URLs), and<space/><link><target>e-mail address</target><trail>es</trail></link><space/>without having to know how the computer actually locates the services.</paragraph><heading level='2'>History</heading><paragraph>Using a simpler, more memorable name in place of a host's numerical address dates back to the<space/><link><target>ARPANET</target></link><space/>era. The Stanford Research Institute (now<space/><link><target>SRI International</target></link>) maintained a text file named<space/><link><target>hosts (file)</target><part>HOSTS.TXT</part></link><space/>that mapped host names to the numerical addresses of computers on the ARPANET. Host operators obtained copies of the master file.<extension extension_name='ref' name="rfc2467">RFC 3467, &quot;Role of the Domain Name System (DNS)&quot;, J.C. Klensin, J. Klensin (February 2003).</extension><extension extension_name='ref'><template><target>cite book</target><arg name="title"><space/>DNS and BIND
</arg><arg name="edition"><space/>5th
</arg><arg name="page"><space/>3
</arg><arg name="year"><space/>2006
</arg><arg name="first1">Cricket<space/></arg><arg name="last1">Liu<space/></arg><arg name="first2">Paul<space/></arg><arg name="last2">Albitz
</arg><arg name="publisher"><space/>O'Reilly Media
</arg><arg name="isbn"><space/>978-0-596-10057-5
</arg></template></extension><space/>The rapid growth of the emerging network required an automated system for maintaining the host names and addresses.</paragraph><paragraph><link><target>Paul Mockapetris</target></link><space/>designed the Domain Name System at the<space/><link><target>University of California, Irvine</target></link><space/>in 1983, and wrote the first implementation at the request of<space/><link><target>Jon Postel</target></link><space/>from<space/><link><target>Information Sciences Institute</target><part>ISI</part></link>. The<space/><link><target>Internet Engineering Task Force</target></link><space/>published the original specifications in RFC 882 and RFC 883 in November 1983, which have remained the standard for naming Internet hosts.<template><target>citation needed</target><arg name="date">September 2014</arg></template></paragraph><paragraph>In 1984, four<space/><link><target>University of California, Berkeley</target><part>UC Berkeley</part></link><space/>studentsDouglas Terry, Mark Painter, David Riggle, and Songnian Zhouwrote the first<space/><link><target>Unix</target></link><space/>name server implementation, called the Berkeley Internet Name Domain (<link><target>BIND</target></link>) Server.<extension extension_name='ref' name="Terry USENIX 2004"><template><target>cite conference</target><arg name="author">Terry, Douglas B.
</arg><arg name="url">http://www.eecs.berkeley.edu/Pubs/TechRpts/1984/5957.html
</arg><arg name="title">The Berkeley Internet Name Domain Server
</arg><arg name="booktitle">Summer Conference, Salt Lake City 1984: Proceedings
</arg><arg name="conference">USENIX Association Software Tools Users Group
</arg><arg name="date">June 12–15, 1984
</arg><arg name="pages">23–31</arg><arg name="display-authors">etal</arg></template></extension><space/>In 1985, Kevin Dunlap of<space/><link><target>Digital Equipment Corporation</target><part>DEC</part></link><space/>substantially revised the DNS implementation.<space/><link><target>Michael J. Karels</target><part>Mike Karels</part></link>, Phil Almquist, and<space/><link><target>Paul Vixie</target></link><space/>have maintained BIND since then.<extension extension_name='ref' name="BIND Home Page"><template><target>cite web</target><arg name="url"><space/>//www.isc.org/downloads/bind/
</arg><arg name="title"><space/>The Most Widely Used Name Server Software: BIND
</arg><arg name="author"><space/>Internet Systems Consortium
</arg><arg name="at"><space/>History of BIND
</arg><arg name="accessdate"><space/>28 July 2013
</arg></template></extension><space/>BIND was<space/><link><target>porting</target><part>ported</part></link><space/>to the<space/><link><target>Windows NT</target></link><space/>platform in the early 1990s. BIND was widely distributed, especially on Unix systems, and is still the most widely used DNS software on the Internet.<extension extension_name='ref' name="BIND Home Page"></extension></paragraph><paragraph>In November 1987, RFC 1034<extension extension_name='ref' name="rfc1034">RFC 1034, &quot;Domain NamesConcepts and Facilities&quot;, P. Mockapetris (November 1987).</extension><space/>and RFC 1035<extension extension_name='ref' name="rfc1035">RFC 1035, &quot;Domain namesImplementation and Specification&quot;, P. Mockapetris (November 1987).</extension><space/>superseded the 1983 DNS specifications. Several additional<space/><link><target>Request for Comments</target></link><space/>have proposed extensions to the core DNS protocols.<template><target>citation needed</target><arg name="date">September 2014</arg></template></paragraph><heading level='2'>Structure<space/><template><target>anchor</target><arg>The domain name space</arg></template></heading><paragraph><template><target>refimprove</target><arg name="date">September 2014</arg></template></paragraph><heading level='3'>Domain name space</heading><paragraph>The domain name space consists of a<space/><link><target>tree data structure</target><part>tree</part></link><space/>of domain names. Each node or leaf in the tree has zero or more<space/><italics>resource records</italics>, which hold information associated with the domain name. The tree sub-divides into<space/><italics>zones</italics><space/>beginning at the<space/><link><target>DNS root zone</target><part>root zone</part></link>. A<space/><link><target>DNS zone</target></link>may consist of only one domain, or may consist of many domains and sub-domains, depending on the administrative authority delegated to the manager.</paragraph><paragraph><link><target>Image:Domain name space.svg</target><part>right</part><part>thumb</part><part>400px</part><part>The hierarchical Domain Name System, organized into zones, each served by a name server</part></link></paragraph><paragraph>Administrative responsibility over any zone may be divided by creating additional zones. Authority is said to be<space/><italics>delegated</italics><space/>for a portion of the old space, usually in the form of sub-domains, to another name server and administrative entity. The old zone ceases to be authoritative for the new zone.</paragraph><heading level='3'>Domain name syntax</heading><paragraph>The definitive descriptions of the rules for forming domain names appear in RFC 1035, RFC 1123, and RFC 2181.A<space/><link><target>domain name</target></link><space/>consists of one or more parts, technically called<space/><italics>labels</italics>, that are conventionally concatenated, and delimited by dots, such as example.com.</paragraph><paragraph>The right-most label conveys the<space/><link><target>top-level domain</target></link>; for example, the domain name www.example.com belongs to the top-level domain<space/><italics>com</italics>.</paragraph><paragraph>The hierarchy of domains descends from right to left; each label to the left specifies a subdivision, or<space/><link><target>subdomain</target></link><space/>of the domain to the right. For example: the label<space/><italics>example</italics><space/>specifies a subdomain of the<space/><italics>com</italics><space/>domain, and<space/><italics>www</italics><space/>is a subdomain of example.com. This tree of subdivisions may have up to 127 levels.</paragraph><paragraph>Each label may contain up to 63 characters. The full domain name may not exceed the length of 253 characters in its textual representation.<extension extension_name='ref' name="rfc1034">RFC 1035,<space/><italics>Domain names--Implementation and specification</italics>, P. Mockapetris (Nov 1987)</extension><space/>In the internal binary representation of the DNS the maximum length requires 255 octets of storage, since it also stores the length of the name.<extension extension_name='ref' name="rfc1035"></extension></paragraph><paragraph>DNS names may technically consist of any character representable in an octet. However, the allowed formulation of domain names in the DNS root zone, and most other sub domains, uses a preferred format and character set. The characters allowed in a label are a subset of the<space/><link><target>ASCII</target></link><space/>character set, and includes the characters<space/><italics>a</italics><space/>through<space/><italics>z</italics>,<space/><italics>A</italics><space/>through<space/><italics>Z</italics>, digits<space/><italics>0</italics><space/>through<space/><italics>9</italics>, and the hyphen. This rule is known as the<space/><italics>LDH rule</italics><space/>(letters, digits, hyphen). Domain names are interpreted in case-independent manner.<extension extension_name='ref'><preblock><preline><space/>Network Working Group of the IETF,</preline><preline><space/>January 2006,</preline><preline><space/>RFC 4343: Domain Name System (DNS) Case Insensitivity Clarification</preline></preblock></extension><space/>Labels may not start or end with a hyphen.<extension extension_name='ref' name="rfc3696">RFC 3696,<space/><italics>Application Techniques for Checking and Transformation of Names</italics>, J.C. Klensin, J. Klensin</extension><space/>An additional rule requires that top-level domain names should not be all-numeric.<extension extension_name='ref' name="rfc3696"></extension></paragraph><paragraph>A<space/><link><target>hostname</target></link><space/>is a domain name that can be associated with IP addresses. For example, the domain names www.example.com and example.com are also hostnames, whereas com is not.</paragraph><heading level='3'>Internationalized domain names</heading><paragraph>The limited set of ASCII characters permitted in the DNS prevented the representation of names and words of many languages in their native alphabets or scripts. To make this possible,<space/><link><target>ICANN</target></link><space/>approved the<space/><link><target>Internationalized domain name</target><part>Internationalizing Domain Names in Applications</part></link><space/>(IDNA) system, by which user applications, such as web browsers, map<space/><link><target>Unicode</target></link><space/>strings into the valid DNS character set using<space/><link><target>Punycode</target></link>. In 2009 ICANN approved the installation of internationalized domain name country code top-level domains. In addition, many<space/><link><target>domain name registry</target><part>registries</part></link><space/>of the existing top level domain names (<link><target>Top-level domain</target><part>TLD</part></link>)s have adopted the IDNA system.</paragraph><heading level='3'>Name servers</heading><paragraph>The Domain Name System is maintained by a<space/><link><target>distributed database</target></link><space/>system, which uses the<space/><link><target>clientserver model</target></link>. The nodes of this database are the<space/><link><target>name server</target><trail>s</trail></link>. Each domain has at least one authoritative DNS server that publishes information about that domain and the name servers of any domains subordinate to it. The top of the hierarchy is served by the<space/><link><target>root name server</target><trail>s</trail></link>, the servers to query when looking up (<italics>resolving</italics>) a TLD.</paragraph><heading level='4'>Authoritative name server</heading><paragraph>An<space/><italics>authoritative</italics><space/>name server is a name server that gives<space/><link><target>Name server#Authoritative answer</target><part>answers</part></link><space/>that have been configured by an original source, for example, the domain administrator or by dynamic DNS methods, in contrast to answers that were obtained via a regular DNS query to another name server. An authoritative-only name server only returns answers to queries about domain names that have been specifically configured by the administrator.</paragraph><paragraph>In other words, an authoritative name server lets<space/><link><target>Domain Name System#Recursive and caching name server</target><part>recursive</part></link><space/>name servers know what DNS data (the IPv4 IP, the IPv6 IP, a list of incoming mail servers, etc.) a given host name (such as &quot;www.example.com&quot;) has. As just one example, the authoritative name server for &quot;example.com&quot; tells recursive name servers that &quot;www.example.com&quot; has the IPv4 IP address 192.0.43.10.</paragraph><paragraph>An authoritative name server can either be a<space/><italics>master</italics><space/>server or a<space/><italics>slave</italics><space/>server. A master server is a server that stores the original (<italics>master</italics>) copies of all zone records. A slave server uses an automatic updating mechanism of the DNS protocol in communication with its master to maintain an identical copy of the master records.</paragraph><paragraph>A set of authoritative name servers has to be assigned for every DNS zone. An NS record about addresses of that set must be stored in the parent zone and servers themselves (as self-reference).</paragraph><paragraph>When domain names are registered with a<space/><link><target>domain name registrar</target></link>, their installation at the<space/><link><target>domain registry</target></link><space/>of a<space/><link><target>top level domain</target></link><space/>requires the assignment of a<space/><italics>primary</italics><space/>name server and at least one<space/><italics>secondary</italics><space/>name server. The requirement of multiple name servers aims to make the domain still functional even if one name server becomes inaccessible or inoperable.<extension extension_name='ref' name="techterms"><template><target>cite web</target><arg name="title"><space/>Name Server definition at techterms.com
</arg><arg name="url"><space/>http://www.techterms.com/definition/nameserver
</arg></template></extension><space/>The designation of a primary name server is solely determined by the priority given to the domain name registrar. For this purpose, generally only the<space/><link><target>fully qualified domain name</target></link><space/>of the name server is required, unless the servers are contained in the registered domain, in which case the corresponding<space/><link><target>IP address</target></link><space/>is needed as well.</paragraph><paragraph>Primary name servers are often master name servers, while secondary name servers may be implemented as slave servers.</paragraph><paragraph>An authoritative server indicates its status of supplying definitive answers, deemed<space/><italics>authoritative</italics>, by setting a software flag (a protocol structure bit), called the<space/><italics>Authoritative Answer</italics><space/>(<italics>AA</italics>) bit in its responses.<extension extension_name='ref' name="rfc1035"></extension><space/>This flag is usually reproduced prominently in the output of DNS administration query tools (such as<space/><link><target>Domain Information Groper</target><part>dig</part></link>) to indicate<space/><italics>that the responding name server is an authority for the domain name in question.</italics><extension extension_name='ref' name="rfc1035"></extension></paragraph><heading level='2'>Operation</heading><paragraph><template><target>refimprove</target><arg name="date">September 2014</arg></template></paragraph><heading level='3'>Address resolution mechanism</heading><paragraph>Domain name resolvers determine the domain name servers responsible for the domain name in question by a sequence of queries starting with the right-most (top-level) domain label.</paragraph><paragraph><link><target>Image:An example of theoretical DNS recursion.svg</target><part>right</part><part>thumb</part><part>400px</part><part>A DNS recursor consults three name servers to resolve the address www.wikipedia.org.</part></link></paragraph><paragraph>For proper operation of its domain name resolver, a network host is configured with an initial cache (<italics>hints</italics>) of the known addresses of the root name servers. The hints are updated periodically by an administrator by retrieving a dataset from a reliable source. The resolution process starts with a query to one of the root servers to find the server authoritative for the top-level domain. The obtained TLD server is queried for the address of a DNS server authoritative for the second-level domain. Iteratively, each domain name label is used to query the resulting server of the previous step until the final step returns the IP address of the host name to be resolved. The diagram illustrates this process for the host www.wikipedia.org.</paragraph><paragraph>This mechanism would place a large traffic burden on the root servers, as every resolution on the Internet would require them. In practice<space/><link><target>#Record caching</target><part>caching</part></link><space/>is used in DNS servers to off-load the root servers, and as a result, root name servers actually are involved in only a fraction of all requests.</paragraph><heading level='4'>Recursive and caching name server</heading><paragraph>In theory, authoritative name servers are sufficient for the operation of the Internet. However, with only authoritative name servers operating, every DNS query must start with recursive queries at the<space/><link><target>DNS root zone</target><part>root zone</part></link><space/>of the Domain Name System and each user system would have to implement resolver software capable of recursive operation.</paragraph><paragraph>To improve efficiency, reduce DNS traffic across the Internet, and increase performance in end-user applications, the Domain Name System supports DNS cache servers which store DNS query results for a period of time determined in the configuration (time-to-live) of the domain name record in question.Typically, such<space/><italics>caching</italics><space/>DNS servers, also called<space/><italics>DNS caches</italics>, also implement the recursive algorithm necessary to resolve a given name starting with the DNS root through to the authoritative name servers of the queried domain. With this function implemented in the name server, user applications gain efficiency in design and operation.</paragraph><paragraph>As one example, if a client wants to know the address for &quot;www.example.com&quot;, it will send, to a recursive caching name server, a DNS request stating &quot;I would like the IPv4 address for 'www.example.com'.&quot; The recursive name server will then query<space/><link><target>Domain Name System#Authoritative name server</target><part>authoritative name servers</part></link><space/>until it gets an answer to that query (or return an error if it's not possible to get an answer)in this case 192.0.43.10.</paragraph><paragraph>The combination of DNS caching and recursive functions in a name server is not mandatory; the functions can be implemented independently in servers for special purposes.</paragraph><paragraph><link><target>Internet service providers</target></link><space/>typically provide recursive and caching name servers for their customers. In addition, many home networking routers implement DNS caches and recursors to improve efficiency in the local network.</paragraph><heading level='3'>DNS resolvers</heading><paragraph>The client side of the DNS is called a DNS resolver. A resolver is responsible for initiating and sequencing the queries that ultimately lead to a full resolution (translation) of the resource sought, e.g., translation of a domain name into an IP address. This sequence may be<space/><italics>recursive</italics><space/>or<space/><italics>iterative</italics>, or a combination of both.<extension extension_name='ref' name="rfc1034"></extension></paragraph><paragraph>For the recursive approach, a resolver will query a single DNS server, which may then query other servers as needed. For example, a simple &quot;stub resolver&quot; running on a home router will typically make a recursive query to the DNS server for the user's ISP.</paragraph><paragraph>For the iterative approach, a resolver will query a chain of one or more DNS servers. Each server will refer the client to the next server in the chain, until the current server can fully resolve the request. For example, a possible resolution of www.example.com would query a global root, then a .com server, and finally .example.com.</paragraph><paragraph>An individual DNS query may be either recursive or non-recursive. A<space/><italics>non-recursive query</italics><space/>is one in which the DNS server provides a record for a domain for which it is authoritative itself, or it provides a partial result without querying other servers. A<space/><italics>recursive query</italics><space/>is one for which the DNS server will fully answer the query (or give an error) by querying other name servers as needed. DNS servers are not required to support recursive queries.</paragraph><paragraph>The resolver, or another DNS server acting recursively on behalf of the resolver, negotiates use of recursive service using bits in the query headers.</paragraph><heading level='3'>Circular dependencies and glue records</heading><paragraph>Name servers in delegations are identified by name, rather than by IP address. This means that a resolving name server must issue another DNS request to find out the IP address of the server to which it has been referred. If the name given in the delegation is a subdomain of the domain for which the delegation is being provided, there is a<space/><link><target>circular dependency</target></link>. In this case the name server providing the delegation must also provide one or more IP addresses for the authoritative name server mentioned in the delegation. This information is called<space/><italics>glue</italics>. The delegating name server provides this glue in the form of records in the<space/><italics>additional section</italics><space/>of the DNS response, and provides the delegation in the<space/><italics>authority section</italics><space/>of the response.</paragraph><paragraph>For example, if the<space/><link><target>authoritative name server</target></link><space/>for example.org is ns1.example.org, a computer trying to resolve www.example.org first resolves ns1.example.org. Since ns1 is contained in example.org, this requires resolving example.org first, which presents a circular dependency. To break the dependency, the name server for the<space/><link><target>top level domain</target></link><space/>org includes glue along with the delegation for example.org. The glue records are address records that provide IP addresses for ns1.example.org. The resolver uses one or more of these IP addresses to query one of the domain's authoritative servers, which allows it to complete the DNS query.</paragraph><heading level='3'>Record caching</heading><paragraph>The DNS Resolution Process reduces the load on individual servers by<space/><italics>caching</italics><space/>DNS request records for a period of time after a response. This entails the local recording and subsequent consultation of the copy instead of initiating a new request upstream. The time for which a resolver caches a DNS response is determined by a value called the<space/><link><target>time to live</target></link><space/>(TTL) associated with every record. The TTL is set by the administrator of the DNS server handing out the authoritative response. The period of validity may vary from just seconds to days or even weeks.</paragraph><paragraph>As a noteworthy consequence of this distributed and caching architecture, changes to DNS records do not propagate throughout the network immediately, but require all caches to expire and refresh after the TTL. RFC 1912 conveys basic rules for determining appropriate TTL values.</paragraph><paragraph>Some resolvers may override TTL values, as the protocol supports caching for up to 68 years or no caching at all.<space/><link><target>Negative cache</target><part>Negative caching</part></link>, i.e. the caching of the fact of non-existence of a record, is determined by name servers authoritative for a zone which must include the<space/><link><target>List of DNS record types#SOA</target><part>Start of Authority</part></link><space/>(SOA) record when reporting no data of the requested type exists. The value of the<space/><italics>minimum</italics><space/>field of the SOA record and the TTL of the SOA itself is used to establish the TTL for the negative answer.</paragraph><heading level='3'>Reverse lookup</heading><paragraph>A reverse lookup is a query of the DNS for domain names when the IP address is known. Multiple domain names may be associated with an IP address. The DNS stores IP addresses in the form of domain names as specially formatted names in pointer (PTR) records within the infrastructure top-level domain<space/><link><target>.arpa</target><part>arpa</part></link>. For IPv4,<extension extension_name='ref'><template><target>Cite web</target><arg name="url"><space/>http://help.dnsmadeeasy.com/managed-dns/dns-record-types/aaaa-record/</arg><arg name="title"><space/>AAAA Record</arg><arg name="date"><space/></arg><arg name="accessdate"><space/></arg><arg name="website"><space/></arg><arg name="publisher"><space/></arg><arg name="last"><space/></arg><arg name="first"><space/></arg></template></extension><space/>the domain is in-addr.arpa. For IPv6, the reverse lookup domain is ip6.arpa. The IP address is represented as a name in reverse-ordered octet representation for IPv4, and reverse-ordered nibble representation for IPv6.</paragraph><paragraph>When performing a reverse lookup, the DNS client converts the address into these formats before querying the name for a PTR record following the delegation chain as for any DNS query. For example, assuming the IPv4 address 208.80.152.2 is assigned to Wikimedia, it is represented as a DNS name in reverse order: 2.152.80.208.in-addr.arpa. When the DNS resolver gets a pointer (PTR) request, it begins by querying the root servers, which point to the servers of<space/><link><target>American Registry for Internet Numbers</target></link><space/>(ARIN) for the 208.in-addr.arpa zone. ARIN's servers delegate 152.80.208.in-addr.arpa to Wikimedia to which the resolver sends another query for 2.152.80.208.in-addr.arpa, which results in an authoritative response.</paragraph><heading level='3'>Client lookup</heading><paragraph><link><target>Image:DNS in the real world.svg</target><part>right</part><part>thumb</part><part>400px</part><part>DNS resolution sequence</part></link>Users generally do not communicate directly with a DNS resolver. Instead DNS resolution takes place transparently in applications such as<space/><link><target>web browser</target><trail>s</trail></link>,<space/><link><target>e-mail client</target><trail>s</trail></link>, and other Internet applications. When an application makes a request that requires a domain name lookup, such programs send a resolution request to the<space/><link><target>DNS resolver</target></link><space/>in the local operating system, which in turn handles the communications required.</paragraph><paragraph>The DNS resolver will almost invariably have a cache (see above) containing recent lookups. If the cache can provide the answer to the request, the resolver will return the value in the cache to the program that made the request. If the cache does not contain the answer, the resolver will send the request to one or more designated DNS servers. In the case of most home users, the Internet service provider to which the machine connects will usually supply this DNS server: such a user will either have configured that server's address manually or allowed<space/><link><target>Dynamic Host Configuration Protocol</target><part>DHCP</part></link><space/>to set it; however, where systems administrators have configured systems to use their own DNS servers, their DNS resolvers point to separately maintained name servers of the organization. In any event, the name server thus queried will follow the process outlined<space/><link><target>#Address resolution mechanism</target><part>above</part></link>, until it either successfully finds a result or does not. It then returns its results to the DNS resolver; assuming it has found a result, the resolver duly caches that result for future use, and hands the result back to the software which initiated the request.</paragraph><heading level='4'>Broken resolvers</heading><paragraph>Some large ISPs have configured their DNS servers to violate rules, such as by disobeying TTLs, or by indicating that a domain name does not exist just because one of its name servers does not respond.<extension extension_name='ref'><template><target>cite web</target><arg name="url"><space/>http://ask.slashdot.org/story/05/04/18/198259/providers-ignoring-dns-ttl
</arg><arg name="title"><space/>Providers ignoring DNS TTL?
</arg><arg name="publisher"><space/>[[Slashdot]]
</arg><arg name="year"><space/>2005
</arg><arg name="accessdate"><space/>2012-04-07
</arg></template></extension></paragraph><paragraph>Some applications, such as web browsers, maintain an internal DNS cache to avoid repeated lookups via the network. This practice can add extra difficulty when debugging DNS issues, as it obscures the history of such data. These caches typically use very short caching times on the order of one minute.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://dyn.com/web-browser-dns-caching-bad-thing/</arg><arg name="title">Ben Anderson: Why Web Browser DNS Caching Can Be A Bad Thing</arg><arg name="author">Ben Anderson</arg><arg name="date">7 September 2011</arg><arg name="publisher"></arg><arg name="accessdate">20 October 2014</arg></template></extension></paragraph><paragraph><link><target>Internet Explorer</target></link><space/>represents a notable exception: versions up to IE 3.x cache DNS records for 24 hours by default. Internet Explorer 4.x and later versions (up to IE 8) decrease the default time out value to half an hour, which may be changed in corresponding registry keys.<extension extension_name='ref'><template><target>cite web</target><arg name="url"><space/>http://support.microsoft.com/default.aspx?scid</arg><arg name="title"><space/>How Internet Explorer uses the cache for DNS host entries
</arg><arg name="publisher"><space/>[[Microsoft Corporation]]
</arg><arg name="year"><space/>2004
</arg><arg name="accessdate"><space/>2010-07-25
</arg></template></extension></paragraph><heading level='3'>Other applications</heading><paragraph>The Domain Name System includes several other functions and features.</paragraph><paragraph>No requirement exists that hostnames and IP addresses must match in a one-to-one fashion. Multiple hostnames may correspond to a single IP address and vice versa.<space/><link><target>Virtual hosting</target></link><space/>in which a single address is associated with multiple hostnames permits a single server to serve many web sites. Alternatively, a single hostname may correspond to many IP addresses to facilitate<space/><link><target>fault-tolerance</target><part>fault tolerance</part></link><space/>and<space/><link><target>load balancing (computing)</target><part>load distribution</part></link>.</paragraph><paragraph>DNS serves other purposes in addition to translating names to IP addresses. For instance,<space/><link><target>mail transfer agent</target><trail>s</trail></link><space/>use DNS to find the best mail server to deliver<space/><link><target>e-mail</target></link>. The domain to mail exchanger mapping provided by<space/><link><target>MX record</target><trail>s</trail></link><space/>may present an additional layer of fault tolerance and load distribution.</paragraph><paragraph>The DNS is used for efficient storage and distribution of IP addresses of blacklisted e-mail hosts. The usual method is placing the IP address of the subject host into the sub-domain of a higher level domain name, and resolving that name to different records to indicate a positive or a negative indications. Here is a hypothetical example blacklist:</paragraph><list type='bullet'><listitem>102.3.4.5 is blacklisted Creates 5.4.3.102.blacklist.example and resolves to 127.0.0.1</listitem><listitem>102.3.4.6 is not 6.4.3.102.blacklist.example is not found, or default to 127.0.0.2</listitem><listitem>E-mail servers can then query blacklist.example through the DNS mechanism to find out if a specific host connecting to them is in the blacklist. Today many of such blacklists, either free or subscription-based, are available mainly for use by email administrators and anti-spam software.</listitem></list><paragraph>The<space/><link><target>Sender Policy Framework</target></link><space/>and<space/><link><target>DomainKeys</target></link><space/>were designed to take advantage of another DNS record type, the<space/><link><target>TXT record</target></link>, but have since been assigned specific record types.</paragraph><paragraph>To provide resilience in the event of computer failure, multiple DNS servers are usually provided for coverage of each domain, and at the top level, thirteen very powerful root name servers exist, with additional &quot;copies&quot; of several of them distributed worldwide via<space/><link><target>anycast</target></link>.</paragraph><paragraph><link><target>Dynamic DNS</target></link><space/>(DDNS) allows clients to update a DNS entry when their IP address changes, for example, when moving between ISPs or mobile<space/><link><target>Hotspot (Wi-Fi)</target><part>hot spots</part></link>.</paragraph><heading level='2'>DNS message format</heading><paragraph>There are two types of DNS messages: queries and replies, and they both have the same format. Each message consists of a header and four sections: question, answer, authority, and additional. The header field &quot;flags&quot; controls the content of these four sections but the structure of all DNS messages are the same.<extension extension_name='ref' name="rfc1034"></extension></paragraph><paragraph>The header section contains the fields: Identification, Flags, Number of questions, Number of answers, Number of authority resource records (RRs), and Number of additional RRs. The identification field consists of 16-bits which identifies the query. The DNS client can match a reply with a query using this field. The flag field consists of four bits. The first bit indicates if the message is a query (0) or a reply (1). The second bit is set (only in reply messages) if a DNS server is authoritative for the queried hostname. The third bit is set to (1) when the client wants to send a recursive query. The fourth bit is set (1) in a reply if the replying DNS server supports recursion, since not all DNS servers are configured to do this task. The question section has a name field which is the hostname that is being queried for and a type-field that indicates the type (A, AAAA, MX, etc.) that you want to resolve. The answer section has the resource records of the queried name. There can be multiple records if the hostname has multiple IP addresses associated with it.<extension extension_name='ref'>James F. Kurose and Keith W. Ross, Computer Networking: A Top-Down Approach, 6th ed. Essex, England: Pearson Educ. Limited, 2012</extension></paragraph><heading level='2'>Protocol transport</heading><paragraph>DNS primarily uses<space/><link><target>User Datagram Protocol</target></link><space/>(UDP) on<space/><link><target>port number</target></link><space/>53 to serve requests.<extension extension_name='ref' name="rfc1035"></extension><space/>DNS queries consist of a single UDP request from the client followed by a single UDP reply from the server. The<space/><link><target>Transmission Control Protocol</target></link><space/>(TCP) is used when the response data size exceeds 512 bytes, or for tasks such as<space/><link><target>DNS zone transfer</target><part>zone transfers</part></link>. Some resolver implementations use TCP for all queries.</paragraph><paragraph><template><target>anchor</target><arg>resource records</arg><arg>resource record</arg></template></paragraph><heading level='2'>DNS resource records</heading><paragraph>The Domain Name System specifies a set of various<space/><link><target>List of DNS record types</target><part>types of resource records</part></link><space/>(RRs), which are the basic information elements of the domain name system. Each record has a type (name and number), an expiration time (<link><target>Time to live#DNS records</target><part>time to live</part></link>), a class, and type-specific data. Resource records of the same type are described as a<space/><italics>resource record set</italics><space/>(RRset). The order of resource records in a set, which is returned by a resolver to an application, is undefined, but often servers implement<space/><link><target>round-robin DNS</target><part>round-robin ordering</part></link><space/>to achieve<space/><link><target>load balancing (computing)</target><part>load balancing</part></link>. The<space/><link><target>Domain Name System Security Extensions</target></link><space/>(DNSSEC), however, work on the complete set of resource record in canonical order.</paragraph><paragraph>When sent over an<space/><link><target>Internet Protocol</target></link><space/>network, all records use the common format specified in RFC 1035:<extension extension_name='ref'>RFC 5395,<space/><italics>Domain Name System (DNS) IANA Considerations</italics>, D. Eastlake 3rd (November 2008), Section 3</extension></paragraph><table class="wikitable" style="margin: 1em auto 1em auto"><tablecaption>RR (Resource record) fields</tablecaption><tablerow><tablehead>Field</tablehead><tablehead>Description</tablehead><tablehead>Length (<link><target>Octet (computing)</target><part>octets</part></link>)</tablehead></tablerow><tablerow><tablecell>NAME</tablecell><tablecell>Name of the node to which this record pertains</tablecell><tablecell>(variable)</tablecell></tablerow><tablerow><tablecell>TYPE</tablecell><tablecell>Type of RR in numeric form (e.g. 15 for MX RRs)</tablecell><tablecell>2</tablecell></tablerow><tablerow><tablecell>CLASS</tablecell><tablecell>Class code</tablecell><tablecell>2</tablecell></tablerow><tablerow><tablecell><link><target>Time to live</target><part>TTL</part></link></tablecell><tablecell>Count of seconds that the RR stays valid (The maximum is 2<xhtml:sup>31</xhtml:sup>-1, which is about 68 years)</tablecell><tablecell><space/>4</tablecell></tablerow><tablerow><tablecell>RDLENGTH</tablecell><tablecell>Length of RDATA field</tablecell><tablecell>2</tablecell></tablerow><tablerow><tablecell>RDATA</tablecell><tablecell>Additional RR-specific data</tablecell><tablecell>(variable)</tablecell></tablerow></table><paragraph><italics>NAME</italics><space/>is the fully qualified domain name of the node in the tree. On the wire, the name may be shortened using label compression where ends of domain names mentioned earlier in the packet can be substituted for the end of the current domain name. A free standing<space/><italics>@</italics><space/>is used to denote the current origin.</paragraph><paragraph><italics>TYPE</italics><space/>is the record type. It indicates the format of the data and it gives a hint of its intended use. For example, the<space/><italics>A</italics><space/>record is used to translate from a domain name to an<space/><link><target>IPv4 address</target></link>, the<space/><italics>NS</italics><space/>record lists which name servers can answer lookups on a<space/><link><target>DNS zone</target></link>, and the<space/><italics>MX</italics><space/>record specifies the mail server used to handle mail for a domain specified in an e-mail address.</paragraph><paragraph><italics>RDATA</italics><space/>is data of type-specific relevance, such as the IP address for address records, or the priority and hostname for MX records. Well known record types may use label compression in the RDATA field, but &quot;unknown&quot; record types must not (RFC 3597).</paragraph><paragraph>The<space/><italics>CLASS</italics><space/>of a record is set to IN (for<space/><italics>Internet</italics>) for common DNS records involving Internet hostnames, servers, or IP addresses. In addition, the classes<space/><link><target>Chaosnet</target><part>Chaos</part></link><space/>(CH) and<space/><link><target>Hesiod (name service)</target><part>Hesiod</part></link><space/>(HS) exist.<extension extension_name='ref'>RFC 5395,<space/><italics>Domain Name System (DNS) IANA Considerations</italics>, D. Eastlake 3rd (November 2008), p. 11</extension><space/>Each class is an independent name space with potentially different delegations of DNS zones.</paragraph><paragraph>In addition to resource records defined in a<space/><link><target>zone file</target></link>, the domain name system also defines several request types that are used only in communication with other DNS nodes (<italics>on the wire</italics>), such as when performing zone transfers (AXFR/IXFR) or for<space/><link><target>EDNS</target></link><space/>(OPT).</paragraph><heading level='3'>Wildcard DNS records</heading><paragraph>The domain name system supports<space/><link><target>wildcard DNS record</target><trail>s</trail></link><space/>which specify names that start with the<space/><italics>asterisk label</italics>, '*', e.g., *.example.<extension extension_name='ref' name="rfc1034"></extension><extension extension_name='ref' name="rfc4592">RFC 4592,<space/><italics>The Role of Wildcards in the Domain Name System</italics>, E. Lewis (July 2006)</extension><space/>DNS records belonging to wildcard domain names specify rules for generating resource records within a single DNS zone by substituting whole labels with matching components of the query name, including any specified descendants.For example, in the DNS zone<space/><italics>x.example</italics>, the following configuration specifies that all subdomains, including subdomains of subdomains, of<space/><italics>x.example</italics><space/>use the mail exchanger<space/><italics>a.x.example</italics>. The records for<space/><italics>a.x.example</italics><space/>are needed to specify the mail exchanger. As this has the result of excluding this domain name and its subdomains from the wildcard matches, all subdomains of<space/><italics>a.x.example</italics><space/>must be defined in a separate wildcard statement.</paragraph><paragraph>The role of wildcard records was refined in RFC 4592, because the original definition in RFC 1034 was incomplete and resulted in misinterpretations by implementers.<extension extension_name='ref' name="rfc4592"></extension></paragraph><heading level='2'>Protocol extensions</heading><paragraph>The original DNS protocol had limited provisions for extension with new features. In 1999, Paul Vixie published in RFC 2671 an extension mechanism, called<space/><link><target>Extension mechanisms for DNS</target></link><space/>(EDNS) that introduced optional protocol elements without increasing overhead when not in use. This was accomplished through the OPT pseudo-resource record that only exists in wire transmissions of the protocol, but not in any zone files. Initial extensions were also suggested (EDNS0), such as increasing the DNS message size in UDP datagrams.</paragraph><heading level='2'>Dynamic zone updates</heading><paragraph><link><target>Dynamic DNS</target><part>Dynamic DNS updates</part></link><space/>use the UPDATE DNS opcode to add or remove resource records dynamically from a zone database maintained on an authoritative DNS server. The feature is described in RFC 2136. This facility is useful to register network clients into the DNS when they boot or become otherwise available on the network. Since a booting client may be assigned a different IP address each time from a<space/><link><target>DHCP</target></link><space/>server, it is not possible to provide static DNS assignments for such clients.</paragraph><heading level='2'>Security issues</heading><paragraph>Originally, security concerns were not major design considerations for DNS software or any software for deployment on the early Internet, as the network was not open for participation by the general public. However, the expansion of the Internet into the commercial sector in the 1990s changed the requirements for security measures to protect data integrity and user authentication.</paragraph><paragraph>Several vulnerability issues were discovered and exploited by malicious users. One such issue is<space/><link><target>DNS cache poisoning</target></link>, in which data is distributed to caching resolvers under the pretense of being an authoritative origin server, thereby polluting the data store with potentially false information and long expiration times (time-to-live). Subsequently, legitimate application requests may be redirected to network hosts operated with malicious intent.</paragraph><paragraph>DNS responses are traditionally not cryptographically signed, leading to many attack possibilities; the<space/><link><target>Domain Name System Security Extensions</target></link><space/>(DNSSEC) modify DNS to add support for cryptographically signed responses.<space/><link><target>DNSCurve</target></link><space/>has been proposed as an alternative to DNSSEC. Other extensions, such as<space/><link><target>TSIG</target></link>, add support for cryptographic authentication between trusted peers and are commonly used to authorize zone transfer or dynamic update operations.</paragraph><paragraph>Some domain names may be used to achieve spoofing effects. For example,<space/><template><target>not a typo</target><arg>paypal.com</arg></template><space/>and paypa1.com are different names, yet users may be unable to distinguish them in a graphical user interface depending on the user's chosen<space/><link><target>typeface</target></link>. In many fonts the letter<space/><italics>l</italics><space/>and the numeral<space/><italics>1</italics><space/>look very similar or even identical. This problem is acute in systems that support<space/><link><target>internationalized domain name</target><trail>s</trail></link>, since many character codes in<space/><link><target>ISO 10646</target></link>, may appear identical on typical computer screens. This vulnerability is occasionally exploited in<space/><link><target>phishing</target></link>.<extension extension_name='ref'>APWG. &quot;Global Phishing Survey: Domain Name Use and Trends in 1H2010.&quot;<space/><link type='external' href='http://www.apwg.org/reports/APWG_GlobalPhishingSurvey_1H2010.pdf'>10/15/2010 apwg.org</link></extension></paragraph><paragraph>Techniques such as<space/><link><target>forward-confirmed reverse DNS</target></link><space/>can also be used to help validate DNS results.</paragraph><heading level='2'>Domain name registration</heading><paragraph>The right to use a domain name is delegated by domain name registrars which are accredited by the<space/><link><target>Internet Corporation for Assigned Names and Numbers</target></link><space/>(ICANN) or other organizations such as<space/><link><target>OpenNIC</target></link>, that are charged with overseeing the name and number systems of the Internet. In addition to ICANN, each top-level domain (TLD) is maintained and serviced technically by an administrative organization, operating a registry. A registry is responsible for maintaining the database of names registered within the TLD it administers. The registry receives registration information from each domain name registrar authorized to assign names in the corresponding TLD and publishes the information using a special service, the<space/><link><target>WHOIS</target></link><space/>protocol.</paragraph><paragraph>ICANN publishes the complete list of TLD registries and domain name registrars. Registrant information associated with domain names is maintained in an online database accessible with the WHOIS service. For most of the more than 290<space/><link><target>country code top-level domain</target><trail>s</trail></link><space/>(ccTLDs), the domain registries maintain the WHOIS (Registrant, name servers, expiration dates, etc.) information. For instance,<space/><link><target>DENIC</target></link>, Germany NIC, holds the DE domain data. Since about 2001, most<space/><link><target>gTLD</target></link><space/>(Generic top-level domain) registries have adopted this so-called<space/><italics>thick</italics><space/>registry approach, i.e. keeping the WHOIS data in central registries instead of registrar databases.</paragraph><paragraph>For COM and NET domain names, a<space/><italics>thin</italics><space/>registry model is used. The domain registry (e.g.,<space/><link><target>VeriSign</target></link>) holds basic WHOIS data (i.e., registrar and name servers, etc.) One can find the detailed WHOIS (registrant, name servers, expiry dates, etc.) at the registrars.</paragraph><paragraph>Some domain name registries, often called<space/><italics>network information centers</italics><space/>(NIC), also function as registrars to end-users. The major generic top-level domain registries, such as for the domains COM, NET, ORG, INFO, use a registry-registrar model consisting of many domain name registrars.<extension extension_name='ref'><link type='external' href='http://www.icann.org/registrars/accredited-list.html'>ICANN accredited registrars</link><space/><template><target>wayback</target><arg name="url">http://www.icann.org/registrars/accredited-list.html<space/></arg><arg name="date">20150816161754<space/></arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.verisign.com/information-services/naming-services/com-net-registry/page_002166.html</arg><arg name="title">VeriSign COM and NET registry</arg><arg name="publisher">VeriSign, Inc.</arg><arg name="accessdate">20 October 2014</arg></template></extension><space/>In this method of management, the registry only manages the domain name database and the relationship with the registrars. The<space/><italics>registrants</italics><space/>(users of a domain name) are customers of the registrar, in some cases through additional layers of resellers.</paragraph><heading level='2'>Internet standards</heading><paragraph>The Domain Name System is defined by<space/><link><target>Request for Comments</target></link><space/>(RFC) documents published by the<space/><link><target>Internet Engineering Task Force</target></link><space/>(<link><target>Internet standard</target><trail>s</trail></link>). The following is a list of RFCs that define the DNS protocol.</paragraph><preblock><preline>* RFC 920,<space/><italics>Domain Requirements</italics><space/>Specified original top-level domains</preline></preblock><list type='bullet'><listitem>RFC 1032,<space/><italics>Domain Administrators Guide</italics></listitem><listitem>RFC 1033,<space/><italics>Domain Administrators Operations Guide</italics></listitem><listitem>RFC 1034,<space/><italics>Domain Names - Concepts and Facilities</italics></listitem><listitem>RFC 1035,<space/><italics>Domain Names - Implementation and Specification</italics></listitem><listitem>RFC 1101,<space/><italics>DNS Encodings of Network Names and Other Types</italics></listitem><listitem>RFC 1123,<space/><italics>Requirements for Internet HostsApplication and Support</italics></listitem><listitem>RFC 1178,<space/><italics>Choosing a Name for Your Computer</italics><space/>(FYI 5)''</listitem><listitem>RFC 1183,<space/><italics>New DNS RR Definitions</italics></listitem><listitem>RFC 1591,<space/><italics>Domain Name System Structure and Delegation</italics><space/>(Informational)</listitem><listitem>RFC 1912,<space/><italics>Common DNS Operational and Configuration Errors</italics></listitem><listitem>RFC 1995,<space/><italics>Incremental Zone Transfer in DNS</italics></listitem><listitem>RFC 1996,<space/><italics>A Mechanism for Prompt Notification of Zone Changes (DNS NOTIFY)</italics></listitem><listitem>RFC 2100,<space/><italics>The Naming of Hosts</italics><space/>(Informational)</listitem><listitem>RFC 2136,<space/><italics>Dynamic Updates in the domain name system (DNS UPDATE)</italics></listitem><listitem>RFC 2181,<space/><italics>Clarifications to the DNS Specification</italics></listitem><listitem>RFC 2182,<space/><italics>Selection and Operation of Secondary DNS Servers</italics></listitem><listitem>RFC 2308,<space/><italics>Negative Caching of DNS Queries (DNS NCACHE)</italics></listitem><listitem>RFC 2317,<space/><italics>Classless IN-ADDR.ARPA delegation</italics><space/>(BCP 20)</listitem><listitem>RFC 2671,<space/><italics>Extension Mechanisms for DNS (EDNS0)</italics></listitem><listitem>RFC 2672,<space/><italics>Non-Terminal DNS Name Redirection</italics></listitem><listitem>RFC 2845,<space/><italics>Secret Key Transaction Authentication for DNS (TSIG)</italics></listitem><listitem>RFC 3225,<space/><italics>Indicating Resolver Support of DNSSEC</italics></listitem><listitem>RFC 3226,<space/><italics>DNSSEC and IPv6 A6 aware server/resolver message size requirements</italics></listitem><listitem>RFC 3597,<space/><italics>Handling of Unknown DNS Resource Record (RR) Types</italics></listitem><listitem>RFC 3696,<space/><italics>Application Techniques for Checking and Transformation of Names</italics><space/>(Informational)</listitem><listitem>RFC 4343,<space/><italics>Domain Name System (DNS) Case Insensitivity Clarification</italics></listitem><listitem>RFC 4592,<space/><italics>The Role of Wildcards in the Domain Name System</italics></listitem><listitem>RFC 4635,<space/><italics>HMAC SHA TSIG Algorithm Identifiers</italics></listitem><listitem>RFC 4892,<space/><italics>Requirements for a Mechanism Identifying a Name Server Instance</italics><space/>(Informational)</listitem><listitem>RFC 5001,<space/><italics>DNS Name Server Identifier (NSID) Option</italics></listitem><listitem>RFC 5452,<space/><italics>Measures for Making DNS More Resilient against Forged Answers</italics></listitem><listitem>RFC 5625,<space/><italics>DNS Proxy Implementation Guidelines</italics><space/>(BCP 152)</listitem><listitem>RFC 5890,<space/><italics>Internationalized Domain Names for Applications (IDNA):Definitions and Document Framework</italics></listitem><listitem>RFC 5891,<space/><italics>Internationalized Domain Names in Applications (IDNA): Protocol</italics></listitem><listitem>RFC 5892,<space/><italics>The Unicode Code Points and Internationalized Domain Names for Applications (IDNA)</italics></listitem><listitem>RFC 5893,<space/><italics>Right-to-Left Scripts for Internationalized Domain Names for Applications (IDNA)</italics></listitem><listitem>RFC 5894,<space/><italics>Internationalized Domain Names for Applications (IDNA):Background, Explanation, and Rationale</italics><space/>(Informational)</listitem><listitem>RFC 5895,<space/><italics>Mapping Characters for Internationalized Domain Names in Applications (IDNA) 2008</italics><space/>(Informational)</listitem><listitem>RFC 5966,<space/><italics>DNS Transport over TCP - Implementation Requirements</italics></listitem><listitem>RFC 6895,<space/><italics>Domain Name System (DNS) IANA Considerations</italics><space/>(BCP 42)</listitem></list><heading level='3'>Security</heading><list type='bullet'><listitem>RFC 4033,<space/><italics>DNS Security Introduction and Requirements</italics></listitem><listitem>RFC 4034,<space/><italics>Resource Records for the DNS Security Extensions</italics></listitem><listitem>RFC 4035,<space/><italics>Protocol Modifications for the DNS Security Extensions</italics></listitem><listitem>RFC 4509,<space/><italics>Use of SHA-256 in DNSSEC Delegation Signer (DS) Resource Records</italics></listitem><listitem>RFC 4470,<space/><italics>Minimally Covering NSEC Records and DNSSEC On-line Signing</italics></listitem><listitem>RFC 5011,<space/><italics>Automated Updates of DNS Security (DNSSEC) Trust Anchors</italics></listitem><listitem>RFC 5155,<space/><italics>DNS Security (DNSSEC) Hashed Authenticated Denial of Existence</italics></listitem><listitem>RFC 5702,<space/><italics>Use of SHA-2 Algorithms with RSA in DNSKEY and RRSIG Resource Records for DNSSEC</italics></listitem><listitem>RFC 5910,<space/><italics>Domain Name System (DNS) Security Extensions Mapping for the Extensible Provisioning Protocol (EPP)</italics></listitem><listitem>RFC 5933,<space/><italics>Use of GOST Signature Algorithms in DNSKEY and RRSIG Resource Records for DNSSEC</italics></listitem></list><heading level='2'>See also</heading><paragraph><template><target>Portal</target><arg>Computer Science</arg></template><template><target>colbegin</target></template></paragraph><list type='bullet'><listitem><link><target>Alternative DNS root</target></link></listitem><listitem><link><target>Comparison of DNS server software</target></link></listitem><listitem><link><target>DNS hijacking</target></link></listitem><listitem><link><target>DNS management software</target></link></listitem><listitem><link><target>List of DNS record types</target></link></listitem><listitem><link><target>List of managed DNS providers</target></link></listitem><listitem><link><target>IPv6 brokenness and DNS whitelisting</target></link></listitem><listitem><link><target>Multicast DNS</target></link></listitem><listitem><link><target>Split-horizon DNS</target></link></listitem><listitem><link><target>resolv.conf</target></link></listitem></list><paragraph><template><target>colend</target></template></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>Wikiversity</target><arg><space/>Domain Name System</arg></template></paragraph><list type='bullet'><listitem><template><target>cite web</target><arg name="url"><space/>http://www.acmqueue.com/modules.php?name</arg><arg name="title"><space/>DNS Complexity</arg><arg name="first"><space/>Paul</arg><arg name="last"><space/>Vixie</arg><arg name="date"><space/>2007-04-01</arg><arg name="publisher"><space/>[[ACM Queue]]</arg></template></listitem><listitem><link type='external' href='http://www.zytrax.com/books/dns/'>Zytrax.com</link>, Open Source Guide DNS for Rocket Scientists.</listitem><listitem><link type='external' href='http://www.microsoft.com/dns'>Domain Name System</link><space/>on Microsoft TechNet</listitem><listitem><link type='external' href='http://www.fas.org/sgp/crs/misc/R42351.pdf'>Internet Governance and the Domain Name System: Issues for Congress</link><space/><link><target>Congressional Research Service</target></link></listitem><listitem><template><target>cite news</target><arg name="url">http://www.theguardian.com/technology/2014/feb/28/seven-people-keys-worldwide-internet-security-web</arg><arg name="title">Meet the seven people who hold the keys to worldwide internet security</arg><arg name="last">Ball</arg><arg name="first">James</arg><arg name="newspaper">[[The Guardian]]</arg><arg name="publisher">Guardian News & Media Limited</arg><arg name="date">28 February 2014</arg><arg name="accessdate">28 February 2014</arg></template></listitem></list><paragraph><template><target>URI scheme</target></template></paragraph><paragraph><template><target>Authority control</target></template><link><target>Category:1983 introductions</target></link><link><target>Category:Domain name system</target><part></part></link><link><target>Category:Application layer protocols</target></link><link><target>Category:Internet protocols</target></link><link><target>Category:Internet Standards</target></link></paragraph></article>