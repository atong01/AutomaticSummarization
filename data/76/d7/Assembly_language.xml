<article title='Assembly_language'><paragraph><template><target>Infobox programming language</target><arg name="name"><space/>
</arg><arg name="logo"><space/>
</arg><arg name="logo caption"><space/>
</arg><arg name="screenshot"><space/>File:Motorola 6800 Assembly Language.png
</arg><arg name="screenshot caption"><space/>Motorola MC6800 Assembly listing, showing original assembly language and the assembled form
</arg><arg name="paradigm"><space/>[[Imperative programming|Imperative]]
</arg><arg name="family"><space/>
</arg><arg name="designer"><space/>
</arg><arg name="developer"><space/>
</arg><arg name="released"><space/>{{start date and age|1949}}
</arg><arg name="latest release version"><space/>
</arg><arg name="latest release date"><space/>
</arg><arg name="latest preview version"><space/>
</arg><arg name="latest preview date"><space/>
</arg><arg name="typing"><space/>
</arg><arg name="scope"><space/>
</arg><arg name="programming language"><space/>
</arg><arg name="discontinued"><space/>
</arg><arg name="platform"><space/>
</arg><arg name="operating system"><space/>
</arg><arg name="license"><space/>
</arg><arg name="file ext"><space/>
</arg><arg name="file format"><space/>
</arg><arg name="website"><space/>
</arg><arg name="implementations"><space/>
</arg><arg name="dialects"><space/>
</arg><arg name="influenced by"><space/>
</arg><arg name="influenced"><space/>
</arg></template></paragraph><paragraph>An<space/><bold>assembly language</bold><space/>(or<space/><bold>assembler language</bold><extension extension_name='ref'><link type='external' href='http://www-01.ibm.com/support/knowledgecenter/SSLTBW_2.1.0/com.ibm.zos.v2r1.asma400/asmr102112.htm'>Assembler language</link>, IBM Knowledge center</extension>) is a<space/><link><target>low-level programming language</target></link><space/>for a<space/><link><target>computer</target></link>, or other programmable device, in which there is a very strong (generally<space/><link><target>one-to-one correspondence</target><part>one-to-one</part></link>) correspondence between the language and the<space/><link><target>computer architecture</target><part>architecture's</part></link><space/><link><target>machine code</target></link><space/><link><target>instruction (computer science)</target><part>instructions</part></link>. Each assembly language is specific to a particular computer architecture, in contrast to most<space/><link><target>high-level programming language</target><trail>s</trail></link>, which are generally<space/><link><target>porting</target><part>portable</part></link><space/>across multiple architectures, but require<space/><link><target>Interpreter (computing)</target><part>interpreting</part></link><space/>or<space/><link><target>Compiler</target><part>compiling</part></link>.</paragraph><paragraph>Assembly language is converted into executable machine code by a<space/><link><target>utility program</target></link><space/>referred to as an<space/><italics><link><target>#Assembler</target><part>assembler</part></link></italics>; the conversion process is referred to as<space/><italics>assembly</italics>, or<space/><italics>assembling</italics><space/>the code.</paragraph><paragraph>Assembly language uses a<space/><link><target>mnemonic</target></link><space/>to represent each low-level machine instruction or<space/><link><target>opcode</target><part>operation</part></link>. Typical operations require one or more<space/><link><target>operand#Computer science</target><part>operands</part></link><space/>in order to form a complete instruction, and most assemblers can therefore take labels, symbols and expressions as operands to represent addresses and other constants, freeing the programmer from tedious manual calculations.<space/><bold>Macro assemblers</bold><space/>include a<space/><link><target>macro (computer science)</target><part>macroinstruction</part></link><space/>facility so that (parameterized) assembly language text can be represented by a name, and that name can be used to insert the expanded text into other code. Many assemblers offer additional mechanisms to facilitate program development, to control the assembly process, and to aid<space/><link><target>debugging</target></link>.</paragraph><list type='ident'><listitem><italics>See the<space/><link><target>#Related terminology</target><part>terminology</part></link><space/>section below for information regarding inconsistent use of the terms assembly and assembler.</italics></listitem></list><heading level='2'>Key concepts</heading><heading level='3'>Assembler</heading><paragraph>An<space/><bold>assembler</bold><space/>is a program that creates<space/><link><target>object code</target></link><space/>by translating combinations of mnemonics and<space/><link><target>syntax</target></link><space/>for operations and addressing modes into their numerical equivalents. This representation typically includes an<space/><italics>operation code</italics><space/>(&quot;<link><target>opcode</target></link>&quot;) as well as other control<space/><link><target>bit</target><trail>s</trail></link>.<extension extension_name='ref'>Whether these bitgroups are<space/><link><target>orthogonal</target></link>, or to what extent they are, depends on the CPU and instruction set design at hand.</extension><space/>The assembler also calculates constant expressions and resolves<space/><link><target>identifier</target><part>symbolic names</part></link><space/>for memory locations and other entities.<extension extension_name='ref' name="Salomon">David Salomon (1993).<space/><italics><link type='external' href='http://www.davidsalomon.name/assem.advertis/asl.pdf'>Assemblers and Loaders</link></italics></extension><space/>The use of symbolic references is a key feature of assemblers, saving tedious calculations and manual address updates after program modifications. Most assemblers also include<space/><link><target>Macro (computer science)</target><part>macro</part></link><space/>facilities for performing textual substitution e.g., to generate common short sequences of instructions as<space/><link><target>inline expansion</target><part>inline</part></link>, instead of<space/><italics>called</italics><space/><link><target>subroutine</target><trail>s</trail></link>.</paragraph><paragraph>Some assemblers may also be able to perform some simple types of<space/><link><target>instruction set</target></link>-specific<space/><link><target>Compiler optimization</target><part>optimizations</part></link>. One concrete example of this may be the ubiquitous<space/><link><target>x86</target></link><space/>assemblers from various vendors. Most of them are able to perform jump-instruction replacements (long jumps replaced by short or relative jumps) in any number of passes, on request. Others may even do simple rearrangement or insertion of instructions, such as some assemblers for<space/><link><target>RISC</target></link><space/><link><target>Instruction set architecture</target><part>architectures</part></link><space/>that can help optimize a sensible<space/><link><target>instruction scheduling</target></link><space/>to exploit the<space/><link><target>CPU pipeline</target></link><space/>as efficiently as possible.<template><target>citation needed</target><arg name="date">November 2011</arg></template></paragraph><paragraph>Like early programming languages such as<space/><link><target>Fortran</target></link>,<space/><link><target>ALGOL</target><part>Algol</part></link>,<space/><link><target>Cobol</target></link><space/>and<space/><link><target>Lisp (programming language)</target><part>Lisp</part></link>, assemblers have been available since the 1950s and the first generations of text based<space/><link><target>computer interface</target><trail>s</trail></link>. However, assemblers came first as they are far simpler to write than<space/><link><target>compiler</target><trail>s</trail></link><space/>for<space/><link><target>high-level language</target><trail>s</trail></link>. This is because each mnemonic along with the addressing modes and operands of an instruction translates rather directly into the numeric representations of that particular instruction, without much context or analysis. There have also been several classes of translators and semi automatic code generators with properties similar to both assembly and high level languages, with<space/><link><target>speedcode</target></link><space/>as perhaps one of the better known examples.</paragraph><paragraph>There may be several assemblers with different<space/><link><target>Syntax (programming languages)</target><part>syntax</part></link><space/>for a particular<space/><link><target>Central processing unit</target><part>CPU</part></link><space/>or<space/><link><target>instruction set architecture</target></link>. For instance, an instruction to add memory data to a register in a<space/><link><target>x86</target></link>-family processor might be<space/><xhtml:code>add eax,[ebx]</xhtml:code>, in original<space/><italics><link><target>Intel syntax</target></link></italics>, whereas this would be written<space/><xhtml:code>addl (%ebx),%eax</xhtml:code><space/>in the<space/><italics><link><target>AT&amp;T syntax</target></link></italics><space/>used by the<space/><link><target>GNU Assembler</target></link>. Despite different appearances, different syntactic forms generally generate the same numeric<space/><link><target>machine code</target></link>, see further below. A single assembler may also have different modes in order to support variations in syntactic forms as well as their exact semantic interpretations (such as<space/><link><target>FASM</target></link>-syntax,<space/><link><target>TASM</target></link>-syntax, ideal mode etc., in the special case of x86 assembly programming).</paragraph><heading level='4'>Number of passes</heading><paragraph>There are two types of assemblers based on how many passes through the source are needed to produce the executable program.</paragraph><list type='bullet'><listitem>One-pass assemblers go through the source code once. Any symbol used before it is defined will require<space/><link><target>Erratum</target><part>&quot;errata&quot;</part></link><space/>at the end of the object code (or, at least, no earlier than the point where the symbol is defined) telling the<space/><link><target>linker (computing)</target><part>linker</part></link><space/>or the loader to &quot;go back&quot; and overwrite a placeholder which had been left where the as yet undefined symbol was used.</listitem><listitem>Multi-pass assemblers create a table with all symbols and their values in the first passes, then use the table in later passes to generate code.</listitem></list><paragraph>In both cases, the assembler must be able to determine the size of each instruction on the initial passes in order to calculate the addresses of subsequent symbols. This means that if the size of an operation referring to an operand defined later depends on the type or distance of the operand, the assembler will make a pessimistic estimate when first encountering the operation, and if necessary pad it with one or more &quot;<link><target>NOP</target><part>no-operation</part></link>&quot; instructions in a later pass or the errata. In an assembler with<space/><link><target>peephole optimization</target></link>, addresses may be recalculated between passes to allow replacing pessimistic code with code tailored to the exact distance from the target.</paragraph><paragraph>The original reason for the use of one-pass assemblers was speed of assembly often a second pass would require rewinding and rereading a<space/><link><target>Magnetic tape data storage</target><part>tape</part></link><space/>or rereading a deck of<space/><link><target>Punch cards</target><part>cards</part></link>. With modern computers this has ceased to be an issue. The advantage of the multi-pass assembler is that the absence of errata makes the<space/><link><target>Linker (computing)</target><part>linking process</part></link><space/>(or the<space/><link><target>Loader (computing)</target><part>program load</part></link><space/>if the assembler directly produces executable code) faster.<extension extension_name='ref'><template><target>Cite book</target><arg name="last">Beck</arg><arg name="first">Leland L.</arg><arg name="title">System Software: An Introduction to Systems Programming</arg><arg name="publisher">Addison Wesley</arg><arg name="year">1996</arg><arg name="chapter">2</arg></template></extension></paragraph><heading level='4'>High-level assemblers</heading><paragraph>More sophisticated<space/><link><target>high-level assembler</target><trail>s</trail></link><space/>provide language abstractions such as:</paragraph><list type='bullet'><listitem>High-level procedure/function declarations and invocations</listitem><listitem>Advanced control structures</listitem><listitem>High-level abstract data types, including structures/records, unions, classes, and sets</listitem><listitem>Sophisticated macro processing (although available on ordinary assemblers since the late 1950s for<space/><link><target>IBM 700/7000 series</target><part>IBM 700 series</part></link><space/>and since the 1960s for<space/><link><target>IBM/360</target></link>, amongst other machines)</listitem><listitem><link><target>Object-oriented programming</target></link><space/>features such as<space/><link><target>class (computer programming)</target><part>classes</part></link>,<space/><link><target>Object (computer science)</target><part>objects</part></link>,<space/><link><target>Abstraction (computer science)</target><part>abstraction</part></link>,<space/><link><target>type polymorphism</target><part>polymorphism</part></link>, and<space/><link><target>inheritance (object-oriented programming)</target><part>inheritance</part></link><extension extension_name='ref'>Hyde, Randall. &quot;Chapter 12 Classes and Objects&quot;. The Art of Assembly Language, 2nd Edition. No Starch Press. 2010.</extension></listitem></list><paragraph>See<space/><link><target>#Language design</target><part>Language design</part></link><space/>below for more details.</paragraph><heading level='3'>Assembly language</heading><paragraph>A program written in assembly language consists of a series of (mnemonic) processor instructions and meta-statements (known variously as directives, pseudo-instructions and pseudo-ops), comments and data. Assembly language instructions usually consist of an<space/><link><target>opcode</target></link><space/>mnemonic followed by a list of data, arguments or parameters.<extension extension_name='ref' name="intel-1999"><template><target>cite book</target><arg name="title">Intel Architecture Software Developer's Manual, Volume 2: Instruction Set Reference<space/></arg><arg name="year">1999<space/></arg><arg name="publisher">Intel Corporation<space/></arg><arg name="url">http://download.intel.com/design/PentiumII/manuals/24319102.PDF<space/></arg><arg name="accessdate">18 November 2010</arg></template></extension><space/>These are translated by an<space/><link><target>Assembly language assembler</target><part>assembler</part></link><space/>into<space/><link><target>machine language</target></link><space/>instructions that can be loaded into memory and executed.</paragraph><paragraph>For example, the instruction below tells an<space/><link><target>x86</target></link>/<link><target>IA-32</target></link><space/>processor to move an<space/><link><target>Constant (programming)</target><part>immediate 8-bit value</part></link><space/>into a<space/><link><target>processor register</target><part>register</part></link>. The binary code for this instruction is 10110 followed by a 3-bit identifier for which register to use. The identifier for the<space/><italics>AL</italics><space/>register is 000, so the following<space/><link><target>machine code</target></link><space/>loads the<space/><italics>AL</italics><space/>register with the data 01100001.<extension extension_name='ref' name="intel-1999-MOV"><template><target>cite book</target><arg name="title">Intel Architecture Software Developer's Manual, Volume 2: Instruction Set Reference<space/></arg><arg name="year">1999<space/></arg><arg name="publisher">Intel Corporation<space/></arg><arg name="pages">442 and 35</arg><arg name="url">http://download.intel.com/design/PentiumII/manuals/24319102.PDF</arg><arg name="accessdate">18 November 2010</arg></template></extension></paragraph><preblock><preline>10110000 01100001</preline></preblock><paragraph>This binary computer code can be made more human-readable by expressing it in<space/><link><target>hexadecimal</target></link><space/>as follows.</paragraph><preblock><preline>B0 61</preline></preblock><paragraph>Here,<space/><xhtml:code>B0</xhtml:code><space/>means 'Move a copy of the following value into<space/><italics>AL</italics>', and<space/><xhtml:code>61</xhtml:code><space/>is a hexadecimal representation of the value 01100001, which is 97 in<space/><link><target>decimal</target></link>. Assembly language for the 8086 family provides the<space/><link><target>mnemonic</target></link><space/><link><target>MOV (x86 instruction)</target><part>MOV</part></link><space/>(an abbreviation of<space/><italics>move</italics>) for instructions such as this, so the machine code above can be written as follows in assembly language, complete with an explanatory comment if required, after the semicolon. This is much easier to read and to remember.<extension extension_name='source' lang="nasm">MOV AL, 61h ; Load AL with 97 decimal (61 hex)</extension></paragraph><paragraph>In some assembly languages the same mnemonic such as MOV may be used for a family of related instructions for loading, copying and moving data, whether these are immediate values, values in registers, or memory locations pointed to by values in registers. Other assemblers may use separate opcode mnemonics such as L for &quot;move memory to register&quot;, ST for &quot;move register to memory&quot;, LR for &quot;move register to register&quot;, MVI for &quot;move immediate operand to memory&quot;, etc.</paragraph><paragraph>The x86 opcode 10110000 (<xhtml:code>B0</xhtml:code>) copies an 8-bit value into the<space/><italics>AL</italics><space/>register, while 10110001 (<xhtml:code>B1</xhtml:code>) moves it into<space/><italics>CL</italics><space/>and 10110010 (<xhtml:code>B2</xhtml:code>) does so into<space/><italics>DL</italics>. Assembly language examples for these follow.<extension extension_name='ref' name="intel-1999-MOV"></extension><extension extension_name='source' lang="nasm">MOV AL, 1h ; Load AL with immediate value 1MOV CL, 2h ; Load CL with immediate value 2MOV DL, 3h ; Load DL with immediate value 3</extension>The syntax of MOV can also be more complex as the following examples show.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Evans</arg><arg name="first">David</arg><arg name="title">x86 Assembly Guide</arg><arg name="url">http://www.cs.virginia.edu/~evans/cs216/guides/x86.html</arg><arg name="publisher">University of Virginia</arg><arg name="accessdate">18 November 2010</arg><arg name="year">2006</arg></template></extension><extension extension_name='source' lang="nasm">MOV EAX, [EBX]	 ; Move the 4 bytes in memory at the address contained in EBX into EAXMOV [ESI+EAX], CL ; Move the contents of CL into the byte at address ESI+EAX</extension>In each case, the MOV mnemonic is translated directly into an opcode in the ranges 88-8E, A0-A3, B0-B8, C6 or C7 by an assembler, and the programmer does not have to know or remember which.<extension extension_name='ref' name="intel-1999-MOV"></extension></paragraph><paragraph>Transforming assembly language into machine code is the job of an assembler, and the reverse can at least partially be achieved by a<space/><link><target>disassembler</target></link>. Unlike<space/><link><target>high-level language</target><trail>s</trail></link>, there is usually a<space/><link><target>one-to-one correspondence</target></link><space/>between simple assembly statements and machine language instructions. However, in some cases, an assembler may provide<space/><italics>pseudoinstructions</italics><space/>(essentially macros) which expand into several machine language instructions to provide commonly needed functionality. For example, for a machine that lacks a &quot;branch if greater or equal&quot; instruction, an assembler may provide a pseudoinstruction that expands to the machine's &quot;set if less than&quot; and &quot;branch if zero (on the result of the set instruction)&quot;. Most full-featured assemblers also provide a rich<space/><link><target>macro (computer science)</target><part>macro</part></link><space/>language (discussed below) which is used by vendors and programmers to generate more complex code and data sequences.</paragraph><paragraph>Each<space/><link><target>computer architecture</target></link><space/>has its own machine language. Computers differ in the number and type of operations they support, in the different sizes and numbers of registers, and in the representations of data in storage. While most general-purpose computers are able to carry out essentially the same functionality, the ways they do so differ; the corresponding assembly languages reflect these differences.</paragraph><paragraph>Multiple sets of<space/><link><target>mnemonic</target><trail>s</trail></link><space/>or assembly-language syntax may exist for a single instruction set, typically instantiated in different assembler programs. In these cases, the most popular one is usually that supplied by the manufacturer and used in its documentation.</paragraph><heading level='2'>Language design</heading><heading level='3'>Basic elements</heading><paragraph>There is a large degree of diversity in the way the authors of assemblers categorize statements and in the nomenclature that they use. In particular, some describe anything other than a machine mnemonic or extended mnemonic as a pseudo-operation (pseudo-op). A typical assembly language consists of 3 types of instruction statements that are used to define program operations:</paragraph><list type='bullet'><listitem><link><target>Opcode</target></link><space/>mnemonics</listitem><listitem>Data definitions</listitem><listitem>Assembly directives</listitem></list><heading level='4'>Opcode mnemonics and extended mnemonics</heading><paragraph>Instructions (statements) in assembly language are generally very simple, unlike those in<space/><link><target>high-level programming language</target><part>high-level languages</part></link>. Generally, a mnemonic is a symbolic name for a single executable machine language instruction (an<space/><link><target>opcode</target></link>), and there is at least one opcode mnemonic defined for each machine language instruction. Each instruction typically consists of an<space/><italics>operation</italics><space/>or<space/><italics>opcode</italics><space/>plus zero or more<space/><italics><link><target>operand</target><trail>s</trail></link></italics>. Most instructions refer to a single value, or a pair of values. Operands can be immediate (value coded in the instruction itself), registers specified in the instruction or implied, or the addresses of data located elsewhere in storage. This is determined by the underlying processor architecture: the assembler merely reflects how this architecture works.<space/><italics>Extended mnemonics</italics><space/>are often used to specify a combination of an opcode with a specific operand, e.g., the System/360 assemblers use<space/><template><target>code</target><arg>B</arg></template><space/>as an extended mnemonic for<space/><template><target>code</target><arg>BC</arg></template><space/>with a mask of 15 and<space/><template><target>code</target><arg>NOP</arg></template><space/>(&quot;NO OPeration&quot; do nothing for one step) for<space/><template><target>code</target><arg>BC</arg></template><space/>with a mask of 0.</paragraph><paragraph><italics>Extended mnemonics</italics><space/>are often used to support specialized uses of instructions, often for purposes not obvious from the instruction name. For example, many CPU's do not have an explicit NOP instruction, but do have instructions that can be used for the purpose. In 8086 CPUs the instruction<space/><template><target>code</target><arg name="2">asm</arg><arg>xchg ax,ax</arg></template><space/>is used for<space/><template><target>code</target><arg>nop</arg></template>, with<space/><template><target>code</target><arg>nop</arg></template><space/>being a pseudo-opcode to encode the instruction<space/><template><target>code</target><arg name="2">asm</arg><arg>xchg ax,ax</arg></template>. Some disassemblers recognize this and will decode the<space/><template><target>code</target><arg name="2">asm</arg><arg>xchg ax,ax</arg></template><space/>instruction as<space/><template><target>code</target><arg>nop</arg></template>. Similarly, IBM assemblers for<space/><link><target>IBM System/360</target><part>System/360</part></link><space/>and<space/><link><target>IBM System/370</target><part>System/370</part></link><space/>use the extended mnemonics<space/><template><target>code</target><arg>NOP</arg></template><space/>and<space/><template><target>code</target><arg>NOPR</arg></template><space/>for<space/><template><target>code</target><arg>BC</arg></template><space/>and<space/><template><target>code</target><arg>BCR</arg></template><space/>with zero masks. For the SPARC architecture, these are known as<space/><italics>synthetic instructions</italics>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.sparc.com/standards/V8.pdf<space/></arg><arg name="publisher">SPARC, International<space/></arg><arg name="title">The SPARC Architecture Manual, Version 8<space/></arg><arg name="year">1992</arg></template></extension></paragraph><paragraph>Some assemblers also support simple built-in macro-instructions that generate two or more machine instructions. For instance, with some Z80 assemblers the instruction<space/><template><target>code</target><arg>ld hl,bc</arg></template><space/>is recognized to generate<space/><template><target>code</target><arg>ld l,c</arg></template><space/>followed by<space/><template><target>code</target><arg>ld h,b</arg></template>.<extension extension_name='ref'><link type='external' href='http://www.z80.de/z80/z80code.htm'>Z80 Op Codes for ZINT</link>. Z80.de. Retrieved on 2013-07-21.</extension><space/>These are sometimes known as<space/><italics>pseudo-opcodes</italics>.</paragraph><paragraph>Mnemonics are arbitrary symbols; in 1985 the<space/><link><target>IEEE</target></link><space/>published Standard 694 for a uniform set of mnemonics to be used by all assemblers. The standard has since been withdrawn.</paragraph><heading level='4'>Data directives</heading><paragraph>There are instructions used to define data elements to hold data and variables. They define the type of data, the length and the<space/><link><target>data structure alignment</target><part>alignment</part></link><space/>of data. These instructions can also define whether the data is available to outside programs (programs assembled separately) or only to the program in which the data section is defined. Some assemblers classify these as pseudo-ops.</paragraph><heading level='4'>Assembly directives</heading><paragraph>Assembly directives, also called pseudo-opcodes, pseudo-operations or pseudo-ops, are instructions that are executed by an assembler at assembly time, not by a CPU at run time. The names of pseudo-ops often start with a dot to distinguish them from machine instructions. Pseudo-ops can make the assembly of the program dependent on parameters input by a programmer, so that one program can be assembled different ways, perhaps for different applications. Or, a pseudo-op can be used to manipulate presentation of a program to make it easier to read and maintain. Another common use of pseudo-ops is to reserve storage areas for run-time data and optionally initialize their contents to known values.</paragraph><paragraph>Symbolic assemblers let programmers associate arbitrary names (<italics><link><target>label (programming language)</target><part>label</part><trail>s</trail></link></italics><space/>or<space/><italics>symbols</italics>) with memory locations and various constants. Usually, every constant and variable is given a name so instructions can reference those locations by name, thus promoting<space/><link><target>self-documenting code</target></link>. In executable code, the name of each subroutine is associated with its entry point, so any calls to a subroutine can use its name. Inside subroutines,<space/><link><target>GOTO</target></link><space/>destinations are given labels. Some assemblers support<space/><italics>local symbols</italics><space/>which are lexically distinct from normal symbols (e.g., the use of &quot;10$&quot; as a GOTO destination).</paragraph><paragraph>Some assemblers, such as NASM provide flexible symbol management, letting programmers manage different<space/><link><target>namespaces</target></link>, automatically calculate offsets within<space/><link><target>data structure</target><trail>s</trail></link>, and assign labels that refer to literal values or the result of simple computations performed by the assembler. Labels can also be used to initialize constants and variables with relocatable addresses.</paragraph><paragraph>Assembly languages, like most other computer languages, allow comments to be added to program<space/><link><target>source code</target></link><space/>that will be ignored during assembly. Judicious commenting is essential in assembly language programs, as the meaning and purpose of a sequence of binary machine instructions can be difficult to determine. The &quot;raw&quot; (uncommented) assembly language generated by compilers or disassemblers is quite difficult to read when changes must be made.</paragraph><heading level='3'>Macros</heading><paragraph>Many assemblers support<space/><italics>predefined macros</italics>, and others support<space/><italics>programmer-defined</italics><space/>(and repeatedly re-definable) macros involving sequences of text lines in which variables and constants are embedded. This sequence of text lines may include opcodes or directives. Once a macro has been defined its name may be used in place of a mnemonic. When the assembler processes such a statement, it replaces the statement with the text lines associated with that macro, then processes them as if they existed in the source code file (including, in some assemblers, expansion of any macros existing in the replacement text). Macros in this sense date to IBM<space/><link><target>autocoder</target><trail>s</trail></link><space/>of the 1950s.<template><target>citation needed</target><arg name="date">December 2014</arg></template></paragraph><paragraph>This definition of &quot;macro&quot; is slightly different from the use of the term in other contexts, like the<space/><link><target>C programming language</target></link>. C macros created through the #define directive are typically just one line, or a few lines at most. Assembler macro instructions can be lengthy &quot;programs&quot; by themselves, executed by interpretation by the assembler during assembly.</paragraph><paragraph>Since macros can have 'short' names but expand to several or indeed many lines of code, they can be used to make assembly language programs appear to be far shorter, requiring fewer lines of source code, as with higher level languages. They can also be used to add higher levels of structure to assembly programs, optionally introduce embedded debugging code via parameters and other similar features.</paragraph><paragraph>Macro assemblers often allow macros to take<space/><link><target>parameter (computer science)</target><part>parameter</part><trail>s</trail></link>. Some assemblers include quite sophisticated macro languages, incorporating such high-level language elements as optional parameters, symbolic variables, conditionals, string manipulation, and arithmetic operations, all usable during the execution of a given macro, and allowing macros to save context or exchange information. Thus a macro might generate numerous assembly language instructions or data definitions, based on the macro arguments. This could be used to generate record-style data structures or &quot;unrolled&quot; loops, for example, or could generate entire algorithms based on complex parameters. An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher-level language, since such programmers are not working with a computer's lowest-level conceptual elements.</paragraph><paragraph>Macros were used to customize large scale software systems for specific customers in the mainframe era and were also used by customer personnel to satisfy their employers' needs by making specific versions of manufacturer operating systems. This was done, for example, by systems programmers working with<space/><link><target>IBM</target></link>'s Conversational Monitor System / Virtual Machine (<link><target>VM/CMS</target></link>) and with IBM's &quot;real time transaction processing&quot; add-ons, Customer Information Control System<space/><link><target>CICS</target></link>, and<space/><link><target>Airline Control Program</target><part>ACP</part></link>/<link><target>Transaction Processing Facility</target><part>TPF</part></link>, the airline/financial system that began in the 1970s and still runs many large<space/><link><target>computer reservations system</target><trail>s</trail></link><space/>(CRS) and credit card systems today.</paragraph><paragraph>It was also possible to use solely the macro processing abilities of an assembler to generate code written in completely different languages, for example, to generate a version of a program in<space/><link><target>COBOL</target></link><space/>using a pure macro assembler program containing lines of COBOL code inside assembly time operators instructing the assembler to generate arbitrary code.</paragraph><paragraph>This was because, as was realized in the 1960s, the concept of &quot;macro processing&quot; is independent of the concept of &quot;assembly&quot;, the former being in modern terms more word processing, text processing, than generating object code. The concept of macro processing appeared, and appears, in the C programming language, which supports &quot;preprocessor instructions&quot; to set variables, and make conditional tests on their values. Note that unlike certain previous macro processors inside assemblers, the C preprocessor was not<space/><link><target>Turing completeness</target><part>Turing-complete</part></link><space/>because it lacked the ability to either loop or &quot;go to&quot;, the latter allowing programs to loop.</paragraph><paragraph>Despite the power of macro processing, it fell into disuse in many high level languages (major exceptions being C/C++ and<space/><link><target>PL/I</target></link>) while remaining a perennial for assemblers.</paragraph><paragraph>Macro parameter substitution is strictly by name: at macro processing time, the value of a parameter is textually substituted for its name. The most famous class of bugs resulting was the use of a parameter that itself was an expression and not a simple name when the macro writer expected a name. In the macro:</paragraph><preblock><preline>foo: macro a</preline><preline>load a*b</preline></preblock><paragraph>the intention was that the caller would provide the name of a variable, and the &quot;global&quot; variable or constant b would be used to multiply &quot;a&quot;. If foo is called with the parameter<space/><xhtml:code>a-c</xhtml:code>, the macro expansion of<space/><xhtml:code>load a-c*b</xhtml:code><space/>occurs. To avoid any possible ambiguity, users of macro processors can parenthesize formal parameters inside macro definitions, or callers can parenthesize the input parameters.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://msdn.microsoft.com/en-us/library/503x3e3s%28v</arg><arg name="title">Macros (C/C++), MSDN Library for Visual Studio 2008
<space/></arg><arg name="publisher">Microsoft Corp.
<space/></arg><arg name="accessdate">2010-06-22
</arg></template></extension></paragraph><heading level='3'>Support for structured programming</heading><paragraph>Some assemblers have incorporated<space/><link><target>structured programming</target></link><space/>elements to encode execution flow. The earliest example of this approach was in the<space/><link><target>Concept-14 macro set</target></link>, originally proposed by Dr. H.D. Mills (March 1970), and implemented by Marvin Kessler at IBM's Federal Systems Division, which extended the S/360 macro assembler with IF/ELSE/ENDIF and similar control flow blocks.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://skycoast.us/pscott/software/mvs/concept14.html
<space/></arg><arg name="title">Concept 14 Macros
<space/></arg><arg name="publisher">MVS Software
<space/></arg><arg name="accessdate">May 25, 2009
</arg></template></extension><space/>This was a way to reduce or eliminate the use of<space/><link><target>GOTO</target></link><space/>operations in assembly code, one of the main factors causing<space/><link><target>spaghetti code</target></link><space/>in assembly language. This approach was widely accepted in the early '80s (the latter days of large-scale assembly language use).</paragraph><paragraph>A curious design was<space/><link><target>A-natural</target></link>, a &quot;stream-oriented&quot; assembler for 8080/<link><target>Z80</target></link><space/>processors<template><target>Citation needed</target><arg name="date">January 2009</arg></template><space/>from<space/><link><target>Whitesmiths</target><part>Whitesmiths Ltd.</part></link><space/>(developers of the<space/><link><target>Unix</target></link>-like<space/><link><target>Idris (operating system)</target><part>Idris</part></link><space/>operating system, and what was reported to be the first commercial<space/><link><target>C (programming language)</target><part>C</part></link><space/><link><target>compiler</target></link>). The language was classified as an assembler, because it worked with raw machine elements such as<space/><link><target>opcodes</target></link>,<space/><link><target>processor register</target><part>registers</part></link>, and memory references; but it incorporated an expression syntax to indicate execution order. Parentheses and other special symbols, along with block-oriented structured programming constructs, controlled the sequence of the generated instructions. A-natural was built as the object language of a C compiler, rather than for hand-coding, but its logical syntax won some fans.</paragraph><paragraph>There has been little apparent demand for more sophisticated assemblers since the decline of large-scale assembly language development.<extension extension_name='ref' name="assembly-language?cat=technology"><template><target>cite web</target><arg name="url">http://www.answers.com/topic/assembly-language?cat</arg><arg name="title">assembly language: Definition and Much More from Answers.com</arg><arg name="accessdate">2008-06-19</arg><arg name="author">Answers.com</arg></template></extension><space/>In spite of that, they are still being developed and applied in cases where resource constraints or peculiarities in the target system's architecture prevent the effective use of higher-level languages.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Provinciano<space/></arg><arg name="first">Brian<space/></arg><arg name="url">http://neshla.sourceforge.net/<space/></arg><arg name="title">NESHLA: The High Level, Open Source, 6502 Assembler for the Nintendo Entertainment System</arg></template></extension></paragraph><heading level='2'>Use of assembly language</heading><heading level='3'>Historical perspective</heading><paragraph>Assembly languages date to the introduction of the<space/><link><target>stored-program computer</target></link>. The<space/><link><target>Electronic Delay Storage Automatic Calculator</target></link><space/>(EDSAC) (1949) had an assembler called<space/><italics>initial orders</italics><space/>featuring one-letter mnemonics.<extension extension_name='ref'><template><target>cite book</target><arg name="last1"><space/>Salomon<space/></arg><arg name="title"><space/>Assemblers and Loaders<space/></arg><arg name="url"><space/>http://www.davidsalomon.name/assem.advertis/asl.pdf<space/></arg><arg name="accessdate"><space/>2012-01-17<space/></arg><arg name="page"><space/>7<space/></arg></template></extension><space/><link><target>Nathaniel Rochester (computer scientist)</target><part>Nathaniel Rochester</part></link><space/>wrote an assembler for an<space/><link><target>IBM 701</target></link><space/>(1954). SOAP (Symbolic Optimal Assembly Program) (1955) was an assembly language for the<space/><link><target>IBM 650</target></link><space/>computer written by Stan Poley.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.columbia.edu/cu/computinghistory/650.html<space/></arg><arg name="title">The IBM 650 Magnetic Drum Calculator<space/></arg><arg name="accessdate">2012-01-17</arg></template></extension></paragraph><paragraph>Assembly languages eliminated much of the error-prone and time-consuming<space/><link><target>first-generation language</target><part>first-generation</part></link><space/>programming needed with the earliest computers, freeing programmers from tedium such as remembering numeric codes and calculating addresses. They were once widely used for all sorts of programming. However, by the 1980s (1990s on<space/><link><target>microcomputer</target><trail>s</trail></link>), their use had largely been supplanted by higher-level languages, in the search for improved<space/><link><target>programming productivity</target></link>. Today assembly language is still used for direct hardware manipulation, access to specialized processor instructions, or to address critical performance issues. Typical uses are<space/><link><target>device driver</target><trail>s</trail></link>, low-level<space/><link><target>embedded system</target><trail>s</trail></link>, and<space/><link><target>real-time computing</target><part>real-time</part></link><space/>systems.</paragraph><paragraph>Historically, numerous programs have been written entirely in assembly language. Operating systems were entirely written in assembly language until the introduction of the<space/><link><target>Burroughs MCP</target></link><space/>(1961), which was written in<space/><link><target>Executive Systems Problem Oriented Language</target></link><space/>(ESPOL), an Algol dialect. Many commercial applications were written in assembly language as well, including a large amount of the<space/><link><target>IBM mainframe</target></link><space/>software written by large corporations.<space/><link><target>COBOL</target></link>,<space/><link><target>FORTRAN</target></link><space/>and some<space/><link><target>PL/I</target></link><space/>eventually displaced much of this work, although a number of large organizations retained assembly-language application infrastructures well into the 1990s.</paragraph><paragraph>Most early microcomputers relied on hand-coded assembly language, including most operating systems and large applications. This was because these systems had severe resource constraints, imposed idiosyncratic memory and display architectures, and provided limited, buggy system services. Perhaps more important was the lack of first-class high-level language compilers suitable for microcomputer use. A psychological factor may have also played a role: the first generation of microcomputer programmers retained a hobbyist, &quot;wires and pliers&quot; attitude.</paragraph><paragraph>In a more commercial context, the biggest reasons for using assembly language were minimal bloat (size), minimal overhead, greater speed, and reliability.</paragraph><paragraph>Typical examples of large assembly language programs from this time are IBM PC<space/><link><target>DOS</target></link><space/>operating systems and early applications such as the<space/><link><target>spreadsheet</target></link><space/>program<space/><link><target>Lotus 1-2-3</target></link>. Even into the 1990s, most console video games were written in assembly, including most games for the<space/><link><target>Sega Mega Drive</target><part>Mega Drive/Genesis</part></link><space/>and the<space/><link><target>Super Nintendo Entertainment System</target></link>.<template><target>Citation needed</target><arg name="date">February 2007</arg></template><space/>According to some<template><target>Who</target><arg name="date">November 2014</arg></template><space/>industry insiders, the assembly language was the best computer language to use to get the best performance out of the<space/><link><target>Sega Saturn</target></link>, a console that was notoriously challenging to develop and program games for.<extension extension_name='ref'><link type='external' href='http://www.eidolons-inn.net/tiki-index.php?page=SegaBase+Saturn'>Eidolon's Inn: SegaBase Saturn</link></extension><space/>The arcade game<space/><link><target>NBA Jam</target></link><space/>(1993) is another example.</paragraph><paragraph>Assembly language has long been the primary development language for many popular home computers of the 1980s and 1990s (such as the<space/><link><target>Sinclair Research</target><part>Sinclair</part></link><space/><link><target>ZX Spectrum</target></link>,<space/><link><target>Commodore 64</target></link>,<space/><link><target>Commodore Amiga</target></link>, and<space/><link><target>Atari ST</target></link>). This was in large part because<space/><link><target>Interpreted language</target><part>interpreted</part></link><space/>BASIC dialects on these systems offered insufficient execution speed, as well as insufficient facilities to take full advantage of the available hardware on these systems. Some systems even have an<space/><link><target>integrated development environment</target></link><space/>(IDE) with highly advanced debugging and macro facilities.</paragraph><paragraph><italics>The Assembler for the<space/><link><target>VIC-20</target></link></italics><space/>was written by Don French and published by<space/><italics>French Silk</italics>. At 1,639 bytes in length, its author believes it is the smallest symbolic assembler ever written. The assembler supported the usual symbolic addressing and the definition of<space/><link><target>character string</target><trail>s</trail></link><space/>or hex strings. It also allowed address expressions which could be combined with<space/><link><target>addition</target></link>,<space/><link><target>subtraction</target></link>,<space/><link><target>multiplication</target></link>,<space/><link><target>division (mathematics)</target><part>division</part></link>,<space/><link><target>logical AND</target></link>,<space/><link><target>logical OR</target></link>, and<space/><link><target>exponentiation</target></link><space/>operators.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.radiks.net/~jimbo/art/int7.htm</arg><arg name="title">Speaking with Don French : The Man Behind the French Silk Assembler Tools</arg><arg name="date">2004-05-21</arg><arg name="accessdate">2008-07-25</arg><arg name="author">Jim Lawless</arg><arg name="publisher"></arg><arg name="archiveurl"><space/>http://web.archive.org/web/20080821105848/http://www.radiks.net/~jimbo/art/int7.htm</arg><arg name="archivedate"><space/>21 August 2008<space/></arg><arg name="deadurl"><space/>no</arg></template></extension></paragraph><heading level='3'>Current usage</heading><paragraph>There have always been debates over the usefulness and performance of assembly language relative to high-level languages. Assembly language has specific niche uses where it is important; see below. Assembler can be used to optimize for speed or optimize for size. In the case of speed optimization, modern<space/><link><target>optimizing compiler</target><trail>s</trail></link><space/>are claimed<extension extension_name='ref'><template><target>cite web</target><arg name="last">Rusling</arg><arg name="first">David A.</arg><arg name="title">The Linux Kernel</arg><arg name="url">http://tldp.org/LDP/tlk/basics/sw.html</arg><arg name="accessdate">Mar 11, 2012</arg></template></extension><space/>to render high-level languages into code that can run as fast as hand-written assembly, despite the counter-examples that can be found.<extension extension_name='ref' name="goto"><template><target>cite news</target><arg name="url">http://www.nytimes.com/2005/11/28/technology/28super.html?_r</arg><arg name="title">Writing the Fastest Code, by Hand, for Fun: A Human Computer Keeps Speeding Up Chips<space/></arg><arg name="publisher">New York Times, John Markoff<space/></arg><arg name="date">2005-11-28<space/></arg><arg name="accessdate">2010-03-04</arg></template></extension><extension extension_name='ref' name="bit-fild"><template><target>cite web</target><arg name="url">http://hardwarebug.org/2010/01/30/bit-field-badness/<space/></arg><arg name="title">Bit-field-badness<space/></arg><arg name="publisher">hardwarebug.org<space/></arg><arg name="date">2010-01-30<space/></arg><arg name="accessdate">2010-03-04</arg><arg name="archiveurl"><space/>http://web.archive.org/web/20100205120952/http://hardwarebug.org/2010/01/30/bit-field-badness/</arg><arg name="archivedate"><space/>5 February 2010<space/></arg><arg name="deadurl"><space/>no</arg></template></extension><extension extension_name='ref' name="gcc-mess"><template><target>cite web</target><arg name="url">http://hardwarebug.org/2009/05/13/gcc-makes-a-mess/<space/></arg><arg name="title">GCC makes a mess<space/></arg><arg name="publisher">HardwareBug.org<space/></arg><arg name="date">2009-05-13<space/></arg><arg name="accessdate">2010-03-04</arg><arg name="archiveurl">http://web.archive.org/web/20100316212040/http://hardwarebug.org/2009/05/13/gcc-makes-a-mess/</arg><arg name="archivedate">16 March 2010<space/></arg><arg name="deadurl"><space/>no</arg></template></extension><space/>The complexity of modern processors and memory sub-systems makes effective optimization increasingly difficult for compilers, as well as assembly programmers.<extension extension_name='ref' name="GreatDebate1"><template><target>cite web</target><arg name="url">http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html</arg><arg name="title">The Great Debate</arg><arg name="date"></arg><arg name="accessdate">2008-07-03</arg><arg name="author">Randall Hyde</arg><arg name="archiveurl"><space/>http://web.archive.org/web/20080616110102/http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html</arg><arg name="archivedate"><space/>16 June 2008<space/></arg><arg name="deadurl"><space/>no</arg></template></extension><extension extension_name='ref' name="compiler-fails1"><template><target>cite web</target><arg name="url">http://hardwarebug.org/2008/11/28/codesourcery-fails-again/<space/></arg><arg name="title">Code sourcery fails again</arg><arg name="publisher">hardwarebug.org<space/></arg><arg name="date">2010-01-30<space/></arg><arg name="accessdate">2010-03-04</arg><arg name="archiveurl"><space/>http://web.archive.org/web/20100402221204/http://hardwarebug.org/2008/11/28/codesourcery-fails-again/</arg><arg name="archivedate"><space/>2 April 2010<space/></arg><arg name="deadurl"><space/>no</arg></template></extension><space/>Moreover, increasing processor performance has meant that most CPUs sit idle most of the time,<extension extension_name='ref'><template><target>cite web</target><arg name="last">Click</arg><arg name="first">Cliff</arg><arg name="title">A Crash Course in Modern Hardware</arg><arg name="url">http://www.infoq.com/presentations/click-crash-course-modern-hardware</arg><arg name="accessdate">May 1, 2014</arg></template></extension><space/>with delays caused by predictable bottlenecks such as cache misses,<space/><link><target>I/O</target></link><space/>operations and<space/><link><target>paging</target></link>. This has made raw code execution speed a non-issue for many programmers.</paragraph><paragraph>There are some situations in which developers might choose to use assembly language:</paragraph><list type='bullet'><listitem>A stand-alone executable of compact size is required that must execute without recourse to the<space/><link><target>Run-time system</target><part>run-time</part></link><space/>components or<space/><link><target>library (computing)</target><part>libraries</part></link><space/>associated with a high-level language; this is perhaps the most common situation. For example, firmware for telephones, automobile fuel and ignition systems, air-conditioning control systems, security systems, and sensors.</listitem><listitem>Code that must interact directly with the hardware, for example in<space/><link><target>device driver</target><trail>s</trail></link><space/>and<space/><link><target>interrupt handler</target><trail>s</trail></link>.</listitem><listitem>Programs that need to use processor-specific instructions not implemented in a compiler. A common example is the<space/><link><target>circular shift</target><part>bitwise rotation</part></link><space/>instruction at the core of many encryption algorithms, as well as querying the parity of a byte or the 4-bit carry of a addition.</listitem><listitem>Programs that create vectorized functions for programs in higher-level languages such as C. In the higher-level language this is sometimes aided by compiler<space/><link><target>intrinsic function</target><trail>s</trail></link><space/>which map directly to SIMD mnemonics, but nevertheless result in a one-to-one assembly conversion specific for the given vector processor.</listitem><listitem>Programs requiring extreme optimization, for example an inner<space/><link><target>Program loop</target><part>loop</part></link><space/>in a processor-intensive algorithm.<space/><link><target>Game programmer</target><trail>s</trail></link><space/>take advantage of the abilities of hardware features in systems, enabling games to run faster. Also large scientific simulations require highly optimized algorithms, e.g.<space/><link><target>linear algebra</target></link><space/>with<space/><link><target>Basic Linear Algebra Subprograms</target><part>BLAS</part></link><extension extension_name='ref' name="goto"></extension><extension extension_name='ref' name="bench"><template><target>cite web</target><arg name="url">http://eigen.tuxfamily.org/index.php?title</arg><arg name="title">BLAS Benchmark-August2008<space/></arg><arg name="publisher">eigen.tuxfamily.org<space/></arg><arg name="date">2008-08-01<space/></arg><arg name="accessdate">2010-03-04</arg></template></extension><space/>or<space/><link><target>DCT (math)</target><part>discrete cosine transformation</part></link><space/>(e.g.<space/><link><target>SIMD</target></link><space/>assembly version from<space/><link><target>x264</target></link><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://git.videolan.org/?p</arg><arg name="title">x264.git/common/x86/dct-32.asm<space/></arg><arg name="publisher">git.videolan.org<space/></arg><arg name="date">2010-09-29<space/></arg><arg name="accessdate">2010-09-29</arg></template></extension>)</listitem><listitem>Situations where no high-level language exists, on a new or specialized processor, for example.</listitem><listitem>Programs that need precise timing such as<list type='bullet'><listitem><link><target>real-time computing</target><part>real-time</part></link><space/>programs such as simulations, flight navigation systems, and medical equipment. For example, in a<space/><link><target>fly-by-wire</target></link><space/>system, telemetry must be interpreted and acted upon within strict time constraints. Such systems must eliminate sources of unpredictable delays, which may be created by (some) interpreted languages, automatic<space/><link><target>garbage collection (computer science)</target><part>garbage collection</part></link>, paging operations, or<space/><link><target>preemptive multitasking</target></link>. However, some higher-level languages incorporate run-time components and operating system interfaces that can introduce such delays. Choosing assembly or lower-level languages for such systems gives programmers greater visibility and control over processing details.</listitem><listitem>cryptographic algorithms that must always take strictly the same time to execute, preventing<space/><link><target>timing attack</target><trail>s</trail></link>.</listitem></list></listitem><listitem>Situations where complete control over the environment is required, in extremely high security situations where<space/><link><target>Trusting trust#Reflections on Trusting Trust</target><part>nothing can be taken for granted</part></link>.</listitem><listitem><link><target>Computer virus</target><trail>es</trail></link>,<space/><link><target>bootloader</target><trail>s</trail></link>, certain<space/><link><target>device driver</target><trail>s</trail></link>, or other items very close to the hardware or low-level operating system.</listitem><listitem><link><target>Instruction set simulator</target><trail>s</trail></link><space/>for monitoring, tracing and<space/><link><target>debugging</target></link><space/>where additional overhead is kept to a minimum</listitem><listitem><link><target>Reverse-engineering</target></link><space/>and modifying program files such as<list type='bullet'><listitem>existing<space/><link><target>binary file</target><part>binaries</part></link><space/>that may or may not have originally been written in a high-level language, for example when trying to recreate programs for which source code is not available or has been lost, or cracking copy protection of proprietary software.</listitem><listitem><link><target>Video game</target><trail>s</trail></link><space/>(also termed<space/><link><target>ROM hacking</target></link>), which is possible via several methods. The most widely employed is altering program code at the assembly language level.</listitem></list></listitem><listitem><link><target>Self-modifying code</target></link>, to which assembly language lends itself well.</listitem><listitem><link><target>calculator gaming</target><part>Games</part></link><space/>and other software for<space/><link><target>graphing calculator</target><trail>s</trail></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://tifreakware.net/tutorials/89/a/calc/fargoii.htm</arg><arg name="title">68K Programming in Fargo II</arg><arg name="date"></arg><arg name="accessdate">2008-07-03</arg><arg name="author"></arg><arg name="archiveurl"><space/>http://web.archive.org/web/20080702181616/http://tifreakware.net/tutorials/89/a/calc/fargoii.htm</arg><arg name="archivedate"><space/>2 July 2008<space/></arg><arg name="deadurl"><space/>no</arg></template></extension></listitem></list><paragraph>Assembly language is still taught in most<space/><link><target>computer science</target></link><space/>and<space/><link><target>electronic engineering</target></link><space/>programs. Although few programmers today regularly work with assembly language as a tool, the underlying concepts remain very important. Such fundamental topics as<space/><link><target>binary arithmetic</target></link>,<space/><link><target>memory allocation</target></link>,<space/><link><target>stack (data structure)</target><part>stack processing</part></link>,<space/><link><target>character set</target></link><space/>encoding,<space/><link><target>interrupt</target></link><space/>processing, and<space/><link><target>compiler</target></link><space/>design would be hard to study in detail without a grasp of how a computer operates at the hardware level. Since a computer's behavior is fundamentally defined by its instruction set, the logical way to learn such concepts is to study an assembly language. Most modern computers have similar instruction sets. Therefore, studying a single assembly language is sufficient to learn: I) the basic concepts; II) to recognize situations where the use of assembly language might be appropriate; and III) to see how efficient executable code can be created from high-level languages.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/fwd.html</arg><arg name="title">Foreword ("Why would anyone learn this stuff?"), ''op. cit.''</arg><arg name="date">1996-09-30</arg><arg name="accessdate">2010-03-05</arg><arg name="author">Hyde, Randall</arg><arg name="archiveurl"><space/>http://web.archive.org/web/20100325155048/http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/fwd.html</arg><arg name="archivedate"><space/>25 March 2010<space/></arg><arg name="deadurl"><space/>no</arg></template></extension><space/>This is analogous to children needing to learn the basic arithmetic operations (e.g., long division), although<space/><link><target>calculator</target><trail>s</trail></link><space/>are widely used for all except the most trivial calculations.</paragraph><heading level='3'>Typical applications</heading><list type='bullet'><listitem>Assembly language is typically used in a system's<space/><link><target>Booting</target><part>boot</part></link><space/>code, the low-level code that initializes and tests the system hardware prior to booting the operating system and is often stored in<space/><link><target>Read-only memory</target><part>ROM</part></link>. (<link><target>BIOS</target></link><space/>on IBM-compatible<space/><link><target>Personal Computer</target><part>PC</part></link><space/>systems and<space/><link><target>CP/M</target></link><space/>is an example.)</listitem><listitem>Some compilers translate high-level languages into assembly first before fully compiling, allowing the assembly code to be viewed for<space/><link><target>debug</target><trail>ging</trail></link><space/>and optimization purposes.</listitem><listitem>Relatively low-level languages, such as<space/><link><target>C (programming language)</target><part>C</part></link>, allow the programmer to embed assembly language directly in the source code. Programs using such facilities, such as the<space/><link><target>Linux kernel</target></link>, can then construct abstractions using different assembly language on each hardware platform. The system's<space/><link><target>software portability</target><part>portable</part></link><space/>code can then use these processor-specific components through a uniform interface.</listitem><listitem>Assembly language is useful in<space/><link><target>reverse engineering</target></link>. Many programs are distributed only in machine code form which is straightforward to translate into assembly language, but more difficult to translate into a higher-level language. Tools such as the<space/><link><target>Interactive Disassembler</target></link><space/>make extensive use of disassembly for such a purpose.</listitem><listitem>Assemblers can be used to generate blocks of data, with no high-level language overhead, from formatted and commented source code, to be used by other code.</listitem></list><heading level='2'>Related terminology</heading><list type='bullet'><listitem><bold>Assembly language</bold><space/>is commonly called<space/><bold>assembly</bold>,<space/><bold>assembler</bold>,<space/><bold>ASM</bold>, or<space/><bold>symbolic machine code</bold>. A generation of IBM mainframe programmers called it<space/><bold>ALC</bold><space/>for<space/><italics>Assembly Language Code</italics><space/>or<space/><bold>BAL</bold><extension extension_name='ref'>Technically BAL was only the assembler for<space/><link><target>IBM Basic Programming Support</target><part>'''BPS'''</part></link>; the others were macro assemblers.</extension><space/>for<space/><link><target>IBM Basic assembly language and successors</target><part>'''Basic Assembly Language'''</part></link>. Calling the language<space/><bold>assembler</bold><space/>might be considered potentially confusing and ambiguous, since this is also the name of the utility program that translates assembly language statements into machine code. However, this usage has been common among professionals and in the literature for decades.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Stroustrup<space/></arg><arg name="first">Bjarne<space/></arg><arg name="title">The C++ Programming Language<space/></arg><arg name="publisher">Addison-Wesley<space/></arg><arg name="year">1986<space/></arg><arg name="isbn">0-201-12078-X<space/></arg><arg name="quote">C++ was primarily designed so that the author and his friends would not have to program in assembler, C, or various modern high-level languages. [use of the term ''assembler'' to mean ''assembly language'']</arg></template></extension><space/>Similarly, some early computers called their<space/><italics>assembler</italics><space/>their<space/><bold>assembly program</bold>.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Saxon<space/></arg><arg name="first1">James<space/></arg><arg name="last2">Plette<space/></arg><arg name="first2">William<space/></arg><arg name="title">Programming the IBM 1401<space/></arg><arg name="publisher">Prentice-Hall<space/></arg><arg name="year">1962<space/></arg><arg name="id">LoC 62-20615<space/></arg><arg name="postscript">. [use of the term ''assembly program'']</arg></template></extension></listitem><listitem>The computational step where an assembler is run, including all macro processing, is termed<space/><bold>assembly time</bold>. The assembler is said to be &quot;assembling&quot; the<space/><link><target>source code</target></link>.</listitem><listitem>The use of the word<space/><bold>assembly</bold><space/>dates from the early years of computers (<italics>cf.</italics><space/><link><target>Short Code (Computer language)</target><part>short code</part></link>,<space/><link><target>speedcoding</target><part>speedcode</part></link>).</listitem><listitem><template><target>anchor</target><arg>Cross assembler</arg></template>A<space/><bold>cross assembler</bold><space/>(see also<space/><link><target>cross compiler</target></link>) is an assembler that is run on a computer or<space/><link><target>operating system</target></link><space/>of a different type from the system on which the resulting code is to run (the<space/><italics>target system</italics>). Cross-assembling may be necessary if the target system cannot run an assembler itself, as is typically the case for small embedded systems. The computer on which the cross assembler is run must have some means of transporting the resulting<space/><link><target>machine code</target></link><space/>to the target system. Common methods involve transmitting an exact byte-by-byte copy of the machine code or an<space/><link><target>ASCII</target></link><space/>representation of the machine code in a portable format (such as<space/><link><target>SREC (file format)</target><part>Motorola</part></link><space/>or<space/><link><target>Intel HEX</target><part>Intel</part></link><space/><link><target>hexadecimal</target></link>) through a compatible<space/><link><target>Interface (computing)</target><part>interface</part></link><space/>to the target system for execution.</listitem><listitem>An<space/><bold>assembler directive</bold><space/>or<space/><italics>pseudo-opcode</italics><space/>is a command given to an assembler &quot;directing it to perform operations other than assembling instructions.&quot;<extension extension_name='ref' name="Salomon"></extension><space/>Directives affect how the assembler operates and &quot;may affect the object code, the symbol table, the listing file, and the values of internal assembler parameters.&quot; Sometimes the term<space/><italics>pseudo-opcode</italics><space/>is reserved for directives that generate object code, such as those that generate data.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Microsoft Corporation</arg><arg name="title">MASM: Directives & Pseudo-Opcodes</arg><arg name="url">http://flint.cs.yale.edu/cs422/doc/art-of-asm/pdf/CH08.PDF</arg><arg name="accessdate">March 19, 2011</arg></template></extension></listitem><listitem>A<space/><bold>meta-assembler</bold><space/>is &quot;a program that accepts the syntactic and semantic description of an assembly language, and generates an assembler for that language.&quot;<space/><extension extension_name='ref'><link type='external' href='http://www.encyclopedia.com/doc/1O11-metaassembler.html'>(John Daintith, ed.) A Dictionary of Computing: &quot;meta-assembler&quot;</link></extension></listitem></list><heading level='2'>List of assemblers for different computer architectures</heading><paragraph><template><target>Main</target><arg>List of assemblers</arg></template></paragraph><heading level='2'>Further details</heading><paragraph>For any given personal computer, mainframe, embedded system, and game console, both past and present, at least one possibly dozens of assemblers have been written. For some examples, see the<space/><link><target>list of assemblers</target></link>.</paragraph><paragraph>On<space/><link><target>Unix</target></link><space/>systems, the assembler is traditionally called<space/><link><target>as (Unix)</target><part>as</part></link>, although it is not a single body of code, being typically written anew for each port. A number of Unix variants use<space/><link><target>GNU Assembler</target><part>GAS</part></link>.</paragraph><paragraph>Within processor groups, each assembler has its own dialect. Sometimes, some assemblers can read another assembler's dialect, for example,<space/><link><target>TASM</target></link><space/>can read old<space/><link><target>MASM</target></link><space/>code, but not the reverse.<space/><link><target>FASM</target></link><space/>and<space/><link><target>Netwide Assembler</target><part>NASM</part></link><space/>have similar syntax, but each support different macros that could make them difficult to translate to each other. The basics are all the same, but the advanced features will differ.<extension extension_name='ref' name="Hyde"><template><target>cite web</target><arg name="url"><space/>http://webster.cs.ucr.edu/AsmTools/WhichAsm.html</arg><arg name="title"><space/>Which Assembler is the Best?<space/></arg><arg name="accessdate"><space/>2007-10-19</arg><arg name="author"><space/>Randall Hyde</arg><arg name="archiveurl"><space/>http://web.archive.org/web/20071018014019/http://webster.cs.ucr.edu/AsmTools/WhichAsm.html</arg><arg name="archivedate"><space/>18 October 2007<space/></arg><arg name="deadurl"><space/>no</arg></template></extension></paragraph><paragraph>Also, assembly can sometimes be portable across different operating systems on the same type of<space/><link><target>CPU</target></link>.<space/><link><target>Calling convention</target><trail>s</trail></link><space/>between operating systems often differ slightly or not at all, and with care it is possible to gain some portability in assembly language, usually by linking with a<space/><link><target>C (programming language)</target><part>C</part></link><space/>library that does not change between operating systems.<template><target>Citation needed</target><arg name="date">March 2011</arg></template><space/>An<space/><link><target>instruction set simulator</target></link><space/>can process the<space/><link><target>object code</target></link>/<space/><link><target>binary file</target><part>binary</part></link><space/>of<space/><italics>any</italics><space/>assembler to achieve portability even across<space/><link><target>platform (computing)</target><part>platform</part><trail>s</trail></link><space/>with an overhead no greater than a typical bytecode interpreter.<template><target>Citation needed</target><arg name="date">March 2011</arg></template><space/>This is similar to use of microcode to achieve compatibility across a processor family.</paragraph><paragraph>Some higher level computer languages, such as<space/><link><target>C (programming language)</target><part>C</part></link><space/>and<space/><link><target>Borland Pascal</target></link>, support<space/><link><target>inline assembler</target><part>inline assembly</part></link><space/>where sections of assembly code, in practice usually brief, can be embedded into the high level language code. The<space/><link><target>Forth (programming language)</target><part>Forth</part></link><space/>language commonly contains an assembler used in CODE words.</paragraph><paragraph>An<space/><link><target>emulator</target></link><space/>can be used to debug assembly-language programs.</paragraph><heading level='2'>Example listing of assembly language source code</heading><paragraph>The following is a partial listing generated by the<space/><link><target>Netwide Assembler</target><part>NASM</part></link>, an assembler for 32-bit<space/><link><target>Intel 80386</target><part>Intel x86</part></link><space/>CPUs. The code is for a subroutine, not a complete program.</paragraph><preblock><preline><extension extension_name='source' lang="nasm" start="100"><preblock><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>;-----------------------------------------------------------</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; zstr_count:</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; Counts a zero-terminated ASCII string to determine its size</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; in: eax = start address of the zero terminated string</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; out: ecx = count = the length of the string</preline></preblock><preblock><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>zstr_count: ; Entry point</preline></preblock><paragraph>00000030 B9FFFFFFFF mov ecx, -1 ; Init the loop counter, pre-decrement</paragraph><preblock><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; to compensate for the increment</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>.loop:</preline></preblock><paragraph>00000035 41 inc ecx ; Add 1 to the loop counter00000036 803C0800 cmp byte [eax + ecx], 0 ; Compare the value at the string's</paragraph><preblock><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; [starting memory address Plus the</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; loop offset], to zero</preline></preblock><paragraph>0000003A 75F9 jne .loop ; If the memory value is not zero,</paragraph><preblock><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; then jump to the label called '.loop',</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; otherwise continue to the next line</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>.done:</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; We don't do a final increment,</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; because even though the count is base 1,</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; we do not include the zero terminator in the</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; string's length</preline></preblock><paragraph>0000003C C3 ret ; Return to the calling program</paragraph></extension></preline></preblock><paragraph>The first column (from the left) is simply the line number in the listing and is otherwise meaningless. The second column is the relative address, in hex, of where the code will be placed in memory. The third column is the actual compiled code. For instance,<space/><template><target>code</target><arg>B9</arg></template><space/>is the x86 opcode for the<space/><template><target>code</target><arg>MOV</arg></template>&amp;nbsp;<template><target>code</target><arg>ECX</arg></template><space/>instruction;<space/><template><target>code</target><arg>FFFFFFFF</arg></template><space/>is the value 1 in two's-complement binary form.</paragraph><paragraph>Names suffixed with colons (<template><target>code</target><arg>:</arg></template>) are symbolic labels; the labels do not create code, they are simply a way to tell the assembler that those locations have symbolic names. The<space/><template><target>code</target><arg>.done</arg></template><space/>label is only present for clarity of where the program ends, it does not serve any other purpose. Prefixing a period (<template><target>code</target><arg>.</arg></template>) on a label is a feature of the assembler, declaring the label as being local to the subroutine.</paragraph><heading level='2'>See also</heading><paragraph><template><target>Portal</target><arg>Computer programming</arg><arg>Computer science</arg></template></paragraph><list type='bullet'><listitem><link><target>Compiler</target></link></listitem><listitem><link><target>Disassembler</target></link></listitem><listitem><link><target>High Level Assembly</target></link></listitem><listitem><link><target>Instruction set</target></link></listitem><listitem><link><target>Little man computer</target></link><space/>an educational computer model with a base-10 assembly language</listitem><listitem><link><target>Microassembler</target></link></listitem><listitem><link><target>Typed assembly language</target></link></listitem><listitem><link><target>Comparison of assemblers</target></link></listitem></list><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg name="colwidth">30em</arg></template></paragraph><heading level='2'>Further reading</heading><list type='bullet'><listitem>Yurichev, Dennis, &quot;An Introduction To Reverse Engineering for Beginners&quot;. Online book: http://yurichev.com/writings/RE_for_beginners-en.pdf</listitem><listitem><link type='external' href='http://www.asmcommunity.net/book/'>''ASM Community Book''</link><space/>&quot;An online book full of helpful ASM info, tutorials and code examples&quot; by the ASM Community</listitem><listitem>Jonathan Bartlett:<space/><italics><link type='external' href='http://programminggroundup.blogspot.com/'>Programming from the Ground Up</link></italics>. Bartlett Publishing, 2004. ISBN 0-9752838-4-7<xhtml:br></xhtml:br>Also available online<space/><link type='external' href='http://download.savannah.gnu.org/releases-noredirect/pgubook/ProgrammingGroundUp-1-0-booksize.pdf'>as PDF</link></listitem><listitem>Robert Britton:<space/><italics>MIPS Assembly Language Programming</italics>. Prentice Hall, 2003. ISBN 0-13-142044-5</listitem><listitem>Paul Carter:<space/><italics>PC Assembly Language</italics>. Free ebook, 2001.<xhtml:br></xhtml:br><link type='external' href='http://drpaulcarter.com/pcasm/'>Website</link></listitem><listitem>Jeff Duntemann:<space/><italics>Assembly Language Step-by-Step</italics>. Wiley, 2000. ISBN 0-471-37523-3</listitem><listitem>Randall Hyde:<space/><italics>The Art of Assembly Language</italics>. No Starch Press, 2003. ISBN 1-886411-97-2<xhtml:br></xhtml:br>Draft versions<space/><link type='external' href='http://www.plantation-productions.com/Webster/www.artofasm.com/index.html'>available online</link><space/>as PDF and HTML</listitem><listitem>Charles W. Kann:<space/><italics><link type='external' href='http://cupola.gettysburg.edu/oer/2/'>Introduction to MIPS Assembly Language Programming</link></italics>. 2015.</listitem><listitem>Peter Norton, John Socha,<space/><italics>Peter Norton's Assembly Language Book for the IBM PC</italics>, Brady Books, NY: 1986.</listitem><listitem>Michael Singer,<space/><italics>PDP-11. Assembler Language Programming and Machine Organization</italics>, John Wiley &amp; Sons, NY: 1980.</listitem><listitem>Dominic Sweetman:<space/><italics>See MIPS Run</italics>. Morgan Kaufmann Publishers, 1999. ISBN 1-55860-410-3</listitem><listitem>John Waldron:<space/><italics>Introduction to RISC Assembly Language Programming</italics>. Addison Wesley, 1998. ISBN 0-201-39828-1</listitem></list><heading level='2'>External links</heading><paragraph><template><target>Sister project links</target><arg name="commons">Category:Assembly languages
</arg><arg name="wikt">assembly language
</arg><arg name="v">assembly language
</arg><arg name="b">Subject:Assembly languages
</arg><arg name="q">no</arg><arg name="s">no</arg></template></paragraph><list type='bullet'><listitem><link type='external' href='http://www.int80h.org/'>Unix Assembly Language Programming</link></listitem><listitem><link type='external' href='http://asm.sourceforge.net/'>Linux Assembly</link></listitem><listitem><link type='external' href='http://c2.com/cgi/wiki?LearningAssemblyLanguage'>PPR: Learning Assembly Language</link></listitem><listitem><link type='external' href='http://www.nasm.us/'>NASM The Netwide Assembler (a popular assembly language)</link></listitem><listitem><link type='external' href='http://www.azillionmonkeys.com/qed/asmexample.html'>Assembly Language Programming Examples</link></listitem><listitem><link type='external' href='http://www.grc.com/smgassembly.htm'>Authoring Windows Applications In Assembly Language</link></listitem><listitem><template><target>wayback</target><arg name="url">http://win32assembly.online.fr/tutorials.html<space/></arg><arg name="title">Iczelion's Win32 Assembly Tutorial<space/></arg><arg name="archiveurl">http://web.archive.org/web/20120407060410/http://win32assembly.online.fr/tutorials.html<space/></arg><arg name="archivedate">2012-04-07</arg></template></listitem><listitem><link type='external' href='http://mark.masmcode.com/'>Assembly Optimization Tips</link><space/>by Mark Larson</listitem></list><paragraph><template><target>Programming language</target></template></paragraph><paragraph><template><target>Interwiki conflict</target></template></paragraph><paragraph><template><target>Authority control</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Assembly Language</target></template><link><target>Category:Assembly languages</target><part>*Assembly language</part></link><link><target>Category:Programming language implementation</target></link></paragraph><paragraph><link><target>pl:Asembler#Jzyk asemblera</target></link></paragraph></article>