<article title='Distributed_computing'><paragraph><template><target>Redir</target><arg>Distributed Information Processing</arg><arg>the computer company</arg><arg>DIP Research</arg></template></paragraph><paragraph><bold>Distributed computing</bold><space/>is a field of<space/><link><target>computer science</target></link><space/>that studies distributed systems. A<space/><italics>distributed system</italics><space/>is a software system in which components located on<space/><link><target>computer network</target><part>networked computers</part></link><space/>communicate and coordinate their actions by<space/><link><target>message passing</target><part>passing messages</part></link>.<extension extension_name='ref' name="Coulouris"><template><target>cite book</target><arg name="last">Coulouris</arg><arg name="first">George</arg><arg name="author2">Jean Dollimore</arg><arg name="author3">Tim Kindberg</arg><arg name="author4">Gordon Blair</arg><arg name="title">Distributed Systems: Concepts and Design (5th Edition)</arg><arg name="publisher"><space/>Addison-Wesley</arg><arg name="year">2011</arg><arg name="location">Boston</arg><arg name="isbn">0-132-14301-1</arg></template></extension><space/>The components interact with each other in order to achieve a common goal. Three significant characteristics of distributed systems are: concurrency of components,<space/><link><target>Clock_synchronization</target><part>lack of a global clock</part></link>, and independent failure of components.<extension extension_name='ref' name="Coulouris"></extension><space/>Examples of distributed systems vary from<space/><link><target>Service-oriented architecture</target><part>SOA-based systems</part></link><space/>to<space/><link><target>massively multiplayer online game</target><trail>s</trail></link><space/>to<space/><link><target>Peer-to-peer</target><part>peer-to-peer applications</part></link>.</paragraph><paragraph>A<space/><link><target>computer program</target></link><space/>that runs in a distributed system is called a<space/><bold>distributed program</bold>, and distributed programming is the process of writing such programs.<extension extension_name='ref'><template><target>harvtxt</target><arg>Andrews</arg><arg>2000</arg></template>.<space/><template><target>harvtxt</target><arg>Dolev</arg><arg>2000</arg></template>.<space/><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 10.</extension><space/>There are many alternatives for the message passing mechanism, including pure HTTP,<space/><link><target>Remote procedure call</target><part>RPC-like</part></link><space/>connectors and<space/><link><target>Message-oriented middleware</target><part>message queues</part></link>.</paragraph><paragraph>A goal and challenge pursued by some computer scientists and practitioners in distributed systems is<space/><link><target>location transparency</target></link>; however, this goal has fallen out of favour in industry, as distributed systems are different from conventional non-distributed systems, and the differences, such as<space/><link><target>network partition</target><trail>s</trail></link>, partial system failures, and partial upgrades, cannot simply be &quot;papered over&quot; by attempts at &quot;transparency&quot; - see<space/><link><target>CAP theorem</target></link>.</paragraph><paragraph><italics>Distributed computing</italics><space/>also refers to the use of distributed systems to solve computational problems. In<space/><italics>distributed computing</italics>, a problem is divided into many tasks, each of which is solved by one or more computers,<extension extension_name='ref'><template><target>harvtxt</target><arg>Godfrey</arg><arg>2002</arg></template>.</extension><space/>which communicate with each other by message passing.<extension extension_name='ref' name="Andrews 2000"><template><target>harvtxt</target><arg>Andrews</arg><arg>2000</arg></template>, p. 291292.<space/><template><target>harvtxt</target><arg>Dolev</arg><arg>2000</arg></template>, p. 5.</extension></paragraph><heading level='2'>Introduction</heading><paragraph>The word<space/><italics>distributed</italics><space/>in terms such as &quot;distributed system&quot;, &quot;distributed programming&quot;, and &quot;<link><target>distributed algorithm</target></link>&quot; originally referred to computer networks where individual computers were physically distributed within some geographical area.<extension extension_name='ref'><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, p. 1.</extension><space/>The terms are nowadays used in a much wider sense, even referring to autonomous<space/><link><target>Process (computing)</target><part>processes</part></link><space/>that run on the same physical computer and interact with each other by message passing.<extension extension_name='ref' name="Andrews 2000"></extension>While there is no single definition of a distributed system,<extension extension_name='ref' name="harvtxt|Ghosh|2007"><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 10.</extension><space/>the following defining properties are commonly used:</paragraph><list type='bullet'><listitem>There are several autonomous computational entities, each of which has its own local<space/><link><target>Memory (computers)</target><part>memory</part></link>.<extension extension_name='ref'><template><target>harvtxt</target><arg>Andrews</arg><arg>2000</arg></template>, p. 89, 291.<space/><template><target>harvtxt</target><arg>Dolev</arg><arg>2000</arg></template>, p. 5.<space/><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 3.<space/><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, p. xix, 1.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. xv.</extension></listitem></list><list type='bullet'><listitem>The entities communicate with each other by<space/><link><target>message passing</target></link>.<extension extension_name='ref'><template><target>harvtxt</target><arg>Andrews</arg><arg>2000</arg></template>, p. 291.<space/><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 3.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. 4.</extension></listitem></list><paragraph>In this article, the computational entities are called<space/><italics>computers</italics><space/>or<space/><italics><link><target>Node (networking)</target><part>nodes</part></link></italics>.</paragraph><paragraph>A distributed system may have a common goal, such as solving a large computational problem.<extension extension_name='ref'><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 34.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. 1.</extension><space/>Alternatively, each computer may have its own user with individual needs, and the purpose of the distributed system is to coordinate the use of shared resources or provide communication services to the users.<extension extension_name='ref'><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 4.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. 2.</extension></paragraph><paragraph>Other typical properties of distributed systems include the following:</paragraph><list type='bullet'><listitem>The system has to<space/><link><target>Fault-tolerance</target><part>tolerate failures</part></link><space/>in individual computers.<extension extension_name='ref'><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 4, 8.<space/><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, p. 23.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. 4.</extension></listitem><listitem>The structure of the system (network topology, network latency, number of computers) is not known in advance, the system may consist of different kinds of computers and network links, and the system may change during the execution of a distributed program.<extension extension_name='ref'><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, p. 2.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. 1.</extension></listitem><listitem>Each computer has only a limited, incomplete view of the system. Each computer may know only one part of the input.<extension extension_name='ref'><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 7.<space/><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, p. xix, 2.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. 4.</extension></listitem></list><paragraph><link><target>File:Distributed-parallel.svg</target><part>thumb</part><part>right</part><part>260px</part><part>(a)(b)&amp;nbsp;A&amp;nbsp;distributed system.<xhtml:br></xhtml:br><space/>(c)&amp;nbsp;A&amp;nbsp;parallel system.</part></link></paragraph><heading level='3'>Architecture</heading><paragraph>Client/Server System : The Client-server architecture is a way to provide a service from a central source. There is a single server that provides a service, and many clients that communicate with the server to consume its products. In this architecture, clients and servers have different jobs. The server's job is to respond to service requests from clients, while a client's job is to use the data provided in response in order to perform some tasks.</paragraph><paragraph>Peer-to-Peer System :The term peer-to-peer is used to describe distributed systems in which labour is divided among all the components of the system. All the computers send and receive data, and they all contribute some processing power and memory to a distributed computation. As a distributed system increases in size, its capacity of computational resources increases.</paragraph><heading level='2'>Parallel and distributed computing</heading><paragraph>Distributed systems are groups of networked computers, which have the same goal for their work.The terms &quot;<link><target>concurrent computing</target></link>&quot;, &quot;<link><target>parallel computing</target></link>&quot;, and &quot;distributed computing&quot; have a lot of overlap, and no clear distinction exists between them.<extension extension_name='ref'><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 10.<space/><template><target>harvtxt</target><arg>Keidar</arg><arg>2008</arg></template>.</extension><space/>The same system may be characterized both as &quot;parallel&quot; and &quot;distributed&quot;; the processors in a typical distributed system run concurrently in parallel.<extension extension_name='ref'><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, p. xix, 12.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. 1.</extension><space/>Parallel computing may be seen as a particular tightly coupled form of distributed computing,<extension extension_name='ref'><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. 1.</extension><space/>and distributed computing may be seen as a loosely coupled form of parallel computing.<extension extension_name='ref' name="harvtxt|Ghosh|2007"></extension><space/>Nevertheless, it is possible to roughly classify concurrent systems as &quot;parallel&quot; or &quot;distributed&quot; using the following criteria:</paragraph><list type='bullet'><listitem>In parallel computing, all processors may have access to a<space/><link><target>shared memory architecture</target><part>shared memory</part></link><space/>to exchange information between processors.<extension extension_name='ref'><template><target>harvtxt</target><arg>Papadimitriou</arg><arg>1994</arg></template>, Chapter 15.<space/><template><target>harvtxt</target><arg>Keidar</arg><arg>2008</arg></template>.</extension></listitem><listitem>In distributed computing, each processor has its own private memory (<link><target>distributed memory</target></link>). Information is exchanged by passing messages between the processors.<extension extension_name='ref'>See references in<space/><link><target>#Introduction</target><part>Introduction</part></link>.</extension></listitem></list><paragraph>The figure on the right illustrates the difference between distributed and parallel systems. Figure (a) is a schematic view of a typical distributed system; as usual, the system is represented as a network topology in which each node is a computer and each line connecting the nodes is a communication link. Figure (b) shows the same distributed system in more detail: each computer has its own local memory, and information can be exchanged only by passing messages from one node to another by using the available communication links. Figure (c) shows a parallel system in which each processor has a direct access to a shared memory.</paragraph><paragraph>The situation is further complicated by the traditional uses of the terms parallel and distributed<space/><italics>algorithm</italics><space/>that do not quite match the above definitions of parallel and distributed<space/><italics>systems</italics>; see the section<space/><link><target>#Theoretical foundations</target><part>Theoretical foundations</part></link><space/>below for more detailed discussion. Nevertheless, as a rule of thumb, high-performance parallel computation in a shared-memory multiprocessor uses parallel algorithms while the coordination of a large-scale distributed system uses distributed algorithms.'''</paragraph><heading level='2'>History</heading><paragraph>The use of concurrent processes that communicate by message-passing has its roots in<space/><link><target>operating system</target></link><space/>architectures studied in the 1960s.<extension extension_name='ref'><template><target>harvtxt</target><arg>Andrews</arg><arg>2000</arg></template>, p. 348.</extension><space/>The first widespread distributed systems were<space/><link><target>local-area networks</target></link><space/>such as<space/><link><target>Ethernet</target></link>, which was invented in the 1970s.<extension extension_name='ref'><template><target>harvtxt</target><arg>Andrews</arg><arg>2000</arg></template>, p. 32.</extension></paragraph><paragraph><link><target>ARPANET</target></link>, the predecessor of the<space/><link><target>Internet</target></link>, was introduced in the late 1960s, and ARPANET<space/><link><target>e-mail</target></link><space/>was invented in the early 1970s. E-mail became the most successful application of ARPANET,<extension extension_name='ref'><template><target>harvtxt</target><arg>Peter</arg><arg>2004</arg></template>,<space/><link type='external' href='http://www.nethistory.info/History%20of%20the%20Internet/email.html'>The history of email</link>.</extension><space/>and it is probably the earliest example of a large-scale<space/><link><target>distributed application</target></link>. In addition to ARPANET, and its successor, the Internet, other early worldwide computer networks included<space/><link><target>Usenet</target></link><space/>and<space/><link><target>FidoNet</target></link><space/>from 1980s, both of which were used to support distributed discussion systems.</paragraph><paragraph>The study of distributed computing became its own branch of computer science in the late 1970s and early 1980s. The first conference in the field,<space/><link><target>Symposium on Principles of Distributed Computing</target></link><space/>(PODC), dates back to 1982, and its European counterpart<space/><link><target>International Symposium on Distributed Computing</target></link><space/>(DISC) was first held in 1985.</paragraph><heading level='2'>Applications</heading><paragraph>Reasons for using distributed systems and distributed computing may include:</paragraph><list type='numbered'><listitem>The very nature of an application may<space/><italics>require</italics><space/>the use of a communication network that connects several computers: for example, data produced in one physical location and required in another location.</listitem><listitem>There are many cases in which the use of a single computer would be possible in principle, but the use of a distributed system is<space/><italics>beneficial</italics><space/>for practical reasons. For example, it may be more cost-efficient to obtain the desired level of performance by using a<space/><link><target>Cluster (computing)</target><part>cluster</part></link><space/>of several low-end computers, in comparison with a single high-end computer. A distributed system can provide more reliability than a non-distributed system, as there is no<space/><link><target>single point of failure</target></link>. Moreover, a distributed system may be easier to expand and manage than a monolithic uniprocessor system.<extension extension_name='ref'><template><target>harvtxt</target><arg>Elmasri</arg><arg>Navathe</arg><arg>2000</arg></template>, Section 24.1.2.</extension></listitem></list><paragraph>Ghaemi<space/><italics>et al.</italics><space/>define a<space/><bold>distributed query</bold><space/>as a query &quot;that selects data from databases located at multiple sites in a network&quot; and offer as an SQL example:</paragraph><paragraph><extension extension_name='blockquote'><list type='ident'><listitem>SELECT ename, dname</listitem><listitem>FROM company.emp e, company.dept@sales.goods d</listitem><listitem>WHERE e.deptno = d.deptno<extension extension_name='ref'><template><target>cite journal</target><arg name="last1"><space/>Ghaemi
<space/></arg><arg name="first1"><space/>Reza
<space/></arg><arg name="last2"><space/>Milani Fard
<space/></arg><arg name="first2"><space/>Amin
<space/></arg><arg name="last3"><space/>Tabatabaee
<space/></arg><arg name="first3"><space/>Hamid
<space/></arg><arg name="last4"><space/>Sadeghizadeh
<space/></arg><arg name="first4"><space/>Mahdi
<space/></arg><arg name="year"><space/>2008
<space/></arg><arg name="title"><space/>Evolutionary Query Optimization for Heterogeneous Distributed Database Systems
<space/></arg><arg name="journal"><space/>World Academy of Science, Engineering and Technology
<space/></arg><arg name="publisher"><space/>[[World Academy of Science, Engineering and Technology]]
<space/></arg><arg name="issue"><space/>19
<space/></arg><arg name="pages"><space/>43–49
<space/></arg><arg name="accessdate"><space/>2013-07-16
<space/></arg><arg name="url"><space/>http://www.waset.org/journals/waset/v19/v19-9.pdf
</arg></template></extension></listitem></list></extension><template><target>unreliable source?</target><arg>sourced identified as a predatory publisher</arg><arg name="date">October 2015</arg></template></paragraph><heading level='2'>Examples</heading><paragraph>Examples of distributed systems and applications of distributed computing include the following:<extension extension_name='ref'><template><target>harvtxt</target><arg>Andrews</arg><arg>2000</arg></template>, p. 1011.<space/><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 46.<space/><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, p. xix, 1.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, p. xv.<space/><template><target>harvtxt</target><arg>Elmasri</arg><arg>Navathe</arg><arg>2000</arg></template>, Section 24.</extension></paragraph><list type='bullet'><listitem><link><target>Telecommunication</target></link><space/>networks:<list type='bullet'><listitem><link><target>Telephone network</target><trail>s</trail></link><space/>and<space/><link><target>cellular network</target><trail>s</trail></link></listitem><listitem><link><target>Computer network</target><trail>s</trail></link><space/>such as the<space/><link><target>Internet</target></link></listitem><listitem><link><target>Wireless sensor networks</target></link></listitem><listitem><link><target>Routing algorithm</target><trail>s</trail></link></listitem></list></listitem><listitem>Network applications:<list type='bullet'><listitem><link><target>World wide web</target></link><space/>and<space/><link><target>peer-to-peer network</target><trail>s</trail></link></listitem><listitem><link><target>Massively multiplayer online game</target><trail>s</trail></link><space/>and<space/><link><target>virtual reality</target></link><space/>communities</listitem><listitem><link><target>Distributed database</target><trail>s</trail></link><space/>and<space/><link><target>distributed database management system</target><trail>s</trail></link></listitem><listitem><link><target>distributed file system</target><part>Network file system</part><trail>s</trail></link></listitem><listitem>Distributed information processing systems such as banking systems and airline reservation systems</listitem></list></listitem><listitem>Real-time process control:<list type='bullet'><listitem><link><target>Aircraft</target></link><space/>control systems</listitem><listitem><link><target>Industrial control systems</target></link></listitem></list></listitem><listitem><link><target>Parallel computation</target></link>:<list type='bullet'><listitem><link><target>Scientific computing</target></link>, including<space/><link><target>cluster computing</target></link><space/>and<space/><link><target>grid computing</target></link><space/>and various<space/><link><target>volunteer computing</target></link><space/>projects; see the<space/><link><target>list of distributed computing projects</target></link></listitem><listitem><link><target>Distributed rendering</target></link><space/>in computer graphics</listitem></list></listitem></list><heading level='2'>Theoretical foundations</heading><paragraph><template><target>main</target><arg>Distributed algorithm</arg></template></paragraph><preblock><preline></preline></preblock><heading level='3'>Models</heading><paragraph>Many tasks that we would like to automate by using a computer are of questionanswer type: we would like to ask a question and the computer should produce an answer. In<space/><link><target>theoretical computer science</target></link>, such tasks are called<space/><link><target>computational problem</target><trail>s</trail></link>. Formally, a computational problem consists of<space/><italics>instances</italics><space/>together with a<space/><italics>solution</italics><space/>for each instance. Instances are questions that we can ask, and solutions are desired answers to these questions.</paragraph><paragraph>Theoretical computer science seeks to understand which computational problems can be solved by using a computer (<link><target>Computability theory (computer science)</target><part>computability theory</part></link>) and how efficiently (<link><target>computational complexity theory</target></link>). Traditionally, it is said that a problem can be solved by using a computer if we can design an<space/><link><target>algorithm</target></link><space/>that produces a correct solution for any given instance. Such an algorithm can be implemented as a<space/><link><target>computer program</target></link><space/>that runs on a general-purpose computer: the program reads a problem instance from<space/><link><target>Information</target><part>input</part></link>, performs some computation, and produces the solution as<space/><link><target>output (computing)</target><part>output</part></link>. Formalisms such as<space/><link><target>random access machine</target><trail>s</trail></link><space/>or<space/><link><target>universal Turing machine</target><trail>s</trail></link><space/>can be used as abstract models of a sequential general-purpose computer executing such an algorithm.</paragraph><paragraph>The field of concurrent and distributed computing studies similar questions in the case of either multiple computers, or a computer that executes a network of interacting processes: which computational problems can be solved in such a network and how efficiently? However, it is not at all obvious what is meant by solving a problem in the case of a concurrent or distributed system: for example, what is the task of the algorithm designer, and what is the concurrent or distributed equivalent of a sequential general-purpose computer?</paragraph><paragraph>The discussion below focuses on the case of multiple computers, although many of the issues are the same for concurrent processes running on a single computer.</paragraph><paragraph>Three viewpoints are commonly used:</paragraph><list type='def'><listitem><defkey>Parallel algorithms in shared-memory model</defkey></listitem></list><list type='bullet'><listitem>All processors have access to a shared memory. The algorithm designer chooses the program executed by each processor.</listitem><listitem>One theoretical model is the<space/><link><target>parallel random access machine</target><trail>s</trail></link><space/>(PRAM) that are used.<extension extension_name='ref'><template><target>harvtxt</target><arg>Cormen</arg><arg>Leiserson</arg><arg>Rivest</arg><arg>1990</arg></template>, Section 30.</extension><space/>However, the classical PRAM model assumes synchronous access to the shared memory.</listitem><listitem>Shared-memory programs can be extended to distributed systems if the underlying operating system encapsulates the communication between nodes and virtually unifies the memory across all individual systems.</listitem><listitem>A model that is closer to the behavior of real-world multiprocessor machines and takes into account the use of machine instructions, such as<space/><link><target>Compare-and-swap</target></link><space/>(CAS), is that of<space/><italics>asynchronous shared memory</italics>. There is a wide body of work on this model, a summary of which can be found in the literature.<extension extension_name='ref'><template><target>harvtxt</target><arg>Herlihy</arg><arg>Shavit</arg><arg>2008</arg></template>, Chapters 2-6.</extension><extension extension_name='ref'><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template></extension></listitem></list><list type='def'><listitem><defkey>Parallel algorithms in message-passing model</defkey></listitem></list><list type='bullet'><listitem>The algorithm designer chooses the structure of the network, as well as the program executed by each computer.</listitem><listitem>Models such as<space/><link><target>Boolean circuits</target></link><space/>and<space/><link><target>sorting network</target><trail>s</trail></link><space/>are used.<extension extension_name='ref'><template><target>harvtxt</target><arg>Cormen</arg><arg>Leiserson</arg><arg>Rivest</arg><arg>1990</arg></template>, Sections 28 and 29.</extension><space/>A Boolean circuit can be seen as a computer network: each gate is a computer that runs an extremely simple computer program. Similarly, a sorting network can be seen as a computer network: each comparator is a computer.</listitem></list><list type='def'><listitem><defkey>Distributed algorithms in message-passing model</defkey></listitem></list><list type='bullet'><listitem>The algorithm designer only chooses the computer program. All computers run the same program. The system must work correctly regardless of the structure of the network.</listitem><listitem>A commonly used model is a<space/><link><target>graph (mathematics)</target><part>graph</part></link><space/>with one<space/><link><target>finite-state machine</target></link><space/>per node.</listitem></list><paragraph>In the case of distributed algorithms, computational problems are typically related to graphs. Often the graph that describes the structure of the computer network<space/><italics>is</italics><space/>the problem instance. This is illustrated in the following example.</paragraph><heading level='3'>An example</heading><paragraph>Consider the computational problem of finding a coloring of a given graph<space/><italics>G</italics>. Different fields might take the following approaches:</paragraph><list type='def'><listitem><defkey>Centralized algorithms</defkey></listitem></list><list type='bullet'><listitem>The graph<space/><italics>G</italics><space/>is encoded as a string, and the string is given as input to a computer. The computer program finds a coloring of the graph, encodes the coloring as a string, and outputs the result.</listitem></list><list type='def'><listitem><defkey>Parallel algorithms</defkey></listitem></list><list type='bullet'><listitem>Again, the graph<space/><italics>G</italics><space/>is encoded as a string. However, multiple computers can access the same string in parallel. Each computer might focus on one part of the graph and produce a coloring for that part.</listitem><listitem>The main focus is on high-performance computation that exploits the processing power of multiple computers in parallel.</listitem></list><list type='def'><listitem><defkey>Distributed algorithms</defkey></listitem></list><list type='bullet'><listitem>The graph<space/><italics>G</italics><space/>is the structure of the computer network. There is one computer for each node of<space/><italics>G</italics><space/>and one communication link for each edge of<space/><italics>G</italics>. Initially, each computer only knows about its immediate neighbors in the graph<space/><italics>G</italics>; the computers must exchange messages with each other to discover more about the structure of<space/><italics>G</italics>. Each computer must produce its own color as output.</listitem><listitem>The main focus is on coordinating the operation of an arbitrary distributed system.</listitem></list><paragraph>While the field of parallel algorithms has a different focus than the field of distributed algorithms, there is a lot of interaction between the two fields. For example, the<space/><link><target>ColeVishkin algorithm</target></link><space/>for graph coloring<extension extension_name='ref'><template><target>harvtxt</target><arg>Cole</arg><arg>Vishkin</arg><arg>1986</arg></template>.<space/><template><target>harvtxt</target><arg>Cormen</arg><arg>Leiserson</arg><arg>Rivest</arg><arg>1990</arg></template>, Section 30.5.</extension><space/>was originally presented as a parallel algorithm, but the same technique can also be used directly as a distributed algorithm.</paragraph><paragraph>Moreover, a parallel algorithm can be implemented either in a parallel system (using shared memory) or in a distributed system (using message passing).<extension extension_name='ref'><template><target>harvtxt</target><arg>Andrews</arg><arg>2000</arg></template>, p. ix.</extension><space/>The traditional boundary between parallel and distributed algorithms (choose a suitable network vs. run in any given network) does not lie in the same place as the boundary between parallel and distributed systems (shared memory vs. message passing).</paragraph><heading level='3'>Complexity measures</heading><paragraph>In parallel algorithms, yet another resource in addition to time and space is the number of computers. Indeed, often there is a trade-off between the running time and the number of computers: the problem can be solved faster if there are more computers running in parallel (see<space/><link><target>speedup</target></link>). If a decision problem can be solved in<space/><link><target>polylogarithmic time</target></link><space/>by using a polynomial number of processors, then the problem is said to be in the class<space/><link><target>NC (complexity)</target><part>NC</part></link>.<extension extension_name='ref'><template><target>harvtxt</target><arg>Arora</arg><arg>Barak</arg><arg>2009</arg></template>, Section 6.7.<space/><template><target>harvtxt</target><arg>Papadimitriou</arg><arg>1994</arg></template>, Section 15.3.</extension><space/>The class NC can be defined equally well by using the PRAM formalism or Boolean circuits PRAM machines can simulate Boolean circuits efficiently and vice versa.<extension extension_name='ref'><template><target>harvtxt</target><arg>Papadimitriou</arg><arg>1994</arg></template>, Section 15.2.</extension></paragraph><paragraph>In the analysis of distributed algorithms, more attention is usually paid on communication operations than computational steps. Perhaps the simplest model of distributed computing is a synchronous system where all nodes operate in a lockstep fashion. During each<space/><italics>communication round</italics>, all nodes in parallel (1)&amp;nbsp;receive the latest messages from their neighbours, (2)&amp;nbsp;perform arbitrary local computation, and (3)&amp;nbsp;send new messages to their neighbours. In such systems, a central complexity measure is the number of synchronous communication rounds required to complete the task.<extension extension_name='ref'><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, p. 1723.</extension></paragraph><paragraph>This complexity measure is closely related to the<space/><link><target>Diameter (graph theory)</target><part>diameter</part></link><space/>of the network. Let<space/><italics>D</italics><space/>be the diameter of the network. On the one hand, any computable problem can be solved trivially in a synchronous distributed system in approximately 2<italics>D</italics><space/>communication rounds: simply gather all information in one location (<italics>D</italics><space/>rounds), solve the problem, and inform each node about the solution (<italics>D</italics><space/>rounds).</paragraph><paragraph>On the other hand, if the running time of the algorithm is much smaller than<space/><italics>D</italics><space/>communication rounds, then the nodes in the network must produce their output without having the possibility to obtain information about distant parts of the network. In other words, the nodes must make globally consistent decisions based on information that is available in their<space/><italics>local neighbourhood</italics>. Many distributed algorithms are known with the running time much smaller than<space/><italics>D</italics><space/>rounds, and understanding which problems can be solved by such algorithms is one of the central research questions of the field.<extension extension_name='ref'><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, Sections 2.3 and 7.<space/><template><target>harvtxt</target><arg>Linial</arg><arg>1992</arg></template>.<space/><template><target>harvtxt</target><arg>Naor</arg><arg>Stockmeyer</arg><arg>1995</arg></template>.</extension></paragraph><paragraph>Other commonly used measures are the total number of bits transmitted in the network (cf.<space/><link><target>communication complexity</target></link>).</paragraph><heading level='3'>Other problems</heading><paragraph>Traditional computational problems take the perspective that we ask a question, a computer (or a distributed system) processes the question for a while, and then produces an answer and stops. However, there are also problems where we do not want the system to ever stop. Examples of such problems include the<space/><link><target>dining philosophers problem</target></link><space/>and other similar<space/><link><target>mutual exclusion</target></link><space/>problems. In these problems, the distributed system is supposed to continuously coordinate the use of shared resources so that no conflicts or<space/><link><target>deadlock</target><trail>s</trail></link><space/>occur.</paragraph><paragraph>There are also fundamental challenges that are unique to distributed computing. The first example is challenges that are related to<space/><italics>fault-tolerance</italics>. Examples of related problems include<space/><link><target>Consensus (computer science)</target><part>consensus problems</part></link>,<extension extension_name='ref'><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, Sections 57.<space/><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, Chapter 13.</extension><space/><link><target>Byzantine fault tolerance</target></link>,<extension extension_name='ref'><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, p. 99102.<space/><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, p. 192193.</extension><space/>and<space/><link><target>self-stabilisation</target></link>.<extension extension_name='ref'><template><target>harvtxt</target><arg>Dolev</arg><arg>2000</arg></template>.<space/><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, Chapter 17.</extension></paragraph><paragraph>A lot of research is also focused on understanding the<space/><italics>asynchronous</italics><space/>nature of distributed systems:</paragraph><list type='bullet'><listitem><link><target>Synchronizer (algorithm)</target><part>Synchronizers</part></link><space/>can be used to run synchronous algorithms in asynchronous systems.<extension extension_name='ref'><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, Section 16.<space/><template><target>harvtxt</target><arg>Peleg</arg><arg>2000</arg></template>, Section 6.</extension></listitem><listitem><link><target>Logical clock</target><trail>s</trail></link><space/>provide a causal<space/><link><target>happened-before</target></link><space/>ordering of events.<extension extension_name='ref'><template><target>harvtxt</target><arg>Lynch</arg><arg>1996</arg></template>, Section 18.<space/><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, Sections 6.26.3.</extension></listitem><listitem><link><target>Clock synchronization</target></link><space/>algorithms provide globally consistent physical time stamps.<extension extension_name='ref'><template><target>harvtxt</target><arg>Ghosh</arg><arg>2007</arg></template>, Section 6.4.</extension></listitem></list><heading level='3'>Properties of distributed systems</heading><paragraph>So far the focus has been on<space/><italics>designing</italics><space/>a distributed system that solves a given problem. A complementary research problem is<space/><italics>studying</italics><space/>the properties of a given distributed system.</paragraph><paragraph>The<space/><link><target>halting problem</target></link><space/>is an analogous example from the field of centralised computation: we are given a computer program and the task is to decide whether it halts or runs forever. The halting problem is<space/><link><target>Undecidable problem</target><part>undecidable</part></link><space/>in the general case, and naturally understanding the behaviour of a computer network is at least as hard as understanding the behaviour of one computer.</paragraph><paragraph>However, there are many interesting special cases that are decidable. In particular, it is possible to reason about the behaviour of a network of finite-state machines. One example is telling whether a given network of interacting (asynchronous and non-deterministic) finite-state machines can reach a deadlock. This problem is<space/><link><target>PSPACE-complete</target></link>,<extension extension_name='ref'><template><target>harvtxt</target><arg>Papadimitriou</arg><arg>1994</arg></template>, Section 19.3.</extension><space/>i.e., it is decidable, but it is not likely that there is an efficient (centralised, parallel or distributed) algorithm that solves the problem in the case of large networks.</paragraph><heading level='2'>Coordinator election</heading><paragraph><bold>Coordinator election</bold><space/>(sometimes called<space/><bold>leader election</bold>) is the process of designating a single<space/><link><target>Process (computing)</target><part>process</part></link><space/>as the organizer of some task distributed among several computers (nodes). Before the task is begun, all network nodes are either unaware which node will serve as the &quot;coordinator&quot; (or leader) of the task, or unable to communicate with the current coordinator. After a coordinator election algorithm has been run, however, each node throughout the network recognizes a particular, unique node as the task coordinator.</paragraph><paragraph>The network nodes communicate among themselves in order to decide which of them will get into the &quot;coordinator&quot; state. For that, they need some method in order to break the symmetry among them. For example, if each node has unique and comparable identities, then the nodes can compare their identities, and decide that the node with the highest identity is the coordinator.</paragraph><paragraph>The definition of this problem is often attributed to LeLann, who formalized it as a method to create a new token in a token<space/><link><target>ring network</target></link><space/>in which the token has been lost.</paragraph><paragraph>Coordinator election algorithms are designed to be economical in terms of total<space/><link><target>byte</target><trail>s</trail></link><space/>transmitted, and time. The algorithm suggested by Gallager, Humblet, and Spira<space/><extension extension_name='ref'><template><target>cite journal</target><arg name="author">[[Robert G. Gallager|R. G. Gallager]], P. A. Humblet, and P. M. Spira<space/></arg><arg name="title">A Distributed Algorithm for Minimum-Weight Spanning Trees<space/></arg><arg name="journal">ACM Transactions on Programming Languages and Systems<space/></arg><arg name="volume">5<space/></arg><arg name="issue">1<space/></arg><arg name="date">January 1983<space/></arg><arg name="pages">66–77<space/></arg><arg name="url">http://theory.csail.mit.edu/classes/6.852/05/papers/p66-gallager.pdf<space/></arg><arg name="doi">10.1145/357195.357200</arg></template></extension><space/>for general undirected graphs has had a strong impact on the design of distributed algorithms in general, and won the<space/><link><target>Dijkstra Prize</target></link><space/>for an influential paper in distributed computing.</paragraph><paragraph>Many other algorithms were suggested for different kind of network<space/><link><target>Graph (mathematics)</target><part>graph</part><trail>s</trail></link>, such as undirected rings, unidirectional rings, complete graphs, grids, directed Euler graphs, and others. A general method that decouples the issue of the graph family from the design of the coordinator election algorithm was suggested by Korach, Kutten, and Moran.<extension extension_name='ref'><template><target>cite journal</target><arg name="author">Ephraim Korach, Shay Kutten, [[Shlomo Moran]]<space/></arg><arg name="title">A Modular Technique for the Design of Efficient Distributed Leader Finding Algorithms<space/></arg><arg name="journal">ACM Transactions on Programming Languages and Systems<space/></arg><arg name="volume">12<space/></arg><arg name="issue">1<space/></arg><arg name="pages">84–101<space/></arg><arg name="year">1990<space/></arg><arg name="doi">10.1145/77606.77610</arg></template></extension></paragraph><paragraph>In order to perform coordination, distributed systems employ the concept of coordinators. The coordinator election problem is to choose a process from among a group of processes on different processors in a distributed system to act as the central coordinator. Several central coordinator election algorithms exist.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Hamilton<space/></arg><arg name="first">Howard
</arg><arg name="url">http://www2.cs.uregina.ca/~hamilton/courses/330/notes/distributed/distributed.html
</arg><arg name="title">Distributed Algorithms
</arg><arg name="accessdate">2013-03-03
</arg></template></extension></paragraph><heading level='3'>Bully algorithm</heading><paragraph>When using the<space/><link><target>Bully algorithm</target></link>, any process sends a message to the current coordinator. If there is no response within a given time limit, the process tries to elect itself as leader.</paragraph><heading level='3'>Chang and Roberts algorithm</heading><paragraph>The<space/><link><target>Chang and Roberts algorithm</target></link><space/>(or &quot;Ring Algorithm&quot;) is a ring-based election algorithm used to find a process with the largest unique identification number .</paragraph><heading level='2'>Architectures</heading><paragraph>Various hardware and software architectures are used for distributed computing. At a lower level, it is necessary to interconnect multiple CPUs with some sort of network, regardless of whether that network is printed onto a circuit board or made up of loosely coupled devices and cables. At a higher level, it is necessary to interconnect<space/><link><target>Process (computing)</target><part>processes</part></link><space/>running on those CPUs with some sort of<space/><link><target>communication system</target></link>.</paragraph><paragraph>Distributed programming typically falls into one of several basic architectures or categories:<space/><link><target>clientserver</target></link>,<space/><link><target>Three-tier (computing)</target><part>3-tier architecture</part></link>,<space/><link><target>Multitier architecture</target><part>''n''-tier architecture</part></link>,<space/><link><target>distributed object</target><trail>s</trail></link>,<space/><link><target>loose coupling</target></link>, or<space/><link><target>Computer cluster</target><part>tight coupling</part></link>.</paragraph><list type='bullet'><listitem><link><target>Clientserver</target></link>: Smart client code contacts the server for data then formats and displays it to the user. Input at the client is committed back to the server when it represents a permanent change.</listitem><listitem><link><target>Three-tier (computing)</target><part>3-tier architecture</part></link>: Three tier systems move the client intelligence to a middle tier so that stateless clients can be used. This simplifies application deployment. Most web applications are 3-Tier.</listitem><listitem><link><target>Multitier architecture</target><part>''n''-tier architecture</part></link>:<space/><italics>n</italics>-tier refers typically to web applications which further forward their requests to other enterprise services. This type of application is the one most responsible for the success of<space/><link><target>application server</target><trail>s</trail></link>.</listitem><listitem><link><target>Computer cluster</target><part>highly coupled</part></link><space/>(clustered): refers typically to a cluster of machines that closely work together, running a shared process in parallel. The task is subdivided in parts that are made individually by each one and then put back together to make the final result.</listitem><listitem><link><target>Peer-to-peer</target></link>: an architecture where there is no special machine or machines that provide a service or manage the network resources. Instead all responsibilities are uniformly divided among all machines, known as peers. Peers can serve both as clients and servers.</listitem><listitem><link><target>Space based architecture</target><part>Space based</part></link>: refers to an infrastructure that creates the illusion (virtualization) of one single address-space. Data are transparently replicated according to application needs. Decoupling in time, space and reference is achieved.</listitem></list><paragraph>Another basic aspect of distributed computing architecture is the method of communicating and coordinating work among concurrent processes. Through various message passing protocols, processes may communicate directly with one another, typically in a<space/><link><target>Master-slave (technology)</target><part>master/slave</part></link><space/>relationship. Alternatively, a<space/><link><target>Database-centric architecture</target><part>&quot;database-centric&quot; architecture</part></link><space/>can enable distributed computing to be done without any form of direct<space/><link><target>inter-process communication</target></link>, by utilizing a shared<space/><link><target>database</target></link>.<extension extension_name='ref'><template><target>Citation</target><arg name="author">Lind P, Alm M<space/></arg><arg name="title">A database-centric virtual chemistry system<space/></arg><arg name="journal">J Chem Inf Model<space/></arg><arg name="volume">46<space/></arg><arg name="issue">3<space/></arg><arg name="pages">1034–9<space/></arg><arg name="year">2006<space/></arg><arg name="pmid">16711722<space/></arg><arg name="doi">10.1021/ci050360b<space/></arg><arg name="postscript">.<space/></arg></template></extension></paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>AppScale</target></link></listitem><listitem><link><target>Berkeley Open Infrastructure for Network Computing</target><part>BOINC</part></link></listitem><listitem><link><target>Code mobility</target></link></listitem><listitem><link><target>Decentralized computing</target></link></listitem><listitem><link><target>Distributed algorithmic mechanism design</target></link></listitem><listitem><link><target>Distributed cache</target></link></listitem><listitem><link><target>Distributed operating system</target></link></listitem><listitem><link><target>Edsger W. Dijkstra Prize in Distributed Computing</target></link></listitem><listitem><link><target>Folding@home</target></link></listitem><listitem><link><target>Inferno (operating system)</target><part>Inferno</part></link></listitem><listitem><link><target>Jungle computing</target></link></listitem><listitem><link><target>Layered queueing network</target></link></listitem><listitem><link><target>Library Oriented Architecture</target><part>Library Oriented Architecture - LOA</part></link></listitem><listitem><link><target>List of distributed computing conferences</target></link></listitem><listitem><link><target>List of important publications in concurrent, parallel, and distributed computing</target></link></listitem><listitem><link><target>Parallel distributed processing</target></link></listitem><listitem><link><target>Parallel programming model</target></link></listitem><listitem><link><target>Plan 9 from Bell Labs</target></link></listitem></list><heading level='2'>Notes</heading><paragraph><template><target>reflist</target><arg name="colwidth">30em</arg></template></paragraph><heading level='2'>References</heading><list type='def'><listitem><defkey>Books</defkey></listitem></list><list type='bullet'><listitem><template><target>citation</target><arg name="last">Andrews<space/></arg><arg name="first">Gregory R.
</arg><arg name="title">Foundations of Multithreaded, Parallel, and Distributed Programming
</arg><arg name="publisher">[[Addison–Wesley]]
</arg><arg name="year">2000
</arg><arg name="isbn">0-201-35752-6
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last1">Arora<space/></arg><arg name="first1">Sanjeev<space/></arg><arg name="authorlink1">Sanjeev Arora
</arg><arg name="last2">Barak<space/></arg><arg name="first2">Boaz
</arg><arg name="title">Computational Complexity – A Modern Approach
</arg><arg name="publisher">[[Cambridge University Press|Cambridge]]
</arg><arg name="year">2009
</arg><arg name="isbn">978-0-521-42426-4
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last1">Cormen<space/></arg><arg name="first1">Thomas H.<space/></arg><arg name="authorlink1">Thomas H. Cormen
</arg><arg name="last2">Leiserson<space/></arg><arg name="first2">Charles E.<space/></arg><arg name="authorlink2">Charles E. Leiserson
</arg><arg name="last3">Rivest<space/></arg><arg name="first3">Ronald L.<space/></arg><arg name="authorlink3">Ron Rivest
</arg><arg name="title">[[Introduction to Algorithms]]
</arg><arg name="publisher">[[MIT Press]]
</arg><arg name="year">1990
</arg><arg name="edition">1st
</arg><arg name="isbn">0-262-03141-8
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last">Dolev<space/></arg><arg name="first">Shlomi<space/></arg><arg name="authorlink">Shlomi Dolev
</arg><arg name="title">Self-Stabilization
</arg><arg name="publisher">[[MIT Press]]
</arg><arg name="year">2000
</arg><arg name="isbn">0-262-04178-2
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last1">Elmasri<space/></arg><arg name="first1">Ramez
</arg><arg name="last2">Navathe<space/></arg><arg name="first2">Shamkant B.<space/></arg><arg name="authorlink2">Shamkant Navathe
</arg><arg name="title">Fundamentals of Database Systems
</arg><arg name="publisher">[[Addison–Wesley]]
</arg><arg name="edition">3rd
</arg><arg name="year">2000
</arg><arg name="isbn">0-201-54263-3
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last">Ghosh<space/></arg><arg name="first">Sukumar
</arg><arg name="title">Distributed Systems – An Algorithmic Approach
</arg><arg name="publisher">Chapman & Hall/CRC
</arg><arg name="year">2007
</arg><arg name="isbn">978-1-58488-564-1
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last">Lynch<space/></arg><arg name="first">Nancy A.<space/></arg><arg name="authorlink">Nancy Lynch
</arg><arg name="title">Distributed Algorithms
</arg><arg name="publisher">[[Morgan Kaufmann Publishers|Morgan Kaufmann]]
</arg><arg name="year">1996
</arg><arg name="isbn">1-55860-348-4
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last1">Herlihy</arg><arg name="first1">Maurice P.<space/></arg><arg name="authorlink1">Maurice Herlihy
</arg><arg name="last2">Shavit<space/></arg><arg name="first2">Nir N.<space/></arg><arg name="authorlink2">Nir Shavit
</arg><arg name="title">The Art of Multiprocessor Programming
</arg><arg name="publisher">[[Morgan Kaufmann Publishers|Morgan Kaufmann]]
</arg><arg name="year">2008
</arg><arg name="isbn">0-12-370591-6
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last">Papadimitriou<space/></arg><arg name="first">Christos H.<space/></arg><arg name="authorlink">Christos Papadimitriou
</arg><arg name="title">Computational Complexity
</arg><arg name="publisher">[[Addison–Wesley]]
</arg><arg name="year">1994
</arg><arg name="isbn">0-201-53082-1
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last">Peleg<space/></arg><arg name="first">David<space/></arg><arg name="authorlink">David Peleg (scientist)
</arg><arg name="title">Distributed Computing: A Locality-Sensitive Approach
</arg><arg name="publisher">[[Society for Industrial and Applied Mathematics|SIAM]]
</arg><arg name="year">2000
</arg><arg name="isbn">0-89871-464-8
</arg><arg name="url">http://www.ec-securehost.com/SIAM/DT05.html
</arg></template>.<space/></listitem></list><list type='def'><listitem><defkey>Articles</defkey></listitem></list><list type='bullet'><listitem><template><target>Citation</target><arg name="last1"><space/>Cole<space/></arg><arg name="first1"><space/>Richard
</arg><arg name="last2"><space/>Vishkin<space/></arg><arg name="first2"><space/>Uzi<space/></arg><arg name="authorlink2">Uzi Vishkin
</arg><arg name="year"><space/>1986
</arg><arg name="title"><space/>Deterministic coin tossing with applications to optimal parallel list ranking
</arg><arg name="journal"><space/>Information and Control
</arg><arg name="volume"><space/>70
</arg><arg name="issue"><space/>1
</arg><arg name="pages"><space/>32–53
</arg><arg name="doi"><space/>10.1016/S0019-9958(86)80023-7
</arg></template>.</listitem><listitem><template><target>citation</target><arg name="doi">10.1145/1466390.1466402
</arg><arg name="last1">Keidar<space/></arg><arg name="first1">Idit
</arg><arg name="title">Distributed computing column 32 – The year in review
</arg><arg name="journal">[[ACM SIGACT News]]
</arg><arg name="volume">39
</arg><arg name="issue">4
</arg><arg name="year">2008
</arg><arg name="pages">53–54
</arg><arg name="url">http://webee.technion.ac.il/~idish/sigactNews/#column%2032
</arg></template>.<space/></listitem><listitem><template><target>citation</target><arg name="last">Linial<space/></arg><arg name="first">Nathan<space/></arg><arg name="authorlink"><space/>Nati Linial
</arg><arg name="doi">10.1137/0221015
</arg><arg name="title">Locality in distributed graph algorithms
</arg><arg name="journal">SIAM Journal on Computing
</arg><arg name="volume">21
</arg><arg name="year">1992
</arg><arg name="pages">193–201
</arg><arg name="issue">1
</arg></template>.</listitem><listitem><template><target>citation</target><arg name="last1">Naor<space/></arg><arg name="first1">Moni<space/></arg><arg name="authorlink1">Moni Naor
</arg><arg name="last2">Stockmeyer<space/></arg><arg name="first2">Larry<space/></arg><arg name="authorlink2">Larry Stockmeyer
</arg><arg name="doi">10.1137/S0097539793254571
</arg><arg name="title">What can be computed locally?
</arg><arg name="journal">SIAM Journal on Computing
</arg><arg name="volume">24
</arg><arg name="year">1995
</arg><arg name="pages">1259–1277
</arg><arg name="issue">6
</arg></template>.</listitem></list><list type='def'><listitem><defkey>Web sites</defkey></listitem></list><list type='bullet'><listitem><template><target>cite web</target><arg name="last">Godfrey<space/></arg><arg name="first">Bill
</arg><arg name="url">http://www.bacchae.co.uk/docs/dist.html
</arg><arg name="title">A primer on distributed computing
</arg><arg name="year">2002
</arg></template></listitem><listitem><template><target>cite web</target><arg name="last">Peter<space/></arg><arg name="first">Ian
</arg><arg name="url">http://www.nethistory.info/History%20of%20the%20Internet/
</arg><arg name="title">Ian Peter's History of the Internet
</arg><arg name="year">2004
</arg><arg name="accessdate">2009-08-04
</arg></template></listitem></list><heading level='2'>Further reading</heading><list type='def'><listitem><defkey>Books</defkey></listitem></list><list type='bullet'><listitem><template><target>Citation</target><arg name="author">Coulouris, George et al<space/></arg><arg name="title">Distributed Systems: Concepts and Design (5th Edition)</arg><arg name="publisher"><space/>Addison-Wesley</arg><arg name="year">2011</arg></template><space/>ISBN 0-132-14301-1.</listitem><listitem><template><target>Citation</target><arg name="author">[[Hagit Attiya|Attiya, Hagit]] and Welch, Jennifer</arg><arg name="title">Distributed Computing: Fundamentals, Simulations, and Advanced Topics</arg><arg name="publisher">Wiley-Interscience</arg><arg name="year">2004</arg></template><space/>ISBN 0-471-45324-2.</listitem><listitem><template><target>Citation</target><arg name="first">Jim</arg><arg name="last">Faber</arg><arg name="title">Java Distributed Computing</arg><arg name="publisher">O'Reilly</arg><arg name="year">1998</arg><arg name="url">http://docstore.mik.ua/orelly/java-ent/dist/index.htm</arg></template>:<space/><link type='external' href='http://docstore.mik.ua/orelly/java-ent/dist/index.htm'>Java Distributed Computing by Jim Faber, 1998</link></listitem><listitem><template><target>Citation</target><arg name="author">Garg, Vijay K.</arg><arg name="title">Elements of Distributed Computing</arg><arg name="publisher">Wiley-IEEE Press</arg><arg name="year">2002</arg></template><space/>ISBN 0-471-03600-5.</listitem><listitem><template><target>Citation</target><arg name="first">Gerard</arg><arg name="last">Tel<space/></arg><arg name="title">Introduction to Distributed Algorithms</arg><arg name="publisher">Cambridge University Press</arg><arg name="year">1994</arg></template></listitem><listitem><template><target>Citation</target><arg name="author">Chandy, Mani et al</arg><arg name="title">Parallel Program Design</arg></template></listitem></list><list type='def'><listitem><defkey>Articles</defkey></listitem></list><list type='bullet'><listitem><template><target>citation</target><arg name="editor1-last">Keidar<space/></arg><arg name="editor1-first">Idit
</arg><arg name="editor2-last">Rajsbaum<space/></arg><arg name="editor2-first">Sergio
</arg><arg name="contribution-url">http://webee.technion.ac.il/~idish/sigactNews/
</arg><arg name="contribution">Distributed computing column
</arg><arg name="title">[[ACM SIGACT News]]
</arg><arg name="year">2000–2009
</arg></template>.</listitem><listitem><template><target>Cite journal</target><arg name="last1"><space/>Birrell<space/></arg><arg name="first1"><space/>A. D.<space/></arg><arg name="last2"><space/>Levin<space/></arg><arg name="first2"><space/>R.<space/></arg><arg name="last3"><space/>Schroeder<space/></arg><arg name="first3"><space/>M. D.<space/></arg><arg name="last4"><space/>Needham<space/></arg><arg name="first4"><space/>R. M.</arg><arg name="authorlink4"><space/>Roger M. Needham</arg><arg name="title"><space/>Grapevine: An exercise in distributed computing<space/></arg><arg name="doi"><space/>10.1145/358468.358487<space/></arg><arg name="journal"><space/>[[Communications of the ACM]]</arg><arg name="volume"><space/>25<space/></arg><arg name="issue"><space/>4<space/></arg><arg name="pages"><space/>260–274</arg><arg name="date">April 1982<space/></arg><arg name="url">http://www.cs.ucsb.edu/~ravenben/papers/coreos/BLS+82.pdf</arg></template></listitem></list><list type='def'><listitem><defkey>Conference Papers</defkey></listitem></list><list type='bullet'><listitem>C. Rodrguez, M. Villagra and B. Barn,<space/><template><target>doi-inline</target><arg>10.1109/BIMNICS.2007.4610083</arg><arg>Asynchronous team algorithms for Boolean Satisfiability</arg></template>, Bionetics2007, pp.&amp;nbsp;6669, 2007.</listitem></list><heading level='2'>External links</heading><paragraph><template><target>Commons category</target><arg>Distributed computing</arg></template></paragraph><list type='bullet'><listitem><template><target>dmoz</target><arg>Computers/Computer_Science/Distributed_Computing/</arg><arg>Distributed computing</arg></template></listitem><listitem><template><target>dmoz</target><arg>Computers/Computer_Science/Distributed_Computing/Publications/</arg><arg>Distributed computing journals</arg></template></listitem></list><paragraph><template><target>Parallel computing</target></template><template><target>Sub-disciplines of computing</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Distributed Computing</target></template><link><target>Category:Distributed computing</target><part></part></link></paragraph></article>