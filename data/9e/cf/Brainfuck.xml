<article title='Brainfuck'><paragraph><template><target>distinguish</target><arg>Brain Fuck Scheduler</arg></template><template><target>multiple issues</target><arg name="{{self-published|date">July 2014}}
{{unreliable sources|date</arg></template><template><target>Infobox programming language</target><arg name="name">Brainfuck
<space/></arg><arg name="file_ext">.b, .bf
<space/></arg><arg name="paradigm">[[esoteric programming language|esoteric]], [[Imperative programming|imperative]], [[Structured programming|structured]]
<space/></arg><arg name="released">1993
<space/></arg><arg name="designer">Urban Müller
<space/></arg><arg name="typing"><space/>static, strong, manifest
<space/></arg><arg name="influenced_by">[[P′′]], [[FALSE]]
</arg></template></paragraph><preblock><preline><bold>Brainfuck</bold><space/>is an<space/><link><target>esoteric programming language</target></link><space/>created in 1993 by Urban Mller, and notable for its extreme minimalism.<space/></preline></preblock><paragraph>The language consists of only eight simple commands and an<space/><link><target>instruction pointer</target></link>. While it is fully<space/><link><target>Turing-complete</target></link>, it is not intended for practical use, but to challenge and amuse<space/><link><target>programmers</target></link>.<space/></paragraph><paragraph>The language's name is a reference to the slang term &quot;brain fuck&quot;, which refers to things so complicated or unusual that they exceed the limits of one's understanding.</paragraph><preblock><preline></preline></preblock><heading level='2'>History</heading><paragraph>In 1992, Urban Mller, a Swiss physics student, took over a small online archive for<space/><link><target>Amiga</target></link><space/>software.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://main.aminet.net/docs/misc/5000.txt<space/></arg><arg name="title">Aminet hits 5000 files<space/></arg><arg name="publisher">Urban Müller<space/></arg><arg name="date">1993-09-24<space/></arg><arg name="accessdate">2015-05-03</arg></template></extension><space/>The archive grew more popular, and was soon mirrored around the world. Today, it is the world's largest Amiga archive, known as<space/><italics><link><target>Aminet</target></link></italics>.<space/></paragraph><paragraph>Mller designed Brainfuck with the goal of implementing with the smallest possible<space/><link><target>compiler</target></link>,<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.muppetlabs.com/~breadbox/bf/<space/></arg><arg name="title">The Brainfuck Programming Language<space/></arg><arg name="publisher">Muppetlabs.com<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-10-30</arg></template></extension><space/>inspired by the 1024-byte compiler for the<space/><link><target>FALSE</target></link><space/>programming language.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://strlen.com/false/index.html<space/></arg><arg name="title">Wouter's Wiki : False Language<space/></arg><arg name="publisher">Strlen.com<space/></arg><arg name="date">2013-08-03<space/></arg><arg name="accessdate">2013-10-30</arg></template></extension><space/>Mller's original compiler was implemented in machine language and compiled to a binary with a size of 296 bytes. He uploaded the first Brainfuck compiler to Aminet in 1993. The program came with a<space/><italics>README</italics><space/>file, which briefly described the language, and challenged the reader &quot;Who can program anything useful with it? :)&quot;. Mller also included an interpreter and some quite elaborate examples. A second version of the compiler used only 240 bytes.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.aminet.net/package.php?package</arg><arg name="title">dev/lang/brainfuck-2.lha<space/></arg><arg name="publisher">Aminet<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-10-30</arg></template></extension></paragraph><paragraph>As<space/><italics>Aminet</italics><space/>grew, the compiler became popular among the Amiga community, and in time it was implemented for other platforms. Several brainfuck compilers have been made smaller than 200 bytes, and one is only 100 bytes.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://pferrie.host22.com/misc/brainfck.htm<space/></arg><arg name="title">BRAINFCK IN 100 BYTES!<space/></arg><arg name="publisher">Pferrie.host22.com<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-10-30</arg></template></extension></paragraph><heading level='2'>Language design</heading><paragraph>The language consists of eight<space/><link><target>command (computing)</target><part>command</part><trail>s</trail></link>, listed below. A brainfuck program is a sequence of these commands, possibly interspersed with other characters (which are ignored). The commands are executed sequentially, with some exceptions: an<space/><link><target>Program Counter</target><part>instruction pointer</part></link><space/>begins at the first command, and each command it points to is executed, after which it normally moves forward to the next command. The program terminates when the instruction pointer moves past the last command.</paragraph><paragraph>The brainfuck language uses a simple machine model consisting of the program and instruction pointer, as well as an array of at least 30,000<space/><link><target>byte</target></link><space/>cells initialized to zero; a movable<space/><link><target>pointer (computer programming)</target><part>data pointer</part></link><space/>(initialized to point to the leftmost byte of the array); and two streams of bytes for input and output (most often connected to a keyboard and a monitor respectively, and using the<space/><link><target>ASCII</target></link><space/>character encoding).</paragraph><heading level='3'>Commands</heading><paragraph>The eight language commands, each consisting of a single character:</paragraph><table class="wikitable"><tablerow><tablehead style="text-align:center;">Character</tablehead><tablehead align="left">Meaning</tablehead></tablerow><tablerow><tablecell style="text-align:center"><xhtml:code>&amp;gt;</xhtml:code></tablecell><tablecell>increment the<space/><link><target>pointer (computer programming)</target><part>data pointer</part></link><space/>(to point to the next cell to the right).</tablecell></tablerow><tablerow><tablecell style="text-align:center"><xhtml:code>&amp;lt;</xhtml:code></tablecell><tablecell>decrement the data pointer (to point to the next cell to the left).</tablecell></tablerow><tablerow><tablecell style="text-align:center"><xhtml:code>+</xhtml:code></tablecell><tablecell>increment (increase by one) the byte at the data pointer.</tablecell></tablerow><tablerow><tablecell style="text-align:center"><xhtml:code>-</xhtml:code></tablecell><tablecell>decrement (decrease by one) the byte at the data pointer.</tablecell></tablerow><tablerow><tablecell style="text-align:center"><xhtml:code>.</xhtml:code></tablecell><tablecell>output the byte at the data pointer.</tablecell></tablerow><tablerow><tablecell style="text-align:center"><xhtml:code>,</xhtml:code></tablecell><tablecell>accept one byte of input, storing its value in the byte at the data pointer.</tablecell></tablerow><tablerow><tablecell style="text-align:center"><xhtml:code>[</xhtml:code></tablecell><tablecell>if the byte at the data pointer is zero, then instead of moving the<space/><link><target>Program Counter</target><part>instruction pointer</part></link><space/>forward to the next command,<space/><link><target>Branch (computer science)</target><part>jump</part></link><space/>it<space/><italics>forward</italics><space/>to the command after the<space/><italics>matching</italics><space/><xhtml:code>]</xhtml:code><space/>command.</tablecell></tablerow><tablerow><tablecell style="text-align:center"><xhtml:code>]</xhtml:code></tablecell><tablecell>if the byte at the data pointer is nonzero, then instead of moving the instruction pointer forward to the next command, jump it<space/><italics>back</italics><space/>to the command after the<space/><italics>matching</italics><space/><xhtml:code>[</xhtml:code><space/>command.</tablecell></tablerow></table><paragraph>(Alternatively, the<space/><xhtml:code>]</xhtml:code><space/>command may instead be translated as an unconditional jump<space/><bold>to</bold><space/>the corresponding<space/><xhtml:code>[</xhtml:code><space/>command, or vice versa; programs will behave the same but will run more slowly, due to unnecessary double searching.)</paragraph><paragraph><xhtml:code>[</xhtml:code><space/>and<space/><xhtml:code>]</xhtml:code><space/>match as parentheses usually do: each<space/><xhtml:code>[</xhtml:code><space/>matches exactly one<space/><xhtml:code>]</xhtml:code><space/>and vice versa, the<space/><xhtml:code>[</xhtml:code><space/>comes first, and there can be no unmatched<space/><xhtml:code>[</xhtml:code><space/>or<space/><xhtml:code>]</xhtml:code><space/>between the two.</paragraph><paragraph>Brainfuck programs can be translated into<space/><link><target>C (programming language)</target><part>C</part></link><space/>using the following substitutions, assuming<space/><xhtml:code>ptr</xhtml:code><space/>is of type<space/><xhtml:code>unsigned char*</xhtml:code><space/>and has been initialized to point to an array of zeroed bytes:</paragraph><table class="wikitable"><tablerow><tablehead style="text-align:center;">brainfuck command</tablehead><tablehead style="text-align:left;"><link><target>C (programming language)</target><part>C</part></link><space/>equivalent</tablehead></tablerow><tablerow><tablecell style="text-align:center;">(Program Start)</tablecell><tablecell><template><target>c-lang</target><arg name="1">char array[infinitely large size]<space/></arg></template><xhtml:br></xhtml:br><template><target>c-lang</target><arg name="1">char *ptr</arg></template></tablecell></tablerow><tablerow><tablecell style="text-align:center;"><xhtml:code>&amp;gt;</xhtml:code></tablecell><tablecell><template><target>c-lang</target><arg name="1">++ptr;</arg></template></tablecell></tablerow><tablerow><tablecell style="text-align:center;"><xhtml:code>&amp;lt;</xhtml:code></tablecell><tablecell><template><target>c-lang</target><arg name="1">--ptr;</arg></template></tablecell></tablerow><tablerow><tablecell style="text-align:center;"><xhtml:code>+</xhtml:code></tablecell><tablecell><template><target>c-lang</target><arg name="1">++*ptr;</arg></template></tablecell></tablerow><tablerow><tablecell style="text-align:center;"><xhtml:code>-</xhtml:code></tablecell><tablecell><template><target>c-lang</target><arg name="1">--*ptr;</arg></template></tablecell></tablerow><tablerow><tablecell style="text-align:center;"><xhtml:code>.</xhtml:code></tablecell><tablecell><template><target>c-lang</target><arg name="1">putchar(*ptr);</arg></template></tablecell></tablerow><tablerow><tablecell style="text-align:center;"><xhtml:code>,</xhtml:code></tablecell><tablecell><template><target>c-lang</target><arg name="1">*ptr</arg></template></tablecell></tablerow><tablerow><tablecell style="text-align:center;"><xhtml:code>[</xhtml:code></tablecell><tablecell><template><target>c-lang</target><arg name="1">while (*ptr) {</arg></template></tablecell></tablerow><tablerow><tablecell style="text-align:center;"><xhtml:code>]</xhtml:code></tablecell><tablecell><template><target>c-lang</target><arg name="1">{{)}}</arg></template></tablecell></tablerow></table><paragraph>As the name suggests, brainfuck programs tend to be difficult to comprehend. This is partly because any mildly complex task requires a long sequence of commands; partly it is because the program's text gives no direct indications of the program's<space/><link><target>state (computer science)</target><part>state</part></link>. These, as well as brainfuck's inefficiency and its limited input/output capabilities, are some of the reasons it is not used for serious programming. Nonetheless, like any<space/><link><target>Turing completeness</target><part>Turing-complete</part></link><space/>language, brainfuck is theoretically capable of computing any computable function or simulating any other computational model, if given access to an unlimited amount of memory.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.iwriteiam.nl/Ha_bf_Turing.html<space/></arg><arg name="title">BF is Turing-complete<space/></arg><arg name="publisher">Iwriteiam.nl<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-10-30</arg></template></extension><space/>A variety of brainfuck programs have been written.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://esoteric.sange.fi/brainfuck/bf-source/prog/<space/></arg><arg name="title">Index of /brainfuck/bf-source/prog<space/></arg><arg name="publisher">Esoteric.sange.fi<space/></arg><arg name="date">2002-01-22<space/></arg><arg name="accessdate">2013-10-30</arg></template></extension><space/>Although brainfuck programs, especially complicated ones, are difficult to write, it is quite trivial to write an interpreter for brainfuck in a more typical language such as C due to its simplicity. There even exists a brainfuck interpreter written in the brainfuck language itself.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.iwriteiam.nl/Ha_bf_inter.html<space/></arg><arg name="title">BF interpreter written in BF<space/></arg><arg name="publisher">Iwriteiam.nl<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-10-30</arg></template></extension></paragraph><paragraph>Brainfuck is an example of a so-called<space/><link><target>Turing tarpit</target></link>: It can be used to write<space/><italics>any</italics><space/>program, but it is not practical to do so, because Brainfuck provides so little abstraction that the programs get very long or complicated.</paragraph><heading level='3'>Brainfuck's formal &quot;parent language&quot;</heading><paragraph>Except for its two I/O commands, brainfuck is a minor variation of the formal programming language<space/><link><target>P</target></link><space/>created by<space/><link><target>Corrado Bhm</target></link><space/>in 1964. In fact, using six symbols equivalent to the respective brainfuck commands<space/><xhtml:code>+</xhtml:code>,<space/><xhtml:code>-</xhtml:code>, &lt;code&gt;&lt;&lt;/code&gt;,<space/><xhtml:code>&gt;</xhtml:code>,<space/><xhtml:code>[</xhtml:code>,<space/><xhtml:code>]</xhtml:code>, Bhm provided an explicit program for each of the basic functions that together serve to compute any<space/><link><target>computable function</target></link>. So the first &quot;brainfuck&quot; programs appear in Bhm's 1964 paper &amp;ndash; and they were programs sufficient to prove Turing-completeness.</paragraph><heading level='2'>Examples</heading><heading level='3'>Adding two values</heading><paragraph>As a first, simple example, the following code snippet will add the current cell's value to the next cell: Each time the loop is executed, the current cell is decremented, the data pointer moves to the right, that next cell is incremented, and the data pointer moves left again. This sequence is repeated until the starting cell is 0.</paragraph><paragraph><extension extension_name='source' lang="bf">[-&gt;+&lt;]</extension></paragraph><heading level='3'>Hello World!</heading><paragraph>The following program prints<space/><link><target>Hello world program</target><part>&quot;Hello World!&quot;</part></link><space/>and a newline to the screen:</paragraph><paragraph><extension extension_name='source' lang="bf"><paragraph>[ This program prints &quot;Hello World!&quot; and a newline to the screen, its</paragraph><preblock><preline><space/>length is 106 active command characters. [It is not the shortest.]</preline></preblock><preblock><preline><space/>This loop is a &quot;comment loop&quot;, a simple way of adding a comment</preline><preline><space/>to a BF program such that you don't have to worry about any command</preline><preline><space/>characters. Any &quot;.&quot;, &quot;,&quot;, &quot;+&quot;, &quot;-&quot;, &quot;&lt;&quot; and &quot;&gt;&quot; characters are simply</preline><preline><space/>ignored, the &quot;[&quot; and &quot;]&quot; characters just have to be balanced. This</preline><preline><space/>loop and the commands it contains are ignored because the current cell</preline><preline><space/>defaults to a value of 0; the 0 value causes this loop to be skipped.</preline></preblock><paragraph>]+++++ +++ Set Cell #0 to 8[</paragraph><preblock><preline><space/><space/><space/>&gt;++++ Add 4 to Cell #1; this will always set Cell #1 to 4</preline><preline><space/><space/><space/>[ as the cell will be cleared by the loop</preline><preline><space/><space/><space/><space/><space/><space/><space/>&gt;++ Add 2 to Cell #2</preline><preline><space/><space/><space/><space/><space/><space/><space/>&gt;+++ Add 3 to Cell #3</preline><preline><space/><space/><space/><space/><space/><space/><space/>&gt;+++ Add 3 to Cell #4</preline><preline><space/><space/><space/><space/><space/><space/><space/>&gt;+ Add 1 to Cell #5</preline><preline><space/><space/><space/><space/><space/><space/><space/>&lt;&lt;&lt;&lt;- Decrement the loop counter in Cell #1</preline><preline><space/><space/><space/>] Loop till Cell #1 is zero; number of iterations is 4</preline><preline><space/><space/><space/>&gt;+ Add 1 to Cell #2</preline><preline><space/><space/><space/>&gt;+ Add 1 to Cell #3</preline><preline><space/><space/><space/>&gt;- Subtract 1 from Cell #4</preline><preline><space/><space/><space/>&gt;&gt;+ Add 1 to Cell #6</preline><preline><space/><space/><space/>[&lt;] Move back to the first zero cell you find; this will</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>be Cell #1 which was cleared by the previous loop</preline><preline><space/><space/><space/>&lt;- Decrement the loop Counter in Cell #0</preline></preblock><paragraph>] Loop till Cell #0 is zero; number of iterations is 8</paragraph><paragraph>The result of this is:Cell No : 0 1 2 3 4 5 6Contents: 0 0 72 104 88 32 8Pointer : ^</paragraph><paragraph>&gt;&gt;. Cell #2 has value 72 which is 'H'&gt;---. Subtract 3 from Cell #3 to get 101 which is 'e'+++++++..+++. Likewise for 'llo' from Cell #3&gt;&gt;. Cell #5 is 32 for the space&lt;-. Subtract 1 from Cell #4 for 87 to give a 'W'&lt;. Cell #3 was set to 'o' from the end of 'Hello'+++.------.--------. Cell #3 for 'rl' and 'd'&gt;&gt;+. Add 1 to Cell #5 gives us an exclamation point&gt;++. And finally a newline from Cell #6</paragraph></extension></paragraph><paragraph>For &quot;readability&quot;, this code has been spread across many lines and blanks and comments have been added. Brainfuck ignores all characters except the eight commands<space/><xhtml:code>+-&lt;&gt;[],.</xhtml:code><space/>so no special syntax for comments is needed (as long as the comments don't contain the command characters). The code could just as well have been written as:<extension extension_name='source' lang="bf">++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.</extension></paragraph><heading level='3'>ROT13</heading><paragraph>This program enciphers its input with the<space/><link><target>ROT13</target></link><space/>cipher. To do this, it must map characters A-M (<link><target>ASCII</target></link><space/>65-77) to N-Z (78-90), and vice versa. Also it must map a-m (97-109) to n-z (110-122) and vice versa. It must map all other characters to themselves; it reads characters one at a time and outputs their enciphered equivalents until it reads an EOF (here assumed to be represented as either -1 or &quot;no change&quot;), at which point the program terminates.</paragraph><paragraph>The basic approach used is as follows. Calling the input character<space/><italics>x</italics>, divide<space/><italics>x</italics>-1 by 32, keeping quotient and remainder. Unless the quotient is 2 or 3, just output<space/><italics>x</italics>, having kept a copy of it during the division. If the quotient is 2 or 3, divide the remainder ((<italics>x</italics>-1) modulo 32) by 13; if the quotient here is 0, output<space/><italics>x</italics>+13; if 1, output<space/><italics>x</italics>-13; if 2, output<space/><italics>x</italics>.</paragraph><paragraph>Regarding the division algorithm, when dividing<space/><italics>y</italics><space/>by<space/><italics>z</italics><space/>to get a quotient<space/><italics>q</italics><space/>and remainder<space/><italics>r</italics>, there is an outer loop which sets<space/><italics>q</italics><space/>and<space/><italics>r</italics><space/>first to the quotient and remainder of 1/<italics>z</italics>, then to those of 2/<italics>z</italics>, and so on; after it has executed<space/><italics>y</italics><space/>times, this outer loop terminates, leaving<space/><italics>q</italics><space/>and<space/><italics>r</italics><space/>set to the quotient and remainder of<space/><italics>y</italics>/<italics>z</italics>. (The dividend<space/><italics>y</italics><space/>is used as a diminishing counter that controls how many times this loop is executed.) Within the loop, there is code to increment<space/><italics>r</italics><space/>and decrement<space/><italics>y</italics>, which is usually sufficient; however, every<space/><italics>z</italics>th time through the outer loop, it is necessary to zero<space/><italics>r</italics><space/>and increment<space/><italics>q</italics>. This is done with a diminishing counter set to the divisor<space/><italics>z</italics>; each time through the outer loop, this counter is decremented, and when it reaches zero, it is refilled by moving the value from<space/><italics>r</italics><space/>back into it.</paragraph><paragraph><extension extension_name='source' lang="bf"><preblock><preline></preline></preblock><paragraph>-,+[ Read first character and start outer character reading loop</paragraph><preblock><preline><space/><space/><space/>-[ Skip forward if character is 0</preline><preline><space/><space/><space/><space/><space/><space/><space/>&gt;&gt;++++[&gt;++++++++&lt;-] Set up divisor (32) for division loop</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>(MEMORY LAYOUT: dividend copy remainder divisor quotient zero zero)</preline><preline><space/><space/><space/><space/><space/><space/><space/>&lt;+&lt;-[ Set up dividend (x minus 1) and enter division loop</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>&gt;+&gt;+&gt;-[&gt;&gt;&gt;] Increase copy and remainder / reduce divisor / Normal case: skip forward</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>&lt;[[&gt;+&lt;-]&gt;&gt;+&gt;] Special case: move remainder back to divisor and increase quotient</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>&lt;&lt;&lt;&lt;&lt;- Decrement dividend</preline><preline><space/><space/><space/><space/><space/><space/><space/>] End division loop</preline><preline><space/><space/><space/>]&gt;&gt;&gt;[-]+ End skip loop; zero former divisor and reuse space for a flag</preline><preline><space/><space/><space/>&gt;--[-[&lt;-&gt;+++[-]]]&lt;[ Zero that flag unless quotient was 2 or 3; zero quotient; check flag</preline><preline><space/><space/><space/><space/><space/><space/><space/>++++++++++++&lt;[ If flag then set up divisor (13) for second division loop</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>(MEMORY LAYOUT: zero copy dividend divisor remainder quotient zero zero)</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>&gt;-[&gt;+&gt;&gt;] Reduce divisor; Normal case: increase remainder</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>&gt;[+[&lt;+&gt;-]&gt;+&gt;&gt;] Special case: increase remainder / move it back to divisor / increase quotient</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>&lt;&lt;&lt;&lt;&lt;- Decrease dividend</preline><preline><space/><space/><space/><space/><space/><space/><space/>] End division loop</preline><preline><space/><space/><space/><space/><space/><space/><space/>&gt;&gt;[&lt;+&gt;-] Add remainder back to divisor to get a useful 13</preline><preline><space/><space/><space/><space/><space/><space/><space/>&gt;[ Skip forward if quotient was 0</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>-[ Decrement quotient and skip forward if quotient was 1</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>-&lt;&lt;[-]&gt;&gt; Zero quotient and divisor if quotient was 2</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>]&lt;&lt;[&lt;&lt;-&gt;&gt;-]&gt;&gt; Zero divisor and subtract 13 from copy if quotient was 1</preline><preline><space/><space/><space/><space/><space/><space/><space/>]&lt;&lt;[&lt;&lt;+&gt;&gt;-] Zero divisor and add 13 to copy if quotient was 0</preline><preline><space/><space/><space/>] End outer skip loop (jump to here if ((character minus 1)/32) was not 2 or 3)</preline><preline><space/><space/><space/>&lt;[-] Clear remainder from first division if second division was skipped</preline><preline><space/><space/><space/>&lt;.[-] Output ROT13ed character from copy and clear it</preline><preline><space/><space/><space/>&lt;-,+ Read next character</preline></preblock><paragraph>] End character reading loop</paragraph></extension></paragraph><heading level='2'>Portability issues</heading><paragraph><template><target>unreferenced section</target><arg name="date">June 2014</arg></template>Partly because Urban Mller did not write a thorough language specification, the many subsequent brainfuck interpreters and compilers have come to use slightly different dialects of brainfuck.</paragraph><heading level='3'>Cell size</heading><paragraph>In the classic distribution, the cells are of 8-bit size (cells are bytes), and this is still the most common size. However, to read non-textual data, a brainfuck program may need to distinguish an<space/><link><target>end-of-file</target></link><space/>condition from any possible byte value; thus 16-bit cells have also been used. Some implementations have used 32-bit cells, 64-bit cells, or<space/><link><target>bignum</target></link><space/>cells with practically unlimited range, but programs that use this extra range are likely to be slow, since storing the value<space/><italics>n</italics><space/>into a cell requires<space/><link><target>Big O notation#Related asymptotic notations</target><part></part></link>(<italics>n</italics>) time as a cell's value may only be changed by incrementing and decrementing.</paragraph><paragraph>In all these variants, the<space/><xhtml:code>,</xhtml:code><space/>and<space/><xhtml:code>.</xhtml:code><space/>commands still read and write data in bytes. In most of them, the cells wrap around, i.e. incrementing a cell which holds its maximal value (with the<space/><xhtml:code>+</xhtml:code><space/>command) will bring it to its minimal value and vice versa. The exceptions are implementations which are distant from the underlying hardware, implementations that use bignums, and implementations that try to enforce portability.</paragraph><paragraph>Fortunately, it is usually easy to write brainfuck programs that do not ever cause integer wraparound or overflow, and therefore don't depend on cell size. Generally this means avoiding increment of +255 (unsigned 8-bit wraparound), or avoiding overstepping the boundaries of [-128, +127] (signed 8-bit wraparound) (since there are no comparison operators, a program cannot distinguish between a signed and unsigned<space/><link><target>two's complement</target></link><space/>fixed-bit-size cell and negativeness of numbers is a matter of interpretation). For more details on integer wraparound, see the<space/><link><target>Integer overflow</target></link><space/>article.</paragraph><heading level='3'>Array size</heading><paragraph>In the classic distribution, the array has 30,000 cells, and the pointer begins at the leftmost cell. Even more cells are needed to store things like the millionth<space/><link><target>Fibonacci number</target></link>, and the easiest way to make the language Turing-complete is to make the array unlimited on the right.</paragraph><paragraph>A few implementations<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://kiyuko.org/software/beef<space/></arg><arg name="title">Beef –<space/></arg><arg name="last1">Bolognani<space/></arg><arg name="first">Andrea<space/></arg><arg name="publisher">Kiyuko.org<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-10-30</arg></template></extension><space/>extend the array to the left as well; this is an uncommon feature, and therefore portable brainfuck programs do not depend on it.</paragraph><paragraph>When the pointer moves outside the bounds of the array, some implementations will give an error message, some will try to extend the array dynamically, some will not notice and will produce<space/><link><target>undefined behavior</target></link>, and a few will move the pointer to the opposite end of the array. Some tradeoffs are involved: expanding the array dynamically to the right is the most user-friendly approach and is good for memory-hungry programs, but it carries a speed penalty. If a fixed-size array is used it is helpful to make it very large, or better yet let the user set the size. Giving an error message for bounds violations is very useful for debugging but even that carries a speed penalty unless it can be handled by the operating system's memory protections.</paragraph><heading level='3'>End-of-line code</heading><paragraph>Different operating systems (and sometimes different programming environments) use subtly different versions of ASCII. The most important difference is in the code used for the end of a line of text. MS-DOS and Microsoft Windows use a<space/><link><target>Newline#Representations</target><part>CRLF</part></link>, i.e. a 13 followed by a 10, in most contexts. UNIX and its descendants (including Linux and Mac OS X) and Amigas use just 10, and older Macs use just 13. It would be unfortunate if brainfuck programs had to be rewritten for different operating systems. Fortunately, a unified standard is easy to find. Urban Mller's compiler and his example programs use 10, on both input and output; so do a large majority of existing brainfuck programs; and 10 is also more convenient to use than CRLF. Thus, brainfuck implementations should make sure that brainfuck programs that assume newline=10 will run properly; many do so, but some do not.</paragraph><paragraph>This assumption is also consistent with most of the world's sample code for<space/><link><target>C (programming language)</target><part>C</part></link><space/>and other languages, in that they use '\n', or 10, for their newlines. On systems that use CRLF line endings, the C standard library transparently remaps &quot;\n&quot; to &quot;\r\n&quot; on output and &quot;\r\n&quot; to &quot;\n&quot; on input for streams not opened in binary mode.</paragraph><heading level='3'>End-of-file behavior</heading><paragraph>The behavior of the &quot;<xhtml:code>,</xhtml:code>&quot; command when an<space/><link><target>end-of-file</target></link><space/>condition has been encountered varies. Some implementations set the cell at the pointer to 0, some set it to the C constant EOF (in practice this is usually -1), some leave the cell's value unchanged. There is no real consensus; arguments for the three behaviors are as follows.</paragraph><paragraph>Setting the cell to 0 avoids the use of negative numbers, and makes it marginally more concise to write a loop that reads characters until EOF occurs. This is a language extension devised by Panu Kalliokoski.</paragraph><paragraph>Setting the cell to -1 allows EOF to be distinguished from any byte value (if the cells are larger than bytes), which is necessary for reading non-textual data; also, it is the behavior of the C translation of &quot;<xhtml:code>,</xhtml:code>&quot; given in Mller's readme file. However, it is not obvious that those C translations are to be taken as normative.</paragraph><paragraph>Leaving the cell's value unchanged is the behavior of Urban Mller's brainfuck compiler. This behavior can easily coexist with either of the others; for instance, a program that assumes EOF=0 can set the cell to 0 before each &quot;<xhtml:code>,</xhtml:code>&quot; command, and will then work correctly on implementations that do either EOF=0 or EOF=&quot;no change&quot;. It is so easy to accommodate the &quot;no change&quot; behavior that any brainfuck programmer interested in portability should do so.</paragraph><heading level='2'>Derivatives</heading><paragraph>Many people have created brainfuck equivalents (languages with commands that directly map to brainfuck) or brainfuck derivatives (languages that extend its behavior or map it into new semantic territory).</paragraph><paragraph>Some examples:</paragraph><list type='bullet'><listitem><bold>Pi</bold>, which maps brainfuck into errors in individual digits of<space/><link><target>Pi</target></link>.<template><target>citation needed</target><arg name="date">June 2014</arg><arg name="reason">Can find mention only in an esolangs.org Wiki, which only references one webpage, which in turn says it is copied from the Wiki</arg></template></listitem><listitem><bold>VerboseFuck</bold>, which looks like a traditional programming language, only what appears as parameters or expressions are actually parts of longer commands that cannot be altered.<template><target>citation needed</target><arg name="date">June 2014</arg><arg name="reason">This seems to be something someone just made up as a joke last month, not mentioned in any independent reliable source.</arg></template></listitem><listitem><bold>DerpPlusPlus</bold>, in which the commands are replaced with words such as 'HERP', 'DERP', 'GIGITY', etc.<extension extension_name='ref'><template><target>cite web</target><arg name="url">https://github.com/TheRaz/DerpPlusPlus</arg><arg name="title">TheRaz/DerpPlusPlus</arg><arg name="publisher">Github.com</arg><arg name="accessdate">2015-04-08</arg></template></extension></listitem><listitem><bold>Ook!</bold>, which maps brainfuck's eight commands to two-word permutations of &quot;Ook.&quot;, &quot;Ook?&quot;, and &quot;Ook!&quot;, jokingly designed to be &quot;writable and readable by orang-utans&quot; according to its creator, a reference to<space/><link><target>The Librarian (Discworld)#Librarian</target><part>the orang-utan Librarian</part></link><space/>in the novels of<space/><link><target>Terry Pratchett</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.dangermouse.net/esoteric/ook.html</arg><arg name="title">Ook!</arg><arg name="work">DM's Esoteric Programming Languages</arg><arg name="first">David</arg><arg name="last">Morgan-Mar</arg><arg name="date">2009-03-21</arg><arg name="accessdate">2014-06-28</arg></template></extension><extension extension_name='ref' name="Paloque-Bergs2009"><template><target>cite book</target><arg name="last">Paloque-Bergès</arg><arg name="first">Camille</arg><arg name="title">Poétique des codes sur le réseau informatique</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">2009</arg><arg name="publisher">Éditions des archives contemporaines</arg><arg name="isbn">978-2-914610-70-4</arg><arg name="page">73</arg><arg name="location">Paris</arg><arg name="language">French</arg></template></extension></listitem><listitem><bold>Ternary</bold>, similar in concept to Ook! but instead consisting of permutations of the ASCII characters 0, 1, and 2.<extension extension_name='ref'><template><target>cite web</target><arg name="url">https://github.com/zerosum0x0/ternary</arg><arg name="title">Ternary Programming Language</arg><arg name="work">Ternary Programming Language</arg><arg name="accessdate">2015-06-14</arg></template></extension></listitem><listitem><bold>BodyFuck</bold>, A BrainFuck implementation based on a<space/><link><target>Gesture recognition</target><part>gesture-controlled system</part></link><space/>so that programmer's movements are captured by a video camera and converted into the 8 possible characters.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Hanselmann</arg><arg name="first1">Nik</arg><arg name="title">There is no hardware.</arg><arg name="url">http://nikhanselmann.com/public/etc/thesis/</arg><arg name="accessdate">31 August 2015</arg></template></extension></listitem></list><preblock><preline></preline></preblock><paragraph>However, there are also unnamed minor variants (or dialects), possibly formed as a result of inattention, of which some of the more common are:<template><target>citation needed</target><arg name="date">June 2014</arg></template></paragraph><list type='bullet'><listitem>forbidding, rather than ignoring, any non-command characters in brainfuck programs</listitem><listitem>introducing a comment marker which comments out the rest of the line</listitem><listitem>various alterations of the loop semantics, sometimes destroying<space/><link><target>Turing completeness</target></link></listitem><listitem>requiring a special character to mark the end of the program</listitem></list><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><template><target>dmoz</target><arg>Computers/Programming/Languages/Brainfuck</arg></template></listitem><listitem><link type='external' href='http://www.bf.doleczek.pl/'>Brainfuck</link><space/>interpreter on-line in<space/><link><target>JavaScript</target></link><space/>with collection of programs</listitem><listitem><link type='external' href='https://github.com/zk-phi/bfbuilder'>Brainfuck IDE</link><space/>- A brainfuck development environment with interactive debugger<space/></listitem></list><paragraph><link><target>Category:Non-English-based programming languages</target></link><link><target>Category:Esoteric programming languages</target></link><link><target>Category:Programming languages created in 1993</target></link></paragraph></article>