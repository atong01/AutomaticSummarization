<article title='Data_compression'><paragraph><template><target>redirect</target><arg>Source coding</arg><arg>the term in computer programming</arg><arg>Source code</arg></template>In<space/><link><target>digital signal processing</target></link>,<space/><bold>data compression</bold>,<space/><bold>source coding</bold>,<extension extension_name='ref'><template><target>cite book</target><arg name="last"><space/>Wade
</arg><arg name="first"><space/>Graham
</arg><arg name="title"><space/>Signal coding and processing
</arg><arg name="url"><space/>http://books.google.com/books?id</arg><arg name="accessdate"><space/>2011-12-22

</arg><arg name="year"><space/>1994
</arg><arg name="edition"><space/>2
</arg><arg name="publisher"><space/>Cambridge University Press
</arg><arg name="isbn"><space/>978-0-521-42336-6
</arg><arg name="page"><space/>34
</arg><arg name="quote"><space/>The broad objective of source coding is to exploit or remove 'inefficient' redundancy in the [[Pulse-code modulation|PCM]] source and thereby achieve a reduction in the overall source rate R.
</arg></template></extension>or<space/><bold>bit-rate reduction</bold><space/>involves<space/><link><target>encoding</target></link><space/><link><target>information</target></link><space/>using fewer<space/><link><target>bit</target><trail>s</trail></link><space/>than the original representation.<extension extension_name='ref' name="mahdi53"><template><target>cite journal</target><arg name="last">Mahdi</arg><arg name="first">O.A.</arg><arg name="author2">Mohammed, M.A.<space/></arg><arg name="author3">Mohamed, A.J.<space/></arg><arg name="title">Implementing a Novel Approach an Convert Audio Compression to Text Coding via Hybrid Technique</arg><arg name="journal">International Journal of Computer Science Issues</arg><arg name="date">November 2012</arg><arg name="volume">9</arg><arg name="issue">6, No. 3</arg><arg name="pages">53–59</arg><arg name="url">http://ijcsi.org/papers/IJCSI-9-6-3-53-59.pdf</arg><arg name="accessdate">6 March 2013</arg></template></extension><space/>Compression can be either<space/><link><target>Lossy compression</target><part>lossy</part></link><space/>or<space/><link><target>Lossless compression</target><part>lossless</part></link>.<space/><link><target>Lossless compression</target></link><space/>reduces bits by identifying and eliminating<space/><link><target>Redundancy (information theory)</target><part>statistical redundancy</part></link>. No information is lost in lossless compression.<space/><link><target>Lossy compression</target></link><space/>reduces bits by identifying unnecessary information and removing it.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Pujar</arg><arg name="first">J.H.</arg><arg name="author2">Kadlaskar, L.M.</arg><arg name="title">A New Lossless Method of Image Compression and Decompression Using Huffman Coding Techniques</arg><arg name="journal">Journal of Theoretical and Applied Information Technology</arg><arg name="date">May 2010</arg><arg name="volume">15</arg><arg name="issue">1</arg><arg name="pages">18–23</arg><arg name="url">http://www.jatit.org/volumes/research-papers/Vol15No1/3Vol15No1.pdf</arg></template></extension>The process of reducing the size of a data file is referred to as data compression. In the context of data transmission, it is called source coding (encoding done at the source of the data before it is stored or transmitted) in opposition to channel coding.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Salomon</arg><arg name="first">David</arg><arg name="title">A Concise Introduction to Data Compression</arg><arg name="year">2008</arg><arg name="publisher">Springer</arg><arg name="location">Berlin</arg><arg name="isbn">9781848000728</arg></template></extension></paragraph><paragraph>Compression is useful because it helps reduce resource usage, such as data storage space or transmission<space/><link><target>bandwidth (computing)</target><part>capacity</part></link>. Because compressed data must be decompressed to use, this extra processing imposes computational or other costs through decompression; this situation is far from being a<space/><link><target>TANSTAAFL</target><part>free lunch</part></link>. Data compression is subject to a<space/><link><target>Time/space complexity</target><part>spacetime complexity</part></link><space/>trade-off. For instance, a compression scheme for video may require expensive<space/><link><target>Electronic hardware</target><part>hardware</part></link><space/>for the video to be decompressed fast enough to be viewed as it is being decompressed, and the option to decompress the video in full before watching it may be inconvenient or require additional storage. The design of data compression schemes involves trade-offs among various factors, including the degree of compression, the amount of distortion introduced (when using<space/><link><target>lossy data compression</target></link>), and the computational resources required to compress and decompress the data.<extension extension_name='ref'>S. Mittal and J. Vetter, &quot;<link type='external' href='http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7110612'>A Survey Of Architectural Approaches for Data Compression in Cache and Main Memory Systems</link>&quot;, IEEE Transactions on Parallel and Distributed Systems, 2015.</extension><extension extension_name='ref'><template><target>cite book</target><arg name="last">Tank</arg><arg name="first">M.K.</arg><arg name="title">Implementation of Limpel-Ziv algorithm for lossless compression using VHDL. Thinkquest 2010: Proceedings of the First International Conference on Contours of Computing Technology</arg><arg name="year">2011</arg><arg name="publisher">Springer</arg><arg name="location">Berlin</arg><arg name="pages">275–283</arg></template></extension></paragraph><heading level='2'>Lossless</heading><paragraph><link><target>Lossless data compression</target></link><space/><link><target>algorithm</target><trail>s</trail></link><space/>usually exploit<space/><link><target>Redundancy (information theory)</target><part>statistical redundancy</part></link><space/>to represent data more concisely without losing<space/><link><target>Self-information</target><part>information</part></link>, so that the process is reversible. Lossless compression is possible because most real-world data have statistical redundancy. For example, an image may have areas of colour that do not change over several pixels; instead of coding &quot;red pixel, red pixel, ...&quot; the data may be encoded as &quot;279 red pixels&quot;. This is a basic example of<space/><link><target>run-length encoding</target></link>; there are many schemes to reduce file size by eliminating redundancy.</paragraph><paragraph>The<space/><link><target>LempelZiv</target></link><space/>(LZ) compression methods are among the most popular algorithms for lossless storage.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Navqi</arg><arg name="first">Saud</arg><arg name="author2">Naqvi, R.<space/></arg><arg name="author3">Riaz, R.A.<space/></arg><arg name="author4"><space/>Siddiqui, F.<space/></arg><arg name="title">Optimized RTL design and implementation of LZW algorithm for high bandwidth applications</arg><arg name="journal">Electrical Review</arg><arg name="date">April 2011</arg><arg name="volume">2011</arg><arg name="issue">4</arg><arg name="pages">279–285</arg><arg name="url">http://pe.org.pl/articles/2011/4/68.pdf</arg></template></extension><space/><link><target>DEFLATE (algorithm)</target><part>DEFLATE</part></link><space/>is a variation on LZ optimized for decompression speed and compression ratio, but compression can be slow. DEFLATE is used in<space/><link><target>PKZIP</target></link>,<space/><link><target>Gzip</target></link><space/>and<space/><link><target>Portable Network Graphics</target><part>PNG</part></link>.<space/><link><target>LZW</target></link><space/>(LempelZivWelch) is used in<space/><link><target>Graphics Interchange Format</target><part>GIF</part></link><space/>images. Also noteworthy is the LZR (Lempel-ZivRenau) algorithm, which serves as the basis for the<space/><link><target>Zip (file format)</target><part>Zip</part></link><space/>method.<template><target>citation needed</target><arg name="date"><space/>October 2015<space/></arg><arg name="reason"><space/>The Wikipedia article on the Zip file format currently never mentions "Renau". Should it?</arg></template><space/>LZ methods use a table-based compression model where table entries are substituted for repeated strings of data. For most LZ methods, this table is generated dynamically from earlier data in the input. The table itself is often<space/><link><target>Huffman coding</target><part>Huffman encoded</part></link><space/>(e.g. SHRI, LZX).A current LZ-based coding scheme that performs well is<space/><link><target>LZX (algorithm)</target><part>LZX</part></link>, used in Microsoft's<space/><link><target>cabinet (file format)</target><part>CAB</part></link><space/>format.</paragraph><paragraph>The best modern lossless compressors use<space/><link><target>Probabilistic algorithm</target><part>probabilistic</part></link><space/>models, such as<space/><link><target>prediction by partial matching</target></link>. The<space/><link><target>BurrowsWheeler transform</target></link><space/>can also be viewed as an indirect form of statistical modelling.<extension extension_name='ref' name="mahmud2"><template><target>cite journal</target><arg name="last">Mahmud</arg><arg name="first">Salauddin</arg><arg name="title">An Improved Data Compression Method for General Data</arg><arg name="journal">International Journal of Scientific & Engineering Research</arg><arg name="date">March 2012</arg><arg name="volume">3</arg><arg name="issue">3</arg><arg name="page">2</arg><arg name="url">http://www.ijser.org/researchpaper%5CAn-Improved-Data-Compression-Method-for-General-Data.pdf</arg><arg name="accessdate">6 March 2013</arg></template></extension></paragraph><paragraph>The class of<space/><link><target>grammar-based codes</target></link><space/>are gaining popularity because they can compress<space/><italics>highly repetitive</italics><space/>input extremely effectively, for instance, a biological data collection of the same or closely related species, a huge versioned document collection, internet archival, etc. The basic task of grammar-based codes is constructing a context-free grammar deriving a single string.<space/><link><target>Sequitur algorithm</target><part>Sequitur</part></link><space/>and Re-Pair are practical grammar compression algorithms for which software is publicly available.</paragraph><paragraph>In a further refinement of the direct use of<space/><link><target>probabilistic model</target><trail>ling</trail></link>, statistical estimates can be coupled to an algorithm called<space/><link><target>arithmetic coding</target></link>. Arithmetic coding is a more modern coding technique that uses the mathematical calculations of a<space/><link><target>finite-state machine</target></link><space/>to produce a string of encoded bits from a series of input data symbols. It can achieve superior compression to other techniques such as the better-known Huffman algorithm. It uses an internal memory state to avoid the need to perform a one-to-one mapping of individual input symbols to distinct representations that use an integer number of bits, and it clears out the internal memory only after encoding the entire string of data symbols. Arithmetic coding applies especially well to adaptive data compression tasks where the statistics vary and are context-dependent, as it can be easily coupled with an adaptive model of the<space/><link><target>probability distribution</target></link><space/>of the input data. An early example of the use of arithmetic coding was its use as an optional (but not widely used) feature of the<space/><link><target>JPEG</target></link><space/>image coding standard. It has since been applied in various other designs including<space/><link><target>H.264/MPEG-4 AVC</target></link><space/>and<space/><link><target>HEVC</target></link><space/>for video coding.</paragraph><heading level='2'>Lossy</heading><paragraph><link><target>Lossy data compression</target></link><space/>is the converse of<space/><link><target>lossless data compression</target></link>. In these schemes, some loss of information is acceptable. Dropping nonessential detail from the data source can save storage space. Lossy data compression schemes are designed by research on how people perceive the data in question. For example, the human eye is more sensitive to subtle variations in<space/><link><target>luminance</target></link><space/>than it is to the variations in color.<space/><link><target>JPEG</target></link><space/><link><target>image compression</target></link><space/>works in part by rounding off nonessential bits of information.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Arcangel</arg><arg name="first">Cory</arg><arg name="title">On Compression</arg><arg name="url">http://www.coryarcangel.com/downloads/Cory-Arcangel-OnC.pdf</arg><arg name="accessdate">6 March 2013</arg></template></extension><space/>There is a corresponding<space/><link><target>trade-off</target></link><space/>between preserving information and reducing size. A number of popular compression formats exploit these perceptual differences, including<space/><link><target>Psychoacoustics</target><part>those used in music</part></link><space/>files, images, and video.</paragraph><paragraph>Lossy<space/><link><target>image compression</target></link><space/>can be used in<space/><link><target>digital camera</target><trail>s</trail></link>, to increase storage capacities with minimal degradation of picture quality. Similarly,<space/><link><target>DVD</target><trail>s</trail></link><space/>use the lossy<space/><link><target>MPEG-2</target></link><space/><link><target>video coding format</target></link><space/>for<space/><link><target>video compression</target></link>.</paragraph><paragraph>In lossy<space/><link><target>audio compression (data)</target><part>audio compression</part></link>, methods of<space/><link><target>psychoacoustics</target></link><space/>are used to remove non-audible (or less audible) components of the<space/><link><target>Audio signal processing</target><part>audio signal</part></link>. Compression of human speech is often performed with even more specialized techniques;<space/><link><target>speech coding</target></link>, or voice coding, is sometimes distinguished as a separate discipline from<space/><italics>audio compression</italics>. Different audio and speech compression standards are listed under<space/><link><target>audio coding format</target><trail>s</trail></link>.<space/><italics>Voice compression</italics><space/>is used in<space/><link><target>internet telephony</target></link>, for example, audio compression is used for CD ripping and is decoded by the audio players.<extension extension_name='ref' name="mahmud2"></extension></paragraph><heading level='2'>Theory</heading><paragraph>The theoretical background of compression is provided by<space/><link><target>information theory</target></link><space/>(which is closely related to<space/><link><target>algorithmic information theory</target></link>) for lossless compression and<space/><link><target>ratedistortion theory</target></link><space/>for lossy compression. These areas of study were essentially forged by<space/><link><target>Claude Shannon</target></link>, who published fundamental papers on the topic in the late 1940s and early 1950s.<space/><link><target>Coding theory</target></link><space/>is also related to this. The idea of data compression is also deeply connected with<space/><link><target>statistical inference</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Marak</arg><arg name="first">Laszlo</arg><arg name="title">On image compression</arg><arg name="url">http://www.ujoimro.com/resources/Laszlo_Marak_image_compression.pdf</arg><arg name="publisher">University of Marne la Vallee</arg><arg name="accessdate">6 March 2013</arg></template></extension></paragraph><heading level='3'>Machine learning</heading><paragraph><template><target>see also</target><arg>Machine learning</arg></template>There is a close connection between<space/><link><target>machine learning</target></link><space/>and compression: a system that predicts the<space/><link><target>posterior probabilities</target></link><space/>of a sequence given its entire history can be used for optimal data compression (by using<space/><link><target>arithmetic coding</target></link><space/>on the output distribution) while an optimal compressor can be used for prediction (by finding the symbol that compresses best, given the previous history). This equivalence has been used as a justification for using data compression as a benchmark for &quot;general intelligence.&quot;<extension extension_name='ref'><template><target>cite web</target><arg name="last">Mahoney</arg><arg name="first">Matt</arg><arg name="title">Rationale for a Large Text Compression Benchmark</arg><arg name="url">http://cs.fit.edu/~mmahoney/compression/rationale.html</arg><arg name="work">http://cs.fit.edu/~mmahoney/</arg><arg name="publisher">Florida Institute of Technology</arg><arg name="accessdate">5 March 2013</arg></template></extension></paragraph><heading level='3'>Data differencing</heading><paragraph><template><target>main</target><arg>Data differencing</arg></template>Data compression can be viewed as a special case of<space/><link><target>data differencing</target></link>:<extension extension_name='ref'><template><target>cite web</target><arg name="last">Korn</arg><arg name="first">D.</arg><arg name="title">RFC 3284: The VCDIFF Generic Differencing and Compression Data Format</arg><arg name="url">http://tools.ietf.org/html/rfc3284</arg><arg name="publisher">Internet Engineering Task Force</arg><arg name="accessdate">5 March 2013</arg><arg name="display-authors">etal</arg></template></extension><extension extension_name='ref'><template><target>Citation</target><arg name="first1">D.G.<space/></arg><arg name="last1"><space/>Korn<space/></arg><arg name="first2"><space/>K.P.<space/></arg><arg name="last2">Vo<space/></arg><arg name="title">Vdelta: Differencing and Compression<space/></arg><arg name="series">Practical Reusable Unix Software<space/></arg><arg name="editor"><space/>B. Krishnamurthy<space/></arg><arg name="publisher">New York: John Wiley & Sons, Inc.</arg><arg name="year"><space/>1995</arg></template></extension><space/>Data differencing consists of producing a<space/><italics>difference</italics><space/>given a<space/><italics>source</italics><space/>and a<space/><italics>target,</italics><space/>with patching producing a<space/><italics>target</italics><space/>given a<space/><italics>source</italics><space/>and a<space/><italics>difference,</italics><space/>while data compression consists of producing a compressed file given a target, and decompression consists of producing a target given only a compressed file. Thus, one can consider data compression as data differencing with empty source data, the compressed file corresponding to a &quot;difference from nothing.&quot; This is the same as considering absolute<space/><link><target>entropy (information theory)</target><part>entropy</part></link><space/>(corresponding to data compression) as a special case of<space/><link><target>relative entropy</target></link><space/>(corresponding to data differencing) with no initial data.</paragraph><paragraph>When one wishes to emphasize the connection, one may use the term<space/><italics>differential compression</italics><space/>to refer to data differencing.</paragraph><heading level='2'>Uses</heading><heading level='3'>Audio</heading><paragraph><template><target>see also</target><arg>Audio codec</arg><arg>Audio coding format</arg></template>Audio data compression, as distinguished from<space/><link><target>dynamic range compression</target></link>, has the potential to reduce the transmission<space/><link><target>Bandwidth (computing)</target><part>bandwidth</part></link><space/>and storage requirements of audio data.<space/><link><target>List of codecs#Audio</target><part>Audio compression algorithms</part></link><space/>are implemented in<space/><link><target>software</target></link><space/>as audio<space/><link><target>codec</target><trail>s</trail></link>. Lossy audio compression algorithms provide higher compression at the cost of fidelity and are used in numerous audio applications. These algorithms almost all rely on<space/><link><target>psychoacoustics</target></link><space/>to eliminate less audible or meaningful sounds, thereby reducing the space required to store or transmit them.<extension extension_name='ref' name="mahdi53"></extension></paragraph><paragraph>In both lossy and lossless compression,<space/><link><target>Redundancy (information theory)</target><part>information redundancy</part></link><space/>is reduced, using methods such as<space/><link><target>Coding theory</target><part>coding</part></link>,<space/><link><target>pattern recognition</target></link>, and<space/><link><target>linear prediction</target></link><space/>to reduce the amount of information used to represent the uncompressed data.</paragraph><paragraph>The acceptable trade-off between loss of audio quality and transmission or storage size depends upon the application. For example, one 640MB<space/><link><target>compact disc</target></link><space/>(CD) holds approximately one hour of uncompressed<space/><link><target>high fidelity</target></link><space/>music, less than 2 hours of music compressed losslessly, or 7 hours of music compressed in the<space/><link><target>MP3</target></link><space/>format at a medium<space/><link><target>bit rate</target></link>. A digital sound recorder can typically store around 200 hours of clearly intelligible speech in 640MB.<extension extension_name='ref'>The Olympus WS-120 digital speech recorder, according to its manual, can store about 178 hours of speech-quality audio in .WMA format in 500MB of flash memory.</extension></paragraph><paragraph>Lossless audio compression produces a representation of digital data that decompress to an exact digital duplicate of the original audio stream, unlike playback from lossy compression techniques such as<space/><link><target>Vorbis</target></link><space/>and<space/><link><target>MP3</target></link>. Compression ratios are around 5060% of original size,<extension extension_name='ref'><template><target>cite web</target><arg name="last">Coalson</arg><arg name="first">Josh</arg><arg name="title">FLAC Comparison</arg><arg name="url">http://flac.sourceforge.net/comparison.html</arg><arg name="accessdate">6 March 2013</arg></template></extension><space/>which is similar to those for generic lossless data compression. Lossless compression is unable to attain high compression ratios due to the complexity of<space/><link><target>waveform</target><trail>s</trail></link><space/>and the rapid changes in sound forms. Codecs like<space/><link><target>FLAC</target></link>,<space/><link><target>Shorten (file format)</target><part>Shorten</part></link><space/>and<space/><link><target>TTA (codec)</target><part>TTA</part></link><space/>use<space/><link><target>linear prediction</target></link><space/>to estimate the spectrum of the signal. Many of these algorithms use<space/><link><target>convolution</target></link><space/>with the filter [-1 1] to slightly<space/><link><target>white noise</target><part>whiten</part></link><space/>or<space/><link><target>decorrelation</target><part>flatten</part></link><space/>the spectrum, thereby allowing traditional lossless compression to work more efficiently. The process is reversed upon decompression.</paragraph><paragraph>When audio files are to be processed, either by further compression or for<space/><link><target>Audio editing</target><part>editing</part></link>, it is desirable to work from an unchanged original (uncompressed or losslessly compressed). Processing of a lossily compressed file for some purpose usually produces a final result inferior to the creation of the same compressed file from an uncompressed original. In addition to sound editing or mixing, lossless audio compression is often used for archival storage, or as master copies.</paragraph><paragraph>A number of lossless audio compression formats exist.<space/><link><target>Shorten (file format)</target><part>Shorten</part></link><space/>was an early lossless format. Newer ones include<space/><link><target>Free Lossless Audio Codec</target></link><space/>(FLAC), Apple's<space/><link><target>Apple Lossless</target></link><space/>(ALAC),<space/><link><target>MPEG-4 ALS</target></link>, Microsoft's<space/><link><target>Windows Media Audio 9 Lossless</target></link><space/>(WMA Lossless),<space/><link><target>Monkey's Audio</target></link>,<space/><link><target>TTA (codec)</target><part>TTA</part></link>, and<space/><link><target>WavPack</target></link>. See<space/><link><target>List of codecs#Lossless data compression</target><part>list of lossless codecs</part></link><space/>for a complete listing.</paragraph><paragraph>Some<space/><link><target>audio file format</target><part>audio formats</part></link><space/>feature a combination of a lossy format and a lossless correction; this allows stripping the correction to easily obtain a lossy file. Such formats include<space/><link><target>MPEG-4 SLS</target></link><space/>(Scalable to Lossless),<space/><link><target>WavPack</target></link>, and<space/><link><target>OptimFROG DualStream</target></link>.</paragraph><paragraph>Other formats are associated with a distinct system, such as:</paragraph><list type='bullet'><listitem><link><target>Direct Stream Transfer</target></link>, used in<space/><link><target>Super Audio CD</target></link></listitem><listitem><link><target>Meridian Lossless Packing</target></link>, used in<space/><link><target>DVD-Audio</target></link>,<space/><link><target>Dolby TrueHD</target></link>,<space/><link><target>Blu-ray</target></link><space/>and<space/><link><target>HD DVD</target></link></listitem></list><heading level='4'>Lossy audio compression</heading><paragraph><link><target>File:AudiodatenkompressionManowarThePowerOfThySword.jpg</target><part>thumb</part><part>Comparison of<space/><link><target>musical acoustics</target><part>acoustic spectrograms</part></link><space/>of a song in an uncompressed format and lossy formats. That the lossy spectrograms are different from the uncompressed one indicates that they are, in fact, lossy, but nothing can be assumed about the effect of the changes on perceived quality.</part></link></paragraph><paragraph>Lossy audio compression is used in a wide range of applications. In addition to the direct applications (mp3 players or computers), digitally compressed audio streams are used in most video DVDs, digital television, streaming media on the<space/><link><target>internet</target></link>, satellite and cable radio, and increasingly in terrestrial radio broadcasts. Lossy compression typically achieves far greater compression than lossless compression (data of 5 percent to 20 percent of the original stream, rather than 50 percent to 60 percent), by discarding less-critical data.<extension extension_name='ref' name="Jaiswal"><template><target>cite book</target><arg name="last">Jaiswal</arg><arg name="first">R.C.</arg><arg name="title">Audio-Video Engineering</arg><arg name="year">2009</arg><arg name="publisher">Nirali Prakashan<space/></arg><arg name="location">Pune, Maharashtra</arg><arg name="isbn">9788190639675</arg><arg name="page">3.41</arg></template></extension></paragraph><paragraph>The innovation of lossy audio compression was to use<space/><link><target>psychoacoustics</target></link><space/>to recognize that not all data in an audio stream can be perceived by the human<space/><link><target>auditory system</target></link>. Most lossy compression reduces perceptual redundancy by first identifying perceptually irrelevant sounds, that is, sounds that are very hard to hear. Typical examples include high frequencies or sounds that occur at the same time as louder sounds. Those sounds are coded with decreased accuracy or not at all.</paragraph><paragraph>Due to the nature of lossy algorithms,<space/><link><target>audio quality</target></link><space/>suffers when a file is decompressed and recompressed (<link><target>digital generation loss</target></link>). This makes lossy compression unsuitable for storing the intermediate results in professional audio engineering applications, such as sound editing and multitrack recording. However, they are very popular with end users (particularly<space/><link><target>MP3</target></link>) as a megabyte can store about a minute's worth of music at adequate quality.</paragraph><heading level='5'>Coding methods</heading><paragraph>To determine what information in an audio signal is perceptually irrelevant, most lossy compression algorithms use transforms such as the<space/><link><target>modified discrete cosine transform</target></link><space/>(MDCT) to convert<space/><link><target>time domain</target></link><space/>sampled waveforms into a transform domain. Once transformed, typically into the<space/><link><target>frequency domain</target></link>, component frequencies can be allocated bits according to how audible they are. Audibility of spectral components calculated using the<space/><link><target>absolute threshold of hearing</target></link><space/>and the principles of<space/><link><target>simultaneous masking</target></link>the phenomenon wherein a signal is masked by another signal separated by frequencyand, in some cases,<space/><link><target>temporal masking</target></link>where a signal is masked by another signal separated by time.<space/><link><target>Equal-loudness contour</target><trail>s</trail></link><space/>may also be used to weight the perceptual importance of components. Models of the human ear-brain combination incorporating such effects are often called<space/><link><target>psychoacoustic model</target><trail>s</trail></link>.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Faxin Yu, Hao Luo, Zheming Lu</arg><arg name="title">Three-Dimensional Model Analysis and Processing</arg><arg name="year">2010<space/></arg><arg name="publisher">Springer</arg><arg name="location">Berlin</arg><arg name="isbn">9783642126512</arg><arg name="page">47</arg></template></extension></paragraph><paragraph>Other types of lossy compressors, such as the<space/><link><target>linear predictive coding</target></link><space/>(LPC) used with speech, are source-based coders. These coders use a model of the sound's generator (such as the human vocal tract with LPC) to whiten the audio signal (i.e., flatten its spectrum) before<space/><link><target>Quantization (signal processing)</target><part>quantization</part></link>. LPC may be thought of as a basic perceptual coding technique: reconstruction of an audio signal using a linear predictor shapes the coder's quantization noise into the spectrum of the target signal, partially masking it.<extension extension_name='ref' name="Jaiswal"></extension></paragraph><paragraph>Lossy formats are often used for the distribution of streaming audio or interactive applications (such as the coding of speech for digital transmission in cell phone networks). In such applications, the data must be decompressed as the data flows, rather than after the entire data stream has been transmitted. Not all audio codecs can be used for streaming applications, and for such applications a codec designed to stream data effectively will usually be chosen.<extension extension_name='ref' name="Jaiswal"></extension></paragraph><paragraph>Latency results from the methods used to encode and decode the data. Some codecs will analyze a longer segment of the data to optimize efficiency, and then code it in a manner that requires a larger segment of data at one time to decode. (Often codecs create segments called a &quot;frame&quot; to create discrete data segments for encoding and decoding.) The inherent<space/><link><target>Latency (engineering)</target><part>latency</part></link><space/>of the coding algorithm can be critical; for example, when there is a two-way transmission of data, such as with a telephone conversation, significant delays may seriously degrade the perceived quality.</paragraph><paragraph>In contrast to the speed of compression, which is proportional to the number of operations required by the algorithm, here latency refers to the number of samples that must be analysed before a block of audio is processed. In the minimum case, latency is zero samples (e.g., if the coder/decoder simply reduces the number of bits used to quantize the signal). Time domain algorithms such as LPC also often have low latencies, hence their popularity in speech coding for telephony. In algorithms such as MP3, however, a large number of samples have to be analyzed to implement a psychoacoustic model in the frequency domain, and latency is on the order of 23 ms (46 ms for two-way communication)).</paragraph><heading level='5'>Speech encoding</heading><paragraph><link><target>Speech encoding</target></link><space/>is an important category of audio data compression. The perceptual models used to estimate what a human ear can hear are generally somewhat different from those used for music. The range of frequencies needed to convey the sounds of a human voice are normally far narrower than that needed for music, and the sound is normally less complex. As a result, speech can be encoded at high quality using a relatively low bit rate.</paragraph><paragraph>If the data to be compressed is analog (such as a voltage that varies with time), quantization is employed to digitize it into numbers (normally integers). This is referred to as analog-to-digital (A/D) conversion. If the integers generated by quantization are 8 bits each, then the entire range of the analog signal is divided into 256 intervals and all the signal values within an interval are quantized to the same number. If 16-bit integers are generated, then the range of the analog signal is divided into 65,536 intervals.</paragraph><paragraph>This relation illustrates the compromise between high resolution (a large number of analog intervals) and high compression (small integers generated). This application of quantization is used by several speech compression methods. This is accomplished, in general, by some combination of two approaches:</paragraph><list type='bullet'><listitem>Only encoding sounds that could be made by a single human voice.</listitem><listitem>Throwing away more of the data in the signalkeeping just enough to reconstruct an &quot;intelligible&quot; voice rather than the full frequency range of human<space/><link><target>hearing (sense)</target><part>hearing</part></link>.</listitem></list><paragraph>Perhaps the earliest algorithms used in speech encoding (and audio data compression in general) were the<space/><link><target>A-law algorithm</target></link><space/>and the<space/><link><target>-law algorithm</target></link>.</paragraph><heading level='4'>History</heading><paragraph><link><target>Image:Placa-audioPC-925.jpg</target><part>size100px</part><part>right</part><part>thumb</part><part>Solidyne 922: The world's first commercial audio bit compression card for PC, 1990</part></link></paragraph><paragraph>A literature compendium for a large variety of audio coding systems was published in the IEEE Journal on Selected Areas in Communications (JSAC), February 1988. While there were some papers from before that time, this collection documented an entire variety of finished, working audio coders, nearly all of them using perceptual (i.e. masking) techniques and some kind of frequency analysis and back-end noiseless coding.<extension extension_name='ref'><template><target>cite web</target><arg name="title">File Compression Possibilities</arg><arg name="url">http://www.hugestreet.info/2015/02/compress-1GB-files-into-10-mb.html</arg><arg name="work">A Brief guide to compress a file in 6 different ways</arg></template></extension><space/>Several of these papers remarked on the difficulty of obtaining good, clean digital audio for research purposes. Most, if not all, of the authors in the JSAC edition were also active in the MPEG-1 Audio committee.</paragraph><paragraph>The world's first commercial<space/><link><target>broadcast automation</target></link><space/>audio compression system was developed by Oscar Bonello, an engineering professor at the<space/><link><target>University of Buenos Aires</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Summary of some of Solidyne's contributions to Broadcast Engineering</arg><arg name="url">http://www.solidynepro.com/indexahtmlp_Hist-ENG,t.htm</arg><arg name="work">Brief History of Solidyne</arg><arg name="publisher">Buenos Aires: Solidyne</arg><arg name="accessdate">6 March 2013</arg></template></extension><space/>In 1983, using the psychoacoustic principle of the masking of critical bands first published in 1967,<extension extension_name='ref'><template><target>cite book</target><arg name="last">Zwicker</arg><arg name="first">Eberhard</arg><arg name="title">The Ear As A Communication Receiver</arg><arg name="year">Originally published in 1967; Translation published in 1999</arg><arg name="publisher">Acoustical Society of America</arg><arg name="location">Melville, NY</arg><arg name="url">http://asa.aip.org/books/ear.html</arg><arg name="author2">and others</arg><arg name="displayauthors">1</arg></template></extension><space/>he started developing a practical application based on the recently developed<space/><link><target>IBM PC</target></link><space/>computer, and the broadcast automation system was launched in 1987 under the name<space/><link><target>Audicom</target></link>. Twenty years later, almost all the radio stations in the world were using similar technology manufactured by a number of companies.</paragraph><heading level='3'>Video</heading><paragraph><template><target>see also</target><arg>Video coding format</arg><arg>Video codec</arg></template>Video compression uses modern coding techniques to reduce redundancy in video data. Most<space/><link><target>List of codecs#Video codecs</target><part>video compression algorithms</part></link><space/>and<space/><link><target>Video codec</target><part>codecs</part></link><space/>combine spatial<space/><link><target>image compression</target></link><space/>and temporal<space/><link><target>motion compensation</target></link>. Video compression is a practical implementation of source coding in information theory. In practice, most video codecs also use audio compression techniques in parallel to compress the separate, but combined data streams as one package.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Video Coding</arg><arg name="url">http://csip.ece.gatech.edu/drupal7/?q</arg><arg name="work">Center for Signal and Information Processing Research</arg><arg name="publisher">Georgia Institute of Technology</arg><arg name="accessdate">6 March 2013</arg></template></extension></paragraph><paragraph>The majority of video compression algorithms use<space/><link><target>lossy compression</target></link>.<space/><link><target>Uncompressed video</target></link><space/>requires a very high<space/><link><target>Uncompressed video#Storage and Data Rates for Uncompressed Video</target><part>data rate</part></link>. Although<space/><link><target>List of codecs#Lossless compression</target><part>lossless video compression</part></link><space/>codecs perform an average compression factor of over 3, a typical<space/><link><target>MPEG-4</target></link><space/>lossy compression video has a compression factor between 20 and 200.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Graphics & Media Lab Video Group</arg><arg name="title">Lossless Video Codecs Comparison</arg><arg name="year">2007</arg><arg name="publisher">Moscow State University</arg><arg name="url">http://compression.ru/video/codec_comparison/pdf/msu_lossless_codecs_comparison_2007_eng.pdf</arg></template></extension><space/>As in all lossy compression, there is a<space/><link><target>trade-off</target></link><space/>between<space/><link><target>video quality</target></link>, cost of processing the compression and decompression, and system requirements. Highly compressed video may present visible or distracting<space/><link><target>compression artifact</target><part>artifacts</part></link>.</paragraph><paragraph>Some video compression schemes typically operate on square-shaped groups of neighboring<space/><link><target>pixel</target><trail>s</trail></link>, often called<space/><link><target>macroblock</target><trail>s</trail></link>. These pixel groups or blocks of pixels are compared from one frame to the next, and the<space/><link><target>video codec</target><part>video compression codec</part></link><space/>sends only the<space/><link><target>residual frame</target><part>differences</part></link><space/>within those blocks. In areas of video with more motion, the compression must encode more data to keep up with the larger number of pixels that are changing. Commonly during explosions, flames, flocks of animals, and in some panning shots, the high-frequency detail leads to quality decreases or to increases in the<space/><link><target>variable bitrate</target></link>.</paragraph><heading level='4'>Encoding theory</heading><paragraph>Video data may be represented as a series of still image frames. The sequence of frames contains spatial and temporal<space/><link><target>redundancy (information theory)</target><part>redundancy</part></link><space/>that video compression algorithms attempt to eliminate or code in a smaller size. Similarities can be encoded by only storing differences between frames, or by using perceptual features of human vision. For example, small differences in color are more difficult to perceive than are changes in brightness. Compression algorithms can average a color across these similar areas to reduce space, in a manner similar to those used in<space/><link><target>JPEG</target></link><space/>image compression.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Lane</arg><arg name="first">Tom</arg><arg name="title">JPEG Image Compression FAQ, Part 1</arg><arg name="url">http://www.faqs.org/faqs/jpeg-faq/part1/</arg><arg name="work">Internet FAQ Archives</arg><arg name="publisher">Independent JPEG Group</arg><arg name="accessdate">6 March 2013</arg></template></extension><space/>Some of these methods are inherently lossy while others may preserve all relevant information from the original,<space/><link><target>uncompressed video</target></link>.</paragraph><paragraph>One of the most powerful techniques for compressing video is interframe compression. Interframe compression uses one or more earlier or later frames in a sequence to compress the current frame, while intraframe compression uses only the current frame, effectively being<space/><link><target>image compression</target></link>.<extension extension_name='ref' name="faxin47"><template><target>cite book</target><arg name="last">Faxin Yu, Hao Luo, Zheming Lu</arg><arg name="title">Three-Dimensional Model Analysis and Processing</arg><arg name="year">2010</arg><arg name="publisher">Springer</arg><arg name="location">Berlin</arg><arg name="isbn">9783642126512</arg><arg name="page">47</arg></template></extension></paragraph><paragraph>The most powerful used method works by comparing each frame in the video with the previous one. If the frame contains areas where nothing has moved, the system simply issues a short command that copies that part of the previous frame, bit-for-bit, into the next one. If sections of the frame move in a simple manner, the compressor emits a (slightly longer) command that tells the decompressor to shift, rotate, lighten, or darken the copy. This longer command still remains much shorter than intraframe compression. Interframe compression works well for programs that will simply be played back by the viewer, but can cause problems if the video sequence needs to be edited.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Bhojani</arg><arg name="first">D.R.</arg><arg name="title">4.1 Video Compression</arg><arg name="url">http://shodh.inflibnet.ac.in/bitstream/123456789/821/5/05_hypothesis.pdf</arg><arg name="work">Hypothesis</arg><arg name="accessdate">6 March 2013</arg></template></extension></paragraph><paragraph>Because interframe compression copies data from one frame to another, if the original frame is simply cut out (or lost in transmission), the following frames cannot be reconstructed properly. Some<space/><link><target>video file format</target><part>video formats</part></link>, such as<space/><link><target>DV</target></link>, compress each frame independently using intraframe compression. Making 'cuts' in intraframe-compressed video is almost as easy as editing uncompressed video: one finds the beginning and ending of each frame, and simply copies bit-for-bit each frame that one wants to keep, and discards the frames one doesn't want. Another difference between intraframe and interframe compression is that, with intraframe systems, each frame uses a similar amount of data. In most interframe systems, certain frames (such as &quot;<link><target>Video compression picture types</target><part>I frames</part></link>&quot; in<space/><link><target>MPEG-2</target></link>) aren't allowed to copy data from other frames, so they require much more data than other frames nearby.<extension extension_name='ref' name="Jaiswal"></extension></paragraph><paragraph>It is possible to build a computer-based video editor that spots problems caused when I frames are edited out while other frames need them. This has allowed newer formats like<space/><link><target>HDV</target></link><space/>to be used for editing. However, this process demands a lot more computing power than editing intraframe compressed video with the same picture quality.</paragraph><paragraph>Today, nearly all commonly used video compression methods (e.g., those in standards approved by the<space/><link><target>ITU-T</target></link><space/>or<space/><link><target>International Organization for Standardization</target><part>ISO</part></link>) apply a<space/><link><target>discrete cosine transform</target></link><space/>(DCT) for spatial redundancy reduction. The DCT that is widely used in this regard was introduced by<space/><link><target>N. Ahmed</target></link>, T. Natarajan and<space/><link><target>K. R. Rao</target></link><space/>in 1974.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Ahmed</arg><arg name="first">N.</arg><arg name="author2">Natarajan, T.<space/></arg><arg name="author3">Rao, K.R.<space/></arg><arg name="title">Discrete Cosine Transform</arg><arg name="journal">IEEE Transactions on Computers</arg><arg name="date">January 1974</arg><arg name="volume">C-23</arg><arg name="issue">1</arg><arg name="pages">90–93</arg><arg name="doi">10.1109/T-C.1974.223784</arg></template></extension><space/>Other methods, such as<space/><link><target>fractal compression</target></link>,<space/><link><target>matching pursuit</target></link><space/>and the use of a<space/><link><target>discrete wavelet transform</target></link><space/>(DWT) have been the subject of some research, but are typically not used in practical products (except for the use of<space/><link><target>wavelet compression</target><part>wavelet coding</part></link><space/>as still-image coders without motion compensation). Interest in fractal compression seems to be waning, due to recent theoretical analysis showing a comparative lack of effectiveness of such methods.<extension extension_name='ref' name="faxin47"></extension></paragraph><heading level='4'>Timeline</heading><paragraph>The following table is a partial history of international video compression standards.</paragraph><table class="wikitable"><tablecaption>History of Video Compression Standards</tablecaption><tablerow style="text-align:center;"><tablehead>Year</tablehead><tablehead>Standard</tablehead><tablehead>Publisher</tablehead><tablehead>Popular Implementations</tablehead></tablerow><tablerow style="text-align:center;"><tablecell style="text-align:left;"><bold>1984</bold></tablecell><tablecell><link><target>H.120</target></link></tablecell><tablecell><link><target>ITU-T</target></link></tablecell><tablecell></tablecell></tablerow><tablerow style="text-align:center;"><tablecell style="text-align:left;"><bold>1988</bold></tablecell><tablecell><link><target>H.261</target></link></tablecell><tablecell><link><target>ITU-T</target></link></tablecell><tablecell>Videoconferencing, Videotelephony</tablecell></tablerow><tablerow style="text-align:center;"><tablecell style="text-align:left;"><bold>1993</bold></tablecell><tablecell><link><target>MPEG-1 Part 2</target></link></tablecell><tablecell><link><target>International Organization for Standardization</target><part>ISO</part></link>,<space/><link><target>International Electrotechnical Commission</target><part>IEC</part></link></tablecell><tablecell><link><target>Video-CD</target></link></tablecell></tablerow><tablerow style="text-align:center;"><tablecell style="text-align:left;"><bold>1995</bold></tablecell><tablecell><link><target>H.262/MPEG-2 Part 2</target></link></tablecell><tablecell><link><target>International Organization for Standardization</target><part>ISO</part></link>,<space/><link><target>International Electrotechnical Commission</target><part>IEC</part></link>,<space/><link><target>ITU-T</target></link></tablecell><tablecell><link><target>DVD</target><part>DVD Video</part></link>,<space/><link><target>Blu-ray Disc</target><part>Blu-ray</part></link>,<space/><link><target>Digital Video Broadcasting</target></link>,<space/><link><target>SVCD</target></link></tablecell></tablerow><tablerow style="text-align:center;"><tablecell style="text-align:left;"><bold>1996</bold></tablecell><tablecell><link><target>H.263</target></link></tablecell><tablecell><link><target>ITU-T</target></link></tablecell><tablecell>Videoconferencing, Videotelephony, Video on Mobile Phones (<link><target>3GP</target></link>)</tablecell></tablerow><tablerow style="text-align:center;"><tablecell style="text-align:left;"><bold>1999</bold></tablecell><tablecell><link><target>MPEG-4 Part 2</target></link></tablecell><tablecell><link><target>International Organization for Standardization</target><part>ISO</part></link>,<space/><link><target>International Electrotechnical Commission</target><part>IEC</part></link></tablecell><tablecell>Video on Internet (<link><target>DivX</target></link>,<space/><link><target>Xvid</target></link><space/>...)</tablecell></tablerow><tablerow style="text-align:center;"><tablecell style="text-align:left;"><bold>2003</bold></tablecell><tablecell><link><target>H.264/MPEG-4 AVC</target></link></tablecell><tablecell><link><target>Sony</target></link>,<space/><link><target>Panasonic</target></link>,<space/><link><target>Samsung</target></link>,<space/><link><target>International Organization for Standardization</target><part>ISO</part></link>,<space/><link><target>International Electrotechnical Commission</target><part>IEC</part></link>,<space/><link><target>ITU-T</target></link></tablecell><tablecell><link><target>Blu-ray Disc</target><part>Blu-ray</part></link>,<space/><link><target>HD DVD</target></link>,<space/><link><target>Digital Video Broadcasting</target></link>,<space/><link><target>iPod Video</target></link>,<space/><link><target>Apple TV</target></link>, videoconferencing</tablecell></tablerow><tablerow style="text-align:center;"><tablecell style="text-align:left;"><bold>2009</bold></tablecell><tablecell><link><target>Dirac (video compression format)</target><part>VC-2 (Dirac)</part></link></tablecell><tablecell><link><target>SMPTE</target></link></tablecell><tablecell>Video on Internet, HDTV broadcast, UHDTV</tablecell></tablerow><tablerow style="text-align:center;"><tablecell style="text-align:left;"><bold>2013</bold></tablecell><tablecell><link><target>H.265</target></link></tablecell><tablecell><link><target>International Organization for Standardization</target><part>ISO</part></link>,<space/><link><target>International Electrotechnical Commission</target><part>IEC</part></link>,<space/><link><target>ITU-T</target></link></tablecell><tablecell></tablecell></tablerow></table><heading level='3'>Genetics</heading><paragraph><template><target>see also</target><arg>Compression of Genomic Re-Sequencing Data</arg></template><link><target>Compression of Genomic Re-Sequencing Data</target><part>Genetics compression algorithms</part></link><space/>are the latest generation of lossless algorithms that compress data (typically sequences of nucleotides) using both conventional compression algorithms and genetic algorithms adapted to the specific datatype. In 2012, a team of scientists from Johns Hopkins University published a genetic compression algorithm that does not use a reference genome for compression. HAPZIPPER was tailored for<space/><link><target>International HapMap Project</target><part>HapMap</part></link><space/>data and achieves over 20-fold compression (95% reduction in file size), providing 2- to 4-fold better compression and in much faster time than the leading general-purpose compression utilities. For this, Chanda, Elhaik, and Bader introduced MAF based encoding (MAFE), which reduces the heterogeneity of the dataset by sorting SNPs by their minor allele frequency, thus homogenizing the dataset.<extension extension_name='ref'><template><target>cite journal</target><arg name="author">Chanda P, Bader JS, Elhaik E</arg><arg name="title">HapZipper: sharing HapMap populations just got easier</arg><arg name="journal">Nucleic Acids Research</arg><arg name="date">27 Jul 2012</arg><arg name="volume">40</arg><arg name="issue">20</arg><arg name="page">e159</arg><arg name="doi">10.1093/nar/gks709</arg><arg name="url">http://nar.oxfordjournals.org/content/40/20/e159.full-text-lowres.pdf<space/></arg><arg name="pmid">22844100</arg><arg name="pmc">3488212</arg><arg name="last2">Elhaik</arg><arg name="last3">Bader</arg></template></extension><space/>Other algorithms in 2009 and 2013 (DNAZip and GenomeZip) have compression ratios of up to 1200-foldallowing 6 billion basepair diploid human genomes to be stored in 2.5 megabytes (relative to a reference genome or averaged over many genomes).<extension extension_name='ref'><template><target>cite journal</target><arg name="journal">Bioinformatics<space/></arg><arg name="date">Jan 15, 2009<space/></arg><arg name="volume">25<space/></arg><arg name="issue">2<space/></arg><arg name="pages">274–5</arg><arg name="title">Human genomes as email attachments<space/></arg><arg name="author">Christley S, Lu Y, Li C, Xie X<space/></arg><arg name="pmid">18996942<space/></arg><arg name="doi">10.1093/bioinformatics/btn582</arg><arg name="last2">Lu<space/></arg><arg name="last3">Li<space/></arg><arg name="last4">Xie<space/></arg></template></extension><extension extension_name='ref'><template><target>cite journal</target><arg name="journal"><space/>Bioinformatics<space/></arg><arg name="date">September 2013<space/></arg><arg name="volume">29</arg><arg name="issue">17<space/></arg><arg name="pages">2199–202<space/></arg><arg name="title">The human genome contracts again<space/></arg><arg name="author">Pavlichin DS, Weissman T, Yona G<space/></arg><arg name="pmid">23793748<space/></arg><arg name="doi">10.1093/bioinformatics/btt362</arg><arg name="last2">Weissman<space/></arg><arg name="last3">Yona<space/></arg></template></extension></paragraph><heading level='2'>Outlook and currently unused potential</heading><paragraph>It is estimated that the total amount of data that is stored on the world's storage devices could be further compressed with existing compression algorithms by a remaining average factor of 4.5:1. It is estimated that the combined technological capacity of the world to store information provides 1,300<space/><link><target>exabytes</target></link><space/>of hardware digits in 2007, but when the corresponding content is optimally compressed, this only represents 295 exabytes of<space/><link><target>Shannon information</target></link>.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Hilbert</arg><arg name="first">Martin</arg><arg name="author2">López, Priscila</arg><arg name="title">The World's Technological Capacity to Store, Communicate, and Compute Information</arg><arg name="journal">Science</arg><arg name="date">1 April 2011</arg><arg name="volume">332</arg><arg name="issue">6025</arg><arg name="pages">60–65</arg><arg name="doi">10.1126/science.1200970</arg><arg name="url">http://www.sciencemag.org/content/332/6025/60</arg><arg name="accessdate">6 March 2013</arg><arg name="pmid">21310967</arg><arg name="bibcode">2011Sci...332...60H</arg></template></extension></paragraph><heading level='2'>See also</heading><paragraph><template><target>too many see alsos</target><arg name="date">November 2011</arg></template><template><target>div col</target><arg name="colwidth">20em</arg></template></paragraph><list type='bullet'><listitem><link><target>Auditory masking</target></link></listitem><listitem><link><target>Calgary corpus</target></link></listitem><listitem><link><target>Canterbury corpus</target></link></listitem><listitem><link><target>Context mixing</target></link></listitem><listitem><link><target>Compression artifact</target></link></listitem><listitem><link><target>Data compression ratio</target></link></listitem><listitem><link><target>Data compression symmetry</target></link></listitem><listitem><link><target>Dictionary coder</target></link></listitem><listitem><link><target>Distributed source coding</target></link></listitem><listitem><link><target>Dyadic distribution</target></link></listitem><listitem><link><target>Dynamic Markov compression</target></link></listitem><listitem><link><target>Elias gamma coding</target></link></listitem><listitem><link><target>Entropy encoding</target></link></listitem><listitem><link><target>Fibonacci coding</target></link></listitem><listitem><link><target>Golomb coding</target></link></listitem><listitem><link><target>HTTP compression</target></link></listitem><listitem><link><target>Kolmogorov complexity</target></link></listitem><listitem><link><target>Magic compression algorithm</target></link></listitem><listitem><link><target>Minimum description length</target></link></listitem><listitem><link><target>Modulo-N code</target></link></listitem><listitem><link><target>Range encoding</target></link></listitem><listitem><link><target>Sub-band coding</target></link></listitem><listitem><link><target>Universal code (data compression)</target></link></listitem><listitem><link><target>Vector quantization</target></link></listitem></list><paragraph><template><target>div col end</target></template></paragraph><heading level='2'>References</heading><paragraph><template><target>reflist</target><arg>30em</arg></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://dvd-hq.info/data_compression_3.php'>Data Compression Basics (Video)</link></listitem><listitem><link type='external' href='http://extranet.ateme.com/download.php?file=1114'>Video compression 4:2:2 10-bit and its benefits</link></listitem><listitem><link type='external' href='http://extranet.ateme.com/download.php?file=1194'>Why does 10-bit save bandwidth (even when content is 8-bit)?</link></listitem><listitem><link type='external' href='http://extranet.ateme.com/download.php?file=1196'>Which compression technology should be used</link></listitem><listitem><link type='external' href='http://media.wiley.com/product_data/excerpt/99/04705184/0470518499.pdf'>Wiley - Introduction to Compression Theory</link></listitem><listitem><link type='external' href='http://tech.ebu.ch/docs/tech/tech3296.pdf'>EBU subjective listening tests on low-bitrate audio codecs</link></listitem><listitem><link type='external' href='http://techgage.com/article/audio_archiving_guide_part_1_-_music_formats/'>Audio Archiving Guide: Music Formats</link><space/>(Guide for helping a user pick out the right codec)</listitem><listitem><template><target>Wayback</target><arg name="date">20070928023157<space/></arg><arg name="url">http://mia.ece.uic.edu/~papers/WWW/MultimediaStandards/chapter7.pdf<space/></arg><arg name="title">MPEG 1&2 video compression intro (pdf format)</arg></template></listitem><listitem><link type='external' href='http://wiki.hydrogenaud.io/index.php?title=Lossless_comparison'>hydrogenaudio wiki comparison</link></listitem><listitem><link type='external' href='http://www.cs.cmu.edu/afs/cs/project/pscico-guyb/realworld/www/compression.pdf'>Introduction to Data Compression</link><space/>by Guy E Blelloch from<space/><link><target>Carnegie Mellon University</target><part>CMU</part></link></listitem><listitem><link type='external' href='http://www.hdgreetings.com/ecard/video-1080p.aspx'>HD Greetings - 1080p Uncompressed source material for compression testing and research</link></listitem><listitem><link type='external' href='http://www.monkeysaudio.com/theory.html'>Explanation of lossless signal compression method used by most codecs</link></listitem><listitem><link type='external' href='http://www.soundexpert.info/'>Interactive blind listening tests of audio codecs over the internet</link></listitem><listitem><link type='external' href='http://www.testvid.com/index.html'>TestVid - 2,000+ HD and other uncompressed source video clips for compression testing</link></listitem><listitem><link type='external' href='http://www.videsignline.com/howto/showArticle.jhtml?articleID=185301351'>Videsignline - Intro to Video Compression</link></listitem><listitem><link type='external' href='http://public.dhe.ibm.com/common/ssi/ecm/en/tsu12345usen/TSU12345USEN.PDF'>Data Footprint Reduction Technology</link></listitem><listitem><link type='external' href='http://siliconmentor.blogspot.in/2014/12/what-is-run-length-coding-in-video.html'>What is Run length Coding in video compression.</link></listitem></list><paragraph><template><target>Compression Methods</target></template><template><target>Compression formats</target></template><template><target>Compression Software Implementations</target></template></paragraph><paragraph><template><target>Authority control</target></template><link><target>Category:Audio engineering</target></link><link><target>Category:Computer storage</target></link><link><target>Category:Data compression</target><part></part></link><link><target>Category:Digital audio</target></link><link><target>Category:Digital television</target></link><link><target>Category:Film and video technology</target></link><link><target>Category:Video compression</target></link><link><target>Category:Videotelephony</target></link><link><target>Category:Utility software types</target></link></paragraph></article>