<article title='Blowfish_%28cipher%29'><paragraph><template><target>two other uses</target><arg>the computer cipher</arg><arg>the fish species</arg><arg>blowfish</arg><arg>other uses</arg><arg>Blowfish (disambiguation)</arg></template></paragraph><preblock><preline><template><target>Infobox block cipher</target><arg name="name"><space/>Blowfish
</arg><arg name="image"><space/>[[Image:BlowfishFFunction.svg|250px|center]]
</arg><arg name="caption"><space/>The round function (Feistel function) of Blowfish
</arg><arg name="designers"><space/>[[Bruce Schneier]]
</arg><arg name="publish date"><space/>1993
</arg><arg name="derived from">
</arg><arg name="derived to"><space/>[[Twofish]]
</arg><arg name="key size"><space/>32–448 bits
</arg><arg name="block size"><space/>64 bits
</arg><arg name="structure"><space/>[[Feistel network]]
</arg><arg name="rounds"><space/>16
</arg><arg name="cryptanalysis"><space/>Four rounds of Blowfish are susceptible to a second-order [[differential attack]] (Rijmen, 1997);<ref name</arg></template></preline></preblock><paragraph><bold>Blowfish</bold><space/>is a<space/><link><target>Symmetric-key algorithm</target><part>symmetric-key</part></link><space/><link><target>block cipher</target></link>, designed in 1993 by<space/><link><target>Bruce Schneier</target></link><space/>and included in a large number of cipher suites and encryption products. Blowfish provides a good encryption rate in software and no effective<space/><link><target>cryptanalysis</target></link><space/>of it has been found to date. However, the<space/><link><target>Advanced Encryption Standard</target></link><space/>(AES) now receives more attention.</paragraph><paragraph>Schneier designed Blowfish as a general-purpose algorithm, intended as an alternative to the aging<space/><link><target>Data Encryption Standard</target><part>DES</part></link><space/>and free of the problems and constraints associated with other algorithms. At the time Blowfish was released, many other designs were proprietary, encumbered by<space/><link><target>patent</target><trail>s</trail></link><space/>or were commercial or government secrets. Schneier has stated that, &quot;Blowfish is unpatented, and will remain so in all countries. The algorithm is hereby placed in the<space/><link><target>public domain</target></link>, and can be freely used by anyone.&quot;</paragraph><paragraph>Notable features of the design include key-dependent<space/><link><target>S-box</target><trail>es</trail></link><space/>and a highly complex<space/><link><target>key schedule</target></link>.</paragraph><heading level='2'>The algorithm</heading><paragraph>Blowfish has a 64-bit<space/><link><target>block size (cryptography)</target><part>block size</part></link><space/>and a variable<space/><link><target>key length</target></link><space/>from 32 bits up to 448 bits.<extension extension_name='ref' name="blowfish-paper"><template><target>cite paper</target><arg name="url">https://www.schneier.com/paper-blowfish-fse.html
</arg><arg name="title">Description of a New Variable-Length Key, 64-Bit Block Cipher (Blowfish)
</arg><arg name="author">[[Bruce Schneier]]
</arg><arg name="work">[[Fast Software Encryption]], Cambridge Security Workshop Proceedings
</arg><arg name="publisher">[[Springer-Verlag]]
</arg><arg name="pages">191–204
</arg><arg name="year">1993</arg></template></extension><space/>It is a 16-round<space/><link><target>Feistel cipher</target></link><space/>and uses large key-dependent<space/><link><target>Substitution box</target><part>S-boxes</part></link>. In structure it resembles<space/><link><target>CAST-128</target></link>, which uses fixed S-boxes.</paragraph><paragraph><link><target>File:BlowfishDiagram.png</target><part>left</part><part>thumbnail</part><part>128px</part><part>The Feistel structure of Blowfish</part></link></paragraph><paragraph>The diagram to the left shows the action of Blowfish. Each line represents 32 bits. The algorithm keeps two subkey arrays: the 18-entry P-array and four 256-entry S-boxes. The S-boxes accept 8-bit input and produce 32-bit output. One entry of the P-array is used every round, and after the final round, each half of the data block is<space/><link><target>Exclusive or</target><part>XORed</part></link><space/>with one of the two remaining unused P-entries.</paragraph><paragraph>The diagram to the upper right shows Blowfish's F-function. The function splits the 32-bit input into four eight-bit quarters, and uses the quarters as input to the S-boxes. The outputs are added<space/><link><target>modular arithmetic</target><part>modulo</part></link><space/>2<xhtml:sup>32</xhtml:sup><space/>and XORed to produce the final 32-bit output.</paragraph><paragraph>Decryption is exactly the same as encryption, except that P1, P2,..., P18 are used in the reverse order. This is not so obvious because xor is commutative and associative. A common misconception is to use inverse order of encryption as decryption algorithm (i.e. first XORing P17 and P18 to the ciphertext block, then using the P-entries in reverse order).</paragraph><paragraph>Blowfish's<space/><link><target>key schedule</target></link><space/>starts by initializing the P-array and S-boxes with values derived from the<space/><link><target>hexadecimal</target></link><space/>digits of<space/><link><target>pi</target></link>, which contain no obvious pattern (see<space/><link><target>nothing up my sleeve number</target></link>). The secret key is then, byte by byte, cycling the key if necessary, XORed with all the P-entries in order. A 64-bit all-zero block is then encrypted with the algorithm as it stands. The resultant ciphertext replaces P<xhtml:sub>1</xhtml:sub><space/>and P<xhtml:sub>2</xhtml:sub>. The same ciphertext is then encrypted again with the new subkeys, and the new ciphertext replaces P<xhtml:sub>3</xhtml:sub><space/>and P<xhtml:sub>4</xhtml:sub>. This continues, replacing the entire P-array and all the S-box entries. In all, the Blowfish encryption algorithm will run 521 times to generate all the subkeys - about 4KB of data is processed.</paragraph><paragraph>Because the P-array is 576 bits long, and the key bytes are XORed through all these 576 bits during the initialization, many implementations support key sizes up to 576 bits. While this is certainly possible, the 448 bits limit is here to ensure that every bit of every subkey depends on every bit of the key,<extension extension_name='ref' name="blowfish-paper"></extension><space/>as the last four values of the P-array don't affect every bit of the ciphertext. This point should be taken in consideration for implementations with a different number of rounds, as even though it increases security against an exhaustive attack, it weakens the security guaranteed by the algorithm. And given the slow initialization of the cipher with each change of key, it is granted a natural protection against brute-force attacks, which doesn't really justify key sizes longer than 448 bits.<extension extension_name='source' lang="cpp"><paragraph>uint32_t P[18];uint32_t S[4][256];</paragraph><paragraph>uint32_t f (uint32_t x) {</paragraph><preblock><preline><space/><space/>uint32_t h = S[0][x &gt;&gt; 24] + S[1][x &gt;&gt; 16 &amp; 0xff];</preline><preline><space/><space/>return ( h ^ S[2][x &gt;&gt; 8 &amp; 0xff] ) + S[3][x &amp; 0xff];</preline></preblock><paragraph>}</paragraph><paragraph>void encrypt (uint32_t &amp; L, uint32_t &amp; R) {</paragraph><preblock><preline><space/><space/>for (int i=0 ; i&lt;16 ; i += 2) {</preline><preline><space/><space/><space/><space/><space/>L ^= P[i];</preline><preline><space/><space/><space/><space/><space/>R ^= f(L);</preline><preline><space/><space/><space/><space/><space/>R ^= P[i+1];</preline><preline><space/><space/><space/><space/><space/>L ^= f(R);</preline><preline><space/><space/>}</preline><preline><space/><space/>L ^= P[16];</preline><preline><space/><space/>R ^= P[17];</preline><preline><space/><space/>swap (L, R);</preline></preblock><paragraph>}</paragraph><paragraph>void decrypt (uint32_t &amp; L, uint32_t &amp; R) {</paragraph><preblock><preline><space/><space/>for (int i=16 ; i &gt; 0 ; i -= 2) {</preline><preline><space/><space/><space/><space/><space/>L ^= P[i+1];</preline><preline><space/><space/><space/><space/><space/>R ^= f(L);</preline><preline><space/><space/><space/><space/><space/>R ^= P[i];</preline><preline><space/><space/><space/><space/><space/>L ^= f(R);</preline><preline><space/><space/>}</preline><preline><space/><space/>L ^= P[1];</preline><preline><space/><space/>R ^= P[0];</preline><preline><space/><space/>swap (L, R);</preline></preblock><paragraph>}</paragraph><paragraph>{</paragraph><preblock><preline><space/><space/>// ...</preline><preline><space/><space/>// initializing the P-array and S-boxes with values derived from pi; omitted in the example</preline><preline><space/><space/>// ...</preline><preline><space/><space/>for (int i=0 ; i&lt;18 ; ++i)</preline><preline><space/><space/><space/><space/><space/>P[i] ^= key[i % keylen];</preline><preline><space/><space/>uint32_t L = 0, R = 0;</preline><preline><space/><space/>for (int i=0 ; i&lt;18 ; i+=2) {</preline><preline><space/><space/><space/><space/><space/>encrypt (L, R);</preline><preline><space/><space/><space/><space/><space/>P[i] = L; P[i+1] = R;</preline><preline><space/><space/>}</preline><preline><space/><space/>for (int i=0 ; i&lt;4 ; ++i)</preline><preline><space/><space/><space/><space/><space/>for (int j=0 ; j&lt;256; j+=2) {</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/>encrypt (L, R);</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/>S[i][j] = L; S[i][j+1] = R;</preline><preline><space/><space/><space/><space/><space/>}</preline></preblock><paragraph>}</paragraph></extension></paragraph><heading level='2'>Blowfish in practice</heading><paragraph>Blowfish is a fast<space/><link><target>block cipher</target></link>, except when changing keys. Each new<space/><link><target>key (cryptography)</target><part>key</part></link><space/>requires pre-processing equivalent to encrypting about 4 kilobytes of text, which is very slow compared to other block ciphers. This prevents its use in certain applications, but is not a problem in others.</paragraph><paragraph>In one application Blowfish's slow key changing is actually a benefit: the<space/><link><target>password</target></link>-hashing method used in<space/><link><target>OpenBSD</target></link><space/>uses an algorithm derived from Blowfish that makes use of the slow key schedule; the idea is that the extra computational effort required gives protection against<space/><link><target>dictionary attack</target><trail>s</trail></link>.<space/><italics>See</italics><space/><link><target>key stretching</target></link>.</paragraph><paragraph>Blowfish has a memory footprint of just over 4 kilobytes of<space/><link><target>Random Access Memory</target><part>RAM</part></link>. This constraint is not a problem even for older desktop and<space/><link><target>laptop computers</target></link>, though it does prevent use in the smallest<space/><link><target>embedded systems</target></link><space/>such as early<space/><link><target>smartcard</target><trail>s</trail></link>.</paragraph><paragraph>Blowfish was one of the first secure block ciphers not subject to any patents and therefore freely available for anyone to use. This benefit has contributed to its popularity in cryptographic software.</paragraph><paragraph>bcrypt is a cross-platform file encryption utility implementing Blowfish developed in 2002.<extension extension_name='ref'>http://bcrypt.sourceforge.net bcrypt file encryption program homepage</extension><space/><extension extension_name='ref'>http://bcrypt463065.android.informer.com/</extension><extension extension_name='ref'>http://www.t2-project.org/packages/bcrypt.html</extension><extension extension_name='ref'>https://docs.oracle.com/cd/E51849_01/gg-winux/OGGLC/ogglc_licenses.htm</extension><extension extension_name='ref'>http://www.solvusoft.com/en/file-extensions/file-extension-bfe/</extension></paragraph><heading level='2'>Weakness and successors</heading><paragraph>Blowfish is known to be susceptible to attacks on reflectively weak keys.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://cs.columbusstate.edu/cae-ia/StudentPapers/Y2010_TheFall/StudentPapers_CPSC6126/PaperGonzalezTom.pdf
</arg><arg name="title">A Reﬂection Attack on Blowﬁsh
</arg><arg name="author">Tom Gonzalez
</arg><arg name="date">January 2007
</arg><arg name="publisher">JOURNAL OF LATEX CLASS FILES</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.iacr.org/archive/fse2007/45930168/45930168.pdf
</arg><arg name="title">A New Class of Weak Keys for Blowfish
</arg><arg name="author">Orhun Kara and Cevat Manap
</arg><arg name="date">March 2007
</arg><arg name="publisher">FSE 2007</arg></template></extension><space/>This means Blowfish users must carefully select keys as there is a class of keys known to be weak, or switch to more modern alternatives like the<space/><link><target>Advanced Encryption Standard</target></link>,<space/><link><target>Salsa20</target></link>, or Blowfish's more modern successors<space/><link><target>Twofish</target></link><space/>and<space/><link><target>Threefish</target></link>. Bruce Schneier, Blowfish's creator, is quoted in 2007 as saying &quot;At this point, though, I'm amazed it's still being used. If people ask, I recommend Twofish instead.&quot;<extension extension_name='ref' name="schneier-interview-dec-2007"><template><target>cite web</target><arg name="url"><space/>https://www.computerworld.com.au/article/46254/bruce_almighty_schneier_preaches_security_linux_faithful/
</arg><arg name="title"><space/>Bruce Almighty: Schneier preaches security to Linux faithful
</arg><arg name="last"><space/>Dahna
</arg><arg name="first"><space/>McConnachie
</arg><arg name="date"><space/>2007-12-27
</arg><arg name="work"><space/>[[Computerworld]]
</arg><arg name="page"><space/>3
</arg><arg name="archiveurl">http://www.webarchive.org.uk/mementos/search/https%3A//www.computerworld.com.au/article/46254/bruce_almighty_schneier_preaches_security_linux_faithful/%3Fpp%3D3?referrer</arg><arg name="archivedate">2014-04-20
<space/></arg><arg name="quote"><space/>At this point, though, I'm amazed it's still being used. If people ask, I recommend Twofish instead.
</arg></template></extension><space/>The<space/><link><target>FAQ</target></link><space/>for<space/><link><target>GnuPG</target></link><space/>(which features Blowfish as one of its algorithms) recommends that Blowfish should<space/><italics>not</italics><space/>be used to encrypt files that are larger than 4 Gb because of its small 64-bit block size.<extension extension_name='ref'>http://www.gnupg.org/faq/gnupg-faq.html#define_fish</extension></paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Advanced Encryption Standard</target><part>AES</part></link></listitem><listitem><link><target>Twofish</target></link></listitem><listitem><link><target>Threefish</target></link></listitem><listitem><link><target>MacGuffin (cipher)</target><part>MacGuffin</part></link></listitem></list><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>commons category</target><arg>Blowfish (cipher)</arg></template></paragraph><list type='bullet'><listitem><template><target>cite web</target><arg name="url">https://www.schneier.com/blowfish.html
</arg><arg name="title">The Blowfish Encryption Algorithm
</arg><arg name="author">Bruce Schneier</arg></template></listitem></list><list type='bullet'><listitem><template><target>cite web</target><arg name="url">https://www.schneier.com/blowfish-products.html
</arg><arg name="title">Products that Use Blowfish
</arg><arg name="author">Bruce Schneier</arg></template></listitem></list><list type='bullet'><listitem><template><target>cite web</target><arg name="url">http://www.users.zetnet.co.uk/hopwood/crypto/scan/cs.html#Blowfish
</arg><arg name="title">Standard Cryptographic Algorithm Naming: Blowfish</arg></template></listitem></list><paragraph><template><target>Cryptography navbox</target><arg><space/>block</arg></template></paragraph><paragraph><template><target>DEFAULTSORT:Blowfish (Cipher)</target></template><link><target>Category:Feistel ciphers</target></link><link><target>Category:Free ciphers</target></link></paragraph></article>