<article title='Data_General_Nova'><paragraph><link><target>File:Data General NOVA System.jpg</target><part>thumb</part><part>A Nova system (beige and yellow, center bottom) and a cartridge hard disk system (opened, below Nova) in a mostly empty rack mount.</part></link><link><target>Image:Nova1200.agr.jpg</target><part>thumb</part><part>288px</part><part>right</part><part>Data General Nova 1200 front panel</part></link><link><target>File:Emi1010.jpg</target><part>thumb</part><part>288px</part><part>right</part><part>A Nova 1200, mid-right, controlled the first commercial CAT machine.</part></link>The<space/><bold>Data General Nova</bold><space/>was a popular<space/><link><target>16-bit</target></link><space/><link><target>minicomputer</target></link><space/>built by the American company<space/><link><target>Data General</target></link><space/>starting in 1969. The Nova was packaged into a single<space/><link><target>rack mount</target></link><space/>case and had enough power to do most simple computing tasks. The Nova became popular in science laboratories around the world, and eventually 50,000 units were sold. It was succeeded by the<space/><link><target>Data General Eclipse</target></link>, which was similar in most ways but added<space/><link><target>virtual memory</target></link><space/>support and other features required by modern<space/><link><target>operating system</target><trail>s</trail></link>.</paragraph><heading level='2'>History</heading><heading level='3'>de Castro and the Novas origin</heading><paragraph><link><target>Edson de Castro</target></link><space/>was the Product Manager at<space/><link><target>Digital Equipment Corporation</target><part>Digital Equipment Corporation (DEC)</part></link><space/>of their pioneering<space/><link><target>PDP-8</target></link>, a 12-bit computer generally considered by most to be the first true minicomputer. De Castro was convinced, however, that it was possible to improve upon the PDP-8 by building a 16-bit minicomputer on a single board.<space/><link><target>Ken Olsen</target></link><space/>was not supportive of this project, so de Castro left DEC along with another hardware engineer, Richard Sogge, and a software engineer,<space/><link><target>Henry Burkhardt III</target></link>, to found<space/><link><target>Data General</target></link><space/>(DG) in 1968. The fourth founder,<space/><link><target>Herbert Richman</target></link>, had been a salesman for<space/><link><target>Fairchild Semiconductor</target></link><space/>and knew the others through his contacts with Digital Equipment.</paragraph><paragraph>In keeping with the original concept, the Nova was based on two<space/><template><target>convert</target><arg>15</arg><arg>x</arg><arg>15</arg><arg>in</arg><arg>cm</arg></template><space/><link><target>printed circuit board</target><trail>s</trail></link>, one for the CPU and another for various support systems. The boards were designed so they could be connected together using a printed circuit<space/><link><target>backplane</target></link>, with minimal manual wiring, allowing all the boards to be built in an automated fashion. This greatly reduced costs over the rival PDP-8 and PDP-8/I, which consisted of many smaller boards that had to be wired together at the backplane. The larger-board construction also made the Nova more reliable, which made it especially attractive for industrial or lab settings.<space/><link><target>Fairchild Semiconductor</target></link><space/>provided the<space/><link><target>medium-scale integration</target></link><space/>(MSI) chips used throughout the system. The Nova was one of the first<space/><link><target>16-bit</target></link><space/>minicomputers and was a leader in moving to<space/><link><target>Word (data type)</target><part>word</part></link><space/>lengths that were multiples of the<space/><link><target>8-bit</target></link><space/><link><target>byte</target></link><space/>in that market.<space/></paragraph><paragraph>DG released the Nova in 1969 at a base price of US$3,995, advertising it as &quot;the best small computer in the world.&quot; The basic model was not very useful out of the box, and adding RAM in the form of<space/><link><target>core memory</target></link><space/>typically brought the price up to $7,995. Starting in 1969,<space/><link><target>Data General</target></link><space/>shipped a total of 50,000 Novas at $8000 each.<template><target>cn</target><arg name="date">March 2014</arg></template><space/>The Novas biggest competition was from the new DEC<space/><link><target>PDP-11</target></link><space/>computer series, and to a lesser extent the older DEC<space/><link><target>PDP-8</target></link><space/>systems. It has been said that the Nova was crude compared to its competitors; but it was quite effective and very fast for its day, at least at its low-cost end of the market.</paragraph><heading level='3'>SuperNOVA</heading><paragraph>A further improvement on the Nova design followed the next year, the<space/><bold>SuperNOVA</bold>. The SuperNOVA included a number of improvements that dramatically improved performance over the original model. This included the use of<space/><link><target>Read-only memory</target><part>ROM</part></link><space/>for library software that could be run much faster than the same code in the normal<space/><link><target>core memory</target></link>, due to the latters need to be written immediately after being read. Additionally the system included a new set of core with an 800&amp;nbsp;ns cycle time, faster than the originals 1200&amp;nbsp;ns version. Finally the SuperNOVA also replaced the earlier models 4-bits-at-a-time math unit with a new 16-bit parallel version, speeding math by up to four times.</paragraph><paragraph>Soon after the introduction of the SuperNOVA, the<space/><bold>SuperNOVA SC</bold><space/>was introduced, featuring semiconductor (SC) memory in place of core. The much higher performance memory allowed the CPU, which was synchronous with memory, to be further increased in speed to run at a 300 ns cycle time (3.3&amp;nbsp;MHz), which made it the fastest minicomputer for over a decade following its introduction.</paragraph><heading level='3'>Later versions</heading><paragraph><link><target>Image:Nova-840.jpg</target><part>thumb</part><part>Running Nova 840</part></link><link><target>Image:Dg-nova3.jpg</target><part>thumb</part><part>288px</part><part>right</part><part>Data General Nova 3</part></link><link><target>Image:Dg-pcb.jpg</target><part>thumb</part><part>288px</part><part>right</part><part>Nova 3<space/><link><target>printed circuit board</target></link></part></link></paragraph><paragraph>Further improvements in the line followed in 1970/1 with a pair of machines that replaced the Nova/SuperNOVA, the<space/><bold>Nova 1200</bold><space/>and<space/><bold>Nova 800</bold><space/>series. The 1200 used 1200&amp;nbsp;ns core while the 800 featured the SuperNOVAs 800&amp;nbsp;ns core, explaining the somewhat confusing naming where the lower number represents the faster machine. Like the earlier models, the 1200 used a 4-bit math unit while the 800 used the SuperNOVAs 16-bit unit. Both models were offered in a variety of cases, the 1200 with seven slots, the 1210 with four and the 1220 with fourteen. The 840, first offered in 1973, also included a new paged memory system allowing for addresses of up to 17-bits. An index offset the base address into the larger 128&amp;nbsp;kWord memory. Actually installing this much memory required considerable space; the 840 shipped in a large 14-slot case.</paragraph><paragraph>The next version was the<space/><bold>Nova 2</bold>, with the first versions shipping in 1973. The Nova 2 was essentially a simplified version of the earlier machines as increasing chip densities allowed the CPU to be reduced in size. While the SuperNOVA used three 1515&quot; boards to implement the CPU and its memory, the Nova 2 fitted all of this onto a single board. ROM was used to store the boot code, which was then copied into core when the program load switch was flipped. Versions were available with four, seven and ten slots.</paragraph><paragraph>The<space/><bold>Nova 3</bold><space/>of 1975 added two more registers, used to control access to a built-in stack. The processor was also re-implemented using<space/><link><target>Transistortransistor logic</target><part>TTL</part></link><space/>components, further increasing the performance of the system. The Nova 3 was offered in four-slot (the Nova 3/4) and twelve-slot (the Nova 3/12) versions.</paragraph><paragraph>It appears that Data General originally intended the Nova 3 to be the last of its line, planning to replace the Nova with the later Eclipse machines. However, continued demand led to a<space/><bold>Nova 4</bold><space/>machine, this time based on four<space/><link><target>Am2900#Am2901</target><part>AMD 2901</part></link><space/><link><target>bit-slice</target></link><space/><link><target>Arithmetic logic unit</target><part>ALU</part><trail>s</trail></link>. This machine was designed from the start to be both the Nova 4 and the Eclipse S/140, with different<space/><link><target>microcode</target></link><space/>for each. A floating-point co-processor was also available, taking up a separate slot. An additional option allowed for memory mapping, allowing programs to access up to 128&amp;nbsp;kWords of memory using<space/><link><target>bank switching</target></link>. Unlike the earlier machines, the Nova 4 did not include a<space/><link><target>front panel</target><part>front panel console</part></link><space/>and instead relied on the<space/><link><target>Terminal (electronics)</target><part>terminal</part></link><space/>to emulate a console when needed.</paragraph><paragraph>There were three different versions of the Nova 4, the Nova 4/C, the Nova 4/S and the Nova 4/X. The Nova 4/C was a single-board implementation that included all of the memory (16 or 32&amp;nbsp;kWords). The Nova 4/S and 4/X used separate memory boards. The Nova 4/X had the on-board<space/><link><target>memory management unit</target></link><space/>(MMU) enabled to allow up to 128&amp;nbsp;kWords of memory to be used (the MMU was also installed in the Nova 4/S, but was disabled by firmware). Both the 4/S and the 4/X included a prefetcher to increase performance by fetching up to two instructions from memory before they were needed.</paragraph><heading level='3'>microNOVA</heading><paragraph>Data General also produced a series of single-chip implementations of the Nova processor as the<space/><bold>microNOVA</bold>. Changes to the bus architecture limited speed dramatically, to the point where it was about one-half the speed of the original Nova. The original microNOVA with the mN601 processor shipped in 1977. It was followed by the<space/><bold>microNOVA MP/100</bold><space/>in 1979, which reduced the CPU to a single<space/><link><target>VLSI</target></link><space/>chip, the mN602. A larger version was also offered as the<space/><bold>microNOVA MP/200</bold>, shipping the same year.</paragraph><paragraph>The microNOVA was later re-packaged in a PC-style case with two<space/><link><target>floppy disk</target><trail>s</trail></link><space/>as the<space/><bold>Enterprise</bold>. Enterprise shipped in 1981, running<space/><link><target>Data General RDOS</target><part>RDOS</part></link>, but the introduction of the<space/><link><target>IBM PC</target></link><space/>the same year made most other machines disappear under the radar.</paragraph><heading level='3'>Novas legacy</heading><paragraph>The Nova influenced the design of both the<space/><link><target>Xerox Alto</target></link><space/>(1973) and<space/><link><target>Apple I</target></link><space/>(1976) computers, and its architecture was the basis for the<space/><link><target>Computervision</target></link><space/>CGP (Computervision Graphics Processor) series. Its external design has been reported to be the direct inspiration for the front panel of the<space/><link><target>Altair 8800</target><part>MITS Altair</part></link><space/>(1975) microcomputer.</paragraph><paragraph>Data General followed up on the success of the original Nova with a series of faster designs. The Eclipse family of systems was later introduced with an extended upwardly compatible instruction set, and the MV-series further extended the Eclipse into a 32-bit architecture to compete with the DEC<space/><link><target>VAX</target></link>. The development of the MV-series was documented in<space/><link><target>Tracy Kidder</target></link>s popular 1981 book,<space/><italics><link><target>The Soul of a New Machine</target></link></italics>. Data General itself would later evolve into a vendor of Intel processor-based servers and storage arrays, eventually being purchased by<space/><link><target>EMC Corporation</target><part>EMC</part></link>.</paragraph><paragraph><template><target>As of</target><arg>2004</arg></template><space/>there are still 16-bit Novas and<space/><link><target>Data General Eclipse</target><part>Eclipse</part><trail>s</trail></link><space/>running in a variety of applications worldwide, including air traffic control<template><target>Citation needed</target><arg name="date">August 2008</arg></template>. There is a diverse but ardent group of people worldwide who restore and preserve legacy 16-bit Data General systems<template><target>Citation needed</target><arg name="date">August 2008</arg></template>.</paragraph><heading level='2'>Technical description</heading><heading level='3'>Processor design</heading><table class="infobox" style="font-size:88%"><tablerow><tablecell style="text-align:center"><bold>Data General Nova registers</bold></tablecell></tablerow><tablerow><tablecell><table style="font-size:88%;"><tablerow><tablecell style="width:10px; text-align:center;"><xhtml:sup>1</xhtml:sup><xhtml:sub>5</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>1</xhtml:sup><xhtml:sub>4</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>1</xhtml:sup><xhtml:sub>3</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>1</xhtml:sup><xhtml:sub>2</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>1</xhtml:sup><xhtml:sub>1</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>1</xhtml:sup><xhtml:sub>0</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>9</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>8</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>7</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>6</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>5</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>4</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>3</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>2</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>1</xhtml:sub></tablecell><tablecell style="width:10px; text-align:center;"><xhtml:sup>0</xhtml:sup><xhtml:sub>0</xhtml:sub></tablecell><tablecell style="width:auto;"><italics>(bit position)</italics></tablecell></tablerow><tablerow><tablecell colspan="17"><bold>Accumulator registers</bold><space/><xhtml:br></xhtml:br></tablecell></tablerow><tablerow style="background:silver;color:black"><tablecell style="text-align:center;" colspan="16">0</tablecell><tablecell style="background:white; color:black;">Register 0</tablecell></tablerow><tablerow style="background:silver;color:black"><tablecell style="text-align:center;" colspan="16">1</tablecell><tablecell style="background:white; color:black;">Register 1</tablecell></tablerow><tablerow><tablecell colspan="17"><bold>Index registers</bold><space/><xhtml:br></xhtml:br></tablecell></tablerow><tablerow style="background:silver;color:black"><tablecell style="text-align:center;" colspan="16">2</tablecell><tablecell style="background:white; color:black;">Index Register 2</tablecell></tablerow><tablerow style="background:silver;color:black"><tablecell style="text-align:center;" colspan="16">3</tablecell><tablecell style="background:white; color:black;">Index Register 3</tablecell></tablerow><tablerow><tablecell colspan="17"><bold>Program counter</bold><space/><xhtml:br></xhtml:br></tablecell></tablerow><tablerow style="background:silver;color:black"><tablecell style="text-align:center; background:white" colspan="1">&amp;nbsp;</tablecell><tablecell style="text-align:center;" colspan="15">PC<space/><template><target>0</target><arg>&nbsp; &nbsp;</arg></template></tablecell><tablecell style="background:white; color:black;"><bold>P</bold>rogram<space/><bold>C</bold>ounter</tablecell></tablerow><tablerow><tablecell colspan="17"><bold>Status register</bold></tablecell></tablerow><tablerow style="background:silver;color:black"><tablecell style="text-align:center; background:white" colspan="15">&amp;nbsp;</tablecell><tablecell style="text-align:center;"><link><target>Carry flag</target><part>C</part></link></tablecell><tablecell style="background:white; color:black"><bold>C</bold>arry flag</tablecell></tablerow></table></tablecell></tablerow></table><paragraph>The Nova, unlike the<space/><link><target>PDP-8</target></link>, was a<space/><link><target>load-store architecture</target></link>. It had four 16-bit<space/><link><target>Accumulator (computing)</target><part>accumulator</part></link><space/>registers, of which two (2 and 3) could be used as<space/><link><target>index register</target><trail>s</trail></link>. There was a 15-bit<space/><link><target>program counter</target></link><space/>and a single-bit<space/><link><target>carry flag</target><part>carry</part></link><space/>register. As with the PDP-8, current +<space/><link><target>zero page</target></link><space/>addressing was central. There was no<space/><link><target>stack register</target></link>, but later Eclipse designs would utilize a dedicated hardware memory address for this function.</paragraph><paragraph>The earliest models of the Nova processed math serially in 4-bit packets, using a single<space/><link><target>74181</target></link><space/><link><target>bit slicing</target><part>bitslice</part></link><space/><link><target>Arithmetic logic unit</target><part>ALU</part></link>. A year after its introduction this design was improved to include a full 16-bit parallel math unit using four 74181s, this design being referred to as the SuperNova. Future versions of the system added a stack unit and hardware multiply/divide.</paragraph><paragraph>The Nova 4 / Eclipse S/140 was based on four<space/><link><target>Am2900#Am2901</target><part>AMD 2901</part></link><space/>bit-slice ALUs, with<space/><link><target>microcode</target></link><space/>in<space/><link><target>read-only memory</target></link>, and was the first Nova designed for<space/><link><target>DRAM</target></link><space/>main memory only, without provision for<space/><link><target>magnetic core memory</target></link>.</paragraph><heading level='3'>Memory and I/O</heading><paragraph>The first models were available with 8<link><target>K</target></link><space/><link><target>Word (data type)</target><part>word</part><trail>s</trail></link><space/>of<space/><link><target>magnetic core memory</target></link><space/>as an option, one that practically everyone had to buy, bringing the system cost up to $7,995.<space/></paragraph><paragraph>This core memory board, Part Number 50823 D8 7504-14166, and with layout artwork copyrighted 1971 by DGC, was organized in planar fashion as four groups of four banks, each bank carrying two sets of core in a 64 by 64 matrix; thus there were 64 x 64 = 4096 bits per set, x 2 sets giving 8,192 bits, x 4 banks giving 32,768 bits, x 4 groups giving a total of 131,072 bits, and this divided by the machine word size of 16 bits gave 8,192 Words of memory.<space/></paragraph><paragraph>The core on this 8K Word memory board occupied a centrally located 'board-on-a-board' 5.25&quot; wide by 6.125&quot; high and was covered by a protective plate. It was surrounded by the necessary support driver read-write-rewrite circuitry and epitomized the state of the art of core memory, soon to be replaced by solid state memory. Even here DG managed to innovate, packing this very small core and the corresponding support electronics onto a single standard 15 x<space/><template><target>convert</target><arg>15</arg><arg>in</arg><arg>mm</arg><arg name="adj">on</arg></template><space/>board. Up to 32K of such core<space/><link><target>random-access memory</target><part>RAM</part></link><space/>could be supported in one external expansion box.<space/><link><target>Semiconductor</target></link><space/><link><target>read-only memory</target><part>ROM</part></link><space/>was already available at the time, and RAM-less systems (i.e. with ROM only) became popular in many industrial settings. The original Nova machines ran at approximately 200<space/><link><target>kilohertz</target><part>kHz</part></link>, but its SuperNova was designed to run at up to 3&amp;nbsp;MHz when used with special semiconductor main memory.</paragraph><paragraph>The standardized<space/><link><target>backplane</target></link><space/>and<space/><link><target>input/output</target><part>I/O</part></link><space/>signals created a simple, efficient I/O design that made interfacing programmed I/O and Data Channel devices to the Nova simple compared to competing machines. In addition to its dedicated I/O bus structure, the Nova backplane had<space/><link><target>wire wrap</target></link><space/>pins that could be used for non-standard connectors or other special purposes.</paragraph><heading level='3'>Programming model</heading><paragraph>The<space/><link><target>instruction set</target><part>instruction format</part></link><space/>could be broadly categorized into one of three functions:<space/><extension extension_name='nowiki'>1) register-to-register manipulation, 2) memory reference, and 3)</extension><space/>input/output. Each instruction was contained in one word. The register-to-register manipulation was almost<space/><link><target>RISC</target></link>-like in its bit-efficiency; and an instruction that manipulated register data could also perform tests, shifts and even elect to discard the result. Hardware options included an integer multiply and divide unit, a<space/><link><target>floating-point unit</target></link><space/>(single and double precision), and<space/><link><target>memory management</target></link>.</paragraph><paragraph><link><target>Image:Dg-papertapes.jpg</target><part>thumb</part><part>288px</part><part>right</part><part>Data General software on punched<space/><link><target>paper tape</target></link>.</part></link>The earliest Nova came with a<space/><link><target>BASIC programming language</target><part>BASIC</part></link><space/>interpreter on<space/><link><target>paper tape</target></link>. As the product grew, Data General developed many languages for the Nova computers, running under a range of consistent operating systems.<space/><link><target>FORTRAN IV</target></link>,<space/><link><target>ALGOL</target></link>, Extended BASIC,<space/><link><target>Data General Business Basic</target></link>, Interactive<space/><link><target>COBOL</target></link>, and several assemblers were available from Data General. Third party vendors and the user community expanded the offerings with<space/><link><target>Forth (programming language)</target><part>Forth</part></link>,<space/><link><target>Lisp programming language</target><part>Lisp</part></link>,<space/><link><target>BCPL</target></link>,<space/><link><target>C (programming language)</target><part>C</part></link>,<space/><link><target>ALGOL</target><part>Algol</part></link>, and other proprietary versions of<space/><link><target>COBOL</target></link><space/>and<space/><link><target>BASIC programming language</target><part>BASIC</part></link>.</paragraph><heading level='3'>Instruction set</heading><paragraph>The machine instructions implemented below are the common set implemented by all of the Nova series processors. Specific models often implemented additional instructions, and some instructions were provided by optional hardware.</paragraph><heading level='4'>Arithmetic instructions</heading><paragraph>All arithmetic instructions operated between accumulators. For operations requiring two operands, one was taken from the source accumulator, and one from the destination accumulator, and the result was deposited in the destination accumulator. For single-operand operations, the operand was taken from the source register and the result replaced the destination register. For all single-operand opcodes, it was permissible for the source and destination accumulators to be the same, and the operation functioned as expected.</paragraph><paragraph>All arithmetic instructions included a &quot;no-load&quot; bit which, when set, suppressed the transfer of the result to the destination register; this was used in conjunction with the test options to perform a test without losing the existing contents of the destination register. In assembly language, adding a '#' to the opcode set the no-load bit.<space/></paragraph><paragraph>The CPU contained a single-bit register called the carry bit, which after an arithmetic operation would contain the carry out of the most significant bit. The carry bit could be set to a desired value prior to performing the operation using a two-bit field in the instruction. The bit could be set, cleared, or complemented prior to performing the instruction. In assembly language, these options were specified by adding a letter to the opcode: 'O' set the carry bit; 'Z' clear the carry bit, 'C' complement the carry bit, nothing leave the carry bit alone. If the no-load bit was also specified, the specified carry value would be used for the computation, but the actual carry register would remain unaltered.</paragraph><paragraph>All arithmetic instructions included a two-bit field which could be used to specify a shift option, which would be applied to the result before it was loaded into the destination register. A single-bit left or right shift could be specified, or the two bytes of the result could be swapped. Shifts were 17-bit circular, with the carry bit &quot;to the left&quot; of the most significant bit. In other words, when a left shift was performed, the most significant bit of the result was shifted into the carry bit, and the previous contents of the carry bit were shifted into the least significant bit of the result. Byte swaps did not effect the carry bit. In assembly language, these options were specified by adding a letter to the opcode: 'L' shift left; 'R' shift right, 'S' swap bytes; nothing do not perform a shift or swap.<space/></paragraph><paragraph>All arithmetic instructions included a three-bit field that could specify a test which was to be applied to the result of the operation. If the test evaluated to true, the next instruction in line was skipped. In assembly language, the test option was specified as a third operand to the instruction. The available tests were:</paragraph><list type='bullet'><listitem>SZR skip on zero result</listitem><listitem>SNR skip on nonzero result</listitem><listitem>SZC skip on zero carry</listitem><listitem>SNC skip on nonzero carry</listitem><listitem>SBN skip if both carry and result are nonzero</listitem><listitem>SEZ skip if either carry or result, or both, is zero</listitem><listitem>SKP always skip</listitem><listitem>nothing never skip</listitem></list><paragraph>The actual arithmetic instructions were:</paragraph><list type='bullet'><listitem>MOV move the contents of the source accumulator to the destination accumulator</listitem><listitem>COM move the bitwise complement of the source accumulator to the destination accumulator</listitem><listitem>ADD add source accumulator to destination accumulator</listitem><listitem>ADC take the bitwise complement of the source accumulator and add it to the destination accumulator</listitem><listitem>NEG move the negative the of the source accumulator to the destination accumulator</listitem><listitem>SUB subtract the contents source accumulator from the destination accumulator</listitem><listitem>INC add 1 to the contents of the source accumulator and move to the destination accumulator</listitem><listitem>AND perform the bitwise AND of the two accumulators and place the result in the destination accumulator</listitem></list><paragraph>An example arithmetic instructions, with all options utilized, is:</paragraph><paragraph>ADDZR# 0,2,SNC</paragraph><paragraph>This decoded as: clear the carry bit; add the contents of AC2 (accumulator 2) to AC0; circularly shift the result one bit to the right; test the result to see if the carry bit is set and skip the next instruction if so. Discard the result after performing the test. In effect, this adds two numbers and tests to see if the result is odd or even.<space/></paragraph><heading level='4'>Memory reference instructions</heading><paragraph>The Nova instruction set contained a pair of instructions that transferred memory contents to accumulators and vice versa, two transfer-of-control instructions, and two instructions that tested the contents of a memory location. All memory reference instructions contained an eight-bit address field, and a two-bit field that specified the mode of memory addressing. The four modes were:</paragraph><list type='bullet'><listitem>Mode 0 absolute addressing. The contents of the address field of the instruction is zero-filled on the left and used as the target address.</listitem><listitem>Mode 1 relative addressing. The contents of the address field of the instruction is sign extended to the left and added to the current value of the program counter (which, by the time the instruction executes, points to the next instruction). The result is used as the target address.</listitem><listitem>Mode 2 indexed addressing. The contents of the address field of the instruction is sign extended to the left and added to the current value of accumulator 2. The result is used as the target address.</listitem><listitem>Mode 3 indexed addressing. The contents of the address field of the instruction is sign extended to the left and added to the current value of accumulator 3. The result is used as the target address.</listitem></list><paragraph>Obviously, mode 0 was only capable of addressing the first 256 memory words, given the eight-bit address field. This portion of memory was referred to as &quot;page zero&quot;. Page zero memory words were considered precious to Nova assembly language programmers because of the small number available; only page zero locations could be addressed from anywhere in the program without resorting to indexed addressing, which required tying up accumulator 2 or 3 to use as an index register. In assembly language, a &quot;.ZREL&quot; directive caused the assembler to place the instructions and data words that followed it in page zero; an &quot;.NREL&quot; directive placed the following instructions and data words in &quot;normal&quot; memory. Later Nova models added instructions with extended addressing fields, which overcame this difficulty (at a performance penalty).<space/></paragraph><paragraph>The assembler computed relative offsets for mode 1 automatically, although it was also possible to write it explicitly in the source. If a memory reference instruction referenced a memory address in .NREL space but no mode specifier, mode 1 was assumed and the assembler calculated the offset between the current instruction and the referenced location, and placed this in the instruction's address field (provided that the resulting value fit into the 8-bit field).<space/></paragraph><paragraph>The two load and store instructions were:</paragraph><list type='bullet'><listitem>LDA load the contents of a memory location into the specified accumulator.</listitem><listitem>STA store the contents of the specified accumulator into a memory location.</listitem></list><paragraph>Both of these instructions included an &quot;indirect&quot; bit. If this bit was set (done in assembly language by adding a '@' to the opcode), the contents of the target address were assumed to be a memory address itself, and that address would be referenced to do the load or store.<space/></paragraph><paragraph>The two transfer-of-control instructions were:</paragraph><list type='bullet'><listitem>JMP transfers control to the specified memory location</listitem><listitem>JSR (&quot;jump subroutine&quot;) Does the same as the JMP instruction, but additionally loads the return address (the instruction following the JSR instruction in line) into accumulator 3 before jumping.<space/></listitem></list><paragraph>As in the case of the load and store instructions, the jump instructions contained an indirect bit, which likewise was specified in assembly using the '@' character. In the case of an indirect jump, the processor retrieved the contents of the target location, and used the value as the memory address to jump to. However, unlike the load and store instructions, if the indirect address had the most significant bit set, it would perform a further cycle of indirection. On the Nova series processors prior to the Nova 3, there was no limit on the number of indirection cycles; an indirect address that referenced itself would result in an infinite indirect addressing loop, with the instruction never completing. (This could be alarming to users, since when in this condition, pressing the STOP switch on the front panel did nothing. It was necessary to reset the machine to break the loop.)</paragraph><paragraph>The two memory test instructions were:</paragraph><list type='bullet'><listitem>ISZ increment the memory location, and skip the next instruction if the result is zero.</listitem><listitem>DSZ decrement the memory location, and skip the next instruction if the result is zero.</listitem></list><paragraph>As in the case of the load and store instructions, there was an indirect bit that would perform a single level of indirect addressing. These instructions were odd in that, on the Novas with magnetic core memory, the instruction was executed within the memory board itself. As was common at the time, the memory boards contained a &quot;write-back&quot; circuit to solve the destructive-read problem inherent to magnetic core memory. But the write-back mechanism also contained a mini arithmetic unit, which the processor used for several purposes. For the ISZ and DSZ instructions, the increment or decrement occurred between the memory location being read and the write-back; the CPU simply waited to be told if the result was zero or nonzero. These instructions were useful because they allowed a memory location to be used as a loop counter without tying up an accumulator, but they were slower than performing the equivalent arithmetic instructions.</paragraph><paragraph>Some examples of memory reference instructions:</paragraph><paragraph>LDA 1,COUNT</paragraph><paragraph>Transfers the contents of the memory location labeled COUNT into accumulator 1. Assuming that COUNT is in .NREL space, this instruction is equivalent to: LDA 1,1,(COUNT-(.+1))where '.' represents the location of the LDA instruction.</paragraph><paragraph>JSR@ 0,17</paragraph><paragraph>Jump indirect to the memory address specified by the contents of location 17, in page zero space, and deposit the return address in accumulator 3. This was the standard method for making an RDOS system call on early Nova models; the assembly language mnemonic &quot;.SYSTM&quot; translated to this.</paragraph><paragraph>JMP 3,0</paragraph><paragraph>Jump to the memory location whose address is contained in accumulator 3. This was a common means of returning from a function or subroutine call, since the JSR instruction left the return address in accumulator 3.<space/></paragraph><paragraph>STA 0,3,-1</paragraph><paragraph>Store the contents of accumulator 0 in the location that is one less than the address contained in accumulator 3.</paragraph><paragraph>DSZ COUNT</paragraph><paragraph>Decrement the value in the location labeled COUNT, and skip the next instruction if the result is zero. As in the case above, if COUNT is assumed to be in .NREL space, this is equivalent to: DSZ 1,(COUNT-(.+1))</paragraph><heading level='4'>I/O Instructions</heading><paragraph>The Novas implemented a channelized model for interfacing to I/O devices. In the model, each I/O device was expected to implement two flags, referred to as &quot;Busy&quot; and &quot;Done&quot;, and three data and control registers, referred to as A, B, and C. I/O instructions were available to read and write the registers, and to send one of three signals to the device, referred to as &quot;start&quot;, &quot;clear&quot;, and &quot;pulse&quot;. In general, sending a start signal initiated an I/O operation that had been set up by loading values into the A/B/C registers. The clear signal halted an I/O operation and cleared any resulting interrupt. The pulse signal was used to initiate ancillary operations on complex subsystems, such as seek operations on disk drives. Polled devices usually moved data directly between the device and the A register. DMA devices generally used the A register to specify the memory address, the B register to specify the number of words to be transferred, and the C register for control flags. Channel 63 referred to the CPU itself and was used for various special functions.<space/></paragraph><paragraph>Each I/O instruction contained a six-bit channel number field, a four-bit to specify which register to read or write, and a two-bit field to specify which signal was to be sent. In assembly language, the signal was specified by adding a letter to the opcode: 'S' for start, 'C' for clear, 'P' for pulse, and nothing for no signal. The opcodes were:</paragraph><list type='bullet'><listitem>DIA move the contents of the device's A register to the specified accumulator</listitem><listitem>DOA send the contents of the specified accumulator to the A register of the device on the specified channel</listitem><listitem>DIB move the contents of the device's B register to the specified accumulator</listitem><listitem>DOB send the contents of the specified accumulator to the B register of the device on the specified channel</listitem><listitem>DIC move the contents of the device's C register to the specified accumulator</listitem><listitem>DOC send the contents of the specified accumulator to the C register of the device on the specified channel</listitem><listitem>NIO &quot;no I/O&quot;, a misnomer. The instruction was used to send a signal to a device without doing a register transfer.</listitem></list><paragraph>In addition, four instructions were available to test the status of a device:</paragraph><list type='bullet'><listitem>SKPBN skip the next instruction if the device's busy flag is set</listitem><listitem>SKPBZ skip the next instruction if the device's busy flag is clear</listitem><listitem>SKPDN skip the next instruction if the device's done flag is set</listitem><listitem>SKPDZ skip the next instruction if the device's done flag is clear</listitem></list><paragraph>Starting a device caused it to set its busy flag. When the requested operation was completed, conventionally the device cleared its busy flag and set its done flag; most devices had their interrupt request mechanism wired to the done flag, so setting the done flag caused an interrupt (if interrupts were enabled and the device wasn't masked).<space/></paragraph><heading level='4'>Special Instructions</heading><paragraph>These instructions performed various CPU control and status functions. All of them were actually shorthand mnemonics for I/O instructions on channel 63, the CPU's self-referential I/O channel.</paragraph><list type='bullet'><listitem>INTA interrupt acknowledge. Transferred the channel number of the interrupting device to the specified accumulator.</listitem><listitem>INTDS disabled all interrupts</listitem><listitem>INTEN enabled all interrupts</listitem><listitem>IORST I/O reset. Sent a reset signal on the I/O bus, which stopped all I/O, disabled interrupts and cleared all pending interrupts.</listitem><listitem>MSKO mask out. Used the contents of the specified accumulator to set up the interrupt mask. How the mask was interpreted was up to the implementation of each I/O device. Some devices could not be masked.</listitem><listitem>READS transferred the contents of the 16 front panel data switches to the specified accumulator.</listitem><listitem>HALT stopped the CPU. Once halted, the CPU could be made to start again only by manual intervention at the front panel.</listitem></list><heading level='3'>Front panel layout</heading><paragraph>As was the convention of the day, most Nova models provided a front panel console to control and monitor CPU functions. Models prior to the Nova 3 all relied on a canonical front panel layout, as shown in the Nova 840 panel photo above. The layout contained a keyed power switch, two rows of address and data display lamps, a row of data entry switches, and a row of function switches that activated various CPU functions when pressed. The address lamps always displayed the current value of the program counter, in binary. The data lamps displayed various values depending on which CPU function was active at the moment. To the left of the leftmost data lamp, an additional lamp displayed the current value of the carry bit. On most models the lamps were incandescent lamps which were soldered to the panel board; replacing burned-out lamps was a bane of existence for Data General field service engineers.<space/></paragraph><paragraph>Each of the data switches controlled the value of one bit in a 16-bit value, and per Data General convention, they were numbered 0-15 from left to right. The data switches provided input to the CPU for various functions, and could also be read by a running program using the READS assembly language instruction. To reduce panel clutter and save money, the function switches were implemented as two-way momentary switches. When a function switch lever was lifted, it triggered the function whose name was printed above the switch on the panel; when the lever was pressed down, it activated the function whose name appeared below the switch. The switch lever returned to a neutral position when released.</paragraph><paragraph>Referencing the Nova 840 photo, the first four switches from the left performed the EXAMINE and DEPOSIT functions for the four accumulators. Pressing EXAMINE on one of these caused the current value of the accumulator to be displayed in binary by the data lamps. Pressing DEPOSIT transferred the binary value represented by the current settings of the data switches to the accumulator.<space/></paragraph><paragraph>Going to the right, the next switch was the RESET/STOP switch. Pressing STOP caused the CPU to halt after completing the current instruction. Pressing RESET caused the CPU to halt immediately, cleared a number of CPU internal registers, and sent an I/O reset signal to all connected devices. The switch to the right of that was the START/CONTINUE switch. Pressing CONTINUE caused the CPU to resume executing at the instruction currently pointed at by the program counter. Pressing START transferred the value currently set in data switches 1-15 to the program counter, and then began executing from there.</paragraph><paragraph>The next two switches provided read and write access to memory from the front panel. Pressing EXAMINE transferred the value set in data switches 1-15 to the program counter, fetched the value in the corresponding memory location, and displayed its value in the data lamps. Pressing EXAMINE NEXT incremented the program counter and then performed an examine operation on that memory location, allowing the user to step through a series of memory locations. Pressing DEPOSIT wrote the value contained in the data switches to the memory location pointed at by the program counter. Pressing DEPOSIT NEXT first incremented the program counter and then deposited to the pointed-to memory location.<space/></paragraph><paragraph>The INST STEP function caused the CPU to execute one instruction, at the current program counter location, and then halt. Since the program counter would be incremented as part of the instruction execution, this allowed the user to single-step through a program. MEMORY STEP, a misnomer, caused the CPU to run through a single clock cycle and halt. This was of little use to users and was generally only used by field service personnel for diagnostics.<space/></paragraph><paragraph>PROGRAM LOAD was the mechanism usually used to boot a Nova. When this switch was triggered, it caused the 32-word boot ROM to be mapped over the first 32 words of memory, set the program counter to 0, and started the CPU. The boot ROM contained code that would read 256 words (512) bytes of code from a selected I/O device into memory and then transfer control to the read-in code. The data switches 8-15 were used to tell the boot ROM which I/O channel to boot from. If switch 0 was off, the boot ROM would assume the device was a polled device (e.g., the paper tape reader) and run a polled input loop until 512 bytes had been read. If switch 0 was on, the boot room assumed the device was a DMA-capable device and it initiated a DMA data transfer. The boot ROM was not smart enough to position the device prior to initiating the transfer. This was a problem when rebooting after a crash; if the boot device was a disk drive, its heads had likely been left on a random cylinder. They had to be repositioned to cylinder 0, where RDOS wrote the first-level boot block, in order for the boot sequence to work. Conventionally this was done by cycling the drive through its load sequence, but users who got frustrated with the wait time (up to 5 minutes depending on the drive model) learned how to input from the front panel a drive &quot;recalibrate&quot; I/O code and single-step the CPU through it, an operation that took an experienced user only a few seconds.<space/></paragraph><paragraph>The power switch was a 3-way keyed switch with positions marked OFF, ON, and LOCK. In the OFF position all power was removed from the CPU. Turning the key to ON applied power to the CPU. However, unlike current CPUs, the CPU did not start automatically when power was applied; the user had to use PROGRAM LOAD or some other method to start the CPU and initiate the boot sequence. Turning the switch to LOCK disabled the front panel function switches; by turning the switch to LOCK and removing the key, the user could render the CPU resistant to tampering. On systems with magnetic core memory, the LOCK position also enabled the auto power failure recovery function. The key could be removed in the OFF or LOCK positions.</paragraph><heading level='3'>Performance</heading><paragraph>The Nova 1200 executed core memory access instructions (LDA and STA) in 2.55 microseconds (s). Use of read only memory saved 0.4 s. Accumulator instructions (ADD, SUB, COM, NEG, etc.) took 1.55 s, MUL 2.55 s, DIV 3.75 s, ISZ 3.15-4.5 s.<extension extension_name='ref'>Technical Manual Nova 1200, Data General 015-000002, 1971, p.1-4</extension><space/>On the later Eclipse MV/6000, LDA and STA took 0.44 s, ADD, etc. took 0.33 s, MUL 2.2 s, DIV 3.19 s, ISZ 1.32 s, FAD 5.17 s, FMMD 11.66 s.<extension extension_name='ref'>Eclipse MV/6000 Principles of Operation, Data General 014-000648, 1980, App. F</extension></paragraph><heading level='2'>Assembly language examples</heading><heading level='3'>Hello world program</heading><paragraph>This is a minimal programming example in Nova assembly language. It is designed to run under<space/><link><target>Data General RDOS</target><part>RDOS</part></link><space/>and prints the string<space/><link><target>Hello world program</target><part>Hello, world.</part></link><space/>on the console.</paragraph><preblock><preline><space/><space/><space/>; a &quot;hello, world&quot; program for Nova running RDOS</preline><preline><space/><space/><space/>; uses PCHAR system call</preline><preline><space/><space/><space/>.titl hello</preline><preline><space/><space/><space/>.nrel</preline><preline><space/><space/><space/>.ent start</preline><preline></preline><preline>start:</preline><preline>dochar:</preline><preline><space/><space/><space/>lda 0,@pmsg ; load ac0 with next character,</preline><preline><space/><space/><space/>mov# 0,0,snr ; test ac0; skip if nonzero (don't load result)</preline><preline><space/><space/><space/>jmp done</preline><preline><space/><space/><space/>.systm</preline><preline><space/><space/><space/>.pchar ; print first</preline><preline><space/><space/><space/>jmp er ; skipped if OK</preline><preline><space/><space/><space/>movs 0,0 ; swap bytes</preline><preline><space/><space/><space/>.systm</preline><preline><space/><space/><space/>.pchar ; print second</preline><preline><space/><space/><space/>jmp er ; skipped if OK</preline><preline><space/><space/><space/>isz pmsg ; point to next character</preline><preline><space/><space/><space/>jmp dochar ; go around again</preline><preline></preline><preline>done:</preline><preline><space/><space/><space/>.systm ; normal exit</preline><preline><space/><space/><space/>.rtn</preline><preline>er:</preline><preline><space/><space/><space/>.systm ; error exit</preline><preline><space/><space/><space/>.ertn</preline><preline><space/><space/><space/>halt</preline><preline></preline><preline>pmsg:</preline><preline><space/><space/><space/>.+1 ; pointer to first character of string</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; note bytes are packed right-to-left by default</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/>; &lt;15&gt;&lt;12&gt; denotes a CR LF pair.</preline><preline><space/><space/><space/>.txt /Hello, world.&lt;15&gt;&lt;12&gt;/</preline><preline><space/><space/><space/>0 ; flag word to end string</preline><preline></preline><preline><space/><space/><space/>.end start</preline></preblock><heading level='3'>16-bit multiplication</heading><paragraph>Basic models of the Nova came without built-in hardware multiply and divide capability, to keep prices competitive. The following routine multiplies two 16-bit words to produce a 16-bit word result (overflow is ignored). It demonstrates combined use of ALU op, shift, and test (skip). Note that when this routine is called by<space/><xhtml:tt>jsr</xhtml:tt>, AC3 holds the<space/><link><target>return address</target></link>. This is used by the return instruction<space/><xhtml:tt>jmp 0,3</xhtml:tt>. An idiomatic way to clear an accumulator is<space/><xhtml:tt>sub 0,0</xhtml:tt>. Other single instructions can be arranged to load a specific set of useful constants (e.g. -2, -1, or +1).</paragraph><preblock><preline>mpy:	; multiply AC0 &lt;- AC1 * AC2, by Toby Thain</preline><preline></preline><preline>	sub 0,0		; clear result</preline><preline>mbit:	movzr 1,1,szc	; shift multiplier, test lsb</preline><preline>	add 2,0		; 1: add multiplicand</preline><preline>	movzl 2,2,szr	; shift and test for zero</preline><preline>	jmp mbit	; not zero, do another bit</preline><preline>	jmp 0,3		; return</preline></preblock><heading level='3'>Binary print accumulator</heading><paragraph>The following routine prints the value of AC1 as a 16 digit<space/><link><target>binary number</target></link>, on the RDOS console. It reveals further quirks of the Nova instruction set. For instance, there is no instruction to load an arbitrary immediate value into an accumulator (although memory reference instructions do encode such a value to form an effective address). Accumulators must generally be loaded from initialized memory locations (e.g.<space/><xhtml:tt>n16</xhtml:tt>). Other contemporary machines such as the<space/><link><target>PDP-11</target></link>, and practically all modern architectures, allow for immediate loads, although many such as<space/><link><target>ARM architecture</target><part>ARM</part></link><space/>restrict the range of values that can be loaded immediately.</paragraph><paragraph>Because the RDOS<space/><xhtml:tt>.systm</xhtml:tt><space/>call macro implements a<space/><xhtml:tt>jsr</xhtml:tt>, AC3 is overwritten by the return address for the<space/><xhtml:tt>.pchar</xhtml:tt><space/>function. Therefore a temporary location is needed to preserve the return address of the caller of this function. For a recursive or otherwise re-entrant routine, a stack, hardware if available, software if not, must be used instead. The return instruction becomes<space/><xhtml:tt>jmp @ retrn</xhtml:tt><space/>which exploits the Nova's indirect addressing mode to load the return PC.<space/></paragraph><paragraph>The constant definitions at the end show two assembler features: the assembler radix is<space/><link><target>octal</target></link><space/>by default (<xhtml:tt>20</xhtml:tt><space/>= sixteen), and character constants could be encoded as e.g.<space/><xhtml:tt>&quot;0</xhtml:tt>.</paragraph><preblock><preline>pbin: ; print AC1 on console as 16 binary digits, by Toby Thain</preline><preline></preline><preline><space/><space/><space/><space/><space/><space/><space/>sta 3,retrn ; save return addr</preline><preline><space/><space/><space/><space/><space/><space/><space/>lda 2,n16 ; set up bit counter</preline><preline>loop: lda 0,chr0 ; load ASCII '0'</preline><preline><space/><space/><space/><space/><space/><space/><space/>movzl 1,1,szc ; get next bit in carry</preline><preline><space/><space/><space/><space/><space/><space/><space/>inc 0,0 ; bump to '1'</preline><preline><space/><space/><space/><space/><space/><space/><space/>.systm</preline><preline><space/><space/><space/><space/><space/><space/><space/>.pchar ; AC0-2 preserved</preline><preline><space/><space/><space/><space/><space/><space/><space/>jmp err ; if error</preline><preline><space/><space/><space/><space/><space/><space/><space/>inc 2,2,szr ; bump counter</preline><preline><space/><space/><space/><space/><space/><space/><space/>jmp loop ; loop again if not zero</preline><preline><space/><space/><space/><space/><space/><space/><space/>lda 0,spc ; output a space</preline><preline><space/><space/><space/><space/><space/><space/><space/>.systm</preline><preline><space/><space/><space/><space/><space/><space/><space/>.pchar</preline><preline><space/><space/><space/><space/><space/><space/><space/>jmp err ; if error</preline><preline><space/><space/><space/><space/><space/><space/><space/>jmp @retrn</preline><preline></preline><preline>spc: &quot; ;that's a space</preline><preline>chr0: &quot;0</preline><preline>n16: -20</preline><preline>retrn: 0</preline></preblock><heading level='2'>Emulating a Data General Nova</heading><paragraph>Nova assembly language programs can be run under Bob Supniks<space/><link><target>SIMH</target></link><space/>emulator, in RDOS. Of the above examples, only<space/><italics>Hello, world</italics><space/>is a complete program. It includes the necessary directives for a successful assembly and generation of a runnable program.<space/></paragraph><paragraph><bold><italics>Stepwise instructions</italics></bold></paragraph><paragraph>Start the Nova emulation and boot RDOS following the instructions under Nova and Eclipse RDOS in the file<space/><xhtml:tt>src/simh_swre.txt</xhtml:tt><space/>of the simh distribution. After booting, RDOS command prompt,<space/><xhtml:tt>R</xhtml:tt>, should appear on the screen.<space/></paragraph><list type='bullet'><listitem>Before the first assembly on a newly setup RDOS system, the macro assemblers default symbol definitions need to be configured using the following command:<space/><xhtml:tt>&lt;u&gt;mac/s nbid osid nsid paru</xhtml:tt>&lt;/u&gt;</listitem><listitem>Create the assembly source file under RDOS:<space/><xhtml:u><xhtml:tt>xfer/a $tti test.sr</xhtml:tt></xhtml:u><space/>(the<space/><xhtml:tt>xfer</xhtml:tt><space/>command will accept input at the console and copy it to a disk file named<space/><xhtml:tt>test.sr</xhtml:tt>; after entering the command, copy and paste (or type in) a complete assembly language program, and finish with<space/><link><target>control-Z</target></link>).</listitem><listitem>Next, run the macro assembler on<space/><xhtml:tt>test.sr</xhtml:tt><space/>to create the object file<space/><xhtml:tt>test.rb</xhtml:tt>:<space/><xhtml:u><xhtml:tt>mac/l test</xhtml:tt></xhtml:u><space/>(the<space/><xhtml:tt>/l</xhtml:tt><space/>[slash-ell] option enables the listing file<space/><xhtml:tt>test.ls</xhtml:tt>, which can be copied to the console using the command<space/><xhtml:u><xhtml:tt>type test.ls</xhtml:tt></xhtml:u>).</listitem><listitem>The relocatable loader,<space/><xhtml:tt>rldr</xhtml:tt>, takes the object file and creates the executable<space/><xhtml:tt>test.sv</xhtml:tt><space/>:<space/><xhtml:u><xhtml:tt>rldr test</xhtml:tt></xhtml:u></listitem><listitem>To run the program, type<space/><xhtml:u><xhtml:tt>test</xhtml:tt></xhtml:u></listitem></list><paragraph>Before going further with serious experimentation, it can be convenient to check ones programs at the PC using a suitable cross-assembler, such as the portable PDP-8/DG Nova cross-assembler listed in the External links section, before attempting execution in the RDOS environment.</paragraph><paragraph><bold><italics>RDOS hints</italics></bold></paragraph><list type='bullet'><listitem>To have a directory listing of all files with the base name<space/><xhtml:tt>test</xhtml:tt>, type<space/><xhtml:u><xhtml:tt>list test.-</xhtml:tt></xhtml:u><space/>(note the hyphen, RDOS<space/><link><target>wildcard character</target></link>)</listitem><listitem>Delete files with<space/><xhtml:u><xhtml:tt>delete</xhtml:tt></xhtml:u><space/>(this might be needed because<space/><xhtml:tt>xfer</xhtml:tt><space/>wont replace an existing file)</listitem><listitem>A running program can usually be interrupted with Control-A</listitem><listitem>To exit RDOS, type<space/><xhtml:u><xhtml:tt>release %mdir%</xhtml:tt></xhtml:u></listitem><listitem>Quit simh at its prompt with<space/><xhtml:u><xhtml:tt>q</xhtml:tt></xhtml:u></listitem></list><heading level='2'>Facts</heading><paragraph>The Canadian Broadcasting Corporation in Montreal used the Nova 1200 for channel play-out automation up until the late 80's. It was then replaced with refurbished Nova 4 units and these were in use until the mid 90's.</paragraph><heading level='2'>References</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://simh.trailing-edge.com'>Bob Supniks SimH project</link><space/>&amp;ndash; Includes a basic Nova emulator in a user-modifiable package</listitem><listitem><link type='external' href='http://pcc.ludd.ltu.se/'>The portable C compiler includes a NOVA target.</link></listitem><listitem><link type='external' href='http://www.NovasAreForever.org'>Novas Are Forever (SimuLogics) website</link><space/>&amp;ndash; Attempts to archive everything DG plus provide free and commercial products</listitem><listitem><link type='external' href='http://www.telegraphics.com.au/sw/info/dpa.html'>A portable PDP-8 and DG Nova cross-assembler</link></listitem><listitem><link type='external' href='http://users.rcn.com/crfriend/museum/doco/DG/Nova/'>Carl Friends Minicomputer Museum</link><space/>&amp;ndash; Describes the Nova instruction set in detail</listitem></list><paragraph><link><target>Category:Minicomputers</target></link><link><target>Category:Data General</target></link></paragraph></article>