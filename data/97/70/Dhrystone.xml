<article title='Dhrystone'><paragraph><bold>Dhrystone</bold><space/>is a<space/><link><target>#Dhrystone_vs._Whetstone</target><part>synthetic</part></link><space/>computing<space/><link><target>Benchmark (computing)</target><part>benchmark</part></link><space/>program developed in 1984 by<space/><link><target>Reinhold P. Weicker</target></link><space/>intended to be representative of system (integer) programming. The Dhrystone grew to become representative of general processor (<link><target>CPU</target></link>) performance. The name &quot;Dhrystone&quot; is a pun on a different benchmark algorithm called<space/><link><target>Whetstone (benchmark)</target><part>Whetstone</part></link>.<extension extension_name='ref'><link><target>Pun</target></link>: w<bold>h</bold>etstone wet stone dry stone d<bold>h</bold>rystone.</extension></paragraph><paragraph>With Dhrystone, Weicker gathered meta-data from a broad range of software, including programs written in<space/><link><target>FORTRAN</target></link>,<space/><link><target>PL/1</target></link>, SAL,<space/><link><target>ALGOL 68</target></link>, and<space/><link><target>Pascal (programming language)</target><part>Pascal</part></link>. He then characterized these programs in terms of various common constructs: procedure calls, pointer<space/><link><target>indirection</target><trail>s</trail></link>, assignments, etc. From this he wrote the Dhrystone benchmark to correspond to a representative mix. Dhrystone was published in<space/><link><target>Ada (programming language)</target><part>Ada</part></link>, with the<space/><link><target>C (programming language)</target><part>C</part></link><space/>version for<space/><link><target>Unix</target></link><space/>developed by Rick Richardson (&quot;version 1.1&quot;) greatly contributing to its popularity.</paragraph><heading level='2'>Dhrystone vs. Whetstone</heading><paragraph>The Dhrystone benchmark contains no<space/><link><target>floating point</target></link><space/>operations, thus the name is a pun on the then-popular<space/><link><target>Whetstone (benchmark)</target><part>Whetstone</part></link><space/>benchmark for floating point operations. The output from the benchmark is the number of Dhrystones per second (the number of iterations of the main code loop per second).</paragraph><paragraph>Both Whetstone and Dhrystone are<space/><italics>synthetic</italics><space/>benchmarks, meaning that they are simple programs that are carefully designed to statistically mimic the processor usage of some common set of programs. Whetstone, developed in 1972, originally strove to mimic typical Algol 60 programs based on measurements from 1970, but eventually became most popular in its Fortran version, reflecting the highly numerical orientation of computing in the 1960s.</paragraph><heading level='2'>Issues addressed by Dhrystone</heading><paragraph>Dhrystone's eventual importance as an indicator of general-purpose (&quot;integer&quot;) performance of new computers made it a target for commercial compiler writers. Various modern compiler<space/><link><target>static code analysis</target></link><space/>techniques (such as<space/><link><target>dead code elimination</target><part>elimination of dead code</part></link>: for example, code which uses the processor but produces internal results which are not used or output) make the use and design of synthetic benchmarks more difficult. Version 2.0 of the benchmark, released by Weicker and Richardson in March 1988, had a number of changes intended to foil a range of compiler techniques. Yet it was carefully crafted so as not to change the underlying benchmark. This effort to foil compilers was only partly successful. Dhrystone 2.1, released in May of the same year, had some minor changes and<space/><template><target>As of</target><arg>2010</arg><arg>7</arg><arg name="lc">on</arg></template><space/>remains the current definition of Dhrystone.</paragraph><paragraph>Other than issues related to compiler optimization, various other issues have been cited with the Dhrystone. Most of these, including the small code size and small data set size, were understood at the time of its publication in 1984. More subtle is the slight over-representation of string operations, which is largely language-related: both Ada and Pascal have strings as normal variables in the language, whereas C does not, so what was simple variable assignment in reference benchmarks became buffer copy operations in the C library. Another issue is that the score reported does not include information which is critical when comparing systems such as which compiler was used, and what optimizations.</paragraph><paragraph>Dhrystone remains remarkably resilient as a simple benchmark, but its continuing value in establishing true performance is questionable. It is easy to use, well documented, fully self-contained, well understood, and can be made to work on almost any system. In particular, it has remained in broad use in the embedded computing world, though the recently developed<space/><bold><link><target>EEMBC</target></link></bold><space/>benchmark suite, HINT, Stream, and even Bytemark are widely quoted and used, as well as more specific benchmarks for the memory subsystem (Cachebench), TCP/IP (TTCP), and many others.</paragraph><paragraph>Dhrystone remains in use 30 years after it was designed by Weicker, a longer life than most software.</paragraph><heading level='2'>Dhrystone vs. CoreMark</heading><paragraph><link><target>CoreMark</target></link><space/>is a small benchmark released by the non-profit Embedded Microprocessor Benchmark Consortium (<link><target>EEMBC</target></link>) that targets the CPU core, similar to Dhrystone. Both benchmarks are available free of charge and are small enough to execute on any processor, including small micro-controllers. CoreMark avoids issues such as the compiler computing the work during compile time, and uses real algorithms rather than being completely synthetic. CoreMark also has established rules for running the benchmark and for reporting the results.</paragraph><heading level='2'>Results</heading><paragraph>Dhrystone may represent a result more meaningfully than MIPS (million instructions per second) because instruction count comparisons between different instruction sets (e.g.<space/><link><target>RISC</target></link><space/>vs.<space/><link><target>Complex instruction set computer</target><part>CISC</part></link>) can confound simple comparisons. For example, the same high-level task may require many more instructions on a RISC machine, but might execute faster than a single CISC instruction. Thus, the Dhrystone score counts only the number of program iteration completions per second, allowing individual machines to perform this calculation in a machine-specific way. Another common representation of the Dhrystone benchmark is the<space/><bold>DMIPS</bold><space/>(Dhrystone<space/><link><target>million instructions per second</target><part>MIPS</part></link>) obtained when the Dhrystone score is divided by 1757 (the number of Dhrystones per second obtained on the<space/><link><target>VAX</target><part>VAX 11/780</part></link>, nominally a 1 MIPS machine).</paragraph><paragraph>Another way to represent results is in DMIPS/MHz, where DMIPS result is further divided by CPU frequency, to allow for easier comparison of CPUs running at different<space/><link><target>clock rate</target><trail>s</trail></link>.</paragraph><heading level='2'>Shortcomings</heading><paragraph>Using Dhrystone as a benchmark has pitfalls:<space/></paragraph><list type='bullet'><listitem>it features unusual code that is not usually representative of real-life programs<extension extension_name='ref' name="crit1"><template><target>cite web</target><arg name="url">http://www.johnloomis.org/NiosII/dhrystone/ECLDhrystoneWhitePaper.pdf ECL<space/></arg><arg name="last">Weiss<space/></arg><arg name="first">Alan<space/></arg><arg name="title">Dhrystone Benchmark: History, Analysis, "Scores" and Recommendations</arg></template></extension></listitem><listitem>it is susceptible to compiler optimizations. For example, it does a lot of string copying in an attempt to measure string copying performance. However, the strings in Dhrystone are of known constant length and their starts are aligned on natural boundaries, two characteristics usually absent from real programs. Therefore, an optimizer can replace a string copy with a sequence of word moves without any loops, which will be much faster. This optimization consequently overstates system performance, sometimes by more than 30%<template><target>Citation needed</target><arg name="date">June 2012</arg></template>.</listitem><listitem>Dhrystone's small code size may fit in the<space/><link><target>instruction cache</target></link><space/>of a modern CPU, so that<space/><link><target>instruction fetch</target></link><space/>performance is not rigorously tested.<extension extension_name='ref' name="crit1"></extension></listitem></list><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Benchmark (computing)</target></link></listitem><listitem><link><target>Whetstone (benchmark)</target></link></listitem></list><heading level='2'>References</heading><heading level='3'>Notes</heading><paragraph><extension extension_name='references'></extension></paragraph><heading level='3'>Bibliography</heading><paragraph><template><target>refbegin</target></template></paragraph><list type='bullet'><listitem><template><target>cite journal</target><arg name="author">Weicker, Reinhold<space/></arg><arg name="title">Dhrystone: A Synthetic Systems Programming Benchmark<space/></arg><arg name="journal">Communications of the ACM<space/></arg><arg name="volume">27<space/></arg><arg name="issue">10<space/></arg><arg name="pages">1013â€“30<space/></arg><arg name="date">October 1984<space/></arg><arg name="doi">10.1145/358274.358283<space/></arg></template></listitem></list><paragraph><template><target>refend</target></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://www.anime.net/~goemon/benchmarks.html'>Dhrystone results for Unix machines.</link></listitem><listitem><link type='external' href='http://groups.google.com/groups?q=DMIPS&amp;amp;hl=en&amp;amp;group=comp.benchmarks&amp;amp;rnum=1&amp;amp;selm=tsengDKq856.Gy6%40netcom.com'>Newsgroup posting for calculation of DMIPS</link></listitem><listitem><link type='external' href='http://www.netlib.org/benchmark/dhry-c'>C version of Dhrystone in a sh file</link></listitem><listitem><link type='external' href='http://homepages.cwi.nl/~steven/dry.c'>Self configuring and compiling version.</link></listitem><listitem><link type='external' href='http://www.cs.mu.oz.au/313/online/Handout.pdf'>Comments on Benchmark pitfalls. Set 8, Slide 11, page 95</link></listitem><listitem><link type='external' href='http://www.roylongbottom.org.uk/dhrystone%20results.htm'>Dhrystone Benchmark Results On PCs</link></listitem><listitem><link type='external' href='http://www.roylongbottom.org.uk/index.htm'>Source code and C/C++ pre-compiled versions for PCs</link></listitem><listitem><link type='external' href='http://www.coremark.org'>CoreMark</link></listitem></list><paragraph><link><target>Category:Computer benchmarks</target></link><link><target>Category:1984 introductions</target></link></paragraph></article>