<article title='Block_cipher'><paragraph><template><target>Refimprove</target><arg name="date">April 2012</arg></template>In<space/><link><target>cryptography</target></link>, a<space/><bold>block cipher</bold><space/>is a<space/><link><target>deterministic algorithm</target></link><space/>operating on fixed-length groups of<space/><link><target>bit</target><trail>s</trail></link>, called<space/><italics>blocks</italics>, with an unvarying transformation that is specified by a<space/><link><target>symmetric key</target></link>. Block ciphers are important<space/><link><target>cryptographic primitive</target><part>elementary component</part><trail>s</trail></link><space/>in the design of many<space/><link><target>cryptographic protocol</target><trail>s</trail></link>, and are widely used to implement<space/><link><target>encryption</target></link><space/>of bulk data.</paragraph><paragraph>The modern design of block ciphers is based on the concept of an<space/><italics>iterated</italics><space/><link><target>product cipher</target></link>. Product ciphers were suggested and analyzed by<space/><link><target>Claude Shannon</target></link><space/>in his seminal 1949 publication<space/><italics><link><target>Communication Theory of Secrecy Systems</target></link></italics><space/>as a means to effectively improve security by combining simple operations such as<space/><link><target>substitution cipher</target><part>substitution</part><trail>s</trail></link><space/>and<space/><link><target>transposition cipher</target><part>permutation</part><trail>s</trail></link>.<extension extension_name='ref' name="shannon"><template><target>cite journal</target><arg name="last1">Shannon</arg><arg name="first1">Claude</arg><arg name="title">Communication Theory of Secrecy Systems</arg><arg name="journal">[[Bell System Technical Journal]]</arg><arg name="volume">28</arg><arg name="issue">4</arg><arg name="pages">656–715</arg><arg name="year">1949</arg><arg name="url">http://netlab.cs.ucla.edu/wiki/files/shannon1949.pdf</arg></template></extension><space/>Iterated product ciphers carry out encryption in multiple rounds, each of which uses a different subkey derived from the original key. One widespread implementation of such ciphers is called a<space/><link><target>Feistel network</target></link>, named after<space/><link><target>Horst Feistel</target></link>, and notably implemented in the<space/><link><target>Data Encryption Standard</target><part>DES</part></link><space/>cipher.<extension extension_name='ref' name="tilborg"><template><target>cite book</target><arg name="ref">harv</arg><arg name="editor1-last">van Tilborg</arg><arg name="editor1-first">Henk C. A.</arg><arg name="editor2-last">Jajodia</arg><arg name="editor2-first">Sushil</arg><arg name="title">Encyclopedia of Cryptography and Security</arg><arg name="publisher">Springer</arg><arg name="year">2011</arg><arg name="isbn">978-1-4419-5905-8</arg><arg name="url">http://books.google.com/books?id</arg></template>, p.&amp;nbsp;455.</extension><space/>Many other realizations of block ciphers, such as the<space/><link><target>Advanced Encryption Standard</target><part>AES</part></link>, are classified as<space/><link><target>substitution-permutation network</target><trail>s</trail></link>.<template><target>sfn</target><arg>van Tilborg</arg><arg>Jajodia</arg><arg>2011</arg><arg name="p">1268</arg></template></paragraph><paragraph>The publication of the DES cipher by the U.S. National Bureau of Standards (now<space/><link><target>National Institute of Standards and Technology</target></link>, NIST) in 1977 was fundamental in the public understanding of modern block cipher design. In the same way, it influenced the academic development of<space/><link><target>cryptanalysis</target><part>cryptanalytic attack</part><trail>s</trail></link>. Both<space/><link><target>differential cryptanalysis</target><part>differential</part></link><space/>and<space/><link><target>linear cryptanalysis</target></link><space/>arose out of studies on the DES design. Today, there is a palette of attack techniques against which a block cipher must be secure, in addition to being robust against<space/><link><target>brute force attack</target><trail>s</trail></link>.</paragraph><paragraph>Even a secure block cipher is suitable only for the encryption of a single block under a fixed key. A multitude of<space/><link><target>block cipher modes of operation</target><part>modes of operation</part></link><space/>have been designed to allow their repeated use in a secure way, commonly to achieve the security goals of<space/><link><target>confidentiality</target></link><space/>and<space/><link><target>authentication</target><part>authenticity</part></link>. However, block ciphers may also be used as building blocks in other cryptographic protocols, such as<space/><link><target>universal hash function</target><trail>s</trail></link><space/>and<space/><link><target>pseudo-random number generator</target><trail>s</trail></link>.</paragraph><heading level='2'>Definition</heading><paragraph>A block cipher consists of two paired<space/><link><target>algorithm</target><trail>s</trail></link>, one for encryption,<space/><italics>E</italics>, and the other for decryption,<space/><italics>D</italics>.<extension extension_name='ref'><template><target>cite book</target><arg name="authors">Cusick, Thomas W. & Stanica, Pantelimon</arg><arg name="title">Cryptographic Boolean functions and applications</arg><arg name="publisher">Academic Press</arg><arg name="year">2009</arg><arg name="isbn">9780123748904</arg><arg name="pages">158–159</arg><arg name="url">http://books.google.com/books?id</arg></template></extension><space/>Both algorithms accept two inputs: an input block of size<space/><italics>n</italics><space/>bits and a<space/><link><target>key (cryptography)</target><part>key</part></link><space/>of size<space/><italics>k</italics><space/>bits; and both yield an<space/><italics>n</italics>-bit output block. The decryption algorithm<space/><italics>D</italics><space/>is defined to be the<space/><link><target>inverse function</target></link><space/>of encryption, i.e.,<space/><italics>D</italics><space/>=<space/><italics>E</italics><xhtml:sup>1</xhtml:sup>. More formally,<extension extension_name='ref' name="HAC"><template><target>cite book</target><arg name="ref">harv</arg><arg name="first1">Alfred J.</arg><arg name="last1">Menezes</arg><arg name="first2">Paul C.</arg><arg name="last2">van Oorschot</arg><arg name="first3">Scott A.</arg><arg name="last3">Vanstone</arg><arg name="title">Handbook of Applied Cryptography</arg><arg name="publisher">CRC Press</arg><arg name="year">1996</arg><arg name="chapter">Chapter 7: Block Ciphers</arg><arg name="isbn">0-8493-8523-7</arg><arg name="url">http://www.cacr.math.uwaterloo.ca/hac/</arg></template></extension><extension extension_name='ref' name="modern-crypto"><template><target>citation</target><arg name="ref">harv</arg><arg name="first1">Mihir</arg><arg name="last1">Bellare</arg><arg name="first2">Phillip</arg><arg name="last2">Rogaway</arg><arg name="title">Introduction to Modern Cryptography</arg><arg name="format"><space/>Lecture notes</arg><arg name="date">11 May 2005</arg><arg name="url">http://www.cs.ucdavis.edu/~rogaway/classes/227/spring05/book/main.pdf</arg></template>, chapter&amp;nbsp;3.</extension><space/>a block cipher is specified by an encryption function</paragraph><list type='ident'><listitem><extension extension_name='math'>E_K(P) := E(K,P): \{0,1\}^k \times \{0,1\}^n \rightarrow \{0,1\}^n,</extension></listitem></list><paragraph>which takes as input a key<space/><italics>K</italics><space/>of bit length<space/><italics>k</italics>, called the<space/><italics>key size</italics>, and a bit string<space/><italics>P</italics><space/>of length<space/><italics>n</italics>, called the<space/><italics>block size</italics>, and returns a string<space/><italics>C</italics><space/>of<space/><italics>n</italics><space/>bits.<space/><italics>P</italics><space/>is called the<space/><link><target>plaintext</target></link>, and<space/><italics>C</italics><space/>is termed the<space/><link><target>ciphertext</target></link>. For each<space/><italics>K</italics>, the function<space/><italics>E</italics><xhtml:sub><italics>K</italics></xhtml:sub>(<italics>P</italics>) is required to be an invertible mapping on {0,1}<xhtml:sup><italics>n</italics></xhtml:sup>. The inverse for<space/><italics>E</italics><space/>is defined as a function</paragraph><list type='ident'><listitem><extension extension_name='math'>E_K^{-1}(C) := D_K(C) = D(K,C): \{0,1\}^k \times \{0,1\}^n \rightarrow \{0,1\}^n,</extension></listitem></list><paragraph>taking a key<space/><italics>K</italics><space/>and a ciphertext<space/><italics>C</italics><space/>to return a plaintext value<space/><italics>P</italics>, such that</paragraph><list type='ident'><listitem><extension extension_name='math'>\forall K: D_K(E_K(P)) = P.</extension></listitem></list><paragraph>For example, a block cipher encryption algorithm might take a 128-bit block of plaintext as input, and output a corresponding 128-bit block of ciphertext. The exact transformation is controlled using a second input &amp;nbsp;the secret key. Decryption is similar: the decryption algorithm takes, in this example, a 128-bit block of ciphertext together with the secret key, and yields the original 128-bit block of plain text.<extension extension_name='ref'><template><target>cite book</target><arg name="authors">Chakraborty, D. & Rodriguez-Henriquez F.</arg><arg name="chapter">Block Cipher Modes of Operation from a Hardware Implementation Perspective</arg><arg name="editor">Koç, Çetin K.</arg><arg name="title">Cryptographic Engineering</arg><arg name="publisher">Springer</arg><arg name="year">2008</arg><arg name="isbn">9780387718163</arg><arg name="page">321</arg><arg name="url">http://books.google.com/books?id</arg></template></extension></paragraph><paragraph>For each key<space/><italics>K</italics>,<space/><italics>E<xhtml:sub>K</xhtml:sub></italics><space/>is a<space/><link><target>permutation</target></link><space/>(a<space/><link><target>bijective</target></link><space/>mapping) over the set of input blocks. Each key selects one permutation from the possible set of<space/><extension extension_name='math'>(2^n)!</extension>.<template><target>sfn</target><arg>Menezes</arg><arg>van Oorschot</arg><arg>Vanstone</arg><arg>1996</arg><arg name="loc">section 7.2</arg></template></paragraph><heading level='2'>Design</heading><heading level='3'>Iterated block ciphers</heading><paragraph>Most block cipher algorithms are classified as<space/><italics>iterated block ciphers</italics><space/>which means that they transform fixed-size blocks of plain-text into identical size blocks of ciphertext, via the repeated application of an invertible transformation known as the<space/><italics>round function</italics>, with each iteration referred to as a<space/><italics>round</italics>.<extension extension_name='ref'><template><target>cite book</target><arg name="author">Junod, Pascal & Canteaut, Anne</arg><arg name="title">Advanced Linear Cryptanalysis of Block and Stream Ciphers</arg><arg name="publisher">IOS Press</arg><arg name="year">2011</arg><arg name="isbn">9781607508441</arg><arg name="page">2</arg><arg name="url">http://books.google.com/books?id</arg></template></extension></paragraph><paragraph>Usually, the round function<space/><italics>R</italics><space/>takes different<space/><italics>round keys</italics><space/><italics>K<xhtml:sub>i</xhtml:sub></italics><space/>as second input, which are derived from the original key:<template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><list type='ident'><listitem><extension extension_name='math'>M_i = R_{K_i}(M_{i-1})</extension></listitem></list><paragraph>where<space/><extension extension_name='math'>M_0</extension><space/>is the plaintext and<space/><extension extension_name='math'>M_r</extension><space/>the ciphertext, with<space/><italics>r</italics><space/>being the round number.</paragraph><paragraph>Frequently,<space/><link><target>key whitening</target></link><space/>is used in addition to this. At the beginning and the end, the data is modified with key material (often with<space/><link><target>Exclusive or</target><part>XOR</part></link>, but simple arithmetic operations like adding and subtracting are also used):<template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><list type='ident'><listitem><extension extension_name='math'><space/>M_0 = M \oplus K_0<space/></extension></listitem><listitem><extension extension_name='math'>M_i = R_{K_i}(M_{i-1})\; ; \; i = 1 \dots r</extension></listitem><listitem><extension extension_name='math'>C = M_r \oplus K_{r+1}</extension></listitem></list><paragraph>Given one of the standard iterated block cipher design schemes, it is fairly easy to construct a block cipher that is cryptographically secure, simply by using a large number of rounds. However, this will make the cipher inefficient. Thus, efficiency is the most important additional design criterion for professional ciphers. Further, a good block cipher is designed to avoid side-channel attacks, such as input-dependent memory accesses that might leak secret data via the cache state or the execution time. In addition, the cipher should be concise, for small hardware and software implementations. Finally, the cipher should be easily cryptanalyzable, such that it can be shown to how many rounds the cipher needs to be reduced such that the existing cryptographic attacks would work and, conversely, that the number of actual rounds is large enough to protect against them.</paragraph><heading level='3'>Substitution-permutation networks</heading><paragraph><link><target>Image:SubstitutionPermutationNetwork2.png</target><part>thumb</part><part>200px</part><part>right</part><part>A sketch of a Substitution-Permutation Network with 3 rounds, encrypting a plaintext block of 16 bits into a ciphertext block of 16 bits. The S-boxes are the ''S<xhtml:sub>i</xhtml:sub>''s, the P-boxes are the same ''P'', and the round keys are the ''K<xhtml:sub>i</xhtml:sub>''s.</part></link><template><target>Main</target><arg>Substitution-permutation network</arg></template></paragraph><paragraph>One important type of iterated block cipher known as a<space/><italics><link><target>substitution-permutation network</target></link><space/>(SPN)</italics><space/>takes a block of the plaintext and the key as inputs, and applies several alternating rounds consisting of a<space/><link><target>Substitution box</target><part>substitution stage</part></link><space/>followed by a<space/><link><target>Permutation box</target><part>permutation stage</part></link>to produce each block of ciphertext output.<extension extension_name='ref'><template><target>cite book</target><arg name="authors">Keliher, Liam et al.</arg><arg name="chapter">Modeling Linear Characteristics of Substitution-Permutation Networks</arg><arg name="editors">Hays, Howard & Carlisle, Adam</arg><arg name="title">Selected areas in cryptography: 6th annual international workshop, SAC'99, Kingston, Ontario, Canada, August 9-10, 1999 : proceedings</arg><arg name="publisher">Springer</arg><arg name="year">2000</arg><arg name="isbn">9783540671855</arg><arg name="page">79</arg><arg name="url">http://books.google.com/books?id</arg></template></extension><space/>The non-linear substitution stage mixes the key bits with those of the plaintext, creating Shannon's<space/><italics><link><target>confusion (cryptography)</target><part>confusion</part></link></italics>. The linear permutation stage then dissipates redundancies, creating<space/><italics><link><target>diffusion (cryptography)</target><part>diffusion</part></link></italics>.<extension extension_name='ref'><template><target>cite book</target><arg name="authors">Baigneres, Thomas & Finiasz, Matthieu</arg><arg name="chapter">Dial 'C' for Cipher</arg><arg name="editors">Biham, Eli & Yousseff, Amr</arg><arg name="title">Selected areas in cryptography: 13th international workshop, SAC 2006, Montreal, Canada, August 17-18, 2006 : revised selected papers</arg><arg name="publisher">Springer</arg><arg name="year">2007</arg><arg name="isbn">9783540744610</arg><arg name="page">77</arg><arg name="url">http://books.google.com/books?id</arg></template></extension><extension extension_name='ref'><template><target>cite book</target><arg name="authors">Cusick, Thomas W. & Stanica, Pantelimon</arg><arg name="title">Cryptographic Boolean functions and applications</arg><arg name="publisher">Academic Press</arg><arg name="year">2009</arg><arg name="isbn">9780123748904</arg><arg name="page">164</arg><arg name="url">http://books.google.com/books?id</arg></template></extension></paragraph><paragraph>A<space/><italics><link><target>substitution box</target></link><space/>(S-box)</italics><space/>substitutes a small block of input bits with another block of output bits. This substitution must be<space/><link><target>Bijection</target><part>one-to-one</part></link>, to ensure invertibility (hence decryption). A secure S-box will have the property that changing one input bit will change about half of the output bits on average, exhibiting what is known as the<space/><link><target>avalanche effect</target></link>i.e. it has the property that each output bit will depend on every input bit.<extension extension_name='ref'><template><target>cite book</target><arg name="ref">harv</arg><arg name="last1">Katz</arg><arg name="first1">Jonathan</arg><arg name="last2">Lindell</arg><arg name="first2">Yehuda</arg><arg name="title">Introduction to modern cryptography</arg><arg name="publisher">CRC Press</arg><arg name="year">2008</arg><arg name="isbn">9781584885511</arg><arg name="url">http://books.google.com/books?id</arg></template>, pages&amp;nbsp;166-167.</extension><space/></paragraph><paragraph>A<space/><italics><link><target>permutation box</target></link><space/>(P-box)</italics><space/>is a<space/><link><target>permutation</target></link><space/>of all the bits: it takes the outputs of all the S-boxes of one round, permutes the bits, and feeds them into the S-boxes of the next round. A good P-box has the property that the output bits of any S-box are distributed to as many S-box inputs as possible.<template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><paragraph>At each round, the round key (obtained from the key with some simple operations, for instance, using S-boxes and P-boxes) is combined using some group operation, typically<space/><link><target>XOR</target></link>.<template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><paragraph><link><target>Decryption</target></link><space/>is done by simply reversing the process (using the inverses of the S-boxes and P-boxes and applying the round keys in reversed order).<template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><heading level='3'>Feistel ciphers</heading><paragraph><link><target>File:Feistel cipher diagram en.svg</target><part>thumb</part><part>right</part><part>265px</part><part>Many block ciphers, such as DES and Blowfish utilize structures known as ''<link><target>Feistel cipher</target><trail>s</trail></link>''</part></link><template><target>Main</target><arg>Feistel cipher</arg></template>In a<space/><italics><link><target>Feistel cipher</target></link></italics>, the block of plain text to be encrypted is split into two equal-sized halves. The round function is applied to one half, using a subkey, and then the output is XORed with the other half. The two halves are then swapped.<template><target>sfn</target><arg>Katz</arg><arg>Lindell</arg><arg>2008</arg><arg name="pp">170–172</arg></template></paragraph><paragraph>Let<space/><extension extension_name='math'>{\rm F}</extension><space/>be the round function and let<extension extension_name='math'>K_0,K_1,\ldots,K_{n}</extension><space/>be the sub-keys for the rounds<space/><extension extension_name='math'>0,1,\ldots,n</extension><space/>respectively.</paragraph><paragraph>Then the basic operation is as follows:<template><target>sfn</target><arg>Katz</arg><arg>Lindell</arg><arg>2008</arg><arg name="pp">170–172</arg></template></paragraph><paragraph>Split the plaintext block into two equal pieces, (<extension extension_name='math'>L_0</extension>,<space/><extension extension_name='math'>R_0</extension>)</paragraph><paragraph>For each round<space/><extension extension_name='math'>i =0,1,\dots,n</extension>, compute</paragraph><list type='ident'><listitem><extension extension_name='math'>L_{i+1} = R_i\,</extension></listitem><listitem><extension extension_name='math'>R_{i+1}= L_i \oplus {\rm F}(R_i, K_i)</extension>.</listitem></list><paragraph>Then the ciphertext is<space/><extension extension_name='math'>(R_{n+1}, L_{n+1})</extension>.<space/></paragraph><paragraph>Decryption of a ciphertext<space/><extension extension_name='math'>(R_{n+1}, L_{n+1})</extension><space/>is accomplished by computing for<space/><extension extension_name='math'>i=n,n-1,\ldots,0</extension></paragraph><list type='ident'><listitem><extension extension_name='math'>R_{i} = L_{i+1}\,</extension></listitem><listitem><extension extension_name='math'>L_{i} = R_{i+1} \oplus {\rm F}(L_{i+1}, K_{i})</extension>.</listitem></list><paragraph>Then<space/><extension extension_name='math'>(L_0,R_0)</extension><space/>is the plaintext again.</paragraph><paragraph>One advantage of the Feistel model compared to a<space/><link><target>substitution-permutation network</target></link><space/>is that the round function<space/><extension extension_name='math'>{\rm F}</extension><space/>does not have to be invertible.<template><target>sfn</target><arg>Katz</arg><arg>Lindell</arg><arg>2008</arg><arg name="p">171</arg></template></paragraph><heading level='3'>Lai-Massey ciphers</heading><paragraph><link><target>File:Lai Massey scheme diagram en.svg</target><part>thumb</part><part>right</part><part>265px</part><part>The Lai-Massey scheme. The archetypical cipher utilizing it is<space/><link><target>International Data Encryption Algorithm</target><part>IDEA</part></link>.</part></link><template><target>main</target><arg>Lai-Massey scheme</arg></template></paragraph><paragraph>The Lai-Massey scheme offers security properties similar to those of the<space/><link><target>Feistel structure</target></link>. It also shares its advantage that the round function<space/><extension extension_name='math'>\mathrm F</extension><space/>does not have to be invertible. Another similarity is that is also splits the input block into two equal pieces. However, the round function is applied to the difference between the two, and the result is then added to both half blocks.</paragraph><paragraph>Let<space/><extension extension_name='math'>\mathrm F</extension><space/>be the round function and<space/><extension extension_name='math'>\mathrm H</extension><space/>a half-round function and let<space/><extension extension_name='math'>K_0,K_1,\ldots,K_n</extension><space/>be the sub-keys for the rounds<space/><extension extension_name='math'>0,1,\ldots,n</extension><space/>respectively.</paragraph><paragraph>Then the basic operation is as follows:</paragraph><paragraph>Split the plaintext block into two equal pieces, (<extension extension_name='math'>L_0</extension>,<space/><extension extension_name='math'>R_0</extension>)</paragraph><paragraph>For each round<space/><extension extension_name='math'>i =0,1,\dots,n</extension>, compute</paragraph><list type='ident'><listitem><extension extension_name='math'>(L_{i+1}',R_{i+1}') = \mathrm H(L_i' + T_i,R_i' + T_i)</extension></listitem></list><paragraph>where<space/><extension extension_name='math'>T_i = \mathrm F(L_i' - R_i', K_i)</extension><space/>and<space/><extension extension_name='math'>(L_0',R_0') = \mathrm H(L_0,R_0)</extension></paragraph><paragraph>Then the ciphertext is<space/><extension extension_name='math'>(L_{n+1}, R_{n+1}) = (L_{n+1}',R_{n+1}')</extension>.</paragraph><paragraph>Decryption of a ciphertext<space/><extension extension_name='math'>(L_{n+1}, R_{n+1})</extension><space/>is accomplished by computing for<space/><extension extension_name='math'>i=n,n-1,\ldots,0</extension></paragraph><list type='ident'><listitem><extension extension_name='math'>(L_i',R_i') = \mathrm H^{-1}(L_{i+1}' - T_i, R_{i+1}' - T_i)</extension></listitem></list><paragraph>where<space/><extension extension_name='math'>T_i = \mathrm F(L_{i+1}' - R_{i+1}',K_i)</extension><space/>and<space/><extension extension_name='math'>(L_{n+1}',R_{n+1}')=\mathrm H^{-1}(L_{n+1},R_{n+1})</extension></paragraph><paragraph>Then<space/><extension extension_name='math'>(L_0,R_0) = (L_0',R_0')</extension><space/>is the plaintext again.</paragraph><heading level='3'>Operations</heading><heading level='4'>ARX add-rotate-xor</heading><paragraph>Many modern block ciphers and hashes are<space/><bold>ARX</bold><space/>algorithmstheir round function involves only three operations:<space/><link><target>modular addition</target></link>,<space/><link><target>circular shift</target><part>rotation</part></link><space/>with fixed rotation amounts, and<space/><link><target>exclusive or</target><part>XOR</part></link><space/>(ARX). Examples include<space/><link><target>Salsa20</target></link><space/>and<space/><link><target>Speck (cipher)</target><part>Speck</part></link><space/>and<space/><link><target>BLAKE (hash function)</target><part>BLAKE</part></link>.Many authors draw an ARX network, a kind of<space/><link><target>data flow diagram</target></link>, to illustrate such a round function.<extension extension_name='ref'><template><target>cite journal</target><arg name="url">https://131002.net/siphash/siphash.pdf
</arg><arg name="title">SipHash: a fast short-input PRF
</arg><arg name="last1">Aumasson
</arg><arg name="first1">Jean-Philippe
</arg><arg name="last2">Bernstein
</arg><arg name="first2">Daniel J.
</arg><arg name="authorlink2">Daniel J. Bernstein
</arg><arg name="page">5
</arg><arg name="date">2012-09-18</arg></template></extension></paragraph><paragraph>These ARX operations are popular because they are relatively fast and cheap in hardware and software,and also because they run in constant time, and are therefore immune to<space/><link><target>timing attack</target><trail>s</trail></link>.The<space/><link><target>rotational cryptanalysis</target></link><space/>technique attempts to attack such round functions.</paragraph><heading level='4'>other operations</heading><paragraph>Other operations often used in block ciphers includedata-dependent rotations as in<space/><link><target>RC5</target></link><space/>and<space/><link><target>RC6</target></link>,a<space/><link><target>substitution box</target></link><space/>implemented as a<space/><link><target>lookup table</target></link><space/>as in<space/><link><target>Data Encryption Standard</target></link><space/>and<space/><link><target>Advanced Encryption Standard</target></link>,a<space/><link><target>permutation box</target></link>,and multiplication as in<space/><link><target>IDEA (cipher)</target><part>IDEA</part></link>.</paragraph><heading level='2'>Modes of operation</heading><paragraph><template><target>Main</target><arg>Block cipher modes of operation</arg></template><link><target>File:Tux ecb.jpg</target><part>thumb</part><part>Insecure encryption of an image as a result of<space/><link><target>electronic codebook</target></link><space/>mode encoding.</part></link>A block cipher by itself allows encryption only of a single data block of the cipher's block length. For a variable-length message, the data must first be partitioned into separate cipher blocks. In the simplest case, known as the<space/><link><target>electronic codebook</target></link><space/>(ECB) mode, a message is first split into separate blocks of the cipher's block size (possibly extending the last block with<space/><link><target>Padding (cryptography)</target><part>padding</part></link><space/>bits), and then each block is encrypted and decrypted independently. However, such a naive method is generally insecure because equal plaintext blocks will always generate equal ciphertext blocks (for the same key), so patterns in the plaintext message become evident in the ciphertext output.<template><target>sfn</target><arg>Menezes</arg><arg>Oorschot</arg><arg>Vanstone</arg><arg>1996</arg><arg name="loc">Chapter 7</arg><arg name="pp">228–230</arg></template></paragraph><paragraph>To overcome this limitation, several so-called<space/><link><target>block cipher modes of operation</target></link><space/>have been designed<extension extension_name='ref' name="NIST-modes"><template><target>cite web</target><arg name="title">Block Cipher Modes</arg><arg name="publisher">[[NIST]] Computer Security Resource Center</arg><arg name="url">http://csrc.nist.gov/groups/ST/toolkit/BCM/index.html</arg></template></extension><template><target>sfn</target><arg>Menezes</arg><arg>van Oorschot</arg><arg>Vanstone</arg><arg>1996</arg><arg name="pp">228–233</arg></template><space/>and specified in national recommendations such as NIST 800-38A<extension extension_name='ref' name="nist800-38a"><template><target>citation</target><arg name="url">http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf</arg><arg name="author">Morris Dworkin</arg><arg name="title">Recommendation for Block Cipher Modes of Operation – Methods and Techniques</arg><arg name="journal">Special Publication 800-38A</arg><arg name="publisher">National Institute of Standards and Technology (NIST)</arg><arg name="date">December 2001</arg></template></extension><space/>and<space/><link><target>Bundesamt fr Sicherheit in der Informationstechnik</target><part>BSI</part></link><space/>TR-02102<extension extension_name='ref' name="BSI-rec"><template><target>citation</target><arg name="title">Kryptographische Verfahren: Empfehlungen und Schlüssellängen</arg><arg name="journal">BSI TR-02102</arg><arg name="type"><space/>Technische Richtlinie</arg><arg name="issue">Version 1.0</arg><arg name="date">June 20, 2008</arg></template></extension><space/>and international standards such as<space/><link><target>ISO/IEC 10116</target></link>.<extension extension_name='ref'><link type='external' href='http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=38761'>ISO/IEC 10116:2006 ''Information technology &amp;mdash; Security techniques &amp;mdash; Modes of operation for an n-bit block cipher''</link></extension><space/>The general concept is to use<space/><link><target>randomization</target></link><space/>of the plaintext data based on an additional input value, frequently called an<space/><link><target>initialization vector</target></link>, to create what is termed<space/><link><target>probabilistic encryption</target></link>.<template><target>sfn</target><arg>Bellare</arg><arg>Rogaway</arg><arg>2005</arg><arg name="loc">section 5.3</arg><arg name="p">101</arg></template><space/>In the popular<space/><link><target>cipher block chaining</target></link><space/>(CBC) mode, for encryption to be<space/><link><target>semantic security</target><part>secure</part></link><space/>the initialization vector passed along with the plaintext message must be a random or<space/><link><target>pseudo-random</target></link><space/>value, which is added in an<space/><link><target>Exclusive or</target><part>exclusive-or</part></link><space/>manner to the first plaintext block before it is being encrypted. The resultant ciphertext block is then used as the new initialization vector for the next plaintext block. In the<space/><link><target>cipher feedback</target></link><space/>(CFB) mode, which emulates a<space/><link><target>stream cipher#Self-synchronizing stream ciphers</target><part>self-synchronizing stream cipher</part></link>, the initialization vector is first encrypted and then added to the plaintext block. The<space/><link><target>output feedback</target></link><space/>(OFB) mode repeatedly encrypts the initialization vector to create a<space/><link><target>key stream</target></link><space/>for the emulation of a<space/><link><target>Stream cipher#Synchronous stream ciphers</target><part>synchronous stream cipher</part></link>. The newer<space/><link><target>counter mode</target><part>counter</part></link><space/>(CTR) mode similarly creates a key stream, but has the advantage of only needing unique and not (pseudo-)random values as initialization vectors; the needed randomness is derived internally by using the initialization vector as a block counter and encrypting this counter for each block.<extension extension_name='ref' name="nist800-38a"></extension></paragraph><paragraph>From a<space/><link><target>provable security</target><part>security-theoretic</part></link><space/>point of view, modes of operation must provide what is known as<space/><link><target>semantic security</target></link>.<template><target>sfn</target><arg>Bellare</arg><arg>Rogaway</arg><arg>2005</arg><arg name="loc">section 5.6</arg></template><space/>Informally, it means that given some ciphertext under an unknown key one cannot practically derive any information from the ciphertext (other than the length of the message) over what one would have known without seeing the ciphertext. It has been shown that all of the modes discussed above, with the exception of the ECB mode, provide this property under so-called<space/><link><target>chosen plaintext attack</target><trail>s</trail></link>.</paragraph><heading level='2'>Padding</heading><paragraph><template><target>main</target><arg>Padding (cryptography)</arg></template>Some modes such as the CBC mode only operate on complete plaintext blocks. Simply extending the last block of a message with zero-bits is insufficient since it does not allow a receiver to easily distinguish messages that differ only in the amount of padding bits. More importantly, such a simple solution gives rise to very efficient<space/><link><target>padding oracle attack</target><trail>s</trail></link>.<extension extension_name='ref' name="padding-attack"><template><target>cite journal</target><arg name="author">Serge Vaudenay</arg><arg name="title">Security Flaws Induced by CBC Padding Applications to SSL, IPSEC, WTLS...</arg><arg name="journal">Advances in Cryptology – EUROCRYPT 2002, Proc. International Conference on the Theory and Applications of Cryptographic Techniques</arg><arg name="issue">2332</arg><arg name="pages">534–545</arg><arg name="publisher">Springer Verlag</arg><arg name="year">2002</arg></template></extension><space/>A suitable<space/><link><target>padding (cryptography)</target><part>padding scheme</part></link><space/>is therefore needed to extend the last plaintext block to the cipher's block size. While many popular schemes described in standards and in the literature have been shown to be vulnerable to padding oracle attacks,<extension extension_name='ref' name="padding-attack"></extension><extension extension_name='ref' name="oz-pad"><template><target>cite journal</target><arg name="author1">Kenneth G. Paterson</arg><arg name="author2">Gaven J. Watson</arg><arg name="title">Immunising CBC Mode Against Padding Oracle Attacks: A Formal Security Treatment</arg><arg name="journal">Security and Cryptography for Networks – SCN 2008, Lecture Notes in Computer Science</arg><arg name="issue">5229</arg><arg name="pages">340–357</arg><arg name="publisher">Springer Verlag</arg><arg name="year">2008</arg></template></extension><space/>a solution which adds a one-bit and then extends the last block with zero-bits, standardized as &quot;padding method 2&quot; in<space/><link><target>ISO/IEC 9797-1</target></link>,<extension extension_name='ref' name="iso-iec 9797-1"><template><target>citation</target><arg name="title">ISO/IEC 9797-1: Information technology – Security techniques – Message Authentication Codes (MACs) – Part 1: Mechanisms using a block cipher</arg><arg name="publisher">ISO/IEC</arg><arg name="year">2011</arg><arg name="url">http://www.iso.org/iso/iso_catalogue/catalogue_ics/catalogue_detail_ics.htm?csnumber</arg></template></extension><space/>has been proven secure against these attacks.<extension extension_name='ref' name="oz-pad"></extension></paragraph><heading level='2'>Cryptanalysis</heading><paragraph><template><target>expand section</target><arg name="1">Introduction of attack models may be needed for the cryptanalysis techniques: ciphertext only, known plaintext, chosen plaintext, chosen ciphertext, etc.</arg><arg name="date">April 2012</arg></template></paragraph><heading level='3'>Brute force attacks</heading><paragraph><template><target>expand section</target><arg name="1">Impact of key size and block size, discuss time-memory-data tradeoffs.</arg><arg name="date">April 2012</arg></template></paragraph><paragraph>Due to a block cipher's characteristic as an invertible function, its output becomes<space/><link><target>distinguishing attack</target><part>distinguishable</part></link><space/>from a truly random output string over time due to the<space/><link><target>birthday attack</target></link>. This property results in the cipher's security degrading quadratically, and needs to be taken into account when selecting a block size. There is a trade-off though as large block sizes can result in the algorithm becoming inefficient to operate.<extension extension_name='ref'><template><target>cite book</target><arg name="author">Martin, Keith M.</arg><arg name="title">Everyday Cryptography: Fundamental Principles and Applications</arg><arg name="publisher">Oxford University Press</arg><arg name="year">2012</arg><arg name="isbn">9780199695591</arg><arg name="page">114</arg><arg name="url">http://books.google.com/books?id</arg></template></extension><space/>Earlier block ciphers such as the<space/><link><target>Data Encryption Standard</target><part>DES</part></link><space/>have typically selected a 64-bit block size, while newer designs such as the<space/><link><target>Advanced Encryption Standard</target><part>AES</part></link><space/>support block sizes of 128 bits or more, with some ciphers supporting a range of different block sizes.<extension extension_name='ref'><template><target>cite book</target><arg name="authors">Paar, Cristof et al.</arg><arg name="title">Understanding Cryptography: A Textbook for Students and Practitioners</arg><arg name="publisher">Springer</arg><arg name="year">2010</arg><arg name="isbn">9783642041006</arg><arg name="page">30</arg><arg name="url">http://books.google.com/books?id</arg></template></extension></paragraph><heading level='3'>Differential cryptanalysis</heading><paragraph><template><target>Main</target><arg>Differential cryptanalysis</arg></template><template><target>expand section</target><arg name="date">April 2012</arg></template></paragraph><heading level='3'>Linear cryptanalysis</heading><paragraph><template><target>Main</target><arg>Linear cryptanalysis</arg></template></paragraph><paragraph><italics><link><target>Linear cryptanalysis</target></link></italics><space/>is a form of cryptanalysis based on finding<space/><link><target>affine transformation</target><part>affine</part></link><space/>approximations to the action of a<space/><link><target>cipher</target></link>. Linear cryptanalysis is one of the two most widely used attacks on block ciphers; the other being<space/><link><target>differential cryptanalysis</target></link>.<space/><template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><paragraph>The discovery is attributed to<space/><link><target>Mitsuru Matsui</target></link>, who first applied the technique to the<space/><link><target>FEAL</target></link><space/>cipher (Matsui and Yamagishi, 1992).<extension extension_name='ref' name="FEAL_linear"><template><target>cite conference</target><arg name="author"><space/>Matsui, M. and Yamagishi, A<space/></arg><arg name="title"><space/>A new method for known plaintext attack of FEAL cipher<space/></arg><arg name="booktitle"><space/>Advances in Cryptology - [[EUROCRYPT]] 1992<space/></arg></template></extension></paragraph><heading level='3'>Integral cryptanalysis</heading><paragraph><template><target>Main</target><arg>Integral cryptanalysis</arg></template><italics><link><target>Integral cryptanalysis</target></link></italics><space/>is a cryptanalytic attack that is particularly applicable to block ciphers based on substitution-permutation networks. Unlike differential cryptanalysis, which uses pairs of chosen plaintexts with a fixed XOR difference, integral cryptanalysis uses sets or even multisets of chosen plaintexts of which part is held constant and another part varies through all possibilities. For example, an attack might use 256 chosen plaintexts that have all but 8 of their bits the same, but all differ in those 8 bits. Such a set necessarily has an XOR sum of 0, and the XOR sums of the corresponding sets of ciphertexts provide information about the cipher's operation. This contrast between the differences of pairs of texts and the sums of larger sets of texts inspired the name &quot;integral cryptanalysis&quot;, borrowing the terminology of calculus.<template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><heading level='3'>Other techniques</heading><paragraph><link><target>File:Attaque boomerang.png</target><part>thumb</part><part>right</part><part>200px</part><part>The development of the<space/><link><target>boomerang attack</target></link><space/>enabled<space/><link><target>differential cryptanalysis</target></link><space/>techniques to be applied to many ciphers that had previously been deemed secure against differential attacks</part></link>In addition to linear and differential cryptanalysis, there is a growing catalog of attacks:<space/><link><target>truncated differential cryptanalysis</target></link>, partial differential cryptanalysis,<space/><link><target>integral cryptanalysis</target></link>, which encompasses square and integral attacks,<space/><link><target>slide attack</target><trail>s</trail></link>,<space/><link><target>boomerang attack</target><trail>s</trail></link>, the<space/><link><target>XSL attack</target></link>,<space/><link><target>impossible differential cryptanalysis</target></link><space/>and algebraic attacks. For a new block cipher design to have any credibility, it must demonstrate evidence of security against known attacks.<template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><heading level='2'>Provable security</heading><paragraph>When a block cipher is used in a given<space/><link><target>Block_cipher_mode_of_operation</target><part>mode of operation</part></link>, the resulting algorithm should ideally be about as secure as the block cipher itself. ECB (discussed above) emphatically lacks this property: regardless of how secure the underlying block cipher is, ECB mode can easily be attacked. On the other hand, CBC mode can be proven to be secure under the assumption that the underlying block cipher is likewise secure. Note, however, that making statements like this requires formal mathematical definitions for what it means for an encryption algorithm or a block cipher to &quot;be secure&quot;. This section describes two common notions for what properties a block cipher should have. Each corresponds to a mathematical model that can be used to prove properties of higher level algorithms, such as CBC.</paragraph><paragraph>This general approach to cryptography---proving higher-level algorithms (such as CBC) are secure under explicitly stated assumptions regarding their components (such as a block cipher)---is known as<space/><italics>provable security</italics>.</paragraph><heading level='3'>Standard model</heading><paragraph><template><target>main</target><arg><space/>Ciphertext indistinguishability<space/></arg></template>Informally, a block cipher is secure in the standard model if an attacker cannot tell the difference between the block cipher (equipped with a random key) and a random permutation.<space/></paragraph><paragraph>To be a bit more precise, let<space/><italics>E</italics><space/>be an<space/><italics>n</italics>-bit block cipher. We imagine the following game:</paragraph><list type='numbered'><listitem>The person running the game flips a coin.<list type='bullet'><listitem>If the coin lands on heads, he chooses a random key<space/><italics>K</italics><space/>and defines the function<space/><italics>f = E<xhtml:sub>K</xhtml:sub></italics>.</listitem><listitem>If the coin lands on tails, he chooses a random permutation<space/><italics><template><target>pi</target></template></italics><space/>on the set of<space/><italics>n</italics>-bit strings, and defines the function<space/><italics>f =<space/><template><target>pi</target></template></italics>.</listitem></list></listitem><listitem>The attacker chooses an<space/><italics>n</italics>-bit string<space/><italics>X</italics>, and the person running the game tells him the value of<space/><italics>f(X)</italics>.</listitem><listitem>Step 2 is repeated a total of<space/><italics>q</italics><space/>times. (Each of these<space/><italics>q</italics><space/>interactions is a<space/><italics>query</italics>.)</listitem><listitem>The attacker guesses how the coin landed. He wins if his guess is correct.</listitem></list><paragraph>The attacker, which we can model as an algorithm, is called an<space/><italics><link><target>Adversary (cryptography)</target><part>adversary</part></link></italics>. The function<space/><italics>f</italics><space/>(which the adversary was able to query) is called an<space/><italics><link><target>Oracle machine</target><part>oracle</part></link></italics>.</paragraph><paragraph>Note that an adversary can trivially ensure a 50% chance of winning simply by guessing at random (or even by, for example, always guessing &quot;heads&quot;). Therefore let<space/><italics>P<xhtml:sub>E</xhtml:sub>(A)</italics><space/>denote the probability that the adversary<space/><italics>A</italics><space/>wins this game against<space/><italics>E</italics>, and define the<space/><italics>advantage</italics><space/>of<space/><italics>A</italics><space/>as 2(<italics>P<xhtml:sub>E</xhtml:sub>(A)</italics><space/>- 1/2). It follows that if<space/><italics>A</italics><space/>guesses randomly, its advantage will be 0; on the other hand, if<space/><italics>A</italics><space/>always wins, then its advantage is 1. The block cipher<space/><italics>E</italics><space/>is a<space/><italics>pseudo-random permutation</italics><space/>(PRP) if no adversary has an advantage significantly greater than 0, given specified restrictions on<space/><italics>q</italics><space/>and the adversary's running time. If in Step 2 above adversaries have the option of learning<space/><italics>f<xhtml:sup>1</xhtml:sup>(X)</italics><space/>instead of<space/><italics>f(X)</italics><space/>(but still have only small advantages) then<space/><italics>E</italics><space/>is a<space/><italics>strong</italics><space/>PRP (SPRP). An adversary is<space/><italics>non-adaptive</italics><space/>if it chooses all<space/><italics>q</italics><space/>values for<space/><italics>X</italics><space/>before the game begins (that is, it does not use any information gleaned from previous queries to choose each<space/><italics>X</italics><space/>as it goes).</paragraph><paragraph>These definitions have proven useful for analyzing various modes of operation. For example, one can define a similar game for measuring the security of a block cipher-based encryption algorithm, and then try to show (through a<space/><link><target>Reduction (complexity)</target><part>reduction argument</part></link>) that the probability of an adversary winning this new game is not much more than<space/><italics>P<xhtml:sub>E</xhtml:sub>(A)</italics><space/>for some<space/><italics>A</italics>. (The reduction typically provides limits on<space/><italics>q</italics><space/>and the running time of<space/><italics>A</italics>.) Equivalently, if<space/><italics>P<xhtml:sub>E</xhtml:sub>(A)</italics><space/>is small for all relevant<space/><italics>A</italics>, then no attacker has a significant probability of winning the new game. This formalizes the idea that the higher-level algorithm inherits the block cipher's security.</paragraph><heading level='3'>Ideal cipher model</heading><paragraph><template><target>expand section</target><arg name="date">April 2012</arg></template></paragraph><heading level='2'>Practical evaluation</heading><paragraph>Block ciphers may be evaluated according to multiple criteria in practice. Common factors include:<template><target>sfn</target><arg>Menezes</arg><arg>van Oorschot</arg><arg>Vanstone</arg><arg>1996</arg><arg name="p">227</arg></template><extension extension_name='ref' name="AESr2report"><template><target>citation</target><arg name="author">James Nechvatal, Elaine Barker, Lawrence Bassham, William Burr, Morris Dworkin, James Foti, Edward Roback</arg><arg name="title">Report on the Development of the Advanced Encryption Standard (AES)</arg><arg name="publisher">National Institute of Standards and Technology (NIST)</arg><arg name="date">October 2000</arg><arg name="url">http://csrc.nist.gov/archive/aes/round2/r2report.pdf</arg></template></extension></paragraph><list type='bullet'><listitem>Key parameters, such as its key size and block size, both which provide an upper bound on the security of the cipher.</listitem><listitem>The<space/><italics>estimated security level</italics>, which is based on the confidence gained in the block cipher design after it has largely withstood major efforts in cryptanalysis over time, the design's mathematical soundness, and the existence of practical or certificational attacks.</listitem><listitem>The cipher's<space/><italics>complexity</italics><space/>and its suitability for implementation in<space/><link><target>electronic hardware</target><part>hardware</part></link><space/>or<space/><link><target>software</target></link>. Hardware implementations may measure the complexity in terms of<space/><link><target>gate count</target></link><space/>or energy consumption, which are important parameters for resource-constrained devices.</listitem><listitem>The cipher's<space/><italics>performance</italics><space/>in terms of processing<space/><link><target>throughput</target></link><space/>on various platforms, including its<space/><link><target>computer memory</target><part>memory</part></link><space/>requirements.</listitem><listitem>The<space/><italics>cost</italics><space/>of the cipher, which refers to licensing requirements that may apply due to<space/><link><target>intellectual property right</target><trail>s</trail></link>.</listitem><listitem>The<space/><italics>flexibility</italics><space/>of the cipher, which includes its ability to support multiple key sizes and block lengths.</listitem></list><heading level='2'>Notable block ciphers</heading><heading level='3'>Lucifer / DES</heading><paragraph><template><target>main</target><arg>Lucifer (cipher)</arg><arg>Data Encryption Standard</arg></template><link><target>Lucifer (cipher)</target><part>Lucifer</part></link><space/>is generally considered to be the first civilian block cipher, developed at<space/><link><target>IBM</target></link><space/>in the 1970s based on work done by<space/><link><target>Horst Feistel</target></link>. A revised version of the algorithm was adopted as a<space/><link><target>United States</target><part>U.S.</part></link><space/>government<space/><link><target>Federal Information Processing Standard</target></link>: FIPS PUB 46<space/><link><target>Data Encryption Standard</target></link><space/>(DES).<extension extension_name='ref'><link type='external' href='http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf'>FIPS PUB 46-3 ''Data Encryption Standard (DES)''</link><space/>(This is the third edition, 1999, but includes historical information in the preliminary section 12.)</extension><space/>It was chosen by the U.S. National Bureau of Standards (NBS) after a public invitation for submissions and some internal changes by<space/><link><target>National Institute of Standards and Technology</target><part>NBS</part></link><space/>(and, potentially, the<space/><link><target>NSA</target></link>). DES was publicly released in 1976 and has been widely used.<template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><paragraph>DES was designed to, among other things, resist a certain cryptanalytic attack known to the NSA and rediscovered by IBM, though unknown publicly until rediscovered again and published by<space/><link><target>Eli Biham</target></link><space/>and<space/><link><target>Adi Shamir</target></link><space/>in the late 1980s. The technique is called<space/><link><target>differential cryptanalysis</target></link><space/>and remains one of the few general attacks against block ciphers;<space/><link><target>linear cryptanalysis</target></link><space/>is another, but may have been unknown even to the NSA, prior to its publication by<space/><link><target>Mitsuru Matsui</target></link>. DES prompted a large amount of other work and publications in cryptography and<space/><link><target>cryptanalysis</target></link><space/>in the open community and it inspired many new cipher designs.<template><target>citation needed</target><arg name="date">April 2012</arg></template></paragraph><paragraph>DES has a block size of 64 bits and a<space/><link><target>key size</target></link><space/>of 56 bits. 64-bit blocks became common in block cipher designs after DES. Key length depended on several factors, including government regulation. Many observers<template><target>who</target><arg name="date">April 2012</arg></template><space/>in the 1970s commented that the 56-bit key length used for DES was too short. As time went on, its inadequacy became apparent, especially after a<space/><link><target>EFF DES cracker</target><part>special purpose machine designed to break DES</part></link><space/>was demonstrated in 1998 by the<space/><link><target>Electronic Frontier Foundation</target></link>. An extension to DES,<space/><link><target>Triple DES</target></link>, triple-encrypts each block with either two independent keys (112-bit key and 80-bit security) or three independent keys (168-bit key and 112-bit security). It was widely adopted as a replacement. As of 2011, the three-key version is still considered secure, though the<space/><link><target>National Institute of Standards and Technology</target></link><space/>(NIST) standards no longer permit the use of the two-key version in new applications, due to its 80-bit security level.<extension extension_name='ref' name="NIST_SP_800-57"><link type='external' href='http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57-Part1-revised2_Mar08-2007.pdf'>NIST Special Publication 800-57 ''Recommendation for Key Management &amp;mdash; Part 1: General (Revised)'', March, 2007</link></extension></paragraph><heading level='3'>IDEA</heading><paragraph>The<space/><italics><link><target>International Data Encryption Algorithm</target></link></italics><space/>(<italics>IDEA</italics>) is a block cipher designed by<space/><link><target>James Massey</target></link><space/>of<space/><link><target>ETH Zurich</target></link><space/>and<space/><link><target>Xuejia Lai</target></link>; it was first described in 1991, as an intended replacement for DES.</paragraph><paragraph>IDEA operates on 64-bit<space/><link><target>block size (cryptography)</target><part>blocks</part></link><space/>using a 128-bit key, and consists of a series of eight identical transformations (a<space/><italics>round</italics>) and an output transformation (the<space/><italics>half-round</italics>). The processes for encryption and decryption are similar. IDEA derives much of its security by interleaving operations from different<space/><link><target>group (mathematics)</target><part>groups</part></link><space/>&amp;mdash;<space/><link><target>modular arithmetic</target><part>modular</part></link><space/>addition and multiplication, and bitwise<space/><italics><link><target>exclusive or</target></link><space/>(XOR)</italics><space/>&amp;mdash; which are algebraically &quot;incompatible&quot; in some sense.</paragraph><paragraph>The designers analysed IDEA to measure its strength against<space/><link><target>differential cryptanalysis</target></link><space/>and concluded that it is immune under certain assumptions. No successful<space/><link><target>linear cryptanalysis</target><part>linear</part></link><space/>or algebraic weaknesses have been reported.<space/><template><target>As of</target><arg>2012</arg></template>, the best attack which applies to all keys can break full 8.5 round IDEA using a narrow-bicliques attack about four times faster than brute force.</paragraph><heading level='3'>RC5</heading><paragraph><link><target>File:RC5 InfoBox Diagram.svg</target><part>thumb</part><part>160px</part><part>right</part><part>One round (two half-rounds) of the RC5 block cipher</part></link><template><target>Main</target><arg>RC5</arg></template>RC5 is a block cipher designed by<space/><link><target>Ron Rivest</target><part>Ronald Rivest</part></link><space/>in 1994 which, unlike many other ciphers, has a variable block size (32, 64 or 128 bits), key size (0 to 2040 bits) and number of rounds (0 to 255). The original suggested choice of parameters were a block size of 64 bits, a 128-bit key and 12 rounds.</paragraph><paragraph>A key feature of RC5 is the use of data-dependent rotations; one of the goals of RC5 was to prompt the study and evaluation of such operations as a cryptographic primitive. RC5 also consists of a number of<space/><link><target>modular arithmetic</target><part>modular</part></link><space/>additions and XORs. The general structure of the algorithm is a<space/><link><target>Feistel cipher</target><part>Feistel</part></link>-like network. The encryption and decryption routines can be specified in a few lines of code. The key schedule, however, is more complex, expanding the key using an essentially<space/><link><target>one-way function</target></link><space/>with the binary expansions of both<space/><link><target>e (mathematical constant)</target><part>e</part></link><space/>and the<space/><link><target>golden ratio</target></link><space/>as sources of &quot;<link><target>nothing up my sleeve number</target><trail>s</trail></link>&quot;. The tantalising simplicity of the algorithm together with the novelty of the data-dependent rotations has made RC5 an attractive object of study for cryptanalysts.</paragraph><paragraph>12-round RC5 (with 64-bit blocks) is susceptible to a<space/><link><target>differential cryptanalysis</target><part>differential attack</part></link><space/>using 2<xhtml:sup>44</xhtml:sup><space/>chosen plaintexts.<extension extension_name='ref' name="Biryukov">Biryukov A. and Kushilevitz E. (1998). Improved Cryptanalysis of RC5. EUROCRYPT 1998.</extension><space/>18&amp;ndash;20 rounds are suggested as sufficient protection.</paragraph><heading level='3'>Rijndael / AES</heading><paragraph><template><target>Main</target><arg>Advanced Encryption Standard</arg></template>DES has been superseded as a United States Federal Standard by the AES, adopted by NIST in 2001 after a 5-year<space/><link><target>Advanced Encryption Standard process</target><part>public competition</part></link>. The cipher was developed by two Belgian cryptographers,<space/><link><target>Joan Daemen</target></link><space/>and<space/><link><target>Vincent Rijmen</target></link>, and submitted under the name<space/><italics>Rijndael</italics>.</paragraph><paragraph>AES has a fixed block size of 128 bits and a key size of 128, 192, or 256 bits, whereas Rijndael can be specified with block and key sizes in any multiple of 32 bits, with a minimum of 128 bits. The blocksize has a maximum of 256 bits, but the keysize has no theoretical maximum. AES operates on a 44<space/><link><target>column-major order</target></link><space/>matrix of bytes, termed the<space/><italics>state</italics><space/>(versions of Rijndael with a larger block size have additional columns in the state).</paragraph><heading level='3'>Blowfish</heading><paragraph><template><target>Main</target><arg>Blowfish (cipher)</arg></template><italics><link><target>Blowfish (cipher)</target><part>Blowfish</part></link></italics><space/>is a block cipher, designed in 1993 by<space/><link><target>Bruce Schneier</target></link><space/>and included in a large number of cipher suites and encryption products. Blowfish has a 64-bit block size and a variable<space/><link><target>key length</target></link><space/>from 1 bit up to 448 bits.<extension extension_name='ref' name="blowfish-paper"><template><target>cite journal</target><arg name="author">[[Bruce Schneier]]<space/></arg><arg name="year">1993<space/></arg><arg name="title">Description of a New Variable-Length Key, 64-Bit Block Cipher (Blowfish)<space/></arg><arg name="url">http://www.schneier.com/paper-blowfish-fse.html<space/></arg></template></extension><space/>It is a 16-round<space/><link><target>Feistel cipher</target></link><space/>and uses large key-dependent<space/><link><target>Substitution box</target><part>S-boxes</part></link>. Notable features of the design include the key-dependent<space/><link><target>S-box</target><trail>es</trail></link><space/>and a highly complex<space/><link><target>key schedule</target></link>.</paragraph><paragraph>Schneier designed Blowfish as a general-purpose algorithm, intended as an alternative to the ageing DES and free of the problems and constraints associated with other algorithms. At the time Blowfish was released, many other designs were proprietary, encumbered by<space/><link><target>patent</target><trail>s</trail></link><space/>or were commercial/government secrets. Schneier has stated that, &quot;Blowfish is unpatented, and will remain so in all countries. The algorithm is hereby placed in the<space/><link><target>public domain</target></link>, and can be freely used by anyone.&quot; Blowfish provides a good encryption rate in software and no effective<space/><link><target>cryptanalysis</target></link><space/>of the full-round version has been found to date.</paragraph><heading level='2'>Generalizations</heading><heading level='3'>Tweakable block ciphers</heading><paragraph><template><target>Expand section</target><arg name="date">June 2008</arg></template>M. Liskov, R. Rivest, and D. Wagner have described a generalized version of block ciphers called &quot;tweakable&quot; block ciphers.<extension extension_name='ref' name="tweak"><template><target>cite journal</target><arg name="authors">M. Liskov, R. Rivest, and D. Wagner</arg><arg name="title">Tweakable Block Ciphers</arg><arg name="journal">Crypto 2002</arg><arg name="url">http://www.cs.colorado.edu/~jrblack/class/csci7000/f03/papers/tweak-crypto02.pdf</arg></template></extension><space/>A tweakable block cipher accepts a second input called the<space/><italics>tweak</italics><space/>along with its usual plaintext or ciphertext input. The tweak, along with the key, selects the permutation computed by the cipher. If changing tweaks is sufficiently lightweight (compared with a usually fairly expensive key setup operation), then some interesting new operation modes become possible. The<space/><link><target>disk encryption theory</target></link><space/>article describes some of these modes.</paragraph><heading level='3'>Format-preserving encryption</heading><paragraph><template><target>Main</target><arg>Format-preserving encryption</arg></template>Block ciphers traditionally work over a binary<space/><link><target>Alphabet_(computer_science)</target><part>alphabet</part></link>. That is, both the input and the output are binary strings, consisting of<space/><italics>n</italics><space/>zeroes and ones. In some situations, however, one may wish to have a block cipher that works over some other alphabet; for example, encrypting 16-digit credit card numbers in such a way that the ciphertext is also a 16-digit number might facilitate adding an encryption layer to legacy software. This is an example of<space/><italics>format-preserving encryption</italics>. More generally, format-preserving encryption requires a keyed permutation on some finite<space/><link><target>Formal_language</target><part>language</part></link>. This makes format-preserving encryption schemes a natural generalization of (tweakable) block ciphers. In contrast, traditional encryption schemes, such as CBC, are not permutations because the same plaintext can encrypt to multiple different ciphertexts, even when using a fixed key.</paragraph><heading level='2'>Relation to other cryptographic primitives</heading><paragraph>Block ciphers can be used to build other cryptographic primitives, such as those below. For these other primitives to be cryptographically secure, care has to be taken to build them the right way.</paragraph><list type='bullet'><listitem><link><target>Stream cipher</target><trail>s</trail></link><space/>can be built using block ciphers. OFB-mode and CTR mode are block modes that turn a block cipher into a stream cipher.</listitem></list><list type='bullet'><listitem><link><target>Cryptographic hash function</target><trail>s</trail></link><space/>can be built using block ciphers.<extension extension_name='ref'><link type='external' href='http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=44737'>ISO/IEC 10118-2:2010 ''Information technology &amp;mdash; Security techniques &amp;mdash; Hash-functions &amp;mdash; Part 2: Hash-functions using an n-bit block cipher''</link></extension><template><target>sfn</target><arg>Menezes</arg><arg>van Oorschot</arg><arg>Vanstone</arg><arg>1996</arg><arg name="loc">Chapter 9: Hash Functions and Data Integrity</arg></template><space/>See<space/><link><target>one-way compression function</target></link><space/>for descriptions of several such methods. The methods resemble the block cipher modes of operation usually used for encryption.</listitem></list><list type='bullet'><listitem><link><target>Cryptographically secure pseudorandom number generator</target><trail>s</trail></link><space/>(CSPRNGs) can be built using block ciphers.<extension extension_name='ref'><link type='external' href='http://csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf'>NIST Special Publication 800-90A ''Recommendation for Random Number Generation Using Deterministic Random Bit Generators''</link></extension><template><target>sfn</target><arg>Menezes</arg><arg>van Oorschot</arg><arg>Vanstone</arg><arg>1996</arg><arg name="loc">Chapter 5: Pseudorandom Bits and Sequences</arg></template></listitem></list><list type='bullet'><listitem>Secure<space/><link><target>pseudorandom permutation</target><trail>s</trail></link><space/>of arbitrarily sized finite sets can be constructed with block ciphers; see<space/><link><target>Format-Preserving Encryption</target></link>.</listitem></list><list type='bullet'><listitem><link><target>Message authentication code</target><trail>s</trail></link><space/>(MACs) are often built from block ciphers.<space/><link><target>CBC-MAC</target></link>,<space/><link><target>One-key MAC</target><part>OMAC</part></link><space/>and<space/><link><target>PMAC (cryptography)</target><part>PMAC</part></link><space/>are such MACs.</listitem></list><list type='bullet'><listitem><link><target>Authenticated encryption</target></link><space/>is also built from block ciphers. It means to both encrypt and MAC at the same time. That is to both provide<space/><link><target>confidentiality</target></link><space/>and<space/><link><target>authentication</target></link>.<space/><link><target>CCM mode</target><part>CCM</part></link>,<space/><link><target>EAX mode</target><part>EAX</part></link>,<space/><link><target>Galois/Counter Mode</target><part>GCM</part></link><space/>and<space/><link><target>OCB mode</target><part>OCB</part></link><space/>are such authenticated encryption modes.</listitem></list><paragraph>Just as block ciphers can be used to build hash functions, hash functions can be used to build block ciphers. Examples of such block ciphers are<space/><link><target>SHACAL</target></link>, BEAR and LION.</paragraph><heading level='2'>See also</heading><paragraph><template><target>Portal</target><arg>Cryptography</arg></template></paragraph><list type='bullet'><listitem><link><target>Cipher security summary</target></link></listitem><listitem><link><target>Topics in cryptography</target></link></listitem></list><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg></template></paragraph><heading level='2'>Further reading</heading><preblock><preline>*<space/><template><target>cite book</target><arg name="authors">Knudsen, Lars R. &<space/></arg><arg name="title">The Block Cipher Companion</arg><arg name="publisher">Springer</arg><arg name="year">2011</arg><arg name="isbn">9783642173417</arg><arg name="url">http://books.google.com/books?id</arg></template></preline></preblock><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://www.users.zetnet.co.uk/hopwood/crypto/scan/cs.html'>A list of many symmetric algorithms, the majority of which are block ciphers.</link></listitem><listitem><link type='external' href='http://www.mat.dtu.dk/people/Lars.R.Knudsen/bc.html'>The block cipher lounge</link></listitem><listitem><link type='external' href='http://www.rsa.com/rsalabs/node.asp?id=2168'>What is a block cipher?</link><space/>from RSA<space/><link><target>FAQ</target></link></listitem></list><paragraph><template><target>Cryptography navbox</target><arg>block</arg></template></paragraph><paragraph><template><target>DEFAULTSORT:Block Cipher</target></template><link><target>Category:Block ciphers</target><part>*</part></link><link><target>Category:Cryptographic primitives</target></link></paragraph></article>