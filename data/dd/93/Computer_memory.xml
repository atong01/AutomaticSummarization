<article title='Computer_memory'><paragraph><template><target>More footnotes</target><arg name="date">June 2011</arg></template><template><target>Memory types</target></template></paragraph><paragraph>In<space/><link><target>computing</target></link>,<space/><bold>memory</bold><space/>refers to the<space/><link><target>computer hardware</target></link><space/>devices used to store information for immediate use in a<space/><link><target>computer</target></link>; it is synonymous with the term &quot;<link><target>primary storage</target></link>&quot;. Computer memory operates at a high speed, for example<space/><link><target>random-access memory</target></link><space/>(RAM), as a distinction from<space/><link><target>Computer data storage</target><part>storage</part></link><space/>that provides slow-to-access<space/><link><target>Computer data storage</target><part>program and data storage</part></link><space/>but offers higher capacities. If needed, contents of the computer memory can be transferred to<space/><link><target>secondary storage</target></link>, through a memory management technique called &quot;<link><target>virtual memory</target></link>&quot;. An archaic synonym for memory is<space/><bold>store</bold>.<extension extension_name='ref'><link><target>Alan Turing</target><part>A.M. Turing</part></link><space/>and R.A. Brooker (1952).<space/><link type='external' href='http://www.alanturing.net/turing_archive/archive/m/m01/M01-005.html'>''Programmer's Handbook for Manchester Electronic Computer Mark II''</link>. University of Manchester.</extension></paragraph><paragraph>The term &quot;memory&quot;, meaning &quot;primary storage&quot; or &quot;<link><target>main memory</target></link>&quot;, is often associated with addressable<space/><link><target>semiconductor memory</target></link>, i.e.<space/><link><target>integrated circuits</target></link><space/>consisting of<space/><link><target>silicon</target></link>-based<space/><link><target>transistor</target><trail>s</trail></link>, used for example as primary storage but also other purposes in computers and other<space/><link><target>Digital data</target><part>digital</part></link><space/><link><target>Electronics</target><part>electronic</part></link><space/>devices. There are two main types of semiconductor memory,<space/><link><target>volatile memory</target><part>volatile</part></link><space/>and<space/><link><target>non-volatile memory</target><part>non-volatile</part></link>. Examples of<space/><link><target>non-volatile memory</target></link><space/>are<space/><link><target>flash memory</target></link><space/>(used as secondary memory) and<space/><link><target>Read-only memory</target><part>ROM</part></link>,<space/><link><target>Programmable read-only memory</target><part>PROM</part></link>,<space/><link><target>EPROM</target></link><space/>and<space/><link><target>EEPROM</target></link><space/>memory (used for storing<space/><link><target>firmware</target></link><space/>such as<space/><link><target>BIOS</target></link>). Examples of<space/><link><target>volatile memory</target></link><space/>are primary storage (typically dynamic RAM,<space/><link><target>dynamic random-access memory</target><part>DRAM</part></link>), and fast<space/><link><target>CPU cache</target></link><space/>memory (typically static RAM,<space/><link><target>Static random-access memory</target><part>SRAM</part></link>, which is fast but energy-consuming and offer lower memory capacity per area unit than DRAM).</paragraph><paragraph>Most semiconductor memory is organized into<space/><link><target>Memory cell (binary)</target><part>memory cells</part></link><space/>or<space/><link><target>bistable flip-flop</target><trail>s</trail></link>, each storing one<space/><link><target>bit</target></link><space/>(0 or 1).<space/><link><target>Flash memory</target></link><space/>organization includes both one bit per memory cell and multiple bits per cell (called MLC, Multiple Level Cell). The memory cells are grouped into words of fixed<space/><link><target>word length</target></link>, for example 1, 2, 4, 8, 16, 32, 64 or 128 bit. Each word can be accessed by a binary address of<space/><italics>N</italics><space/>bit, making it possible to store 2 raised by<space/><italics>N</italics><space/>words in the memory. This implies that<space/><link><target>processor register</target><trail>s</trail></link><space/>normally are not considered as memory, since they only store one word and do not include an addressing mechanism.</paragraph><paragraph>Typical secondary storage devices are<space/><link><target>hard disk drive</target><trail>s</trail></link><space/>and<space/><link><target>solid-state drive</target><trail>s</trail></link>.</paragraph><heading level='2'>History</heading><paragraph><link><target>File:ENIAC Penn2.jpg</target><part>left</part><part>thumbnail</part><part>200px</part><part>thumb</part><part>Detail of the back of a section of ENIAC, showing vacuum tubes</part></link></paragraph><paragraph>In the early 1940s, memory technology mostly permitted a capacity of a few bytes. The first electronic programmable<space/><link><target>digital computer</target></link>, the<space/><link><target>ENIAC</target></link>, using thousands of octal-base radio<space/><link><target>vacuum tube</target><trail>s</trail></link>, could perform simple calculations involving 20 numbers of ten decimal digits which were held in the vacuum tube<space/><link><target>accumulator (computing)</target><part>accumulator</part><trail>s</trail></link>.</paragraph><paragraph>The next significant advance in computer memory came with acoustic<space/><link><target>delay line memory</target></link>, developed by<space/><link><target>J. Presper Eckert</target></link><space/>in the early 1940s. Through the construction of a glass tube filled with<space/><link><target>mercury (element)</target><part>mercury</part></link><space/>and plugged at each end with a quartz crystal, delay lines could store bits of information in the form of sound waves propagating through mercury, with the quartz crystals acting as<space/><link><target>transducer</target><trail>s</trail></link><space/>to read and write bits.<space/><link><target>Delay line memory</target></link><space/>would be limited to a capacity of up to a few hundred thousand bits to remain efficient.</paragraph><paragraph>Two alternatives to the delay line, the<space/><link><target>Williams tube</target></link><space/>and<space/><link><target>Selectron tube</target></link>, originated in 1946, both using electron beams in glass tubes as means of storage. Using<space/><link><target>cathode ray tube</target><trail>s</trail></link>, Fred Williams would invent the Williams tube, which would be the first<space/><link><target>random access memory</target><part>random access computer memory</part></link>. The Williams tube would prove more capacious than the Selectron tube (the Selectron was limited to 256 bits, while the Williams tube could store thousands) and less expensive. The Williams tube would nevertheless prove to be frustratingly sensitive to environmental disturbances.</paragraph><paragraph>Efforts began in the late 1940s to find<space/><link><target>non-volatile memory</target></link>.<space/><link><target>Jay Forrester</target></link>,<space/><link><target>Jan A. Rajchman</target></link><space/>and<space/><link><target>An Wang</target></link><space/>developed<space/><link><target>magnetic core memory</target></link>, which allowed for recall of memory after power loss. Magnetic core memory would become the dominant form of memory until the development of<space/><link><target>transistor</target></link>-based memory in the late 1960s.</paragraph><paragraph>Developments in technology and economies of scale have made possible so-called Very Large Memory (VLM) computers.<extension extension_name='ref'><template><target>cite book</target><arg name="last"><space/>Stanek
</arg><arg name="first"><space/>William R.
</arg><arg name="title"><space/>Windows Server 2008 Inside Out
</arg><arg name="url"><space/>http://books.google.com/books?id</arg><arg name="accessdate"><space/>2012-08-20
</arg><arg name="year"><space/>2009
</arg><arg name="publisher"><space/>O'Reilly Media, Inc.
</arg><arg name="isbn"><space/>9780735638068
</arg><arg name="pages"><space/>1520
</arg><arg name="quote"><space/>[...] Windows Server Enterprise supports clustering with up to eight-node clusters and very large memory (VLM) configurations of up to 32 GB on 32-bit systems and 2 TB on 64-bit systems.</arg></template></extension></paragraph><paragraph>The term &quot;memory&quot; when used with reference to computers generally refers to<space/><link><target>Random Access Memory</target></link><space/>or<space/><link><target>Random-access memory</target><part>RAM</part></link>.</paragraph><heading level='2'>Volatile memory</heading><paragraph><link><target>File:Kinds-of-RAM.JPG</target><part>thumb</part><part>DDR-SD-RAM, SD-RAM and two older forms of RAM.</part></link><template><target>main</target><arg>Volatile memory</arg></template></paragraph><paragraph>Volatile memory is computer memory that requires power to maintain the stored information. Most modern<space/><link><target>semiconductor</target></link><space/>volatile memory is either static RAM (<link><target>Static random access memory</target><part>SRAM</part></link>) or dynamic RAM (<link><target>DRAM</target></link>). SRAM retains its contents as long as the power is connected and is easy for interfacing, but uses six transistors per bit. Dynamic RAM is more complicated for interfacing and control, needing regular refresh cycles to prevent losing its contents, but uses only one transistor and one capacitor per bit, allowing it to reach much higher densities and much cheaper per-bit costs.</paragraph><paragraph>SRAM is not worthwhile for desktop system memory, where DRAM dominates, but is used for their cache memories. SRAM is commonplace in small embedded systems, which might only need tens of kilobytes or less. Forthcoming volatile memory technologies that hope to replace or compete with SRAM and DRAM include<space/><link><target>Z-RAM</target></link>,<space/><link><target>TTRAM</target></link>,<space/><link><target>A-RAM</target></link><space/>and<space/><link><target>ETA RAM</target></link>.</paragraph><heading level='2'>Non-volatile memory</heading><paragraph><link><target>File:Intel X25-M Solid-State Drive.jpg</target><part>thumb</part><part><link><target>Solid-state drive</target><trail>s</trail></link><space/>are one of the latest forms of non-volatile memory.</part></link><template><target>main</target><arg>Non-volatile memory</arg></template></paragraph><paragraph>Non-volatile memory is computer memory that can retain the stored information even when not powered. Examples of non-volatile memory include read-only memory (see<space/><link><target>Read-only memory</target><part>ROM</part></link>),<space/><link><target>flash memory</target></link>, most types of magnetic computer storage devices (e.g.<space/><link><target>hard disks</target></link>,<space/><link><target>floppy discs</target></link><space/>and<space/><link><target>magnetic tape</target></link>),<space/><link><target>optical discs</target></link>, and early computer storage methods such as<space/><link><target>paper tape</target></link><space/>and<space/><link><target>punched cards</target></link>.</paragraph><paragraph>Forthcoming non-volatile memory technologies include<space/><link><target>FeRAM</target></link>,<space/><link><target>CBRAM</target></link>,<space/><link><target>Parallel Random Access Machine</target><part>PRAM</part></link>,<space/><link><target>SONOS</target></link>,<space/><link><target>RRAM</target></link>,<space/><link><target>Racetrack memory</target></link>,<space/><link><target>Nano-RAM</target><part>NRAM</part></link><space/>and<space/><link><target>Millipede memory</target><part>Millipede</part></link>.</paragraph><heading level='2'>Management of memory</heading><paragraph><template><target>Main</target><arg>Memory management</arg></template>Proper management of memory is vital for a computer system to operate properly. Modern<space/><link><target>operating system</target><trail>s</trail></link><space/>have complex systems to properly manage memory. Failure to do so can lead to bugs, slow performance, and at worst case, takeover by viruses and malicious software.</paragraph><paragraph>Nearly everything a computer programmer does requires him or her to consider how to manage memory. Even storing a number in memory requires the programmer to specify how the memory should store it.</paragraph><heading level='3'>Memory management bugs</heading><paragraph>Improper management of memory is a common cause of bugs, including the following types:</paragraph><list type='bullet'><listitem>In an<space/><link><target>arithmetic overflow</target></link>, a calculation results in a number larger than the allocated memory permits. For example, a signed 8-bit integer allows the numbers 128 to +127. If its value is 127 and it is instructed to add one, the computer can not store the number 128 in that space. Such a case will result in undesired operation, such as changing the number's value to 128 instead of +128.</listitem><listitem>A<space/><link><target>memory leak</target></link><space/>occurs when a program requests memory from the operating system and never returns the memory when it's done with it. A program with this bug will gradually require more and more memory until the program fails as it runs out.</listitem><listitem>A<space/><link><target>segmentation fault</target></link><space/>results when a program tries to access memory that it does not have permission to access. Generally a program doing so will be terminated by the operating system.</listitem><listitem>A<space/><link><target>buffer overflow</target></link><space/>means that a program writes data to the end of its allocated space and then continues to write data to memory that has been allocated for other purposes. This may result in erratic program behavior, including memory access errors, incorrect results, a crash, or a breach of system security. They are thus the basis of many software vulnerabilities and can be maliciously exploited.</listitem></list><heading level='3'>Early computer systems</heading><paragraph>In early computer systems, programs typically specified the location to write memory and what data to put there. This location was a physical location on the actual memory hardware. The slow processing of such computers did not allow for the complex memory management systems used today. Also, as most such systems were single-task, sophisticated systems were not required as much.</paragraph><paragraph>This approach has its pitfalls. If the location specified is incorrect, this will cause the computer to write the data to some other part of the program. The results of an error like this are unpredictable. In some cases, the incorrect data might overwrite memory used by the operating system. Computer crackers can take advantage of this to create viruses and malware.</paragraph><heading level='3'>Virtual memory</heading><paragraph><template><target>main</target><arg>virtual memory</arg></template>Virtual memory is a system where all physical memory is controlled by the operating system. When a program needs memory, it requests it from the operating system. The operating system then decides what physical location to place the memory in.</paragraph><paragraph>This offers several advantages. Computer programmers no longer need to worry about where the memory is physically stored or whether the user's computer will have enough memory. It also allows multiple types of memory to be used. For example, some memory can be stored in physical RAM chips while other memory is stored on a hard drive. This drastically increases the amount of memory available to programs. The operating system will place actively used memory in physical RAM, which is much faster than hard disks. When the amount of RAM is not sufficient to run all the current programs, it can result in a situation where the computer spends more time moving memory from RAM to disk and back than it does accomplishing tasks; this is known as<space/><link><target>Thrashing (computer science)</target><part>thrashing</part></link>.</paragraph><paragraph>Virtual memory systems usually include protected memory, but this is not always the case.</paragraph><heading level='3'>Protected memory</heading><paragraph><template><target>main</target><arg>memory protection</arg></template>Protected memory is a system where each program is given an area of memory to use and is not permitted to go outside that range. Use of protected memory greatly enhances both the reliability and security of a computer system.</paragraph><paragraph>Without protected memory, it is possible that a bug in one program will alter the memory used by another program. This will cause that other program to run off of corrupted memory with unpredictable results. If the operating system's memory is corrupted, the entire computer system may crash and need to be rebooted. At times programs intentionally alter the memory used by other programs. This is done by viruses and malware to take over computers.</paragraph><paragraph>Protected memory assigns programs their own areas of memory. If the operating system detects that a program has tried to alter memory that does not belong to it, the program is terminated. This way, only the offending program crashes, and other programs are not affected by the error.</paragraph><paragraph>Protected memory systems almost always include virtual memory as well.</paragraph><heading level='2'>See also</heading><paragraph><template><target>Commons category</target><arg>Computer memory</arg></template></paragraph><list type='bullet'><listitem><link><target>Virtual memory</target></link></listitem><listitem><link><target>Semiconductor memory</target></link></listitem><listitem><link><target>Memory geometry</target></link></listitem><listitem><link><target>Memory hierarchy</target></link></listitem></list><heading level='2'>Footnotes</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>References</heading><list type='bullet'><listitem><template><target>citation</target><arg name="last"><space/>Miller
</arg><arg name="first"><space/>Stephen W.
</arg><arg name="title"><space/>Memory and Storage Technology
</arg><arg name="year"><space/>1977
</arg><arg name="publisher"><space/>AFIPS Press
</arg><arg name="location"><space/>Montvale.</arg></template></listitem></list><list type='bullet'><listitem><template><target>citation</target><arg name="title"><space/>Memory and Storage Technology
</arg><arg name="year"><space/>1988
</arg><arg name="publisher"><space/>Time Life Books
</arg><arg name="location"><space/>Alexandria, Virginia.</arg></template></listitem></list><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://computer.howstuffworks.com/computer-memory.htm'>How Computer Memory Works</link>, by Jeff Tyson</listitem></list><paragraph><template><target>Authority control</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Computer Memory</target></template><link><target>Category:Computer memory</target><part></part></link><link><target>Category:Computer storage</target><part>Memory</part></link></paragraph><paragraph><link><target>bn:</target></link><link><target>es:Memoria (informtica)</target></link><link><target>fr:Mmoire informatique</target></link><link><target>ko:</target></link><link><target>hi: ()</target></link><link><target>la:Memoria computatralis</target></link><link><target>lt:Atmintis (kompiuterio)</target></link><link><target>ms:Storan komputer</target></link><link><target>pt:Memria (computador)</target></link><link><target>ro:Memoria sistemelor de calcul</target></link><link><target>si:</target></link></paragraph></article>