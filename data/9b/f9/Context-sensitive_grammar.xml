<article title='Context-sensitive_grammar'><paragraph>A<space/><bold>context-sensitive grammar</bold><space/>(<bold>CSG</bold>) is a<space/><link><target>formal grammar</target></link><space/>in which the left-hand sides and right-hand sides of any<space/><link><target>Production (computer science)</target><part>production rules</part></link><space/>may be surrounded by a context of<space/><link><target>terminal symbol</target><part>terminal</part></link><space/>and<space/><link><target>nonterminal symbol</target><trail>s</trail></link>. Context-sensitive grammars are more general than<space/><link><target>context-free grammar</target><trail>s</trail></link>, in the sense that there are some languages that cannot be described by context-free grammars, but can be described by CSG. Context-sensitive grammars are however less general (in the same sense of the term) than<space/><link><target>unrestricted grammar</target><trail>s</trail></link>, i.e. CSG occupy the intermediate position between context-free and unrestricted grammars in the<space/><link><target>Chomsky hierarchy</target></link>.</paragraph><paragraph>A<space/><link><target>formal language</target></link><space/>that can be described by a context-sensitive grammar, or, equivalently, by a<space/><link><target>noncontracting grammar</target></link><space/>or a<space/><link><target>linear bounded automaton</target></link>, is called a<space/><link><target>context-sensitive language</target></link>. Some textbooks actually define CSG as non-contracting,<extension extension_name='ref' name="Linz2011"><template><target>cite book</target><arg name="author">Peter Linz</arg><arg name="title">An Introduction to Formal Languages and Automata</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">2011</arg><arg name="publisher">Jones & Bartlett Publishers</arg><arg name="isbn">978-1-4496-1552-9</arg><arg name="page">291</arg></template></extension><extension extension_name='ref' name="Meduna2000"><template><target>cite book</target><arg name="author">Alexander Meduna</arg><arg name="title">Automata and Languages: Theory and Applications</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">2000</arg><arg name="publisher">Springer Science & Business Media</arg><arg name="isbn">978-1-85233-074-3</arg><arg name="page">730</arg></template></extension><extension extension_name='ref' name="DavisSigal1994"><template><target>cite book</target><arg name="author1">Martin Davis</arg><arg name="author2">Ron Sigal</arg><arg name="author3">Elaine J. Weyuker</arg><arg name="title">Computability, Complexity, and Languages: Fundamentals of Theoretical Computer Science</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">1994</arg><arg name="publisher">Morgan Kaufmann</arg><arg name="isbn">978-0-08-050246-5</arg><arg name="page">189</arg><arg name="edition">2nd</arg></template></extension><extension extension_name='ref'><template><target>cite book</target><arg name="last">Martin</arg><arg name="first">John C.</arg><arg name="title">Introduction to Languages and the Theory of Computation</arg><arg name="year">2010</arg><arg name="publisher">McGraw-Hill</arg><arg name="location">New York, NY</arg><arg name="isbn">9780073191461</arg><arg name="edition">4th</arg><arg name="page">277</arg></template></extension><space/>although this is not how<space/><link><target>Noam Chomsky</target></link><space/>defined it in 1959.<extension extension_name='ref' name="Levelt2008"><template><target>cite book</target><arg name="author">Willem J. M. Levelt</arg><arg name="title">An Introduction to the Theory of Formal Languages and Automata</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">2008</arg><arg name="publisher">John Benjamins Publishing</arg><arg name="isbn">90-272-3250-4</arg><arg name="page">26</arg></template></extension><extension extension_name='ref' name="DavisSigal1994b"><template><target>cite book</target><arg name="author1">Martin Davis</arg><arg name="author2">Ron Sigal</arg><arg name="author3">Elaine J. Weyuker</arg><arg name="title">Computability, Complexity, and Languages: Fundamentals of Theoretical Computer Science</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">1994</arg><arg name="publisher">Morgan Kaufmann</arg><arg name="isbn">978-0-08-050246-5</arg><arg name="pages">330–331</arg><arg name="edition">2nd</arg></template></extension><space/>This choice of definition makes no difference in terms of the languages generated (i.e. the two definitions are<space/><link><target>weak equivalence (formal languages)</target><part>weakly equivalent</part></link>), but it does make a difference in terms of what grammars are structurally considered context-sensitive; the later issue was analyzed by Chomsky in 1963.<extension extension_name='ref'>Chomsky, N. 1963. Formal properties of grammar. Handbook of Mathematical Psychology. R.D. Luce, R.R. Bush, &amp; E. Galanter (eds), New York: Wiley. pp. 360-363</extension><extension extension_name='ref' name="Levelt2008-126"><template><target>cite book</target><arg name="author">Willem J. M. Levelt</arg><arg name="title">An Introduction to the Theory of Formal Languages and Automata</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">2008</arg><arg name="publisher">John Benjamins Publishing</arg><arg name="isbn">90-272-3250-4</arg><arg name="pages">125–126</arg></template></extension></paragraph><paragraph>Chomsky introduced context-sensitive grammars as a way to describe the syntax of<space/><link><target>natural language</target></link><space/>where it is indeed often the case that a word may or may not be appropriate in a certain place depending upon the context.<space/><link><target>Walter Savitch</target></link><space/>has criticized the terminology &quot;context-sensitive&quot; as misleading and proposed &quot;non-erasing&quot; as better explaining the distinction between a CSG and an<space/><link><target>unrestricted grammar</target></link>.<extension extension_name='ref' name="Vide1999"><template><target>cite book</target><arg name="editor">Carlos Martín Vide</arg><arg name="title">Issues in Mathematical Linguistics: Workshop on Mathematical Linguistics, State College, Pa., April 1998</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">1999</arg><arg name="publisher">John Benjamins Publishing</arg><arg name="isbn">90-272-1556-1</arg><arg name="pages">186–187</arg></template></extension></paragraph><paragraph>Although it is well-known that certain features of languages (e.g.<space/><link><target>cross-serial dependency</target></link>) are not context-free, it is an open research question how much of CSG' expressive power is actually needed to capture the context sensitivity found in natural languages. Subsequent research in this area has focused on the more computationally tractable<space/><link><target>mildly context-sensitive language</target><trail>s</trail></link>.</paragraph><heading level='2'>Formal definition</heading><paragraph>A<space/><link><target>formal grammar</target></link><space/><italics>G</italics><space/>= (<italics>N</italics>, ,<space/><italics>P</italics>,<space/><italics>S</italics>), where<space/><italics>N</italics><space/>is a set of nonterminal symbols, is a set of terminal symbols,<space/><italics>P</italics><space/>is a set of production rules, and<space/><italics>S</italics><space/>is the<space/><link><target>start symbol</target></link>, is<space/><bold>context-sensitive</bold><space/>if all rules in<space/><italics>P</italics><space/>are of the form</paragraph><list type='ident'><listitem><italics>A</italics><space/></listitem></list><paragraph>where<space/><italics>A</italics><space/><italics>N</italics>,<extension extension_name='ref' group="note">i.e.,<space/><italics>A</italics><space/>is a single<space/><link><target>nonterminal</target></link></extension><space/>, (<italics>N</italics>)<xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup><space/><extension extension_name='ref' group="note">i.e., and are strings of nonterminals and<space/><link><target>Terminal symbol</target><part>terminal</part><trail>s</trail></link></extension><space/>and (<italics>N</italics>)<xhtml:sup>+</xhtml:sup>.<extension extension_name='ref' group="note">i.e., is a nonempty string of nonterminals and terminals</extension></paragraph><paragraph>A string<space/><italics>u</italics><space/>(<italics>N</italics>)<xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup><space/><bold>directly yields</bold>, or<space/><bold>directly derives to</bold>, a string<space/><italics>v</italics><space/>(<italics>N</italics>)<xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup>, denoted as<space/><italics>u</italics><space/><italics>v</italics>, if<space/><italics>u</italics><space/>can be written as<space/><italics>l</italics><italics>A</italics><italics>r</italics>, and<space/><italics>v</italics><space/>can be written as<space/><italics>l</italics><italics>r</italics>, for some production rule (<italics>A</italics>)<space/><italics>P</italics>, and some context strings<space/><italics>l</italics>,<space/><italics>r</italics><space/>(<italics>N</italics>)<xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup>.More generally,<space/><italics>u</italics><space/>is said to<space/><bold>yield</bold>, or<space/><bold>derive to</bold>,<space/><italics>v</italics>, denoted as<space/><italics>u</italics><space/><xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup><space/><italics>v</italics>, if<space/><italics>u</italics><space/>=<space/><italics>u</italics><xhtml:sub>1</xhtml:sub><space/>...<space/><italics>u</italics><xhtml:sub><italics>n</italics></xhtml:sub><space/>=<space/><italics>v</italics><space/>for some<space/><italics>n</italics>0 and some strings<space/><italics>u</italics><xhtml:sub>2</xhtml:sub>, ...,<space/><italics>u</italics><xhtml:sub><italics>n</italics>-1</xhtml:sub><space/>(<italics>N</italics>)<xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup>. That is, the relation (<xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup>) is the<space/><link><target>reflexive transitive closure</target></link><space/>of the relation ().</paragraph><paragraph>The<space/><bold>language</bold><space/>of the grammar<space/><italics>G</italics><space/>is the set of all terminal symbol strings derivable from its start symbol, formally:<space/><italics>L</italics>(<italics>G</italics>) = {<space/><italics>w</italics><space/><xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup>:<space/><italics>S</italics><space/><xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup><space/><italics>w</italics><space/>}.Derivations that do not end in a string composed of terminal symbols only are possible, but don't contribute to<space/><italics>L</italics>(<italics>G</italics>).</paragraph><paragraph>The only difference between this definition of Chomsky and that of<space/><link><target>unrestricted grammar</target><trail>s</trail></link><space/>is that can be empty in the unrestricted case.<extension extension_name='ref' name="Vide1999"></extension></paragraph><paragraph>Some definitions of a context-sensitive grammar only require that for any production rule of the form u v, the length of u shall be less than or equal to the length of v. This seemingly weaker requirement is in fact<space/><link><target>weak equivalence (formal languages)</target><part>weakly equivalent</part></link>,<extension extension_name='ref'><template><target>cite book</target><arg name="authors">John E. Hopcroft, Jeffrey D. Ullman</arg><arg name="title">Introduction to Automata Theory, Languages, and Computation</arg><arg name="publisher">Addison-Wesley</arg><arg name="year">1979</arg></template>; p.223-224; Exercise 9, p.230. In the 2003 edition, the chapter on CSG has been omitted.</extension><space/>see<space/><link><target>Noncontracting grammar#Transforming into context-sensitive grammar</target></link>.</paragraph><paragraph>In addition, a rule of the form</paragraph><list type='ident'><listitem><italics>S</italics><space/></listitem></list><paragraph>where represents the<space/><link><target>empty string</target></link><space/>and<space/><italics>S</italics><space/>does not appear on the right-hand side of any rule is permitted. The addition of the empty string allows the statement that the context sensitive languages are a proper superset of the context free languages, rather than having to make the weaker statement that all context free grammars with no productions are also context sensitive grammars.</paragraph><paragraph>The name<space/><italics>context-sensitive</italics><space/>is explained by the and that form the context of<space/><italics>A</italics><space/>and determine whether<space/><italics>A</italics><space/>can be replaced with or not. This is different from a<space/><link><target>context-free grammar</target></link><space/>where the context of a nonterminal is not taken into consideration. Indeed, every production of a context free grammar is of the form<space/><italics>V</italics><space/><italics>w</italics><space/>where<space/><italics>V</italics><space/>is a<space/><italics>single</italics><space/>nonterminal symbol, and<space/><italics>w</italics><space/>is a string of terminals and/or nonterminals;<space/><italics>w</italics><space/>can be empty.</paragraph><paragraph>If the possibility of adding the empty string to a language is added to the strings recognized by the noncontracting grammars (which can never include the empty string) then the languages in these two definitions are identical.</paragraph><paragraph>The<space/><bold>left-context</bold>- and<space/><bold>right-context</bold>-sensitive grammars are defined by restricting the rules to just the form<space/><italics>A</italics><space/>and to just<space/><italics>A</italics><space/>, respectively. The languages generated by these grammars are also the full class of context-sensitive languages.<extension extension_name='ref' name="Hazewinkel1989"><template><target>cite book</target><arg name="author">Michiel Hazewinkel</arg><arg name="title">Encyclopaedia of Mathematics</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">1989</arg><arg name="publisher">Springer Science & Business Media</arg><arg name="isbn">978-1-55608-003-6</arg><arg name="page">297</arg><arg name="volume">4</arg></template><space/>also at http://www.encyclopediaofmath.org/index.php/Grammar,_context-sensitive</extension><space/>The equivalence was established by<space/><link><target>Penttonen normal form</target></link>.<extension extension_name='ref' name="ItoKobayashi2010"><template><target>cite book</target><arg name="author1">Masami Ito</arg><arg name="author2">Yūji Kobayashi</arg><arg name="author3">Kunitaka Shoji</arg><arg name="title">Automata, Formal Languages and Algebraic Systems: Proceedings of AFLAS 2008, Kyoto, Japan, 20-22 September 2008</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">2010</arg><arg name="publisher">World Scientific</arg><arg name="isbn">978-981-4317-60-3</arg><arg name="page">183</arg></template><space/>citing<space/><template><target>Cite journal</target><arg name="last1"><space/>Penttonen<space/></arg><arg name="first1"><space/>Martti<space/></arg><arg name="last2"><space/></arg><arg name="first2"><space/></arg><arg name="date"><space/>Aug 1974<space/></arg><arg name="title"><space/>One-sided and two-sided context in formal grammars<space/></arg><arg name="journal"><space/>Information and Control<space/></arg><arg name="volume"><space/>25<space/></arg><arg name="issue"><space/>4<space/></arg><arg name="pages"><space/>371–392<space/></arg><arg name="publisher"><space/></arg><arg name="jstor"><space/></arg><arg name="doi"><space/>10.1016/S0019-9958(74)91049-3<space/></arg><arg name="url"><space/>http://www.sciencedirect.com/science/article/pii/S0019995874910493/pdf?md5</arg><arg name="format"><space/></arg><arg name="accessdate"><space/></arg></template></extension></paragraph><heading level='2'>Examples</heading><paragraph>The following grammar, with start symbol<space/><italics>S</italics>, generates the canonical non-<link><target>context-free language</target></link><space/>{<space/><italics>a</italics><xhtml:sup><italics>n</italics></xhtml:sup><italics>b</italics><xhtml:sup><italics>n</italics></xhtml:sup><italics>c</italics><xhtml:sup><italics>n</italics></xhtml:sup><space/>:<space/><italics>n</italics><space/>1 } :</paragraph><table><tablerow><tablecell>1. &amp;nbsp; &amp;nbsp; &amp;nbsp;</tablecell><tablecell></tablecell><tablecell><italics>S</italics><space/>&amp;nbsp; &amp;nbsp;</tablecell><tablecell><space/>&amp;nbsp; &amp;nbsp;</tablecell><tablecell><italics>a</italics></tablecell><tablecell><italics>b</italics></tablecell><tablecell><italics>c</italics></tablecell></tablerow><tablerow><tablecell>2.</tablecell><tablecell></tablecell><tablecell><italics>S</italics></tablecell><tablecell></tablecell><tablecell><italics>a</italics></tablecell><tablecell><italics>S</italics></tablecell><tablecell><italics>B</italics></tablecell><tablecell><italics>c</italics></tablecell></tablerow><tablerow><tablecell>3.</tablecell><tablecell><italics>c</italics></tablecell><tablecell>B''</tablecell><tablecell></tablecell><tablecell><italics>W</italics></tablecell><tablecell><italics>B</italics></tablecell></tablerow><tablerow><tablecell>4.</tablecell><tablecell><italics>W</italics></tablecell><tablecell><italics>B</italics></tablecell><tablecell></tablecell><tablecell><italics>W</italics></tablecell><tablecell><italics>X</italics></tablecell></tablerow><tablerow><tablecell>5.</tablecell><tablecell><italics>W</italics></tablecell><tablecell><italics>X</italics></tablecell><tablecell></tablecell><tablecell><italics>B</italics></tablecell><tablecell><italics>X</italics></tablecell></tablerow><tablerow><tablecell>6.</tablecell><tablecell><italics>B</italics></tablecell><tablecell><italics>X</italics></tablecell><tablecell></tablecell><tablecell><italics>B</italics></tablecell><tablecell><italics>c</italics></tablecell></tablerow><tablerow><tablecell>7.</tablecell><tablecell><italics>b</italics></tablecell><tablecell>B''</tablecell><tablecell></tablecell><tablecell><italics>b</italics></tablecell><tablecell><italics>b</italics></tablecell></tablerow></table><preblock><preline></preline></preblock><paragraph>Rules 1 and 2 allow for blowing-up<space/><italics>S</italics><space/>to<space/><italics>a</italics><xhtml:sup><italics>n</italics></xhtml:sup><italics>bc</italics>(<italics>Bc</italics>)<xhtml:sup><italics>n</italics>-1</xhtml:sup>; rules 3 to 6 allow for successively exchanging each<space/><italics>cB</italics><space/>to<space/><italics>Bc</italics><space/>(<link><target>Revesz' trick</target><part>four rules</part></link><space/>are needed for that since a rule<space/><italics>cB</italics><space/><italics>Bc</italics><space/>wouldn't fit into the scheme<space/><italics>A</italics><space/>); rule 7 allows for replacing a non-terminal<space/><italics>B</italics><space/>with its corresponding terminal<space/><italics>b</italics>, provided it is in the right place.A generation chain for<space/><italics>aaabbbccc</italics><space/>is:</paragraph><list type='ident'><listitem><italics>S</italics></listitem><listitem><xhtml:sub>2</xhtml:sub><space/><template><target>boldmono</target><arg>aSBc</arg></template></listitem><listitem><xhtml:sub>2</xhtml:sub><space/><italics>a</italics><template><target>boldmono</target><arg>aSBc</arg></template><italics>Bc</italics></listitem><listitem><xhtml:sub>1</xhtml:sub><space/><italics>aa</italics><template><target>boldmono</target><arg>abc</arg></template><italics>BcBc</italics></listitem><listitem><xhtml:sub>3</xhtml:sub><space/><italics>aaab</italics><template><target>boldmono</target><arg>WB</arg></template><italics>cBc</italics></listitem><listitem><xhtml:sub>4</xhtml:sub><space/><italics>aaab</italics><template><target>boldmono</target><arg>WX</arg></template><italics>cBc</italics></listitem><listitem><xhtml:sub>5</xhtml:sub><space/><italics>aaab</italics><template><target>boldmono</target><arg>BX</arg></template><italics>cBc</italics></listitem><listitem><xhtml:sub>6</xhtml:sub><space/><italics>aaab</italics><template><target>boldmono</target><arg>Bc</arg></template><italics>cBc</italics></listitem><listitem><xhtml:sub>3</xhtml:sub><space/><italics>aaabBc</italics><template><target>boldmono</target><arg>WB</arg></template><italics>c</italics></listitem><listitem><xhtml:sub>4</xhtml:sub><space/><italics>aaabBc</italics><template><target>boldmono</target><arg>WX</arg></template><italics>c</italics></listitem><listitem><xhtml:sub>5</xhtml:sub><space/><italics>aaabBc</italics><template><target>boldmono</target><arg>BX</arg></template><italics>c</italics></listitem><listitem><xhtml:sub>6</xhtml:sub><space/><italics>aaabBc</italics><template><target>boldmono</target><arg>Bc</arg></template><italics>c</italics></listitem><listitem><xhtml:sub>3</xhtml:sub><space/><italics>aaabB</italics><template><target>boldmono</target><arg>WB</arg></template><italics>cc</italics></listitem><listitem><xhtml:sub>4</xhtml:sub><space/><italics>aaabB</italics><template><target>boldmono</target><arg>WX</arg></template><italics>cc</italics></listitem><listitem><xhtml:sub>5</xhtml:sub><space/><italics>aaabB</italics><template><target>boldmono</target><arg>BX</arg></template><italics>cc</italics></listitem><listitem><xhtml:sub>6</xhtml:sub><space/><italics>aaabB</italics><template><target>boldmono</target><arg>Bc</arg></template><italics>cc</italics></listitem><listitem><xhtml:sub>7</xhtml:sub><space/><italics>aaa</italics><template><target>boldmono</target><arg>bb</arg></template><italics>Bccc</italics></listitem><listitem><xhtml:sub>7</xhtml:sub><space/><italics>aaab</italics><template><target>boldmono</target><arg>bb</arg></template><italics>ccc</italics></listitem></list><preblock><preline></preline></preblock><paragraph>More complicated grammars can be used to parse {<space/><italics>a</italics><xhtml:sup><italics>n</italics></xhtml:sup><italics>b</italics><xhtml:sup><italics>n</italics></xhtml:sup><italics>c</italics><xhtml:sup><italics>n</italics></xhtml:sup><italics>d</italics><xhtml:sup><italics>n</italics></xhtml:sup>:<space/><italics>n</italics><space/>1 }, and other languages with even more letters.</paragraph><paragraph>A context-sensitive grammar for the language {<space/><italics>a</italics><xhtml:sup>2<xhtml:sup>i</xhtml:sup></xhtml:sup><space/>: i 1 } is constructed in Example 9.5 (p.&amp;nbsp;224) of (Hopcroft, Ullman, 1979).</paragraph><heading level='2'>Kuroda normal form</heading><paragraph>Every context-sensitive grammar which does not generate the empty string can be transformed into a<space/><link><target>weak equivalence (formal languages)</target><part>weakly equivalent</part></link><space/>one in<space/><link><target>Kuroda normal form</target></link>. &quot;Weakly equivalent&quot; here means that the two grammars generate the same language. The normal form will not in general be context-sensitive, but will be a<space/><link><target>noncontracting grammar</target></link>.<extension extension_name='ref'><template><target>cite journal</target><arg name="author">Sige-Yuki Kuroda<space/></arg><arg name="title">Classes of languages and linear-bounded automata<space/></arg><arg name="journal">Information and Control<space/></arg><arg name="volume">7<space/></arg><arg name="number">2<space/></arg><arg name="pages">207&ndash;223<space/></arg><arg name="url">http://www.sciencedirect.com/science/article/pii/S0019995864901202/pdf?md5</arg><arg name="date">June 1964<space/></arg><arg name="doi">10.1016/s0019-9958(64)90120-2</arg></template></extension><extension extension_name='ref'><template><target>cite book</target><arg name="last1">Mateescu<space/></arg><arg name="first1">Alexandru<space/></arg><arg name="last2">Salomaa</arg><arg name="first2">Arto<space/></arg><arg name="editor1-first">Grzegorz</arg><arg name="editor1-last">Rozenberg</arg><arg name="editor2-first">Arto</arg><arg name="editor2-last">Salomaa<space/></arg><arg name="title">Handbook of Formal Languages. Volume I: Word, language, grammar<space/></arg><arg name="publisher">Springer-Verlag<space/></arg><arg name="year">1997<space/></arg><arg name="pages">175–252<space/></arg><arg name="chapter">Chapter 4: Aspects of Classical Language Theory<space/></arg><arg name="isbn">3-540-61486-9</arg></template>, Here: Theorem 2.2, p. 190</extension></paragraph><paragraph>The Kuroda normal form is an actual normal form for non-contracting grammars.</paragraph><heading level='2'>Properties and uses</heading><paragraph><template><target>see also</target><arg>context-sensitive language</arg></template><template><target>refimprove section</target><arg name="date">August 2014</arg></template></paragraph><heading level='3'>Equivalence to linear bounded automaton</heading><paragraph>A formal language can be described by a context-sensitive grammar if and only if it is accepted by some<space/><link><target>linear bounded automaton</target></link><space/>(LBA).<extension extension_name='ref'>(Hopcroft, Ullman, 1979); Theorem 9.5, 9.6, p.225-226</extension><space/>In some textbooks this result is attributed solely to Landweber and<space/><link><target>S.-Y. Kuroda</target><part>Kuroda</part></link>.<extension extension_name='ref' name="DavisSigal1994b"></extension><space/>Others call it the<space/><link><target>John Myhill</target><part>Myhill</part></link>-Landweber-Kuroda Theorem.<extension extension_name='ref' name="flac">http://www.cs.cmu.edu/~flac/pdf/ContSens.pdf</extension><space/>(Myhill introduced the concept of deterministic LBA in 1960. Peter S. Landweber published in 1963 that the language accepted by a deterministic LBA is context sensitive. Kuroda introduced the notion of non-deterministic LBA and the equivalence between LBA and CSGs in 1964.<extension extension_name='ref'><template><target>cite book</target><arg name="author">Alexander Meduna</arg><arg name="title">Automata and Languages: Theory and Applications</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">2000</arg><arg name="publisher">Springer Science & Business Media</arg><arg name="isbn">978-1-85233-074-3</arg><arg name="page">755</arg></template></extension><extension extension_name='ref'><template><target>cite book</target><arg name="author">Willem J. M. Levelt</arg><arg name="title">An Introduction to the Theory of Formal Languages and Automata</arg><arg name="url">http://books.google.com/books?id</arg><arg name="year">2008</arg><arg name="publisher">John Benjamins Publishing</arg><arg name="isbn">90-272-3250-4</arg><arg name="pages">126–127</arg></template></extension>)</paragraph><paragraph><template><target>As of</target><arg>2010</arg></template><space/>it is still an open question whether every context-sensitive language can be accepted by a<space/><italics>deterministic</italics><space/>LBA.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Martin</arg><arg name="first">John C.</arg><arg name="title">Introduction to Languages and the Theory of Computation</arg><arg name="year">2010</arg><arg name="publisher">McGraw-Hill</arg><arg name="location">New York, NY</arg><arg name="isbn">9780073191461</arg><arg name="edition">4th</arg><arg name="page">283</arg></template></extension></paragraph><heading level='3'>Closure properties</heading><paragraph>Context-sensitive languages are closed under<space/><link><target>complement (set theory)</target><part>complement</part></link>. This 1988 result is known as the<space/><link><target>ImmermanSzelepcsnyi theorem</target></link>.<extension extension_name='ref' name="flac"></extension>Moreover, they are closed under<space/><link><target>union (set theory)</target><part>union</part></link>,<space/><link><target>intersection (set theory)</target><part>intersection</part></link>,<space/><link><target>concatenation#Concatenation of sets of strings</target><part>concatenation</part></link>,<space/><link><target>String substitution</target><part>substitution</part></link>,<extension extension_name='ref' group="note">more formally: if<space/><italics>L</italics><space/><xhtml:sup><list type='bullet'><listitem></listitem></list></xhtml:sup><space/>is a context-sensitive language and<space/><italics>f</italics><space/>maps each<space/><italics>a</italics><space/>to a context-sensitive language<space/><italics>f</italics>(<italics>a</italics>), the<space/><italics>f</italics>(<italics>L</italics>) is again a context-sensitive language</extension><space/><link><target>inverse string homomorphism</target><part>inverse homomorphism</part></link>, and<space/><link><target>Kleene plus</target></link>.<extension extension_name='ref'>(Hopcroft, Ullman, 1979); Exercise S9.10, p.230-231</extension></paragraph><paragraph>Every<space/><link><target>recursively enumerable language</target></link><space/><italics>L</italics><space/>can be written as<space/><italics>h</italics>(<italics>L</italics>) for some context-sensitive language<space/><italics>L</italics><space/>and some<space/><link><target>string homomorphism</target></link><space/><italics>h</italics>.<extension extension_name='ref'>(Hopcroft, Ullman, 1979); Exercise S9.14, p.230-232.<space/><italics>h</italics><space/>maps each symbol to itself or to the empty string.</extension></paragraph><heading level='3'>Computational problems</heading><paragraph>The<space/><link><target>decision problem</target></link><space/>that asks whether a certain string<space/><italics>s</italics><space/>belongs to the language of a given context-sensitive grammar<space/><italics>G</italics>, is<space/><link><target>PSPACE-complete</target></link>. Morever, there are context-sensitive grammars whose languages are PSPACE-complete. In other words, there is a context-sensitive grammar<space/><italics>G</italics><space/>such that deciding whether a certain string<space/><italics>s</italics><space/>belongs to the language of<space/><italics>G</italics><space/>is PSPACE-complete (so<space/><italics>G</italics><space/>is fixed and only<space/><italics>s</italics><space/>is part of the input of the problem).<template><target>citation needed</target><arg name="date">August 2014</arg></template></paragraph><paragraph>The emptiness problem for context-sensitive grammars (given a context-sensitive grammar<space/><italics>G</italics>, is<space/><italics>L</italics>(<italics>G</italics>)= ?) is<space/><link><target>Undecidable language</target><part>undecidable</part></link>.<extension extension_name='ref'>(Hopcroft, Ullman, 1979); Exercise S9.13, p.230-231</extension><extension extension_name='ref' group="note">This also follows from (1)<space/><link><target>#top</target><part>context-free languages being also context-sensitive</part></link>, (2)<space/><link><target>#Closure properties</target><part>context-sensitive language being closed under intersection</part></link>, but (3)<space/><link><target>Context-free grammar#Language disjointness</target><part>disjointness of context-free languages being undecidable</part></link>.</extension></paragraph><heading level='3'>As model of natural languages</heading><paragraph>Savitch has proven the following theoretical result, on which he bases his criticism of CSGs as basis for natural language: for any<space/><link><target>recursively enumerable</target></link><space/>set<space/><italics>R</italics>, there exists a context-sensitive language/grammar<space/><italics>G</italics><space/>which can be used as a sort of proxy to test membership in<space/><italics>R</italics><space/>in the following way: given a string<space/><italics>s</italics>,<space/><italics>s</italics><space/>is in<space/><italics>R</italics><space/>if and only if there exists a positive integer<space/><italics>n</italics><space/>for which<space/><italics>sc<xhtml:sup>n</xhtml:sup></italics><space/>is in G, where<space/><italics>c</italics><space/>is an arbitrary symbol not part of<space/><italics>R</italics>.<extension extension_name='ref' name="Vide1999"></extension></paragraph><paragraph>It has been shown that nearly all<space/><link><target>natural language</target><trail>s</trail></link><space/>may in general be characterized by context-sensitive grammars, but the whole class of CSG's seems to be much bigger than natural languages.<template><target>citation needed</target><arg name="date">November 2011</arg></template><space/>Worse yet, since the aforementioned decision problem for CSG's is PSPACE-complete, that makes them totally unworkable for practical use, as a polynomial-time algorithm for a PSPACE-complete problem would imply<space/><link><target>P=NP problem</target><part>P=NP</part></link>.</paragraph><paragraph>It was proven that some natural languages are not context-free, based on identifying so-called<space/><link><target>cross-serial dependency</target><part>cross-serial dependencies</part></link><space/>and<space/><link><target>unbounded scrambling</target></link><space/>phenomena. However this does not necessarily imply that all the class CSG is necessary to capture &quot;context sensitivity&quot; in the colloquial sense of these terms in natural languages. For example, the strictly weaker (than CSG)<space/><link><target>linear context-free rewriting system</target><trail>s</trail></link><space/>(LCFRS) can account for the phenomenon of cross-serial dependencies; one can write a LCFRS grammar for {<italics>a<xhtml:sup>n</xhtml:sup>b<xhtml:sup>n</xhtml:sup>c<xhtml:sup>n</xhtml:sup>d<xhtml:sup>n</xhtml:sup></italics><space/>|<space/><italics>n</italics><space/>1} for example.<extension extension_name='ref'>http://user.phil-fak.uni-duesseldorf.de/~kallmeyer/GrammarFormalisms/4nl-cfg.pdf</extension><extension extension_name='ref'>http://user.phil-fak.uni-duesseldorf.de/~kallmeyer/GrammarFormalisms/4lcfrs-intro.pdf</extension><extension extension_name='ref' name="Kallmeyer2010"><template><target>cite book</target><arg name="author">Laura Kallmeyer</arg><arg name="title">Parsing Beyond Context-Free Grammars</arg><arg name="year">2010</arg><arg name="publisher">Springer Science & Business Media</arg><arg name="isbn">978-3-642-14846-0</arg><arg name="pages">1–5</arg></template></extension></paragraph><paragraph>Ongoing research on<space/><link><target>computational linguistics</target></link><space/>has focused on formulating other classes of languages that are &quot;<link><target>mildly context-sensitive language</target><part>mildly context-sensitive</part></link>&quot; whose decision problems are feasible, such as<space/><link><target>tree-adjoining grammar</target><trail>s</trail></link>,<space/><link><target>combinatory categorial grammar</target><trail>s</trail></link>,<space/><link><target>coupled context-free language</target><trail>s</trail></link>, and<space/><link><target>Generalized context-free grammar#Linear Context-free Rewriting Systems (LCFRSs)</target><part>linear context-free rewriting system</part><trail>s</trail></link>. The languages generated by these formalisms properly lie between the context-free and context-sensitive languages.</paragraph><paragraph>More recently, the class<space/><link><target>PTIME</target></link><space/>has been identified with<space/><link><target>range concatenation grammars</target></link>, which are now considered to be the most expressive of the mild-context sensitive languages.<extension extension_name='ref' name="Kallmeyer2010"></extension></paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Chomsky hierarchy</target></link></listitem><listitem><link><target>Growing context-sensitive grammar</target></link></listitem></list><heading level='2'>Notes</heading><paragraph><template><target>reflist</target><arg name="group">note</arg></template></paragraph><heading level='2'>References</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>Further reading</heading><list type='bullet'><listitem><template><target>cite book</target><arg name="author1">Alexander Meduna</arg><arg name="author2">Martin Švec</arg><arg name="title">Grammars with Context Conditions and Their Applications</arg><arg name="year">2005</arg><arg name="publisher">John Wiley & Sons</arg><arg name="isbn">978-0-471-73655-4</arg></template></listitem></list><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://danielmattosroberts.com/earley/context-sensitive-earley.pdf'>Earley Parsing for Context-Sensitive Grammars</link></listitem></list><paragraph><template><target>Formal languages and grammars</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Context-Sensitive Grammar</target></template><link><target>Category:Formal languages</target></link><link><target>Category:Grammar frameworks</target></link></paragraph></article>