<article title='Linear_filter'><paragraph><template><target>More footnotes</target><arg name="date">March 2011</arg></template></paragraph><paragraph><bold>Linear filters</bold><space/>process time-varying input signals to produce output signals, subject to the constraint of<space/><link><target>linearity</target></link>. This results from systems composed solely of components (or digital algorithms) classified as having a linear response. Most filters implemented in<space/><link><target>analog electronics</target></link>, in<space/><link><target>digital signal processing</target></link>, or in mechanical systems are classified as<space/><link><target>causal</target></link>,<space/><link><target>time invariant</target></link>, and linear<space/><link><target>signal processing filter</target><trail>s</trail></link>.</paragraph><paragraph>The general concept of linear filtering is also used in<space/><link><target>statistics</target></link>,<space/><link><target>data analysis</target></link>, and<space/><link><target>mechanical engineering</target></link><space/>among other fields and technologies. This includes non-causal filters and filters in more than one dimension such as those used in image processing; those filters are subject to different constraints leading to different design methods.</paragraph><heading level='2'>Impulse response and transfer function</heading><paragraph>A<space/><link><target>LTI system theory</target><part>linear time-invariant</part></link><space/>(LTI) filter can be uniquely specified by its<space/><link><target>impulse response</target></link><space/><italics>h</italics>, and the output of any filter is mathematically expressed as the<space/><link><target>convolution</target></link><space/>of the input with that impulse response. The<space/><link><target>frequency response</target></link>, given by the filter's<space/><link><target>transfer function</target></link><space/><extension extension_name='math'>H(\omega)</extension>, is an alternative characterization of the filter. Typical filter design goals are to realize a particular frequency response, that is, the magnitude of the transfer function<space/><extension extension_name='math'>|H(\omega)|</extension>; the importance of the<space/><link><target>Phase (waves)</target><part>phase</part></link><space/>of the transfer function varies according to the application, inasmuch as the shape of a waveform can be distorted to a greater or lesser extent in the process of achieving a desired (amplitude) response in the frequency domain. The frequency response may be tailored to, for instance, eliminate unwanted frequency components from an input<space/><link><target>Signal (information theory)</target><part>signal</part></link>, or to limit an amplifier to signals within a particular band of frequencies.</paragraph><paragraph>The<space/><link><target>impulse response</target></link><space/><italics>h</italics><space/>of a linear time-invariant causal filter specifies the output that the filter would produce if it were to receive an input consisting of a single impulse at time 0. An &quot;impulse&quot; in a continuous time filter means a<space/><link><target>Dirac delta function</target></link>; in a<space/><link><target>discrete time</target></link><space/>filter the<space/><link><target>Kronecker delta function</target></link><space/>would apply. The impulse response completely characterizes the response of any such filter, inasmuch as any possible input signal can be expressed as a (possibly infinite) combination of weighted delta functions. Multiplying the impulse response shifted in time according to the arrival of each of these delta functions by the amplitude of each delta function, and summing these responses together (according to the<space/><link><target>superposition principle</target></link>, applicable to all linear systems) yields the output waveform.</paragraph><paragraph>Mathematically this is described as the<space/><link><target>convolution</target></link><space/>of a time-varying input signal<space/><italics>x(t)</italics><space/>with the filter's<space/><link><target>impulse response</target></link><space/><italics>h</italics>, defined as:</paragraph><list type='ident'><listitem><extension extension_name='math'>y(t) = \int_{0}^{T} x(t-\tau)\, h(\tau)\, d\tau</extension></listitem><listitem><extension extension_name='math'>y_k = \sum_{i=0}^{N} x_{k-i}\, h_i<space/></extension></listitem></list><paragraph>The first form is the continuous-time form, which describes mechanical and analog electronic systems, for instance. The second equation is a discrete-time version used, for example, by digital filters implemented in software, so-called<space/><italics><link><target>digital signal processing</target></link></italics>. The impulse response<space/><italics>h</italics><space/>completely characterizes any linear time-invariant (or shift-invariant in the discrete-time case) filter. The input<space/><italics>x</italics><space/>is said to be &quot;<link><target>convolved</target></link>&quot; with the impulse response<space/><italics>h</italics><space/>having a (possibly infinite) duration of time<space/><italics>T</italics><space/>(or of<space/><italics>N</italics><space/><link><target>sampling period</target><trail>s</trail></link>).</paragraph><paragraph>Filter design consists of finding a possible transfer function that can be implemented within certain practical constraints dictated by the technology or desired complexity of the system, followed by a practical design that realizes that transfer function using the chosen technology. The complexity of a filter may be specified according to the<space/><link><target>degree of a polynomial</target><part>order</part></link><space/>of the filter.</paragraph><paragraph>Among the time-domain filters we here consider, there are two general classes of filter transfer functions that can approximate a desired frequency response. Very different mathematical treatments apply to the design of filters termed<space/><link><target>infinite impulse response</target></link><space/>(IIR) filters, characteristic of mechanical and analog electronics systems, and<space/><link><target>finite impulse response</target></link><space/>(FIR) filters, which can be implemented by<space/><link><target>discrete time</target></link><space/>systems such as computers (then termed<space/><italics><link><target>digital signal processing</target></link></italics>).</paragraph><heading level='3'>Infinite impulse response filters</heading><paragraph>Consider a physical system that acts as a linear filter, such as a system of springs and masses, or an analog electronic circuit that includes<space/><link><target>capacitor</target><trail>s</trail></link><space/>and/or<space/><link><target>inductor</target><trail>s</trail></link><space/>(along with other linear components such as<space/><link><target>resistor</target><trail>s</trail></link><space/>and<space/><link><target>amplifier</target><trail>s</trail></link>). When such a system is subject to an impulse (or any signal of finite duration) it responds with an output waveform that lasts past the duration of the input, eventually decaying exponentially in one or another manner, but never completely settling to zero (mathematically speaking). Such a system is said to have an<space/><link><target>infinite impulse response</target></link><space/>(IIR). The convolution integral (or summation) above extends over all time: T (or N) must be set to infinity.</paragraph><paragraph>For instance, consider a damped harmonic oscillator such as a pendulum, or a resonant L-C<space/><link><target>tank circuit</target></link>. If the pendulum has been at rest and we were to strike it with a hammer (the &quot;impulse&quot;), setting it in motion, it would swing back and forth (&quot;resonate&quot;), say, with an amplitude of 10&amp;nbsp;cm. After 10 minutes, say, the pendulum would still be swinging but the amplitude would have decreased to 5&amp;nbsp;cm, half of its original amplitude. After another 10 minutes its amplitude would be only 2.5&amp;nbsp;cm, then 1.25&amp;nbsp;cm, etc. However it would never come to a complete rest, and we therefore call that response to the impulse (striking it with a hammer) &quot;infinite&quot; in duration.</paragraph><paragraph>The complexity of such a system is specified by its order<space/><italics>N</italics>. N is often a constraint on the design of a transfer function since it specifies the number of reactive components in an analog circuit; in a digital IIR filter the number of computations required is proportional to N.</paragraph><heading level='3'>Finite impulse response filters</heading><paragraph>A filter implemented in a computer program (or a so-called<space/><link><target>digital signal processor</target></link>) is a discrete-time system; a different (but parallel) set of mathematical concepts defines the behavior of such systems. Although a<space/><link><target>digital filter</target></link><space/>can be an IIR filter if the algorithm implementing it includes<space/><link><target>feedback</target></link>, it is also possible to easily implement a filter whose impulse truly goes to zero after N time steps; this is called a<space/><link><target>finite impulse response</target></link><space/>(FIR) filter.</paragraph><paragraph>For instance, suppose one has a filter that, when presented with an impulse in a time series:</paragraph><list type='ident'><listitem>0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ...</listitem></list><paragraph>outputs a series that responds to that impulse at time 0 until time 4, and has no further response, such as:</paragraph><list type='ident'><listitem>0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0.....</listitem></list><paragraph>Although the impulse response has lasted 4 time steps after the input, starting at time 5 it has truly gone to zero. The extent of the impulse response is<space/><italics>finite</italics>, and this would be classified as a fourth-order FIR filter.The convolution integral (or summation) above need only extend to the full duration of the impulse response T, or the order N in a discrete time filter.</paragraph><heading level='3'>Implementation issues</heading><paragraph>Classical analog filters are IIR filters, and classical filter theory centers on the determination of transfer functions given by low order<space/><link><target>rational functions</target></link>, which can be synthesized using the same small number of reactive components.<extension extension_name='ref'>However, there are a few cases in which FIR filters directly process analog signals, involving non-feedback topologies and analog delay elements. An example is the discrete-time<space/><italics><link><target>analog sampled filter</target></link></italics>, implemented using a so-called<space/><link><target>bucket-brigade device</target></link><space/>clocked at a certain sampling rate, outputting copies of the input signal at different delays that can be combined with some weighting to realize an FIR filter. Electromechanical filters such as<space/><link><target>Electronic filter#SAW filters</target><part>SAW filters</part></link><space/>can likewise implement FIR filter responses; these operate in continuous time and can thus be designed for higher frequencies.</extension><space/>Using digital computers, on the other hand, both FIR and IIR filters are straightforward to implement in software.</paragraph><paragraph>A digital IIR filter can generally approximate a desired filter response using less computing power than a FIR filter, however this advantage is more often unneeded given the increasing power of digital processors. The ease of designing and characterizing FIR filters makes them preferable to the filter designer (programmer) when ample computing power is available. Another advantage of FIR filters is that their impulse response can be made symmetric, which implies a response in the frequency domain that has<space/><link><target>linear phase</target><part>zero phase at all frequencies</part></link><space/>(not considering a finite delay), which is absolutely impossible with any IIR filter.<extension extension_name='ref'>Outside of trivial cases, stable IIR filters with zero phase response are possible if they are not causal (and thus are unusable in real-time applications) or implementing transfer functions classified as unstable or &quot;marginally stable&quot; such as a<space/><link><target>double integrator</target></link>.</extension></paragraph><heading level='2'>Frequency response</heading><paragraph>The frequency response or<space/><link><target>transfer function</target></link><space/><extension extension_name='math'>|H(\omega)|</extension><space/>of a filter can be obtained if the impulse response is known, or directly through analysis using<space/><link><target>Laplace transform</target><trail>s</trail></link>, or in discrete-time systems the<space/><link><target>Z-transform</target></link>. The frequency response also includes the phase as a function of frequency, however in many cases the phase response is of little or no interest. FIR filters can be made to have zero phase, but with IIR filters that is generally impossible. With most IIR transfer functions there are related transfer functions having a frequency response with the same magnitude but a different phase; in most cases the so-called<space/><link><target>minimum phase</target></link><space/>transfer function is preferred.</paragraph><paragraph>Filters in the time domain are most often requested to follow a specified frequency response. Then, a mathematical procedure finds a filter transfer function that can be realized (within some constraints), and approximates the desired response to within some criterion. Common filter response specifications are described as follows:</paragraph><list type='bullet'><listitem>A<space/><link><target>low-pass filter</target></link><space/>passes low frequencies while blocking higher frequencies.</listitem><listitem>A<space/><link><target>high-pass filter</target></link><space/>passes high frequencies.</listitem><listitem>A<space/><link><target>band-pass filter</target></link><space/>passes a band (range) of frequencies.</listitem><listitem>A<space/><link><target>band-stop filter</target></link><space/>passes high and low frequencies outside of a specified band.</listitem><listitem>A<space/><link><target>notch filter</target></link><space/>has a null response at a particular frequency. This function may be combined with one of the above responses.</listitem><listitem>An<space/><link><target>all-pass filter</target></link><space/>passes all frequencies equally well, but alters the phase relationship among them.</listitem><listitem>An equalization filter is not designed to fully pass or block any frequency, but instead to gradually vary the amplitude response as a function of frequency: filters used as<space/><link><target>pre-emphasis</target></link><space/>filters,<space/><link><target>Equalization (audio)</target><part>equalizer</part><trail>s</trail></link>, or<space/><link><target>tone control</target><trail>s</trail></link><space/>are good examples.</listitem></list><heading level='3'>FIR transfer functions</heading><paragraph>Meeting a frequency response requirement with an FIR filter uses relatively straightforward procedures. In the most basic form, the desired frequency response itself can be sampled with a resolution of<space/><extension extension_name='math'>\Delta f</extension><space/>and Fourier transformed to the time domain. This obtains the filter coefficients<space/><italics>h<xhtml:sub>i</xhtml:sub></italics>, which implements a zero phase FIR filter that matches the frequency response at the sampled frequencies used. To better match a desired response,<space/><extension extension_name='math'>\Delta f</extension><space/>must be reduced. However the duration of the filter's impulse response, and the number of terms that must be summed for each output value (according to the above discrete time convolution) is given by<space/><extension extension_name='math'>N=1/(\Delta f \, T)</extension><space/>where<space/><italics>T</italics><space/>is the<space/><link><target>sampling period</target></link><space/>of the discrete time system (N-1 is also termed the<space/><italics>order</italics><space/>of an FIR filter). Thus the complexity of a digital filter and the computing time involved, grows inversely with<space/><extension extension_name='math'>\Delta f</extension>, placing a higher cost on filter functions that better approximate the desired behavior. For the same reason, filter functions whose critical response is at lower frequencies (compared to the<space/><link><target>sampling frequency</target></link><space/><italics>1/T</italics>) require a higher order, more computationally intensive FIR filter. An IIR filter can thus be much more efficient in such cases.</paragraph><paragraph>Elsewhere the reader may find further discussion of design methods for<space/><link><target>FIR filter#Filter design</target><part>practical FIR filter design</part></link>.</paragraph><heading level='3'>IIR transfer functions</heading><paragraph>Since classical analog filters are IIR filters, there has been a long history of studying the range of possible transfer functions implementing various of the above desired filter responses in continuous time systems. Using<space/><link><target>Bilinear transform</target><part>transform</part><trail>s</trail></link><space/>it is possible to convert these continuous time frequency responses to ones that are implemented in discrete time, for use in digital IIR filters. The complexity of any such filter is given by the<space/><italics>order</italics><space/>N, which describes the order of the<space/><link><target>rational function</target></link><space/>describing the frequency response. The order N is of particular importance in analog filters, because an N<xhtml:sup>th</xhtml:sup><space/>order electronic filter requires N reactive elements (capacitors and/or inductors) to implement. If a filter is implemented using, for instance,<space/><link><target>Active filter</target><part>biquad stages</part></link><space/>using<space/><link><target>op-amp</target><trail>s</trail></link>, N/2 stages are needed. In a digital implementation, the number of computations performed per sample is proportional to N. Thus the mathematical problem is to obtain the best approximation (in some sense) to the desired response using a smaller N, as we shall now illustrate.</paragraph><paragraph>Below are the frequency responses of several standard filter functions that approximate a desired response, optimized according to some criterion. These are all fifth-order low-pass filters, designed for a cutoff frequency of .5 in normalized units. Frequency responses are shown for the<space/><link><target>Butterworth filter</target><part>Butterworth</part></link>,<space/><link><target>Chebyshev filter</target><part>Chebyshev</part></link>,<space/><link><target>chebyshev filter#Type II Chebyshev filters</target><part>inverse Chebyshev</part></link>, and<space/><link><target>elliptic filter</target><trail>s</trail></link>.</paragraph><paragraph><link><target>Image:Electronic linear filters.svg</target><part>500px</part><part>center</part></link></paragraph><paragraph>As is clear from the image, the elliptic filter is sharper than the others, but at the expense of<space/><link><target>ripple (filters)</target><part>ripples</part></link><space/>in both its passband and stopband. The Butterworth filter has the poorest transition but has a more even response, avoiding ripples in either the passband or stopband. A<space/><link><target>Bessel filter</target></link><space/>(not shown) has an even poorer transition in the frequency domain, but maintains the best phase fidelity of a waveform. Different applications emphasize different design requirements, leading to different choices among these (and other) optimizations, or requiring a filter of a higher order.</paragraph><paragraph><link><target>Image:Sallen-Key Lowpass General.svg</target><part>thumb</part><part>300px</part><part>right</part><part>Low-pass filter implemented with a Sallen&amp;ndash;Key topology</part></link></paragraph><heading level='2'>Example implementations</heading><paragraph>A popular circuit implementing a second order active R-C filter is the<space/><link><target>Sallen Key filter</target><part>Sallen-Key</part></link><space/>design, whose schematic diagram is shown here. This topology can be adapted to produce low-pass, band-pass, and high pass filters.</paragraph><paragraph><link><target>File:FIR Filter.svg</target><part>thumb</part><part>300px</part><part>right</part><part>A discrete-time FIR filter of order ''N''. The top part is an ''N''-sample delay line; each delay step is denoted ''z''<xhtml:sup>1</xhtml:sup>.</part></link></paragraph><paragraph>An N<xhtml:sup>th</xhtml:sup><space/>order FIR filter can be implemented in a discrete time system using a computer program or specialized hardware in which the input signal is subject to N delay stages. The output of the filter is formed as the weighted sum of those delayed signals, as is depicted in the accompanying signal flow diagram. The response of the filter depends on the weighting coefficients denoted<space/><italics>b<xhtml:sub>0</xhtml:sub></italics>,<space/><italics>b<xhtml:sub>1</xhtml:sub></italics>, ....<space/><italics>b<xhtml:sub>N</xhtml:sub></italics>. For instance, if all of the coefficients were equal to unity, a so-called<space/><link><target>boxcar function</target></link>, then it would implement a low-pass filter with a low frequency gain of N+1 and a frequency response given by the<space/><link><target>sinc function</target></link>. Superior shapes for the frequency response can be obtained using coefficients derived from a more sophisticated design procedure.</paragraph><heading level='2'>Mathematics of filter design</heading><paragraph><template><target>Linear analog electronic filter</target></template></paragraph><paragraph><link><target>LTI system theory</target></link><space/>describes linear<space/><italics><link><target>time-invariant</target></link></italics><space/>(LTI) filters of all types. LTI filters can be completely described by their<space/><link><target>frequency response</target></link><space/>and<space/><link><target>phase response</target></link>, the specification of which uniquely defines their<space/><link><target>impulse response</target></link>, and<space/><italics>vice versa</italics>. From a mathematical viewpoint, continuous-time IIR LTI filters may be described in terms of linear<space/><link><target>differential equation</target><trail>s</trail></link>, and their impulse responses considered as<space/><link><target>Green's function</target><trail>s</trail></link><space/>of the equation. Continuous-time LTI filters may also be described in terms of the<space/><link><target>Laplace transform</target></link><space/>of their impulse response, which allows all of the characteristics of the filter to be analyzed by considering the pattern of<space/><link><target>pole (complex analysis)</target><part>pole</part><trail>s</trail></link><space/>and<space/><link><target>zero (complex analysis)</target><part>zero</part><trail>s</trail></link><space/>of their Laplace transform in the<space/><link><target>complex plane</target></link>. Similarly, discrete-time LTI filters may be analyzed via the<space/><link><target>Z-transform</target></link><space/>of their impulse response.</paragraph><paragraph>Before the advent of computer filter synthesis tools, graphical tools such as<space/><link><target>Bode plot</target><trail>s</trail></link><space/>and<space/><link><target>Nyquist plot</target><trail>s</trail></link><space/>were extensively used as design tools. Even today, they are invaluable tools to understanding filter behavior. Reference books<extension extension_name='ref'>A. Zverev,<space/><italics>Handbook of Filter Synthesis</italics>, John Wiley and Sons, 1967, ISBN 0-471-98680-1</extension><space/>had extensive plots of frequency response, phase response, group delay, and impulse response for various types of filters, of various orders. They also contained tables of values showing how to implement such filters as RLC ladders - very useful when amplifying elements were expensive compared to passive components. Such a ladder can also be designed to have minimal sensitivity to component variation<extension extension_name='ref'>Normally, computing sensitivities is a very laborious operation. But in the special case of an LC ladder driven by an impedance and terminated by a resistor, there is a neat argument showing the sensitivities are small. In such as case, the transmission at the maximum frequency(s) transfers the maximal possible energy to the output load, as determined by the physics of the source and load impedances. Since this point is a maximum,<space/><italics>all</italics><space/>derivatives with respect to<space/><italics>all</italics><space/>component values must be zero, since the result of changing<space/><italics>any</italics><space/>component value in<space/><italics>any</italics><space/>direction can only result in a reduction. This result only strictly holds true at the peaks of the response, but is roughly true at nearby points as well.</extension><space/>a property hard to evaluate without computer tools.</paragraph><paragraph>Many different analog filter designs have been developed, each trying to optimise some feature of the system response. For practical filters, a custom design is sometimes desirable, that can offer the best tradeoff between different design criteria, which may include component count and cost, as well as filter response characteristics.</paragraph><paragraph>These descriptions refer to the<space/><italics>mathematical</italics><space/>properties of the filter (that is, the frequency and phase response). These can be<space/><italics>implemented</italics><space/>as analog circuits (for instance, using a<space/><link><target>Sallen Key filter</target></link><space/>topology, a type of<space/><link><target>active filter</target></link>), or as algorithms in<space/><link><target>digital signal processing</target></link><space/>systems.</paragraph><paragraph>Digital filters are much more flexible to synthesize and use than analog filters, where the constraints of the design permits their use. Notably, there is no need to consider component tolerances, and very high Q levels may be obtained.</paragraph><paragraph>FIR digital filters may be implemented by the direct<space/><link><target>convolution</target></link><space/>of the desired impulse response with the input signal.They can easily be designed to give a<space/><link><target>matched filter</target></link><space/>for any arbitrary pulse shape.</paragraph><paragraph>IIR digital filters are often more difficult to design, due to problems including dynamic range issues,<space/><link><target>quantization noise</target></link><space/>and instability.Typically digital IIR filters are designed as a series of<space/><link><target>digital biquad filter</target><trail>s</trail></link>.</paragraph><paragraph>All low-pass second-order continuous-time filters have a<space/><link><target>transfer function</target></link><space/>given by</paragraph><list type='ident'><listitem><extension extension_name='math'>H(s)=\frac{K \omega^{2}_{0}}{s^{2}+\frac{\omega_{0}}{Q}s+\omega^{2}_{0}}.</extension></listitem></list><paragraph>All band-pass second-order continuous-time have a transfer function given by</paragraph><list type='ident'><listitem><extension extension_name='math'>H(s)=\frac{K \frac{\omega_{0}}{Q}s}{s^{2}+\frac{\omega_{0}}{Q}s+\omega^{2}_{0}}.</extension></listitem></list><paragraph>where</paragraph><list type='bullet'><listitem><italics>K</italics><space/>is the gain (low-pass DC gain, or band-pass mid-band gain) (<italics>K</italics><space/>is 1 for passive filters)</listitem><listitem><italics>Q</italics><space/>is the<space/><link><target>Q factor</target></link></listitem><listitem><extension extension_name='math'>\omega_{0}</extension><space/>is the center frequency</listitem><listitem><extension extension_name='math'>s=\sigma+j\omega</extension><space/>is the complex frequency</listitem></list><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Filter design</target></link></listitem><listitem><link><target>Laplace transform</target></link></listitem><listitem><link><target>Green's function</target></link></listitem><listitem><link><target>Prototype filter</target></link></listitem><listitem><link><target>Z-transform</target></link></listitem><listitem><link><target>System theory</target></link><list type='bullet'><listitem><link><target>LTI system theory</target></link></listitem></list></listitem><listitem><link><target>Nonlinear filter</target></link></listitem><listitem><link><target>Wiener filter</target></link></listitem><listitem><link><target>Gabor filter</target></link></listitem><listitem><link><target>Leapfrog filter</target></link></listitem></list><heading level='2'>Notes and references</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>Further reading</heading><paragraph><template><target>refbegin</target></template></paragraph><list type='bullet'><listitem><template><target>cite book</target><arg name="author">Williams, Arthur B & Taylor, Fred J</arg><arg name="title">Electronic Filter Design Handbook</arg><arg name="publisher">McGraw-Hill</arg><arg name="year">1995</arg><arg name="isbn">0-07-070441-4</arg></template></listitem><listitem><link type='external' href='http://www.national.com/an/AN/AN-779.pdf'>National Semiconductor AN-779</link><space/>application note describing analog filter theory</listitem><listitem><link type='external' href='http://www.latticesemi.com/lit/docs/appnotes/pac/an6017.pdf'>Lattice AN6017</link><space/>application note comparing and contrasting filters (in order of damping coefficient, from lower to higher values): Gaussian, Bessel, linear phase, Butterworth, Chebyshev, Legendre, elliptic. (with graphs).</listitem><listitem><link type='external' href='http://www.analog.com/Wizard/filter/detail_filter_help.pdf'>USING THE ANALOG DEVICES ACTIVE FILTER DESIGN TOOL</link>: a similar application note from<space/><link><target>Analog Devices</target></link><space/>with extensive graphs, active RC filter topologies, and tables for practical design.</listitem><listitem><link type='external' href='http://books.google.com/books?id=l7oC-LJwyegC&amp;amp;pg=PA267&amp;amp;lpg=PA267&amp;amp;dq=%22legendre+filter%22&amp;amp;source=web&amp;amp;ots=xRLtCLfslz&amp;amp;sig=0Nw2zhb8Y7FSrylN3wDaoIMkekQ#PPA238,M1'>&quot;Design and Analysis of Analog Filters: A Signal Processing Perspective&quot;</link><space/>by L. D. Paarmann</listitem></list><paragraph><template><target>refend</target></template></paragraph><paragraph><link><target>Category:Linear filters</target><part>*</part></link><link><target>Category:Filter theory</target></link></paragraph></article>