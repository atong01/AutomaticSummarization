<article title='Computer_music'><paragraph><template><target>Redirect</target><arg>Computer Music</arg><arg>the magazine</arg><arg>Computer Music (magazine)</arg></template><template><target>Use dmy dates</target><arg name="date">December 2013</arg></template><template><target>refimprove</target><arg name="date">May 2008</arg></template></paragraph><paragraph><bold>Computer music</bold><space/>is the applications of<space/><link><target>computing technology</target></link><space/>in<space/><link><target>musical composition</target><part>music composition</part></link>. It includes the theory and application of new and existing technologies and basic aspects of music, such as<space/><link><target>sound synthesis</target></link>,<space/><link><target>digital signal processing</target></link>,<space/><link><target>sound design</target></link>, sonic diffusion,<space/><link><target>acoustics</target></link>, and<space/><link><target>psychoacoustics</target></link>. The field of computer music can trace its roots back to the origins of<space/><link><target>electronic music</target></link>, and the very first experiments and innovations with electronic instruments at the turn of the 20th century.</paragraph><paragraph>More recently, with the advent of<space/><link><target>personal computing</target></link>, and the growth of<space/><link><target>home recording</target></link>, the term computer music is sometimes used to describe music that has been created using computing technology.</paragraph><heading level='2'>History</heading><paragraph><template><target>See also</target><arg>Computer music programming languages</arg></template>Much of the work on computer music has drawn on the relationship between<space/><link><target>music theory</target></link><space/>and<space/><link><target>mathematics</target></link>.The world's first computer to play music was<space/><link><target>CSIRAC</target></link><space/>which was designed and built by<space/><link><target>Trevor Pearcey</target></link><space/>and Maston Beard. Mathematician Geoff Hill programmed the CSIRAC to play popular musical melodies from the very early 1950s. In 1951 it publicly played the &quot;<link><target>Colonel Bogey March</target></link>&quot;<extension extension_name='ref'><template><target>Cite journal</target><arg name="last"><space/>Doornbusch<space/></arg><arg name="first"><space/>Paul</arg><arg name="title"><space/>The Music of CSIRAC<space/></arg><arg name="journal"><space/>Melbourne School of Engineering, Department of Computer Science and Software Engineering</arg><arg name="url"><space/>http://www.csse.unimelb.edu.au/dept/about/csirac/music/introduction.html</arg></template></extension><space/>of which no known recordings exist.However,<space/><link><target>CSIRAC</target></link><space/>played standard repertoire and was not used to extend musical thinking or composition practice which is current computer-music practice.</paragraph><paragraph>The oldest known recordings of computer generated music were played by the<space/><link><target>Ferranti Mark 1</target></link><space/>computer, a commercial version of the<space/><link><target>Manchester Small-Scale Experimental Machine</target><part>Baby</part></link><space/>Machine from the<space/><link><target>Victoria University of Manchester</target><part>University of Manchester</part></link><space/>in the autumn of 1951. The music program was written by<space/><link><target>Christopher Strachey</target></link>. During a session recorded by the<space/><link><target>BBC</target></link>, the machine managed to work its way through &quot;Baa Baa Black Sheep&quot;, &quot;God Save the King&quot; and part of &quot;In the Mood&quot;.<extension extension_name='ref'><template><target>Cite journal</target><arg name="last">Fildes<space/></arg><arg name="first">Jonathan<space/></arg><arg name="title">'Oldest' computer music unveiled<space/></arg><arg name="url">http://news.bbc.co.uk/2/hi/technology/7458479.stm<space/></arg><arg name="work">BBC News<space/></arg><arg name="date">June 17, 2008<space/></arg><arg name="deadurl">no<space/></arg><arg name="accessdate">4 December 2013</arg></template></extension></paragraph><paragraph>Two further major 1950s developments were the origins of digital sound synthesis by computer, and of<space/><link><target>algorithmic composition</target></link><space/>programs beyond rote playback.<space/><link><target>Max Mathews</target></link><space/>at Bell Laboratories developed the influential<space/><link><target>MUSIC-N</target><part>MUSIC I</part></link><space/>program and its descendents, further popularising computer music through a 1963 article in<space/><italics>Science</italics>.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Bogdanov<space/></arg><arg name="first">Vladimir<space/></arg><arg name="date">2001<space/></arg><arg name="title">All Music Guide to Electronica: The Definitive Guide to Electronic Music<space/></arg><arg name="publisher">Backbeat Books<space/></arg><arg name="page">320<space/></arg><arg name="url">http://books.google.com/books?id</arg><arg name="deadurl">no<space/></arg><arg name="accessdate">4 December 2013</arg></template></extension><space/>Amongst other pioneers, the musical chemists<space/><link><target>Lejaren Hiller</target></link><space/>and Leonard Isaacson worked on a series of algorithmic composition experiments from 1956-9, manifested in the 1957 premiere of the<space/><italics>Illiac Suite</italics><space/>for string quartet.<extension extension_name='ref'>Lejaren Hiller and Leonard Isaacson,<space/><italics>Experimental Music: Composition with an Electronic Computer</italics><space/>(New York: McGraw-Hill, 1959; reprinted Westport, Conn.: Greenwood Press, 1979). ISBN 0-313-22158-8.<space/><template><target>Page needed</target><arg name="date">November 2010</arg></template></extension></paragraph><paragraph>In<space/><link><target>Japan</target></link>, experiments in computer music date back to 1962, when<space/><link><target>Keio University</target></link><space/>professor Sekine and<space/><link><target>Toshiba</target></link><space/>engineer Hayashi experimented with the<space/><link><target>:jp:TOSBAC</target><part>TOSBAC</part></link><space/>computer. This resulted in a piece entitled<space/><italics>TOSBAC Suite</italics>, influenced by the<space/><italics>Illiac Suite</italics>. Later Japanese computer music compositions include a piece by Kenjiro Ezaki presented during<space/><link><target>Osaka Expo '70</target></link><space/>and &quot;Panoramic Sonore&quot; (1974) by music critic Akimichi Takeda. Ezaki also published an article called &quot;Contemporary Music and Computers&quot; in 1970. Since then, Japanese research in computer music has largely been carried out for commercial purposes in<space/><link><target>popular music</target></link>, though some of the more serious Japanese musicians used large computer systems such as the<space/><italics><link><target>Fairlight (company)</target><part>Fairlight</part></link></italics><space/>in the 1970s.<extension extension_name='ref' name="shimazu104"><template><target>cite journal</target><arg name="last">Shimazu</arg><arg name="first">Takehito</arg><arg name="title">The History of Electronic and Computer Music in Japan: Significant Composers and Their Works</arg><arg name="journal">[[Leonardo Music Journal]]</arg><arg name="year">1994</arg><arg name="volume">4</arg><arg name="pages">102–106 [104]</arg><arg name="url">http://www.scribd.com/doc/93116556/The-History-of-Electronic-and-Experimental-Music-in-Japan</arg><arg name="accessdate">9 July 2012</arg><arg name="publisher">[[MIT Press]]</arg><arg name="doi">10.2307/1513190</arg></template></extension></paragraph><paragraph>Early computer-music programs typically did not run in<space/><link><target>Real-time computing</target><part>real time</part></link>. Programs would run for hours or days, on multi-million-dollar computers, to generate a few minutes of music.<extension extension_name='ref'><template><target>cite web</target><arg name="last">Cattermole</arg><arg name="first">Tannith</arg><arg name="title">Farseeing inventor pioneered computer music</arg><arg name="url">http://www.gizmag.com/computer-music-pioneer-max-mathews/18530/</arg><arg name="publisher">Gizmag<space/></arg><arg name="accessdate">28 October 2011</arg><arg name="date">May 9, 2011</arg></template><xhtml:br></xhtml:br>&quot;In 1957 the MUSIC program allowed an IBM 704 mainframe computer to play a 17-second composition by Mathews. Back then computers were ponderous, so synthesis would take an hour.&quot;</extension><extension extension_name='ref' name="Sci11-63MaxMat"><template><target>cite journal</target><arg name="last">Mathews</arg><arg name="first">Max</arg><arg name="title">The Digital Computer as a Musical Instrument</arg><arg name="journal">Science</arg><arg name="date">1 November 1963</arg><arg name="volume">142</arg><arg name="issue">3592</arg><arg name="pages">553–557</arg><arg name="doi">10.1126/science.142.3592.553</arg><arg name="url">https://www.sciencemag.org/content/142/3592/553.short<space/></arg><arg name="accessdate">28 October 2011</arg></template><xhtml:br></xhtml:br>&quot;The generation of sound signals requires very high sampling rates.... A high speed machine such as the I.B.M. 7090 ... can compute only about 5000 numbers per second ... when generating a reasonably complex sound.&quot;</extension><space/>One way around this was to use a 'hybrid system', most notably the<space/><link><target>Roland MC-8 Microcomposer</target></link>, where a<space/><link><target>microprocessor</target></link>-based system controls an<space/><link><target>analog synthesizer</target></link>, released in 1978.<extension extension_name='ref' name="shimazu104"></extension><space/><link><target>John Chowning</target></link>'s work on<space/><link><target>FM synthesis</target></link><space/>from the 1960s to the 1970s allowed much more efficient digital synthesis,<extension extension_name='ref'><template><target>cite book</target><arg name="last">Dean</arg><arg name="first">R. T.</arg><arg name="title">The Oxford handbook of computer music</arg><arg name="year">2009</arg><arg name="publisher">Oxford University Press</arg><arg name="isbn">0-19-533161-3</arg><arg name="page">20</arg></template></extension><space/>eventually leading to the development of the affordable FM synthesis-based<space/><link><target>Yamaha DX7</target></link><space/><link><target>digital synthesizer</target></link>, released in 1983.<extension extension_name='ref' name="dean1"><template><target>cite book</target><arg name="last">Dean</arg><arg name="first">R. T.</arg><arg name="title">The Oxford handbook of computer music</arg><arg name="year">2009</arg><arg name="publisher">Oxford University Press</arg><arg name="isbn">0-19-533161-3</arg><arg name="page">1</arg></template></extension><space/>In addition to the Yamaha DX7, the advent of inexpensive digital<space/><link><target>Microprocessor</target><part>chips</part></link><space/>and<space/><link><target>microcomputer</target><trail>s</trail></link><space/>opened the door to real-time generation of computer music.<extension extension_name='ref' name="dean1"></extension><space/>In the 1980s, Japanese<space/><link><target>personal computer</target><trail>s</trail></link><space/>such as the<space/><link><target>NEC PC-8801</target><part>NEC PC-88</part></link><space/>came installed with FM synthesis<space/><link><target>sound chip</target><trail>s</trail></link><space/>and featured<space/><link><target>audio programming language</target><trail>s</trail></link><space/>such as<space/><link><target>Music Macro Language</target></link><space/>(MML) and<space/><link><target>MIDI</target></link><space/>interfaces, which were most often used to produce<space/><link><target>video game music</target></link>, or<space/><link><target>chiptune</target><trail>s</trail></link>.<extension extension_name='ref' name="shimazu104"></extension><space/>By the early 1990s, the performance of microprocessor-based computers reached the point that real-time generation of computer music using more general programs and algorithms became possible.<extension extension_name='ref' name="RTDean2009"><template><target>cite book</target><arg name="last">Dean</arg><arg name="first">R. T.</arg><arg name="title">The Oxford handbook of computer music</arg><arg name="year">2009</arg><arg name="publisher">Oxford University Press</arg><arg name="isbn">0-19-533161-3</arg><arg name="pages">4–5</arg></template><xhtml:br></xhtml:br>&quot;... by the 90s ... digital sound manipulation (using MSP or many other platforms) became widespread, fluent and stable.&quot;</extension><extension extension_name='blockquote'>Interesting sounds must have a fluidity and changeability that allows them to remain fresh to the ear. In computer music this subtle ingredient is bought at a high computational cost, both in terms of the number of items requiring detail in a score and in the amount of interpretive work the instruments must produce to realize this detail in sound.<extension extension_name='ref' name="CRMM-Loy"><template><target>cite book</target><arg name="editor-last">Roads<space/></arg><arg name="editor-first">Curtis<space/></arg><arg name="title">The Music Machine: Selected Readings from Computer Music Journal<space/></arg><arg name="year">1992<space/></arg><arg name="publisher">MIT Press<space/></arg><arg name="isbn">0-262-68078-5<space/></arg><arg name="pages">344<space/></arg><arg name="author">Loy, D. Gareth<space/></arg><arg name="authorlink">Notes on the implementation of MUSBOX...</arg></template></extension></extension></paragraph><heading level='2'>Advances</heading><paragraph>Advances in computing power and software for manipulation of digital media have dramatically affected the way computer music is generated and performed. Current-generation micro-computers are powerful enough to perform very sophisticated audio synthesis using a wide variety of algorithms and approaches. Computer music systems and approaches are now ubiquitous, and so firmly embedded in the process of creating music that we hardly give them a second thought: computer-based synthesizers, digital mixers, and effects units have become so commonplace that use of digital rather than analog technology to create and record music is the norm, rather than the exception.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><heading level='2'>Research</heading><paragraph>Despite the ubiquity of computer music in contemporary culture, there is considerable activity in the field of computer music, as researchers continue to pursue new and interesting computer-based synthesis, composition, and performance approaches. Throughout the world there are many organizations and institutions dedicated to the area of computer and electronic music study and research, including the<space/><link><target>International Computer Music Association</target><part>ICMA</part></link><space/>(International Computer Music Association),<space/><link><target>IRCAM</target></link>, GRAME,<space/><link><target>SEAMUS</target></link><space/>(Society for Electro Acoustic Music in the United States),<space/><link><target>Canadian Electroacoustic Community</target><part>CEC</part></link><space/>(Canadian Electroacoustic Community), and a great number of institutions of higher learning around the world.</paragraph><heading level='2'>Computer-generated music</heading><paragraph>Computer-generated music is music<space/><link><target>musical composition</target><part>composed</part></link><space/>by, or with the extensive aid of, a computer. Although any music which uses computers in its composition or realisation is computer-generated to some extent, the use of computers is now so widespread (in the editing of pop songs, for instance) that the phrase computer-generated music is generally used to mean a kind of music which could not have been created<space/><italics>without</italics><space/>the use of computers.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph>We can distinguish two groups of computer-generated music: music in which a computer generated the score, which could be performed by humans, and music which is both composed and performed by computers. There is a large genre of music that is organized, synthesized, and created on computers.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><heading level='3'>Music composed and performed by computers</heading><paragraph><template><target>Main</target><arg>Algorithmic composition</arg></template><template><target>See also</target><arg>Generative music</arg><arg>Evolutionary music</arg><arg>Genetic algorithm</arg></template>Later, composers such as<space/><link><target>Gottfried Michael Koenig</target></link><space/>had computers generate the sounds of the composition as well as the score. Koenig produced<space/><link><target>algorithmic composition</target></link><space/>programs which were a generalisation of his own<space/><link><target>serial composition</target></link><space/>practice. This is not exactly similar to Xenakis' work as he used mathematical abstractions and examined how far he could explore these musically. Koenig's software translated the calculation of mathematical equations into codes which represented musical notation. This could be converted into musical notation by hand and then performed by human players. His programs Project 1 and Project 2 are examples of this kind of software. Later, he extended the same kind of principles into the realm of synthesis, enabling the computer to produce the sound directly. SSP is an example of a program which performs this kind of function. All of these programs were produced by Koenig at the<space/><link><target>Institute of Sonology</target></link><space/>in<space/><link><target>Utrecht</target></link><space/>in the 1970s.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph>Procedures such as those used by Koenig and Xenakis are still in use today.<template><target>Citation needed</target><arg name="date">September 2012</arg></template><space/>Since the invention of the<space/><link><target>MIDI</target></link><space/>system in the early 1980s, for example, some people have worked on programs which map MIDI notes to an algorithm and then can either output sounds or music through the computer's<space/><link><target>sound card</target></link><space/>or write an<space/><link><target>audio file format</target><part>audio file</part></link><space/>for other programs to play.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph>Some of these simple programs are based on<space/><link><target>fractal geometry</target></link>, and can map midi notes to specific<space/><link><target>fractal</target><trail>s</trail></link>, or fractal equations. Although such programs are widely available and are sometimes seen as clever toys for the non-musician, some professional musicians have given them attention also. The resulting 'music' can be more like noise, or can sound quite familiar and pleasant. As with much algorithmic music, and<space/><link><target>algorithmic art</target></link><space/>in general, more depends on the way in which the parameters are mapped to aspects of these equations than on the equations themselves. Thus, for example, the same equation can be made to produce both a lyrical and melodic piece of music in the style of the mid-nineteenth century, and a fantastically dissonant<space/><link><target>cacophony</target></link><space/>more reminiscent of the avant-garde music of the 1950s and 1960s.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph>Other programs can map mathematical formulae and constants to produce sequences of notes. In this manner, an<space/><link><target>irrational number</target></link><space/>can give an infinite sequence of notes where each note is a digit in the decimal expression of that number. This sequence can in turn be a composition in itself, or simply the basis for further elaboration.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph>Operations such as these, and even more elaborate operations can also be performed in computer music programming languages such as<space/><link><target>Max/MSP</target></link>,<space/><link><target>SuperCollider</target></link>,<space/><link><target>Csound</target></link>,<space/><link><target>Pure Data</target></link><space/>(Pd),<space/><link><target>Keykit</target></link>, and<space/><link><target>ChucK</target></link>. These programs now easily run on most personal computers, and are often capable of more complex functions than those which would have necessitated the most powerful mainframe computers several decades ago.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph>There exist programs that generate &quot;human-sounding&quot; melodies by using a vast database of phrases. One example is<space/><link><target>Band-in-a-Box</target></link>, which is capable of creating<space/><link><target>jazz</target></link>,<space/><link><target>blues</target></link><space/>and<space/><link><target>Rock music</target><part>rock</part></link><space/>instrumental solos with almost no user interaction. Another is<space/><link><target>Impro-Visor</target></link>, which uses a<space/><link><target>stochastic context-free grammar</target></link><space/>to generate phrases and complete solos.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph>Another 'cybernetic' approach to computer composition uses specialized hardware to detect external stimuli which are then mapped by the computer to realize the performance. Examples of this style of computer music can be found in the middle-80's work of<space/><link><target>David Rokeby</target></link><space/>(Very Nervous System) where audience/performer motions are 'translated' to MIDI segments. Computer controlled music is also found in the performance pieces by the Canadian composer<space/><link><target>Udo Kasemets</target></link><space/>such as the Marce(ntennia)l Circus C(ag)elebrating Duchamp (1987), a realization of the<space/><link><target>Marcel Duchamp</target></link><space/>process piece<space/><italics>Erratum Musical</italics><space/>using an electric model train to collect a hopper-car of stones to be deposited on a drum wired to an Analog:Digital converter, mapping the stone impacts to a score display (performed in Toronto by pianist<space/><link><target>Gordon Monahan</target></link><space/>during the 1987 Duchamp Centennial), or his installations and performance works (e.g. Spectrascapes) based on his Geo(sono)scope (1986) 15x4-channel computer-controlled audio mixer. In these latter works, the computer generates sound-scapes from tape-loop sound samples, live shortwave or sine-wave generators.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><heading level='3'>Computer-generated scores for performance by human players</heading><paragraph>Many systems for generating musical scores actually existed well before the time of computers. One of these was<space/><link><target>Musikalisches Wrfelspiel</target></link><space/><italics>(Musical dice game</italics>; 18th century), a system which used throws of the dice to randomly select measures from a large collection of small phrases. When patched together, these phrases combined to create musical pieces which could be performed by human players. Although these works were not actually composed with a computer in the modern sense, it uses a rudimentary form of the random combinatorial techniques sometimes used in computer-generated composition.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph>The world's first digital computer music was generated in Australia by programmer Geoff Hill on the<space/><link><target>CSIRAC</target></link><space/>computer which was designed and built by Trevor Pearcey and Maston Beard, although it was only used to play standard tunes of the day. Subsequently, one of the first composers to write music with a computer was<space/><link><target>Iannis Xenakis</target></link>. He wrote programs in the<space/><link><target>FORTRAN</target></link><space/>language that generated numeric data that he transcribed into scores to be played by traditional<space/><link><target>musical instrument</target><trail>s</trail></link>. An example is<space/><italics>ST/48</italics><space/>of 1962. Although Xenakis could well have composed this music by hand, the intensity of the calculations needed to transform probabilistic mathematics into musical notation was best left to the number-crunching power of the computer.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph>Computers have also been used in an attempt to imitate the music of great composers of the past, such as<space/><link><target>Wolfgang Amadeus Mozart</target><part>Mozart</part></link>. A present exponent of this technique is<space/><link><target>David Cope</target></link>. He wrote computer programs that analyse works of other composers to produce new works in a similar style. He has used this program to great effect with composers such as Bach and Mozart (his program<space/><italics>Experiments in Musical Intelligence</italics><space/>is famous for creating &quot;Mozart's 42nd Symphony&quot;), and also within his own pieces, combining his own creations with that of the computer.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph><link><target>Melomics</target></link>, a research project from the<space/><link><target>University of Mlaga</target></link>, Spain, developed a computer composition cluster named<space/><link><target>Iamus (computer)</target><part>Iamus</part></link>, which composes complex, multi-instrument pieces for editing and performance. Since its inception,<space/><link><target>Iamus (computer)</target><part>Iamus</part></link><space/>has composed a full album in 2012, appropriately named<space/><link><target>Iamus (album)</target><part>Iamus</part></link>, which<space/><link><target>New Scientist</target></link><space/>described as &quot;The first major work composed by a computer and performed by a full orchestra.&quot;<extension extension_name='ref'><template><target>cite journal</target><arg name="title">Computer composer honours Turing's centenary</arg><arg name="journal">News Scientist<space/></arg><arg name="date">5 July 2012<space/></arg><arg name="url">http://www.newscientist.com/article/mg21528724.300-computer-composer-honours-turings-centenary.html</arg></template></extension><space/>The group has also developed an<space/><link><target>API</target></link><space/>for developers to utilize the technology, and makes its music available on its website.</paragraph><heading level='3'><template><target>anchor</target><arg>Computer-Aided Algorithmic Composition</arg></template>Computer-aided algorithmic composition</heading><paragraph><link><target>Image:GenSystemVenn.png</target><part>thumb</part><part>right</part><part>Diagram illustrating the position of CAAC in relation to other<space/><link><target>Generative music</target></link><space/>Systems</part><trail>Computer</trail></link>-aided algorithmic composition (CAAC, pronounced &quot;sea-ack&quot;) is the implementation and use of<space/><link><target>algorithmic composition</target></link><space/>techniques in software. This label is derived from the combination of two labels, each too vague for continued use. The label<space/><italics>computer-aided composition</italics><space/>lacks the specificity of using generative algorithms. Music produced with notation or sequencing software could easily be considered computer-aided composition. The label<space/><italics>algorithmic composition</italics><space/>is likewise too broad, particularly in that it does not specify the use of a computer. The term<space/><link><target>computer-aided</target></link>, rather than computer-assisted, is used in the same manner as<space/><link><target>computer-aided design</target></link>.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><heading level='2'>Machine improvisation</heading><paragraph><template><target>See also</target><arg>Machine learning</arg><arg>Machine listening</arg><arg>Artificial intelligence</arg><arg>Neural networks</arg></template>Machine improvisation uses computer algorithms to create<space/><link><target>improvisation</target></link><space/>on existing music materials. This is usually done by sophisticated recombination of musical phrases extracted from existing music, either live or pre-recorded. In order to achieve credible improvisation in particular style, machine improvisation uses<space/><link><target>machine learning</target></link><space/>and<space/><link><target>pattern matching</target></link><space/>algorithms to analyze existing musical examples. The resulting patterns are then used to create new variations &quot;in the style&quot; of the original music, developing a notion of stylistic reinjection.This is different from other improvisation methods with computers that use<space/><link><target>algorithmic composition</target></link><space/>to generate new music without performing analysis of existing music examples.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><heading level='3'>Statistical style modeling</heading><paragraph>Style modeling implies building a computational representation of the musical surface that captures important stylistic features from data. Statistical approaches are used to capture the redundancies in terms of pattern dictionaries or repetitions, which are later recombined to generate new musical data. Style mixing can be realized by analysis of a database containing multiple musical examples in different styles. Machine Improvisation builds upon a long musical tradition of statistical modeling that began with Hiller and Isaacson's<space/><italics>Illiac Suite for String Quartet</italics><space/>(1957) and Xenakis' uses of<space/><link><target>Markov chains</target></link><space/>and<space/><link><target>stochastic processes</target></link>. Modern methods include the use of<space/><link><target>lossless data compression</target></link><space/>for incremental parsing,<space/><link><target>prediction suffix tree</target></link><space/>and<space/><link><target>string searching</target></link><space/>by<space/><link><target>factor oracle</target></link><space/>algorithm (basically a<space/><italics>factor oracle</italics><space/>is a nite state automaton constructed in linear time and space in an incremental fashion<extension extension_name='ref'><template><target>cite book</target><arg name="url">http://books.google.com/books?id</arg><arg name="editor1">Jan Pavelka<space/></arg><arg name="editor2">Gerard Tel<space/></arg><arg name="editor3">Miroslav Bartosek<space/></arg><arg name="quote">Lecture Notes in Computer Science 1725<space/></arg><arg name="pages">291–306<space/></arg><arg name="publisher">Springer-Verlag, Berlin<space/></arg><arg name="year">1999<space/></arg><arg name="isbn">3-540-66694-X<space/></arg><arg name="title">Factor oracle: a new structure for pattern matching; Proceedings of SOFSEM’99; Theory and Practice of Informatics<space/></arg><arg name="deadurl">no<space/></arg><arg name="accessdate">4 December 2013</arg></template></extension>).</paragraph><heading level='3'>Uses of machine improvisation</heading><paragraph>Machine improvisation encourages musical creativity by providing automatic modeling and transformation structures for existing music.<template><target>Citation needed</target><arg name="date">September 2012</arg></template><space/>This creates a natural interface with the musician without need for coding musical algorithms. In live performance, the system re-injects the musician's material in several different ways, allowing a semantics-level representation of the session and a smart recombination and transformation of this material in real-time. In offline version, machine improvisation can be used to achieve style mixing, an approach inspired by Vannevar Bush's<space/><link><target>memex</target></link><space/>imaginary machine.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><heading level='3'>Implementations</heading><paragraph>The first system implementing interactive machine improvisation by means of<space/><link><target>Markov models</target></link><space/>and style modeling techniques is the Continuator,<space/><link type='external' href='http://francoispachet.fr/continuator/continuator.html'></link>, developed by<space/><link><target>Franois Pachet</target></link><space/>at Sony CSL Paris in 2002<extension extension_name='ref'>Pachet, F.,<space/><link type='external' href='http://www.csl.sony.fr/downloads/papers/uploads/pachet-02f.pdf'>The Continuator: Musical Interaction with Style</link>. In ICMA, editor,Proceedings of ICMC, pages 211-218, Gteborg, Sweden, September 2002. ICMA. Best paper award.</extension><extension extension_name='ref'>Pachet, F.<space/><link type='external' href='http://www.csl.sony.fr/downloads/papers/2002/pachet02b.pdf'>Playing with Virtual Musicians: the Continuator in practice</link>. IEEE Multimedia,9(3):77-82 2002.</extension><space/>based on work on non-real time style modeling.<extension extension_name='ref'>G. Assayag, S. Dubnov, O. Delerue, &quot;Guessing the Composer's Mind : Applying Universal Prediction to Musical Style&quot;, In Proceedings of International Computer Music Conference, Beijing, 1999.</extension><extension extension_name='ref'>S. Dubnov, G. Assayag, O. Lartillot, G. Bejerano, &quot;Using Machine-Learning Methods for Musical Style Modeling&quot;, IEEE Computers, 36 (10), pp. 73-80, Oct. 2003.</extension>Matlab implementation of the Factor Oracle machine improvisation can be found as part of<space/><link><target>Computer Audition</target></link><space/>toolbox.</paragraph><paragraph>OMax is a software environment developed in IRCAM. OMax uses<space/><link><target>OpenMusic</target></link><space/>and Max. It is based on researches on stylistic modeling carried out by Gerard Assayag and Shlomo Dubnov and on researches on improvisation with the computer by G. Assayag, M. Chemillier and G. Bloch (a.k.a. the<space/><italics>OMax Brothers</italics>) in the Ircam Music Representations group.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><heading level='3'>Musicians working with machine improvisation</heading><paragraph>Gerard Assayag (IRCAM, France),<link><target>Jeremy Castro Baguyos</target><part>Jeremy Baguyos</part></link><space/>(University of Nebraska at Omaha, USA)Tim Blackwell (Goldsmiths College, Great Britain),George Bloch (Composer, France),Marc Chemiller (IRCAM/CNRS, France),Nick Collins (University of Sussex, UK),Shlomo Dubnov (Composer, Israel / USA),Mari Kimura (<link><target>Juilliard</target></link>, New York City),<link><target>George Lewis (trombonist)</target><part>George Lewis</part></link><space/>(Columbia University, New York City),Bernard Lubat (Pianist, France),Franois Pachet (Sony CSL, France),Joel Ryan (Institute of Sonology, Netherlands),Michel Waisvisz (STEIM, Netherlands),David Wessel (CNMAT, California),Michael Young (Goldsmiths College, Great Britain),<link><target>Pietro Grossi</target></link><space/>(CNUCE, Institute of the National Research Council, Pisa, Italy),Toby Gifford and Andrew Brown (Griffith University, Brisbane, Australia),Davis Salks (jazz composer, Hamburg, PA, USA),Doug Van Nort (electroacoustic improviser, Montreal/New York)</paragraph><heading level='2'>Live coding</heading><paragraph><template><target>Main</target><arg>Live coding</arg></template>Live coding<extension extension_name='ref'><template><target>Cite journal</target><arg name="last1"><space/>Collins<space/></arg><arg name="first1"><space/>N.<space/></arg><arg name="last2"><space/>McLean<space/></arg><arg name="first2"><space/>A.<space/></arg><arg name="last3"><space/>Rohrhuber<space/></arg><arg name="first3"><space/>J.<space/></arg><arg name="last4"><space/>Ward<space/></arg><arg name="first4"><space/>A.<space/></arg><arg name="title"><space/>Live coding in laptop performance<space/></arg><arg name="doi"><space/>10.1017/S135577180300030X<space/></arg><arg name="journal"><space/>Organised Sound<space/></arg><arg name="volume"><space/>8<space/></arg><arg name="issue"><space/>03<space/></arg><arg name="year"><space/>2004<space/></arg><arg name="pmid"><space/></arg><arg name="pmc"><space/></arg></template></extension><space/>(sometimes known as 'interactive programming', 'on-the-fly programming',<extension extension_name='ref'>Wang G. &amp; Cook P. (2004)<space/><link type='external' href='http://soundlab.cs.princeton.edu/publications/on-the-fly_nime2004.pdf'>&quot;On-the-fly Programming: Using Code as an Expressive Musical Instrument&quot;</link>, In<space/><italics>Proceedings of the 2004 International Conference on New Interfaces for Musical Expression (NIME)</italics><space/>(New York: NIME, 2004).</extension><space/>'just in time programming') is the name given to the process of writing<space/><link><target>software</target></link><space/>in realtime as part of a<space/><link><target>performance</target></link>. Recently it has been explored as a more rigorous alternative to laptop musicians who, live coders often feel, lack the charisma and pizzazz of<space/><link><target>musicians</target></link><space/>performing live.<extension extension_name='ref'><template><target>Cite journal</target><arg name="doi">10.1080/0749446032000156919<space/></arg><arg name="author">Collins, N.<space/></arg><arg name="year">2003<space/></arg><arg name="title">Generative Music and Laptop Performance<space/></arg><arg name="url"><space/></arg><arg name="journal">Contemporary Music Review<space/></arg><arg name="volume">22<space/></arg><arg name="issue">4<space/></arg><arg name="pages">67–79</arg></template></extension></paragraph><paragraph>Generally, this practice stages a more general approach: one of interactive programming, of writing (parts of) programs while they are interpreted. Traditionally most computer music programs have tended toward the old write/compile/run model which evolved when computers were much less powerful. This approach has locked out code-level innovation by people whose programming skills are more modest. Some programs have gradually integrated real-time controllers and gesturing (for example,<space/><link><target>MIDI</target></link>-driven software synthesis and parameter control). Until recently, however, the musician/composer rarely had the capability of real-time modification of program code itself. This legacy distinction is somewhat erased by languages such as<space/><link><target>ChucK</target></link>,<space/><link><target>SuperCollider</target></link>, and<space/><link><target>Impromptu (programming environment)</target><part>Impromptu</part></link>.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><paragraph><link><target>TOPLAP</target></link>, an ad-hoc conglomerate of artists interested in live coding was formed in 2004, and promotes the use, proliferation and exploration of a range of software, languages and techniques to implement live coding. This is a parallel and collaborative effort e.g. with research at the<space/><link><target>Princeton Sound Lab</target></link>, the<space/><link><target>University of Cologne</target></link>, and the Computational Arts Research Group at<space/><link><target>Queensland University of Technology</target></link>.<template><target>Citation needed</target><arg name="date">September 2012</arg></template></paragraph><heading level='2'>See also</heading><paragraph><template><target>col-begin</target></template><template><target>col-2</target></template></paragraph><list type='bullet'><listitem><link><target>Acousmatic art</target></link></listitem><listitem><link><target>Chiptune</target></link></listitem><listitem><link><target>Comparison of audio synthesis environments</target></link></listitem><listitem><link><target>Csound</target></link></listitem><listitem><link><target>Digital audio workstation</target></link></listitem><listitem><link><target>Digital synthesizer</target></link></listitem><listitem><link><target>Electronic music</target></link></listitem><listitem><link><target>Emily Howell</target></link></listitem><listitem><link><target>Fast Fourier Transform</target></link></listitem><listitem><link><target>Human-computer interaction</target></link></listitem><listitem><link><target>Interactive music</target></link></listitem><listitem><link><target>Laptronica</target></link></listitem><listitem><link><target>List of music software</target></link></listitem><listitem><link><target>Module file</target></link></listitem><listitem><link><target>Music information retrieval</target></link></listitem></list><paragraph><template><target>col-2</target></template></paragraph><list type='bullet'><listitem><link><target>Music Macro Language</target></link></listitem><listitem><link><target>Music notation software</target></link></listitem><listitem><link><target>Music sequencer</target></link></listitem><listitem><link><target>New interfaces for musical expression</target></link></listitem><listitem><link><target>Physical modeling</target></link></listitem><listitem><link><target>Programming (music)</target></link></listitem><listitem><link><target>Sampling (music)</target></link></listitem><listitem><link><target>Sound and music computing</target><part>Sound and Music Computing</part></link></listitem></list><list type='bullet'><listitem><link><target>Sound synthesis</target></link></listitem><listitem><link><target>Music tracker</target><part>Tracker</part></link></listitem><listitem><link><target>Video game music</target></link></listitem><listitem><link><target>Vocaloid</target></link></listitem></list><paragraph><template><target>col-end</target></template></paragraph><heading level='2'>References</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>Further reading</heading><list type='bullet'><listitem>Ariza, C. 2005. &quot;Navigating the Landscape of Computer-Aided Algorithmic Composition Systems: A Definition, Seven Descriptors, and a Lexicon of Systems and Research.&quot; In<space/><italics>Proceedings of the International Computer Music Conference</italics>. San Francisco: International Computer Music Association. 765-772. Internet: http://www.flexatone.net/docs/nlcaacs.pdf</listitem><listitem>Ariza, C. 2005.<space/><italics>An Open Design for Computer-Aided Algorithmic Music Composition: athenaCL</italics>. Ph.D. Dissertation, New York University. Internet: http://www.flexatone.net/docs/odcaamca.pdf</listitem><listitem>Berg, P. 1996. &quot;Abstracting the future: The Search for Musical Constructs&quot;<space/><italics>Computer Music Journal</italics><space/>20(3): 24-27.</listitem><listitem><template><target>Cite book</target><arg name="title">The Csound Book: Perspectives in Software Synthesis, Sound Design, Signal Processing, and Programming<space/></arg><arg name="editor">Boulanger, Richard</arg><arg name="publisher">The MIT Press<space/></arg><arg name="date">March 6, 2000</arg><arg name="pages">740</arg><arg name="isbn">0-262-52261-6</arg><arg name="url">http://csounds.com/shop/csound-book</arg><arg name="accessdate">3 October 2009</arg></template></listitem><listitem><link><target>Joel Chadabe</target><part>Chadabe, Joel</part></link>. 1997.<space/><italics>Electric Sound: The Past and Promise of Electronic Music</italics>. Upper Saddle River, New Jersey: Prentice Hall.</listitem><listitem>Chowning, John. 1973. &quot;The Synthesis of Complex Audio Spectra by Means of Frequency Modulation&quot;.<space/><italics>Journal of the Audio Engineering Society</italics><space/>21, no. 7:52634.</listitem><listitem><template><target>Cite book</target><arg name="last"><space/>Collins<space/></arg><arg name="first"><space/>Nick<space/></arg><arg name="title"><space/>Introduction to Computer Music<space/></arg><arg name="publisher"><space/>Wiley<space/></arg><arg name="location"><space/>Chichester<space/></arg><arg name="year"><space/>2009<space/></arg><arg name="isbn"><space/>978-0-470-71455-3</arg></template></listitem><listitem><template><target>Cite book</target><arg name="last">Dodge</arg><arg name="first">Charles</arg><arg name="author2">Jerse</arg><arg name="others">Thomas A.</arg><arg name="title">Computer Music: Synthesis, Composition and Performance</arg><arg name="publisher">Schirmer Books</arg><arg name="location">New York</arg><arg name="year">1997</arg><arg name="edition">2nd</arg><arg name="pages">453</arg><arg name="isbn">0-02-864682-7</arg></template></listitem><listitem>Doornbusch, P. 2009. &quot;A Chronology / History of Electronic and Computer Music and Related Events 1906 - 2011&quot; http://www.doornbusch.net/chronology/</listitem><listitem><template><target>Cite book</target><arg name="last"><space/>Heifetz<space/></arg><arg name="first"><space/>Robin<space/></arg><arg name="title"><space/>On the Wires of Our Nerves<space/></arg><arg name="publisher"><space/>Bucknell University Press<space/></arg><arg name="location"><space/>Lewisburg Pa.<space/></arg><arg name="year"><space/>1989<space/></arg><arg name="isbn"><space/>0-8387-5155-5<space/></arg></template></listitem><listitem><template><target>Cite book</target><arg name="last"><space/>Manning<space/></arg><arg name="first"><space/>Peter<space/></arg><arg name="title"><space/>Electronic and Computer Music<space/></arg><arg name="edition">revised and expanded<space/></arg><arg name="publisher"><space/>Oxford University Press<space/></arg><arg name="location"><space/>Oxford Oxfordshire<space/></arg><arg name="year"><space/>2004<space/></arg><arg name="isbn"><space/>0-19-517085-7<space/></arg></template></listitem><listitem>Perry, Mark, and Thomas Margoni. 2010. &quot;<link type='external' href='http://papers.ssrn.com/sol3/Delivery.cfm/SSRN_ID1753242_code1383303.pdf?abstractid=1647584&amp;amp;mirid=1'>From Music Tracks to Google Maps: Who Owns Computer-Generated Works?</link>&quot;.<space/><italics>Computer Law and Security Review</italics><space/>26: 62129.</listitem><listitem><template><target>Cite book</target><arg name="last"><space/>Roads<space/></arg><arg name="first"><space/>Curtis<space/></arg><arg name="title"><space/>The Computer Music Tutorial<space/></arg><arg name="publisher"><space/>MIT Press<space/></arg><arg name="location"><space/>Cambridge<space/></arg><arg name="year"><space/>1994<space/></arg><arg name="isbn"><space/>0-262-68082-3<space/></arg></template></listitem><listitem>Supper, M. 2001. &quot;A Few Remarks on Algorithmic Composition.&quot;<space/><italics>Computer Music Journal</italics><space/>25(1): 48-53.</listitem><listitem><template><target>Cite book</target><arg name="last"><space/>Xenakis<space/></arg><arg name="first"><space/>Iannis<space/></arg><arg name="title"><space/>Formalized Music: Thought and Mathematics in Composition<space/></arg><arg name="series"><space/>Harmonologia Series No. 6<space/></arg><arg name="publisher"><space/>Pendragon Pr<space/></arg><arg name="location"><space/>Hillsdale, NY<space/></arg><arg name="year"><space/>2001<space/></arg><arg name="isbn"><space/>1-57647-079-2<space/></arg></template></listitem></list><heading level='2'>External links</heading><paragraph><template><target>Computer music</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Computer Music</target></template><link><target>Category:Musical techniques</target></link><link><target>Category:Computer music software</target></link><link><target>Category:Computer music</target></link></paragraph></article>