
In [[formal language theory]], a  '''context-free language''' ('''CFL''') is a [[formal language|language]] generated by some [[context-free grammar]] (CFG). Different CF grammars can generate the same CF language. It is important to distinguish properties of the language (intrinsic properties) from properties of a particular grammar (extrinsic properties).

The set of all context-free languages is identical to the set of languages accepted by [[pushdown automata]], which makes these languages amenable to parsing. Indeed, given a CFG, there is a direct way to produce a pushdown automaton for the grammar (and corresponding language), though going the other way (producing a grammar given an automaton) is not as direct.

Context-free languages have many applications in [[programming languages]]; for example, the [[Dyck language|language of all properly matched parentheses]] is generated by the grammar <math>S\to SS ~|~ (S) ~|~ \varepsilon</math>.  Also, most arithmetic expressions are generated by context-free grammars.

==Examples==
An archetypal context-free language is <math>L = \{a^nb^n:n\geq1\}</math>, the language of all non-empty even-length strings, the entire first halves of which are <math>a</math>'s, and the entire second halves of which are <math>b</math>'s. <math>L</math> is generated by the grammar <math>S\to aSb ~|~ ab</math>.
This language is not [[regular language|regular]].
It is accepted by the [[pushdown automaton#Formal definition|pushdown automaton]] <math>M=(\{q_0,q_1,q_f\}, \{a,b\}, \{a,z\}, \delta, q_0, z, \{q_f\})</math> where <math>\delta</math> is defined as follows:<ref group=note>meaning of <math>\delta</math>'s arguments and results: <math>\delta(\mathrm{state}_1, \mathrm{read}, \mathrm{pop}) = (\mathrm{state}_2, \mathrm{push})</math></ref>

<center>
<math>\delta(q_0, a, z) = (q_0, az)</math><br>
<math>\delta(q_0, a, a) = (q_0, aa)</math><br>
<math>\delta(q_0, b, a) = (q_1, \varepsilon)</math><br>
<math>\delta(q_1, b, a) = (q_1, \varepsilon)</math>
</center>

Unambiguous CFLs are a proper subset of all CFLs: there are [[Inherently ambiguous language|inherently ambiguous]] CFLs. An example of an inherently ambiguous CFL is the union of <math>\{a^n b^m c^m d^n | n, m > 0\}</math> with <math>\{a^n b^n c^m d^m | n, m > 0\}</math>. This set is context-free, since the union of two context-free languages is always context-free. But there is no way to unambiguously parse strings in the (non-context-free) subset <math>\{a^n b^n c^n d^n | n > 0\}</math> which is the intersection of these two languages.{{sfn|Hopcroft|Ullman|1979|p=100|loc=Theorem 4.7}}

==Languages that are not context-free==
The set <math>\{a^n b^n c^n d^n | n > 0\}</math> is a [[context-sensitive language]], but there does not exist a context-free grammar generating this language.{{sfn|Hopcroft|Ullman|1979}} So there exist [[context-sensitive language]]s which are not context-free. To prove that a given language is not context-free, one may employ the [[pumping lemma for context-free languages]]<ref name="Bar-Hillel.Perles.Shamir.1961"/> or a number of other methods, such as [[Ogden's lemma]] or [[Parikh's theorem]].<ref>[http://cs.stackexchange.com/questions/265/how-to-prove-that-a-language-is-not-context-free How to prove that a language is not context-free?]</ref>

==Closure properties==
Context-free languages are [[closure (mathematics)|closed]] under the following operations. That is, if ''L'' and ''P'' are context-free languages, the following languages are context-free as well:
*the [[union (set theory)|union]] <math>L \cup P</math> of ''L'' and ''P''
*the reversal of ''L''
*the [[concatenation]] <math>L \cdot P</math> of ''L'' and ''P''
*the [[Kleene star]] <math>L^*</math> of ''L''
*the image <math>\varphi(L)</math> of ''L'' under a [[String operations#String homomorphism|homomorphism]] <math>\varphi</math>
*the image <math>\varphi^{-1}(L)</math> of ''L'' under an [[String operations#String homomorphism|inverse homomorphism]] <math>\varphi^{-1}</math>
*the [[cyclic shift]] of ''L'' (the language <math>\{vu : uv \in L \}</math>)

Context-free languages are not closed under [[complement (complexity)|complement]], [[intersection (set theory)|intersection]], or [[Complement (set theory)#Relative complement|difference]]. However, if ''L'' is a context-free language and ''D'' is a regular language then both their intersection <math>L\cap D</math> and their difference <math>L\setminus D</math> are context-free languages.

===Nonclosure under intersection, complement, and difference===
The context-free languages are not closed under intersection.  This can be seen by taking the languages <math>A = \{a^n b^n c^m \mid m, n \geq 0 \}</math> and <math>B = \{a^m b^n c^n \mid m,n \geq 0\}</math>, which are both context-free.<ref group=note>A context-free grammar for the language ''A'' is given by the following production rules, taking ''S'' as the start symbol: ''S'' → ''Sc'' | ''aTb'' | ''ε''; ''T'' → ''aTb'' | ''ε''. The grammar for ''B'' is analogous.</ref> Their intersection is <math>A \cap B = \{ a^n b^n c^n \mid n \geq 0\}</math>, which can be shown to be non-context-free by the [[pumping lemma for context-free languages]].

Context-free languages are also not closed under complementation, as for any languages A and B:  <math>A \cap B = \overline{\overline{A} \cup \overline{B}} </math>.

Context-free language are also not closed under difference: L<sup>C</sup> = Σ<sup>*</sup> \ L

==Decidability properties==
The following problems are [[Undecidable problem|undecidable]] for arbitrary [[context-free grammar]]s A and B:
*Equivalence: Given two context-free grammars ''A'' and ''B'', is <math>L(A)=L(B)</math>?
*Intersection Emptiness: Given two context-free grammars ''A'' and ''B'', is <math>L(A) \cap L(B) = \emptyset </math> ? However, the intersection of a context-free language and a ''regular'' language is context-free,<ref>{{harvtxt|Salomaa|1973}}, p. 59, Theorem 6.7</ref> and the variant of the problem where ''B'' is a regular grammar is decidable.
*Containment: Given a context-free grammar ''A'', is <math>L(A) \subseteq L(B)</math> ? Again, the variant of the problem where ''B'' is a regular grammar is decidable.
*Universality: Given a context-free grammar ''A'', is <math>L(A)=\Sigma^*</math> ?

The following problems are ''decidable'' for arbitrary context-free languages:
*Emptiness: Given a context-free grammar ''A'', is <math>L(A) = \emptyset</math> ?
*Finiteness: Given a context-free grammar ''A'', is <math>L(A)</math> finite?
*Membership: Given a context-free grammar ''G'', and  a word <math>w</math>, does <math>w \in L(G)</math> ? Efficient polynomial-time algorithms for the membership problem are the [[CYK algorithm]] and [[Earley parser|Earley's Algorithm]].

According to Hopcroft, Motwani, Ullman (2003),<ref>{{cite book| author=John E. Hopcroft, Rajeev Motwani, Jeffrey D. Ullman| title=Introduction to Automata Theory, Languages, and Computation| year=2003| publisher=Addison Wesley}} Here: Sect.7.6, p.304, and Sect.9.7, p.411</ref> 
many of the fundamental closure and (un)decidability properties of context-free languages were shown in the 1961 paper of Bar-Hillel, Perles, and Shamir<ref name="Bar-Hillel.Perles.Shamir.1961">{{cite journal| author=Yehoshua Bar-Hillel, Micha Asher Perles, Eli Shamir| title=On Formal Properties of Simple Phrase-Structure Grammars| journal=Zeitschrift für Phonetik, Sprachwissenschaft und Kommunikationsforschung| year=1961| volume=14| number=2| pages=143–172}}</ref>

==Parsing==
Determining an instance of the membership problem; i.e. given a string <math>w</math>, determine whether <math>w \in L(G)</math> where <math>L</math> is the language generated by a given grammar <math>G</math>; is also known as ''recognition''. Context-free recognition for [[Chomsky normal form]] grammars was shown by Leslie G. Valiant to be reducible to boolean [[matrix multiplication]], thus inheriting its complexity upper bound of [[Big O notation|''O'']](''n''<sup>2.3728639</sup>).<ref>{{cite techreport| author=Leslie Valiant| title=General context-free recognition in less than cubic time|date=Jan 1974| pages=11| institution=Carnegie Mellon University| url=http://repository.cmu.edu/cgi/viewcontent.cgi?article=2751&context=compsci}}</ref><ref>{{cite journal| author=Leslie G. Valiant| title=General context-free recognition in less than cubic time| journal=Journal of Computer and System Sciences| year=1975| volume=10| number=2| pages=308–315| doi=10.1016/s0022-0000(75)80046-8}}</ref><ref group=note>In Valiant's papers, ''O''(''n''<sup>2.81</sup>) given, the then best known upper bound. See [[Matrix multiplication#Algorithms for efficient matrix multiplication]] and [[Coppersmith–Winograd algorithm]] for bound improvements since then.</ref>
Conversely, Lillian Lee has shown ''O''(''n''<sup>3-ε</sup>) boolean matrix multiplication to be reducible to ''O''(''n''<sup>3-3ε</sup>) CFG parsing, thus establishing some kind of lower bound for the latter.<ref>{{cite journal| author=Lillian Lee| title=Fast Context-Free Grammar Parsing Requires Fast Boolean Matrix Multiplication| journal=JACM| year=2002| volume=49| number=1| pages=1–15| url=http://www.cs.cornell.edu/home/llee/papers/bmmcfl-jacm.pdf| doi=10.1145/505241.505242}}</ref>

Practical uses of context-free languages require also to produce a derivation tree that exhibits the  structure that the grammar associates with the given string. The process of producing this tree is called ''[[parsing]]''. Known parsers have a time complexity that is cubic in the size of the string that is parsed.

Formally, the set of all context-free languages is identical to the set of languages accepted by [[pushdown automata]] (PDA). Parser algorithms for context-free languages include the [[CYK algorithm]] and [[Earley parser|Earley's Algorithm]].

A special subclass of context-free languages are the [[deterministic context-free language]]s which are defined as the set of languages accepted by a [[deterministic pushdown automaton]] and can be parsed by a [[LR parser|LR(k) parser]].<ref>{{Cite journal | last1 = Knuth | first1 = D. E. | authorlink = Donald Knuth | title = On the translation of languages from left to right | doi = 10.1016/S0019-9958(65)90426-2 | journal = Information and Control | volume = 8 | issue = 6 | pages = 607–639 | date=July 1965 | url = http://www.cs.dartmouth.edu/~mckeeman/cs48/mxcom/doc/knuth65.pdf | accessdate=29 May 2011 | ref = harv }}</ref>

See also [[parsing expression grammar]] as an alternative approach to grammar and parser.

==See also==
*[[Deterministic context-free language]]
*[[Parsing]]

==Notes==
{{Reflist|group=note}}

==References==
{{Reflist}}
{{Refbegin}}
*{{cite book| author = [[Seymour Ginsburg]] | title = The Mathematical Theory of Context-Free Languages | year = 1966 | publisher = McGraw-Hill, Inc. | location = New York, NY, USA}}
*{{cite book
  | last1 = Hopcroft
  | first1 = John E.
  | last2 = Ullman
  | first2 = Jeffrey D.
  | title = Introduction to Automata Theory, Languages, and Computation
  | publisher = Addison-Wesley
  | edition = 1st
  | year = 1979
  | ref = harv
}}
*{{cite book|author=Arto Salomaa|title = Formal Languages|publisher = ACM Monograph Series|year= 1973}}
*{{cite book|author = [[Michael Sipser]] | year = 1997 | title = Introduction to the Theory of Computation | publisher = PWS Publishing | isbn = 0-534-94728-X}} Chapter 2: Context-Free Languages, pp.&nbsp;91–122.
*Jean-Michel Autebert, Jean Berstel, Luc Boasson, [http://www-igm.univ-mlv.fr/~berstel/Articles/1997CFLPDA.pdf Context-Free Languages and Push-Down Automata], in: G. Rozenberg, A. Salomaa (eds.), Handbook of Formal Languages, Vol. 1, Springer-Verlag, 1997, 111-174.
{{Refend}}

{{Formal languages and grammars}}

[[Category:Formal languages]]
[[Category:Languages]]
[[Category:Linguistics]]