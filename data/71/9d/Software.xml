<article title='Software'><paragraph><template><target>for</target></template><bold>Computer software</bold><space/>or simply<space/><bold>software</bold><space/>is any set of instructions that directs a<space/><link><target>computer</target></link><space/>to perform specific operations. Computer software consists of<space/><link><target>computer program</target><trail>s</trail></link>,<space/><link><target>Library (computing)</target><part>libraries</part></link><space/>and related non-executable<space/><link><target>Data (computing)</target><part>data</part></link><space/>(such as<space/><link><target>Software documentation</target><part>online documentation</part></link><space/>or<space/><link><target>digital media</target></link>). Computer software is non-tangible, contrasted with<space/><link><target>computer hardware</target></link>, which is the physical component of computers. Computer hardware and software require each other and neither can be realistically used without the other.</paragraph><paragraph>At the lowest level, executable code consists of machine language instructions specific to an individual<space/><link><target>Microprocessor</target><part>processor</part></link>typically a<space/><link><target>central processing unit</target></link><space/>(CPU). A<space/><link><target>Machine code</target><part>machine language</part></link><space/>consists of groups of binary values signifying processor instructions that change the state of the computer from its preceding state. For example, an instruction may change the value stored in a particular storage location inside the computeran effect that is not directly observable to the user. An instruction may also (indirectly) cause something to appear on a display of the computer systema state change which should be visible to the user. The processor carries out the instructions in the order they are provided, unless it is instructed to &quot;jump&quot; to a different instruction, or interrupted.<space/></paragraph><paragraph>Software written in a machine language is known as &quot;machine code&quot;. However, in practice, software is usually written in<space/><link><target>high-level programming language</target><trail>s</trail></link><space/>that are easier and more efficient for humans to use (closer to<space/><link><target>natural language</target></link>) than machine language.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Compiler construction</arg><arg name="url">http://www.cs.uu.nl/education/vak.php?vak</arg></template></extension><space/>High-level languages are translated into machine language using a<space/><link><target>compiler</target></link><space/>or an<space/><link><target>Interpreter (computing)</target><part>interpreter</part></link><space/>or a combination of the two. Software may also be written in a low-level<space/><link><target>assembly language</target></link>, essentially, a vaguely<space/><link><target>mnemonic</target></link><space/>representation of a machine language using a natural language alphabet. Assembly language is translated into machine language using an<space/><link><target>Assembly language</target><part>assembler</part></link>.</paragraph><heading level='2'>History</heading><paragraph><template><target>main</target><arg>History of software</arg></template>An outline (<link><target>algorithm</target></link>) for what would have been the first piece of software was written by<space/><link><target>Ada Lovelace</target></link><space/>in the 19th century, for the planned analytical engine. However, neither the analytical engine nor any software for it were ever created.</paragraph><paragraph>The first theory about softwareprior to the creation of computers as we know them todaywas proposed by Alan Turing in his 1935 essay<space/><italics>Computable numbers with an application to the Entscheidungsproblem</italics><space/>(decision problem).</paragraph><paragraph>This eventually led to the creation of the twin academic fields of computer science and software engineering, which both study software and its creation. Computer science is more theoretical (Turing's essay is an example of computer science), whereas software engineering is focused on more practical concerns.</paragraph><paragraph>However, prior to 1946, software as we now understand itprograms stored in the memory of stored-program digital computersdid not yet exist. The very first electronic computing devices were instead rewired in order to &quot;reprogram&quot; them.</paragraph><heading level='2'>Types of software</heading><paragraph><template><target>see also</target><arg>List of software categories</arg></template></paragraph><paragraph><extension extension_name='imagemap'>File:Operating system placement.svg|thumb|A diagram showing how the<space/><link><target>operating system</target></link><space/>software and<space/><link><target>application software</target></link><space/>are layered on a typical<space/><link><target>desktop computer</target></link>. The arrows indicate information flow.rect 1 1 250 90<space/><link><target>User (computing)</target><part>User</part></link>rect 1 91 250 180<space/><link><target>Application software</target><part>Application</part></link>rect 1 181 250 270<space/><link><target>Operating system</target><part>Operating System</part></link>rect 1 271 250 360<space/><link><target>Personal computer hardware</target><part>Hardware</part></link></extension></paragraph><paragraph>On virtually all computer platforms, software can be grouped into a few broad categories.</paragraph><heading level='3'>Purpose, or domain of use</heading><paragraph>Based on the goal, computer software can be divided into:</paragraph><list type='bullet'><listitem><italics><link><target>Application software</target></link></italics>, which is software that uses the computer system to perform special functions or provide<space/><link><target>video game</target><part>entertainment functions</part></link><space/>beyond the basic operation of the computer itself. There are many different types of application software, because the range of tasks that can be performed with a modern computer is so largesee<space/><link><target>list of software</target></link>.</listitem><listitem><italics><link><target>System software</target></link></italics>, which is software that directly operates the<space/><link><target>computer hardware</target></link>, to provide basic functionality needed by users and other software, and to provide a platform for running application software.<extension extension_name='ref'><template><target>cite web</target><arg name="title">System Software</arg><arg name="url">http://home.olemiss.edu/~misbook/sfsysfm.htm</arg><arg name="publisher">The University of Mississippi</arg></template></extension><space/>System software includes:<list type='bullet'><listitem><italics><link><target>Operating system</target><trail>s</trail></link></italics>, which are essential collections of software that manage resources and provides common services for other software that runs &quot;on top&quot; of them.<space/><link><target>Supervisory program</target><trail>s</trail></link>,<space/><link><target>boot loader</target><trail>s</trail></link>,<space/><link><target>shell (computing)</target><part>shells</part></link><space/>and<space/><link><target>window system</target><trail>s</trail></link><space/>are core parts of operating systems. In practice, an operating system comes bundled with additional software (including application software) so that a user can potentially do some work with a computer that only has an operating system.</listitem><listitem><italics><link><target>Device driver</target><trail>s</trail></link></italics>, which operate or control a particular type of device that is attached to a computer. Each device needs at least one corresponding device driver; because a computer typically has at minimum at least one input device and at least one output device, a computer typically needs more than one device driver.</listitem><listitem><italics><link><target>Software utility</target><part>Utilities</part></link></italics>, which are computer programs designed to assist users in maintenance and care of their computers.</listitem></list></listitem><listitem><italics><link><target>Malicious software</target></link></italics><space/>or<space/><italics>malware</italics>, which is software that is developed to harm and disrupt computers. As such, malware is undesirable. Malware is closely associated with computer-related crimes, though some malicious programs may have been designed as<space/><link><target>practical joke</target><trail>s</trail></link>.</listitem></list><heading level='3'>Nature or domain of execution</heading><list type='bullet'><listitem><link><target>Desktop applications</target></link><space/>such as<space/><link><target>web browser</target><trail>s</trail></link><space/>and<space/><link><target>Microsoft Office</target></link>, as well as<space/><link><target>smartphone</target></link><space/>and<space/><link><target>Tablet computer</target><part>tablet</part></link><space/>applications (called &quot;<link><target>mobile app</target><part>apps</part></link>&quot;). (There is a push in some parts of the software industry to merge desktop applications with mobile apps, to some extent.<space/><link><target>Windows 8</target></link>, and later<space/><link><target>Ubuntu Touch</target></link>, tried to allow the same style of application user interface to be used on desktops, laptops and mobiles.)</listitem><listitem><link><target>JavaScript</target></link><space/>scripts are pieces of software traditionally embedded in<space/><link><target>web pages</target></link><space/>that are run directly inside the<space/><link><target>web browser</target></link><space/>when a web page is loaded without the need for a web browser plugin. Software written in other programming languages can also be run within the web browser if the software is either translated into JavaScript, or if a web browser plugin that supports that language is installed; the most common example of the latter is<space/><link><target>ActionScript</target></link><space/>scripts, which are supported by the<space/><link><target>Adobe Flash</target></link><space/>plugin.</listitem><listitem><link><target>Server software</target></link>, including:<list type='bullet'><listitem><link><target>Web applications</target></link>, which usually run on the<space/><link><target>web server</target></link><space/>and output dynamically generated web pages to web browsers, using e.g.<space/><link><target>PHP</target></link>,<space/><link><target>Java (programming language)</target><part>Java</part></link><space/>or<space/><link><target>ASP.NET</target></link>, or even<space/><link><target>Node.js</target><part>JavaScript that runs on the server</part></link>. In modern times these commonly include some JavaScript to be run in the web browser as well, in which case they typically run partly on the server, partly in the web browser.</listitem></list></listitem><listitem><link><target>Plug-in (computing)</target><part>Plugins</part></link><space/>and extensions are software that extends or modifies the functionality of another piece of software, and require that software be used in order to function;</listitem><listitem><link><target>Embedded software</target></link><space/>resides as firmware within<space/><link><target>embedded system</target><trail>s</trail></link>, devices dedicated to a single use or a few uses such as<space/><link><target>car</target><trail>s</trail></link><space/>and<space/><link><target>television</target><trail>s</trail></link><space/>(although some embedded devices such as wireless chipsets can<space/><italics>themselves</italics><space/>be part of an ordinary, non-embedded computer system such as a PC or<space/><link><target>smartphone</target></link>).<extension extension_name='ref'><template><target>cite web</target><arg name="title">Embedded Software—Technologies and Trends</arg><arg name="url">http://www.computer.org/csdl/mags/so/2009/03/mso2009030014.html</arg><arg name="publisher">IEEE Computer Society</arg><arg name="accessdate">May–June 2009</arg></template></extension><space/>In the embedded system context there is sometimes no clear distinction between the system software and the application software. However, some embedded systems run<space/><link><target>embedded operating system</target><trail>s</trail></link>, and these systems do retain the distinction between system software and application software (although typically there will only be one, fixed, application which is always ran).</listitem><listitem><link><target>Microcode</target></link><space/>is a special, relatively obscure type of embedded software which tells the processor<space/><italics>itself</italics><space/>how to execute machine code, so it is actually a lower level than machine code. It is typically proprietary to the processor manufacturer, and any necessary correctional microcode software updates are supplied by them to users (which is much cheaper than shipping replacement processor hardware). Thus an ordinary programmer would not expect to ever have to deal with it.</listitem></list><heading level='3'>Programming tools</heading><paragraph><template><target>main</target><arg>Programming tool</arg></template>Programming tools are also software in the form of programs or applications that<space/><link><target>software developers</target></link><space/>(also known as<space/><italics>programmers, coders, hackers</italics><space/>or<space/><italics>software engineers</italics>) use to create,<space/><link><target>Debugging</target><part>debug</part></link>,<space/><link><target>Software maintenance</target><part>maintain</part></link><space/>(i.e. improve or fix), or otherwise<space/><link><target>Technical support</target><part>support</part></link><space/>software. Software is written in one or more programming languages; there are many programming languages in existence, and each has at least one implementation, each of which consists of its own set of programming tools. These tools may be relatively self-contained programs such as<space/><link><target>compiler</target><trail>s</trail></link>,<space/><link><target>debugger</target><trail>s</trail></link>,<space/><link><target>interpreter (computing)</target><part>interpreters</part></link>,<space/><link><target>linker (computing)</target><part>linkers</part></link>, and<space/><link><target>text editor</target><trail>s</trail></link>, that can be combined together to accomplish a task; or they may form an<space/><link><target>integrated development environment</target></link><space/>(IDE), which combines much or all of the functionality of such self-contained tools. IDEs may do this by either invoking the relevant individual tools or by re-implementing their functionality in a new way. An IDE can make it easier to do specific tasks, such as searching in files in a particular project. Many programming language implementations provide the option of using both individual tools or an IDE.</paragraph><heading level='2'>Software topics</heading><heading level='3'>Architecture</heading><paragraph><template><target>see also</target><arg>Software architecture</arg></template>Users often see things differently from programmers. People who use modern general purpose computers (as opposed to<space/><link><target>embedded system</target><trail>s</trail></link>,<space/><link><target>analog computer</target><trail>s</trail></link><space/>and<space/><link><target>supercomputer</target><trail>s</trail></link>) usually see three layers of software performing a variety of tasks: platform, application, and user software.</paragraph><list type='bullet'><listitem>Platform software:<space/><link><target>Platform (computing)</target><part>Platform</part></link><space/>includes the<space/><link><target>firmware</target></link>,<space/><link><target>device driver</target><trail>s</trail></link>, an<space/><link><target>operating system</target></link>, and typically a<space/><link><target>graphical user interface</target></link><space/>which, in total, allow a user to interact with the computer and its<space/><link><target>peripheral</target><trail>s</trail></link><space/>(associated equipment). Platform software often comes bundled with the computer. On a<space/><link><target>Personal computer</target><part>PC</part></link><space/>one will usually have the ability to change the platform software.</listitem><listitem>Application software:<space/><link><target>Application software</target></link><space/>or Applications are what most people think of when they think of software. Typical examples include office suites and video games.<space/><link><target>Application software</target></link><space/>is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are usually independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other &quot;system software&quot; as applications.</listitem><listitem>User-written software:<space/><link><target>End-user development</target></link><space/>tailors systems to meet users' specific needs. User software include spreadsheet templates and<space/><link><target>word processor</target></link><space/>templates. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into default application packages, many users may not be aware of the distinction between the original packages, and what has been added by co-workers.</listitem></list><heading level='3'>Execution</heading><paragraph><template><target>main</target><arg>Execution (computing)</arg></template>Computer software has to be &quot;loaded&quot; into the<space/><link><target>computer storage</target><part>computer's storage</part></link><space/>(such as the<space/><link><target>hard drive</target></link><space/>or<space/><link><target>Computer memory</target><part>memory</part></link>). Once the software has loaded, the computer is able to<space/><italics>execute</italics><space/>the software. This involves passing<space/><link><target>instruction (computer science)</target><part>instructions</part></link><space/>from the<space/><link><target>application software</target></link>, through the system software, to the hardware which ultimately receives the instruction as<space/><link><target>machine language</target><part>machine code</part></link>. Each instruction causes the computer to carry out an operationmoving<space/><link><target>data (computing)</target><part>data</part></link>, carrying out a<space/><link><target>computation</target></link>, or altering the<space/><link><target>control flow</target></link><space/>of instructions.</paragraph><paragraph>Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using &quot;pointers&quot; to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together.</paragraph><preblock><preline></preline></preblock><heading level='3'>Quality and reliability</heading><paragraph><template><target>main</target><arg>Software quality</arg><arg>Software testing</arg><arg>Software reliability</arg></template>Software quality is very important, especially for<space/><link><target>commercial software</target><part>commercial</part></link><space/>and system software like<space/><link><target>Microsoft Office</target></link>,<space/><link><target>Microsoft Windows</target></link><space/>and<space/><link><target>Linux</target></link>. If software is faulty (buggy), it can delete a person's work, crash the computer and do other unexpected things. Faults and errors are called &quot;<link><target>Software bug</target><part>bugs</part></link>&quot; which are often discovered during alpha and beta testing. Software is often also a victim to what is known as<space/><link><target>software aging</target></link>, the progressive performance degradation resulting from a combination of unseen bugs.</paragraph><paragraph>Many bugs are discovered and eliminated (debugged) through<space/><link><target>software testing</target></link>. However, software testing rarelyif evereliminates every bug; some programmers say that &quot;every program has at least one more bug&quot; (Lubarsky's Law).<extension extension_name='ref'><template><target>cite web</target><arg name="url">https://github.com/mark-watson/scripting-intelligence-book-examples/blob/master/part1/wikipedia_text/software.txt</arg><arg name="title">scripting intelligence book examples</arg></template></extension><space/>In the<space/><link><target>Waterfall model</target><part>waterfall</part></link><space/>method of software development, separate testing teams are typically employed, but in newer approaches, collectively termed<space/><link><target>agile software development</target></link>, developers often do all their own testing, and demonstrate the software to users/clients regularly to obtain feedback. Software can be tested through<space/><link><target>unit testing</target></link>,<space/><link><target>regression testing</target></link><space/>and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance,<space/><link><target>NASA</target></link><space/>has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA-based operations interact and identify each other through command programs. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together.</paragraph><heading level='3'>License</heading><paragraph><template><target>main</target><arg>Software license</arg></template>The software's license gives the user the right to use the software in the licensed environment, and in the case of<space/><link><target>free software license</target><trail>s</trail></link>, also grants other rights such as the right to make copies.</paragraph><paragraph><link><target>Proprietary software</target></link><space/>can be divided into two types:</paragraph><list type='bullet'><listitem><link><target>freeware</target></link>, which includes the category of &quot;free trial&quot; software or &quot;<link><target>freemium</target></link>&quot; software (in the past, the term<space/><link><target>shareware</target></link><space/>was often used for free trial/freemium software). As the name suggests, freeware can be used for free, although in the case of free trials or freemium software, this is sometimes only true for a limited period of time or with limited functionality.</listitem><listitem>software available for a fee, often inaccurately termed &quot;<link><target>commercial software</target></link>&quot;, which can only be legally used on purchase of a license.</listitem></list><paragraph><link><target>Open source software</target></link>, on the other hand, comes with a<space/><link><target>free software license</target></link>, granting the recipient the rights to modify and redistribute the software.</paragraph><heading level='3'>Patents</heading><paragraph><template><target>main</target><arg>Software patent</arg><arg>Software patent debate</arg></template>Software patents, like other types of patents, are theoretically supposed to give an inventor an exclusive, time-limited license for a<space/><italics>detailed idea (e.g. an algorithm) on how to implement</italics><space/>a piece of software, or a component of a piece of software. Ideas for useful things that software could<space/><italics>do</italics>, and user<space/><italics>requirements</italics>, are not supposed to be patentable, and concrete implementations (i.e. the actual software packages implementing the patent) are not supposed to be patentable eitherthe latter are already covered by copyright, generally automatically. So software patents are supposed to cover the middle area, between requirements and concrete implementation. In some countries, a requirement for the claimed invention to have an effect on the physical world may also be part of the requirements for a software patent to be held validalthough since<space/><italics>all</italics><space/>useful software has effects on the physical world, this requirement may be open to debate.</paragraph><paragraph>Software patents are controversial in the software industry with many people holding different views about them. One of the sources of controversy is that the aforementioned split between initial ideas and patent does not seem to be honored in practice by patent lawyersfor example the patent for<space/><link><target>Aspect-Oriented Programming</target></link><space/>(AOP), which purported to claim rights over<space/><italics>any</italics><space/>programming tool implementing the idea of AOP, howsoever implemented. Another source of controversy is the effect on innovation, with many distinguished experts and companies arguing that software is such a fast-moving field that software patents merely create vast additional litigation costs and risks, and actually retard innovation. In the case of debates about software patents outside the US, the argument has been made that large American corporations and patent lawyers are likely to be the primary beneficiaries of allowing or continue to allow software patents.</paragraph><heading level='2'>Design and implementation</heading><paragraph><template><target>main</target><arg>Software development</arg><arg>Computer programming</arg><arg>Software engineering</arg></template>Design and implementation of software varies depending on the complexity of the software. For instance, the design and creation of<space/><link><target>Microsoft Word</target></link><space/>took much more time than designing and developing<space/><link><target>Microsoft Notepad</target></link><space/>because the latter has much more basic functionality.</paragraph><paragraph>Software is usually designed and created (a.k.a. coded/written/programmed) in<space/><link><target>integrated development environment</target><trail>s</trail></link><space/>(IDE) like<space/><link><target>Eclipse (software)</target><part>Eclipse</part></link>,<space/><link><target>IntelliJ IDEA</target><part>IntelliJ</part></link><space/>and<space/><link><target>Microsoft Visual Studio</target></link><space/>that can simplify the process and<space/><link><target>compiler</target><part>compile</part></link><space/>the software (if applicable). As noted in a different section, software is usually created on top of existing software and the<space/><link><target>application programming interface</target></link><space/>(API) that the underlying software provides like<space/><link><target>GTK+</target></link>, JavaBeans or<space/><link><target>Swing (Java)</target><part>Swing</part></link>. Libraries (APIs) can be categorized by their purpose. For instance, the<space/><link><target>Spring framework</target><part>Spring Framework</part></link><space/>is used for implementing<space/><link><target>enterprise application</target><trail>s</trail></link>, the<space/><link><target>Windows Forms</target></link><space/>library is used for designing graphical user interface (GUI) applications like<space/><link><target>Microsoft Word</target></link>, and<space/><link><target>Windows Communication Foundation</target></link><space/>is used for designing<space/><link><target>web service</target><trail>s</trail></link>. When a program is designed, it relies upon the API. For instance, if a user is designing a Microsoft Windows desktop application, he or she might use the<space/><link><target>.NET Framework</target><part>.NET</part></link><space/>Windows Forms library to design the desktop application and call its APIs like<space/><italics>Form1.Close()</italics><space/>and<space/><italics>Form1.Show()</italics><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://msdn.microsoft.com/en-us/library/default.aspx<space/></arg><arg name="title">MSDN Library</arg><arg name="accessdate">2010-06-14</arg></template></extension><space/>to close or open the application, and write the additional operations him/herself that it needs to have. Without these APIs, the programmer needs to write these APIs him/herself. Companies like<space/><link><target>Oracle Corporation</target><part>Oracle</part></link><space/>and<space/><link><target>Microsoft</target></link><space/>provide their own APIs so that many applications are written using their<space/><link><target>software library</target><part>software libraries</part></link><space/>that usually have numerous APIs in them.</paragraph><paragraph><link><target>Data structure</target><trail>s</trail></link><space/>such as<space/><link><target>hash table</target><trail>s</trail></link>,<space/><link><target>array data type</target><part>arrays</part></link>, and<space/><link><target>binary tree</target><trail>s</trail></link>, and<space/><link><target>algorithm</target><trail>s</trail></link><space/>such as<space/><link><target>quicksort</target></link>, can be useful for creating software.</paragraph><paragraph>Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods.<template><target>Specify</target><arg>Which characteristics?</arg><arg name="date">May 2012</arg></template><extension extension_name='ref'><template><target>cite journal</target><arg name="author">v. Engelhardt, Sebastian<space/></arg><arg name="year">2008</arg><arg name="url">http://ideas.repec.org/p/jrp/jrpwrp/2008-045.html<space/></arg><arg name="title">The Economic Properties of Software</arg><arg name="journal"><space/>Jena Economic Research Papers</arg><arg name="volume"><space/>2</arg><arg name="issue"><space/>2008–045.</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://dankaminsky.com/1999/03/02/69/<space/></arg><arg name="title">Why Open Source Is The Optimum Economic Paradigm for Software</arg><arg name="first"><space/>Dan<space/></arg><arg name="last">Kaminsky<space/></arg><arg name="year">1999</arg></template></extension></paragraph><paragraph>A person who creates software is called a<space/><link><target>programmer</target></link>,<space/><link><target>software engineer</target></link><space/>or<space/><link><target>software developer</target></link>, terms that all have a similar meaning. More informal terms for programmer also exist such as &quot;coder&quot; and &quot;<link><target>Hacker (term)</target><part>hacker</part></link>&quot;<template><target>Spaced ndash</target></template>although use of the latter word may cause confusion, because it is more often used to mean<space/><link><target>Hacker (computer security)</target><part>someone who illegally breaks into computer systems</part></link>.</paragraph><heading level='2'>Industry and organizations</heading><paragraph><template><target>main</target><arg>Software industry</arg></template>A great variety of software companies and programmers in the world comprise a software industry. Software can be quite a profitable industry:<space/><link><target>Bill Gates</target></link>, the founder of<space/><link><target>Microsoft</target></link><space/>was the richest person in the world in 2009, largely due to his ownership of a significant number of shares in Microsoft, the company responsible for<space/><link><target>Microsoft Windows</target></link><space/>and<space/><link><target>Microsoft Office</target></link><space/>software products.</paragraph><paragraph>Non-profit software organizations include the<space/><link><target>Free Software Foundation</target></link>,<space/><link><target>GNU Project</target></link><space/>and<space/><link><target>Mozilla Foundation</target></link>. Software standard organizations like the<space/><link><target>W3C</target></link>,<space/><link><target>IETF</target></link><space/>develop recommended software standards such as<space/><link><target>XML</target></link>,<space/><link><target>HTTP</target></link><space/>and<space/><link><target>HTML</target></link>, so that software can interoperate through these standards.</paragraph><paragraph>Other well-known large software companies include<space/><link><target>Oracle Corporation</target><part>Oracle</part></link>,<space/><link><target>Novell</target></link>,<space/><link><target>SAP AG</target><part>SAP</part></link>,<space/><link><target>Symantec</target></link>,<space/><link><target>Adobe Systems</target></link>, and<space/><link><target>Corel</target></link>, while small companies often provide innovation.</paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Software release life cycle</target></link></listitem><listitem><link><target>List of software</target></link></listitem><listitem><link><target>Software asset management</target></link></listitem></list><paragraph><template><target>portal bar</target><arg>Software</arg><arg>Free software</arg><arg>Information technology</arg></template></paragraph><heading level='2'>References</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>Sister project links</target><arg name="wikt">software<space/></arg><arg name="commons">Special:Search/Software<space/></arg><arg name="b"><space/></arg><arg name="n"><space/></arg><arg name="s"><space/></arg><arg name="v">Computer Software<space/></arg><arg name="voy"><space/></arg><arg name="q">no</arg></template></paragraph><list type='bullet'><listitem><link type='external' href='http://www.dmoz.org/Computers/Software/'>Software in Open Directory Project</link></listitem></list><paragraph><template><target>Software digital distribution platforms</target><arg name="state">collapsed</arg></template><template><target>Authority control</target></template><template><target>DEFAULTSORT:Computer Software</target></template><link><target>Category:Software</target></link></paragraph></article>