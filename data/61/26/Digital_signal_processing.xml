<article title='Digital_signal_processing'><paragraph><template><target>Refimprove</target><arg name="date">May 2008</arg></template><template><target>See also</target><arg>Digital signal processor</arg></template><bold>Digital signal processing</bold><space/>(<bold>DSP</bold>) is the numerical manipulation of<space/><link><target>Signal (electrical engineering)</target><part>signal</part><trail>s</trail></link>, usually with the intention to measure, filter, produce or compress continuous<space/><link><target>analog signal</target><trail>s</trail></link>. It is characterized by the use of<space/><link><target>digital signal (signal processing)</target><part>digital signal</part><trail>s</trail></link><space/>to represent these signals as discrete time, discrete frequency, or other discrete domain signals in the form of a sequence of numbers or symbols to permit the digital processing of these signals.<space/></paragraph><paragraph>Theoretical analyses and derivations are typically performed on<space/><link><target>discrete-time signal</target></link><space/>models, created by the abstract process of<space/><link><target>Sampling (signal processing)</target><part>sampling</part></link>. Numerical methods require a digital signal, such as those produced by an<space/><link><target>analog-to-digital converter</target></link><space/>(ADC). The processed result might be a frequency spectrum or a set of statistics. But often it is another digital signal that is converted back to analog form by a<space/><link><target>digital-to-analog converter</target></link><space/>(DAC). Even if that whole sequence is more complex than analog processing and has a<space/><link><target>discrete signal</target><part>discrete value range</part></link>, the application of computational power to signal processing allows for many advantages over analog processing in many applications, such as<space/><link><target>error detection</target><part>error detection and correction</part></link><space/>in transmission as well as<space/><link><target>data compression</target></link>.<extension extension_name='ref'><template><target>cite book</target><arg name="title"><space/>Digital Signal Processing: Instant access<space/></arg><arg name="author"><space/>James D. Broesch, Dag Stranneby and William Walker<space/></arg><arg name="publisher"><space/>Butterworth-Heinemann<space/></arg><arg name="page"><space/>3</arg></template></extension></paragraph><paragraph>Digital signal processing and<space/><link><target>analog signal processing</target></link><space/>are subfields of<space/><link><target>signal processing</target></link>. DSP applications include<space/><link><target>audio signal processing</target><part>audio</part></link><space/>and<space/><link><target>speech signal processing</target></link>, sonar and radar signal processing, sensor array processing, spectral estimation, statistical signal processing,<space/><link><target>digital image processing</target></link>, signal processing for communications, control of systems, biomedical signal processing, seismic data processing, among others. DSP<space/><link><target>algorithm</target><trail>s</trail></link><space/>have long been run on standard computers, as well as on specialized processors called<space/><link><target>digital signal processor</target><trail>s</trail></link>, and on purpose-built hardware such as<space/><link><target>application-specific integrated circuit</target></link><space/>(ASICs). Currently, there are additional technologies used for digital signal processing including more powerful general purpose<space/><link><target>microprocessor</target><trail>s</trail></link>,<space/><link><target>field-programmable gate array</target><trail>s</trail></link><space/>(FPGAs),<space/><link><target>Digital Signal Controller</target><part>digital signal controllers</part></link><space/>(mostly for industrial applications such as motor control), and<space/><link><target>stream processing</target><part>stream processors</part></link>, among others.<extension extension_name='ref'><template><target>cite book</target><arg name="title"><space/>Digital Signal Processing and Applications<space/></arg><arg name="author"><space/>Dag Stranneby and William Walker<space/></arg><arg name="edition"><space/>2nd<space/></arg><arg name="publisher"><space/>Elsevier<space/></arg><arg name="year"><space/>2004<space/></arg><arg name="isbn"><space/>0-7506-6344-8<space/></arg><arg name="url"><space/>http://books.google.com/books?id</arg></template></extension></paragraph><paragraph>Digital signal processing can involve linear or nonlinear operations. Nonlinear signal processing is closely related to<space/><link><target>nonlinear system identification</target></link><extension extension_name='ref' name="SAB1">Billings S.A. &quot;Nonlinear System Identification: NARMAX Methods in the Time, Frequency, and Spatio-Temporal Domains&quot;. Wiley, 2013</extension><space/>and can be implemented in the time, frequency, and spatio-temporal domains.</paragraph><heading level='2'>Signal sampling</heading><paragraph><template><target>Main</target><arg>Sampling (signal processing)</arg></template></paragraph><paragraph>The increasing use of computers has resulted in the increased use of, and need for, digital signal processing. To digitally analyze and manipulate an analog signal, it must be digitized with an analog-to-digital converter. Sampling is usually carried out in two stages,<space/><link><target>discretization</target></link><space/>and<space/><link><target>Quantization (signal processing)</target><part>quantization</part></link>. In the discretization stage, the space of signals is partitioned into<space/><link><target>equivalence class</target><trail>es</trail></link><space/>and quantization is carried out by replacing the signal with representative signal of the corresponding equivalence class. In the quantization stage, the representative signal values are approximated by values from a finite set.</paragraph><paragraph>The<space/><link><target>NyquistShannon sampling theorem</target></link><space/>states that a signal can be exactly reconstructed from its samples if the sampling frequency is greater than twice the highest frequency of the signal, but this requires an infinite number of samples. In practice, the sampling frequency is often significantly higher than twice that required by the signal's limited bandwidth.</paragraph><paragraph>Some (continuous-time) periodic signals become non-periodic after sampling, and some non-periodic signals become periodic after sampling. In general, for a periodic signal with period<space/><italics>T</italics><space/>to be periodic (with period<space/><italics>N</italics>) after sampling with sampling interval<space/><italics>T<xhtml:sub>s</xhtml:sub></italics>, the following must be satisfied:</paragraph><list type='ident'><listitem><extension extension_name='math'>T_s N=Tk</extension></listitem></list><paragraph>where ''k is an integer.<extension extension_name='ref'><template><target>Citation</target><arg name="last">Oppenheim<space/></arg><arg name="first">Alan V.<space/></arg><arg name="author1-link">Alan V. Oppenheim<space/></arg><arg name="first2">Ronald W.<space/></arg><arg name="last2">Schafer<space/></arg><arg name="author2-link">Ronald W. Schafer<space/></arg><arg name="first3">John R.<space/></arg><arg name="last3">Buck<space/></arg><arg name="title">Discrete-Time Signal Processing<space/></arg><arg name="edition">3rd<space/></arg><arg name="year"><space/></arg><arg name="publisher"><space/></arg><arg name="isbn"><space/></arg><arg name="page">15</arg></template></extension></paragraph><heading level='2'>DSP domains</heading><paragraph>In DSP, engineers usually study digital signals in one of the following domains:<space/><link><target>time domain</target></link><space/>(one-dimensional signals), spatial domain (multidimensional signals),<space/><link><target>frequency domain</target></link>, and<space/><link><target>wavelet</target></link><space/>domains. They choose the domain in which to process a signal by making an informed assumption (or by trying different possibilities) as to which domain best represents the essential characteristics of the signal. A sequence of samples from a measuring device produces a temporal or spatial domain representation, whereas a<space/><link><target>discrete Fourier transform</target></link><space/>produces the frequency domain information, that is, the<space/><link><target>frequency spectrum</target></link>. Autocorrelation is defined as the<space/><link><target>cross-correlation</target></link><space/>of the signal with itself over varying intervals of time or space.</paragraph><heading level='3'>Time and space domains</heading><paragraph><template><target>Main</target><arg>Time domain</arg></template></paragraph><paragraph>The most common processing approach in the time or space domain is enhancement of the input signal through a method called filtering.<space/><link><target>Digital filter</target><trail>ing</trail></link><space/>generally consists of some linear transformation of a number of surrounding samples around the current sample of the input or output signal. There are various ways to characterize filters; for example:</paragraph><list type='bullet'><listitem>A &quot;linear&quot; filter is a<space/><link><target>linear transformation</target></link><space/>of input samples; other filters are &quot;non-linear&quot;. Linear filters satisfy the superposition condition, i.e. if an input is a weighted linear combination of different signals, the output is a similarly weighted linear combination of the corresponding output signals.</listitem></list><list type='bullet'><listitem>A &quot;causal&quot; filter uses only previous samples of the input or output signals; while a &quot;non-causal&quot; filter uses future input samples. A non-causal filter can usually be changed into a causal filter by adding a delay to it.</listitem></list><list type='bullet'><listitem>A &quot;time-invariant&quot; filter has constant properties over time; other filters such as<space/><link><target>adaptive filter</target><trail>s</trail></link><space/>change in time.</listitem></list><list type='bullet'><listitem>A &quot;stable&quot; filter produces an output that converges to a constant value with time, or remains bounded within a finite interval. An &quot;unstable&quot; filter can produce an output that grows without bounds, with bounded or even zero input.</listitem></list><list type='bullet'><listitem>A &quot;finite impulse response&quot; (<link><target>Finite impulse response</target><part>FIR</part></link>) filter uses only the input signals, while an &quot;infinite impulse response&quot; filter (<link><target>Infinite impulse response</target><part>IIR</part></link>) uses both the input signal and previous samples of the output signal. FIR filters are always stable, while IIR filters may be unstable.</listitem></list><paragraph>A filter can be represented by a<space/><link><target>block diagram</target></link>, which can then be used to derive a sample processing<space/><link><target>algorithm</target></link><space/>to implement the filter with hardware instructions. A filter may also be described as a<space/><link><target>difference equation</target></link>, a collection of<space/><link><target>Zero (complex analysis)</target><part>zeroes</part></link><space/>and<space/><link><target>pole (complex analysis)</target><part>pole</part><trail>s</trail></link><space/>or, if it is an FIR filter, an<space/><link><target>impulse response</target></link><space/>or<space/><link><target>step response</target></link>.</paragraph><paragraph>The output of a linear digital filter to any given input may be calculated by<space/><link><target>convolution</target><part>convolving</part></link><space/>the input signal with the<space/><link><target>impulse response</target></link>.</paragraph><heading level='3'>Frequency domain</heading><paragraph><template><target>Main</target><arg>Frequency domain</arg></template></paragraph><paragraph>Signals are converted from time or space domain to the frequency domain usually through the<space/><link><target>Fourier transform</target></link>. The Fourier transform converts the signal information to a magnitude and phase component of each frequency. Often the Fourier transform is converted to the power spectrum, which is the magnitude of each frequency component squared.</paragraph><paragraph>The most common purpose for analysis of signals in the frequency domain is analysis of signal properties. The engineer can study the spectrum to determine which frequencies are present in the input signal and which are missing.</paragraph><paragraph>In addition to frequency information, phase information is often needed. This can be obtained from the Fourier transform. With some applications, how the phase varies with frequency can be a significant consideration.</paragraph><paragraph>Filtering, particularly in non-realtime work can also be achieved by converting to the frequency domain, applying the filter and then converting back to the time domain. This is a fast, O(n log n) operation, and can give essentially any filter shape including excellent approximations to<space/><link><target>brickwall filter</target><trail>s</trail></link>.</paragraph><paragraph>There are some commonly used frequency domain transformations. For example, the<space/><link><target>cepstrum</target></link><space/>converts a signal to the frequency domain through Fourier transform, takes the logarithm, then applies another Fourier transform. This emphasizes the harmonic structure of the original spectrum.</paragraph><paragraph>Frequency domain analysis is also called<space/><italics>spectrum-</italics><space/>or<space/><italics>spectral analysis</italics>.</paragraph><heading level='3'>Z-plane analysis</heading><paragraph><template><target>main</target><arg>Z-transform</arg></template>Whereas analog filters are usually analyzed in terms of<space/><link><target>transfer function</target><trail>s</trail></link><space/>in the<space/><link><target>s plane</target></link><space/>using<space/><link><target>Laplace transform</target><trail>s</trail></link>, digital filters are analyzed in the z plane in terms of Z-transforms. A digital filter may be described in the z plane by its characteristic collection of<space/><link><target>Zero (complex analysis)</target><part>zeroes</part></link><space/>and<space/><link><target>pole (complex analysis)</target><part>poles</part></link>. The z plane provides a means for mapping digital frequency (samples/second) to real and imaginary z components, where<space/><extension extension_name='math'>z=re^{j\omega}<space/></extension><space/>for continuous periodic signals and<space/><extension extension_name='math'>\omega = 2 \pi F</extension><space/>(<extension extension_name='math'>F</extension><space/>is the digital frequency). This is useful for providing a visualization of the frequency response of a digital system or signal.</paragraph><heading level='3'>Wavelet</heading><paragraph><template><target>main</target><arg>Discrete wavelet transform</arg></template><link><target>File:Jpeg2000 2-level wavelet transform-lichtenstein.png</target><part>thumb</part><part>300px</part><part>An example of the 2D discrete wavelet transform that is used in<space/><link><target>JPEG2000</target></link>. The original image is high-pass filtered, yielding the three large images, each describing local changes in brightness (details) in the original image. It is then low-pass filtered and downscaled, yielding an approximation image; this image is high-pass filtered to produce the three smaller detail images, and low-pass filtered to produce the final approximation image in the upper-left.</part></link>In<space/><link><target>numerical analysis</target></link><space/>and<space/><link><target>functional analysis</target></link>, a<space/><bold>discrete wavelet transform</bold><space/>(DWT) is any<space/><link><target>wavelet transform</target></link><space/>for which the<space/><link><target>wavelet</target><trail>s</trail></link><space/>are discretely sampled. As with other wavelet transforms, a key advantage it has over<space/><link><target>Fourier transform</target><trail>s</trail></link><space/>is temporal resolution: it captures both frequency<space/><italics>and</italics><space/>location information (location in time).</paragraph><heading level='2'>Applications</heading><paragraph>The main applications of DSP are<space/><link><target>audio signal processing</target></link>,<space/><link><target>audio compression (data)</target><part>audio compression</part></link>,<space/><link><target>digital image processing</target></link>,<space/><link><target>video compression</target></link>,<space/><link><target>speech processing</target></link>,<space/><link><target>speech recognition</target></link>,<space/><link><target>digital communication</target><trail>s</trail></link>,<space/><link><target>radar</target></link>,<space/><link><target>sonar</target></link>,<space/><link><target>financial signal processing</target></link>,<space/><link><target>seismology</target></link><space/>and<space/><link><target>biomedicine</target></link>. Specific examples are<space/><link><target>speech encoding</target><part>speech compression</part></link><space/>and transmission in digital<space/><link><target>mobile phone</target><trail>s</trail></link>,<space/><link><target>digital room correction</target><part>room correction</part></link><space/>of sound in<space/><link><target>hi-fi</target></link><space/>and<space/><link><target>sound reinforcement</target></link><space/>applications,<space/><link><target>weather forecasting</target></link>,<space/><link><target>economic forecasting</target></link>,<space/><link><target>seismology</target><part>seismic</part></link><space/>data processing, analysis and control of<space/><link><target>industrial process</target><trail>es</trail></link>,<space/><link><target>medical imaging</target></link><space/>such as<space/><link><target>Computed axial tomography</target><part>CAT</part></link><space/>scans and<space/><link><target>MRI</target></link>,<space/><link><target>MP3</target></link><space/>compression,<space/><link><target>computer graphics</target></link>,<space/><link><target>image manipulation</target></link>, hi-fi<space/><link><target>loudspeaker</target></link><space/><link><target>audio crossover</target><part>crossovers</part></link><space/>and<space/><link><target>equalization (audio)</target><part>equalization</part></link>, and<space/><link><target>audio signal processing</target><part>audio effects</part></link><space/>for use with<space/><link><target>electric guitar</target></link><space/><link><target>amplifiers</target></link>.</paragraph><heading level='2'>Implementation</heading><paragraph>Depending on the requirements of the application, digital signal processing tasks can be implemented on general purpose computers.</paragraph><paragraph>Often when the processing requirement is not real-time, processing is economically done with an existing general-purpose computer and the signal data (either input or output) exists in data files. This is essentially no different from any other data processing, except DSP mathematical techniques (such as the<space/><link><target>Fast Fourier transform</target><part>FFT</part></link>) are used, and the sampled data is usually assumed to be uniformly sampled in time or space. For example: processing<space/><link><target>digital photograph</target><trail>s</trail></link><space/>with software such as<space/><italics>Photoshop</italics>.</paragraph><paragraph>However, when the application requirement is real-time, DSP is often implemented using specialized microprocessors such as the<space/><link><target>Motorola 56000</target><part>DSP56000</part></link>, the<space/><link><target>TMS320</target></link>, or the<space/><link><target>Super Harvard Architecture Single-Chip Computer</target><part>SHARC</part></link>. These often process data using fixed-point arithmetic, though some more powerful versions use floating point. For faster applications<space/><link><target>FPGA</target><trail>s</trail></link><extension extension_name='ref'><template><target>cite web</target><arg name="last"><space/>JpFix
<space/></arg><arg name="title"><space/>FPGA-Based Image Processing Accelerator
<space/></arg><arg name="url"><space/>http://www.jpfix.com/About_Us/Articles/FPGA-Based_Image_Processing_Ac/fpga-based_image_processing_ac.html
<space/></arg><arg name="accessdate"><space/>2008-05-10
</arg></template></extension><space/>might be used.Beginning in 2007, multicore implementations of DSPs have started to emerge from companies including<space/><link><target>Freescale</target></link><space/>and<space/><link><target>Stream Processors, Inc</target></link>. For faster applications with vast usage,<space/><link><target>Application-specific integrated circuit</target><part>ASIC</part><trail>s</trail></link><space/>might be designed specifically. For slow applications, a traditional slower processor such as a microcontroller may be adequate. Also a growing number of DSP applications are now being implemented on embedded systems using powerful PCs with multi-core processors.</paragraph><heading level='2'>Techniques</heading><paragraph><template><target>colbegin</target><arg></arg><arg>25em</arg></template></paragraph><list type='bullet'><listitem><link><target>Bilinear transform</target></link></listitem><listitem><link><target>Discrete Fourier transform</target></link></listitem><listitem><link><target>Discrete-time Fourier transform</target></link></listitem><listitem><link><target>Filter design</target></link></listitem><listitem><link><target>LTI system theory</target></link></listitem><listitem><link><target>Minimum phase</target></link></listitem><listitem><link><target>Transfer function</target></link></listitem><listitem><link><target>Z-transform</target></link></listitem><listitem><link><target>Goertzel algorithm</target></link></listitem><listitem><link><target>s-plane</target></link></listitem></list><paragraph><template><target>colend</target></template></paragraph><heading level='2'>Related fields</heading><paragraph><template><target>colbegin</target><arg></arg><arg>22em</arg></template></paragraph><list type='bullet'><listitem><link><target>Analog signal processing</target></link></listitem><listitem><link><target>Automatic control</target></link></listitem><listitem><link><target>Computer Engineering</target></link></listitem><listitem><link><target>Computer science</target></link></listitem><listitem><link><target>Data compression</target></link></listitem><listitem><link><target>Dataflow programming</target></link></listitem><listitem><link><target>Electrical engineering</target></link></listitem><listitem><link><target>Fourier analysis</target></link></listitem><listitem><link><target>Information theory</target></link></listitem><listitem><link><target>Machine learning</target></link></listitem><listitem><link><target>Real-time computing</target></link></listitem><listitem><link><target>Stream processing</target></link></listitem><listitem><link><target>Telecommunication</target></link></listitem><listitem><link><target>Time series</target></link></listitem><listitem><link><target>Wavelet</target></link></listitem></list><paragraph><template><target>colend</target></template></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target></template></paragraph><heading level='2'>Further reading</heading><paragraph><template><target>wikibooks</target><arg>Digital Signal Processing</arg></template><template><target>refbegin</target></template></paragraph><list type='bullet'><listitem><link><target>Alan V. Oppenheim</target></link>,<space/><link><target>Ronald W. Schafer</target></link>, John R. Buck :<space/><italics>Discrete-Time Signal Processing</italics>, Prentice Hall, ISBN 0-13-754920-2</listitem><listitem>Boaz Porat:<space/><italics>A Course in Digital Signal Processing</italics>, Wiley, ISBN 0-471-14961-6</listitem><listitem>Richard G. Lyons:<space/><italics>Understanding Digital Signal Processing</italics>, Prentice Hall, ISBN 0-13-108989-7</listitem><listitem>Jonathan Yaakov Stein,<space/><italics>Digital Signal Processing, a Computer Science Perspective</italics>, Wiley, ISBN 0-471-29546-9</listitem><listitem>Sen M. Kuo, Woon-Seng Gan:<space/><italics>Digital Signal Processors: Architectures, Implementations, and Applications</italics>, Prentice Hall, ISBN 0-13-035214-4</listitem><listitem>Bernard Mulgrew, Peter Grant, John Thompson:<space/><italics>Digital Signal Processing - Concepts and Applications</italics>, Palgrave Macmillan, ISBN 0-333-96356-3</listitem><listitem><template><target>cite book</target><arg name="author">Steven W. Smith<space/></arg><arg name="title">Digital Signal Processing: A Practical Guide for Engineers and Scientists<space/></arg><arg name="publisher">Newnes<space/></arg><arg name="date">2002<space/></arg><arg name="isbn">0-7506-7444-X<space/></arg><arg name="url">http://www.dspguide.com</arg></template></listitem><listitem>Paul A. Lynn, Wolfgang Fuerst:<space/><italics>Introductory Digital Signal Processing with Computer Applications</italics>, John Wiley &amp; Sons, ISBN 0-471-97984-8</listitem><listitem>James D. Broesch:<space/><italics>Digital Signal Processing Demystified</italics>, Newnes, ISBN 1-878707-16-7</listitem><listitem>John G. Proakis, Dimitris Manolakis:<space/><italics>Digital Signal Processing: Principles, Algorithms and Applications</italics>, 4th ed, Pearson, April 2006, ISBN 978-0131873742</listitem><listitem>Hari Krishna Garg:<space/><italics>Digital Signal Processing Algorithms</italics>, CRC Press, ISBN 0-8493-7178-3</listitem><listitem>P. Gaydecki:<space/><italics>Foundations Of Digital Signal Processing: Theory, Algorithms And Hardware Design</italics>, Institution of Electrical Engineers, ISBN 0-85296-431-5</listitem><listitem>Paul M. Embree, Damon Danieli:<space/><italics>C++ Algorithms for Digital Signal Processing</italics>, Prentice Hall, ISBN 0-13-179144-3</listitem><listitem>Vijay Madisetti, Douglas B. Williams:<space/><italics>The Digital Signal Processing Handbook</italics>, CRC Press, ISBN 0-8493-8572-5</listitem><listitem>Stergios Stergiopoulos:<space/><italics>Advanced Signal Processing Handbook: Theory and Implementation for Radar, Sonar, and Medical Imaging Real-Time Systems</italics>, CRC Press, ISBN 0-8493-3691-0</listitem><listitem>Joyce Van De Vegte:<space/><italics>Fundamentals of Digital Signal Processing</italics>, Prentice Hall, ISBN 0-13-016077-6</listitem><listitem>Ashfaq Khan:<space/><italics>Digital Signal Processing Fundamentals</italics>, Charles River Media, ISBN 1-58450-281-9</listitem><listitem>Jonathan M. Blackledge, Martin Turner:<space/><italics>Digital Signal Processing: Mathematical and Computational Methods, Software Development and Applications</italics>, Horwood Publishing, ISBN 1-898563-48-9</listitem><listitem>Doug Smith:<space/><italics>Digital Signal Processing Technology: Essentials of the Communications Revolution</italics>, American Radio Relay League, ISBN 0-87259-819-5</listitem><listitem>Charles A. Schuler:<space/><italics>Digital Signal Processing: A Hands-On Approach</italics>, McGraw-Hill, ISBN 0-07-829744-3</listitem><listitem><link><target>James H. McClellan</target></link>,<space/><link><target>Ronald W. Schafer</target></link>, Mark A. Yoder:<space/><italics>Signal Processing First</italics>, Prentice Hall, ISBN 0-13-090999-8</listitem><listitem>John G. Proakis:<space/><italics>A Self-Study Guide for Digital Signal Processing</italics>, Prentice Hall, ISBN 0-13-143239-7</listitem><listitem><link><target>N. Ahmed</target></link><space/>and K.R. Rao (1975). Orthogonal Transforms for Digital Signal Processing. Springer-Verlag (Berlin Heidelberg New York), ISBN 3-540-06556-3.</listitem></list><paragraph><template><target>refend</target></template></paragraph><paragraph><template><target>Digital systems</target></template><template><target>DSP</target></template><template><target>Sub-disciplines of computing</target></template></paragraph><paragraph><template><target>Authority control</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Digital Signal Processing</target></template><link><target>Category:Digital electronics</target></link><link><target>Category:Digital signal processing</target><part>*</part></link><link><target>Category:Telecommunication theory</target></link><link><target>Category:Radar signal processing</target></link></paragraph></article>