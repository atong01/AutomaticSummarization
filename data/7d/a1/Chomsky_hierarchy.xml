<article title='Chomsky_hierarchy'><paragraph>Within the fields of<space/><link><target>computer science</target></link><space/>and<space/><link><target>linguistics</target></link>, specifically in the area of<space/><link><target>formal language</target><trail>s</trail></link>, the<space/><bold>Chomsky hierarchy</bold><space/>(occasionally referred to as<space/><bold>Chomsky-Schtzenberger hierarchy</bold>) is a<space/><link><target>containment hierarchy</target></link><space/>of classes of<space/><link><target>formal grammar</target><trail>s</trail></link>.This hierarchy of grammars was described by<space/><link><target>Noam Chomsky</target></link><space/>in&amp;nbsp;1956.<extension extension_name='ref'><template><target>cite journal</target><arg name="last">Chomsky<space/></arg><arg name="first">Noam<space/></arg><arg name="authorlink">Noam Chomsky<space/></arg><arg name="date">1956<space/></arg><arg name="title">Three models for the description of language<space/></arg><arg name="doi">10.1109/TIT.1956.1056813<space/></arg><arg name="journal">IRE Transactions on Information Theory<space/></arg><arg name="issue">2<space/></arg><arg name="pages">113â€“124<space/></arg><arg name="url">http://www.chomsky.info/articles/195609--.pdf<space/></arg><arg name="format">PDF</arg></template></extension><space/>It is also named after<space/><link><target>Marcel-Paul Schtzenberger</target></link>, who played a crucial role in the development of the theory of<space/><link><target>formal language</target><trail>s</trail></link>.<space/></paragraph><heading level='2'>Formal grammars</heading><paragraph><template><target>main</target><arg>Formal grammar</arg></template>A formal grammar of this type consists of a finite set of<space/><italics><link><target>Formal grammar#Introductory example</target><part>production rules</part></link></italics><space/>(<italics>left-hand side</italics><space/><extension extension_name='math'>\rightarrow \,</extension><space/><italics>right-hand side</italics>), where each side consists of a sequence of the following symbols:</paragraph><list type='bullet'><listitem>a finite set of<space/><italics><link><target>nonterminal symbol</target><trail>s</trail></link></italics><space/>(indicating that some production rule can yet be applied)</listitem><listitem>a finite set of<space/><italics><link><target>terminal symbol</target><trail>s</trail></link></italics><space/>(indicating that no production rule can be applied)</listitem><listitem>a<space/><italics>start symbol</italics><space/>(a distinguished nonterminal symbol)</listitem></list><paragraph>A formal grammar defines (or<space/><italics>generates</italics>) a<space/><italics>formal language</italics>, which is a (usually infinite) set of finite-length sequences of symbols (i.e.<space/><link><target>String (computer science)</target><part>strings</part></link>) that may be constructed by applying production rules to another sequence of symbols which initially contains just the start symbol. A rule may be applied to a sequence of symbols by replacing an occurrence of the symbols on the left-hand side of the rule with those that appear on the right-hand side. A sequence of rule applications is called a<space/><italics>derivation</italics>. Such a grammar defines the formal language: all words consisting solely of terminal symbols which can be reached by a derivation from the start symbol.</paragraph><paragraph>Nonterminals are often represented by uppercase letters, terminals by lowercase letters, and the start symbol by<space/><extension extension_name='math'>S</extension>. For example, the grammar with terminals<space/><extension extension_name='math'>\{a, b\}</extension>, nonterminals<space/><extension extension_name='math'>\{S, A, B\}</extension>, production rules</paragraph><list type='ident'><listitem><extension extension_name='math'>S</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>ABS</extension></listitem><listitem><extension extension_name='math'>S</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/>&amp;epsilon; (where &amp;epsilon; is the empty string)</listitem><listitem><extension extension_name='math'>BA</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>AB</extension></listitem><listitem><extension extension_name='math'>BS</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>b</extension></listitem><listitem><extension extension_name='math'>Bb</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>bb</extension></listitem><listitem><extension extension_name='math'>Ab</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>ab</extension></listitem><listitem><extension extension_name='math'>Aa</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>aa</extension></listitem></list><paragraph>and start symbol<space/><extension extension_name='math'>S</extension>, defines the language of all words of the form<space/><extension extension_name='math'><space/>a^n b^n<space/></extension><space/>(i.e.<space/><extension extension_name='math'>n</extension><space/>copies of<space/><extension extension_name='math'>a</extension><space/>followed by<space/><extension extension_name='math'>n</extension><space/>copies of<space/><extension extension_name='math'>b</extension>).The following is a simpler grammar that defines the same language: Terminals<space/><extension extension_name='math'>\{a, b\}</extension>, Nonterminals<space/><extension extension_name='math'>\{S\}</extension>, Start symbol<space/><extension extension_name='math'>S</extension>, Production rules</paragraph><list type='ident'><listitem><extension extension_name='math'>S</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>aSb</extension></listitem><listitem><extension extension_name='math'>S</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/>&amp;epsilon;</listitem></list><paragraph>As another example, a grammar for a toy subset of English language is given by:<xhtml:br></xhtml:br>terminals<space/><extension extension_name='math'>\{ generate, hate, great, green, ideas, linguists \}</extension>,<space/><xhtml:br></xhtml:br>nonterminals<space/><extension extension_name='math'>\{\textit{SENTENCE}, \textit{NOUNPHRASE}, \textit{VERBPHRASE}, \textit{NOUN}, \textit{VERB}, \textit{ADJ} \}</extension>,<space/><xhtml:br></xhtml:br>production rules</paragraph><list type='ident'><listitem><extension extension_name='math'>\textit{SENTENCE}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{NOUNPHRASE} \; \textit{VERBPHRASE}</extension></listitem><listitem><extension extension_name='math'>\textit{NOUNPHRASE}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{ADJ} \; \textit{NOUNPHRASE}</extension></listitem><listitem><extension extension_name='math'>\textit{NOUNPHRASE}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{NOUN}</extension></listitem><listitem><extension extension_name='math'>\textit{VERBPHRASE}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{VERB} \; \textit{NOUNPHRASE}</extension></listitem><listitem><extension extension_name='math'>\textit{VERBPHRASE}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{VERB}</extension></listitem><listitem><extension extension_name='math'>\textit{NOUN}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{ideas}</extension></listitem><listitem><extension extension_name='math'>\textit{NOUN}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{linguists}</extension></listitem><listitem><extension extension_name='math'>\textit{VERB}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{generate}</extension></listitem><listitem><extension extension_name='math'>\textit{VERB}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{hate}</extension></listitem><listitem><extension extension_name='math'>\textit{ADJ}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{great}</extension></listitem><listitem><extension extension_name='math'>\textit{ADJ}</extension><space/><extension extension_name='math'>\rightarrow \,</extension><space/><extension extension_name='math'>\textit{green}</extension></listitem></list><paragraph>and start symbol<space/><extension extension_name='math'>\textit{SENTENCE}</extension>. An example derivation is</paragraph><list type='ident'><listitem><italics>SENTENCE</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>NOUNPHRASE VERBPHRASE</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>ADJ NOUNPHRASE VERBPHRASE</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>ADJ NOUN VERBPHRASE</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>ADJ NOUN VERB NOUNPHRASE</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>ADJ NOUN VERB ADJ NOUNPHRASE</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>ADJ NOUN VERB ADJ ADJ NOUNPHRASE</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>ADJ NOUN VERB ADJ ADJ NOUN</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>great NOUN VERB ADJ ADJ NOUN</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>great linguists VERB ADJ ADJ NOUN</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>great linguists generate ADJ ADJ NOUN</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>great linguists generate great ADJ NOUN</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>great linguists generate great green NOUN</italics><space/><extension extension_name='math'>\rightarrow</extension><space/><italics>great linguists generate great green ideas</italics>.</listitem></list><paragraph>Other sequences that can be derived from this grammar are &quot;<italics>ideas hate great linguists</italics>&quot;, and &quot;<italics>ideas generate</italics>&quot;. While these sentences are nonsensical, they are syntactically correct. A syntactically incorrect sentence like e.g. &quot;<italics>ideas ideas great hate</italics>&quot; cannot be derived from this grammar. See &quot;<link><target>Colorless green ideas sleep furiously</target></link>&quot; for a similar example given by Chomsky in 1957; see<space/><link><target>Phrase structure grammar</target></link><space/>and<space/><link><target>Phrase structure rules</target></link><space/>for more natural-language examples and the problems of formal grammars in that area.</paragraph><heading level='2'>The hierarchy</heading><paragraph><link><target>Image:Chomsky-hierarchy.svg</target><part>thumb</part><part>right</part><part>200px</part><part>alt=The Chomsky hierarchy</part><part>Set inclusions described by the Chomsky hierarchy</part></link>The Chomsky hierarchy consists of the following levels:</paragraph><list type='bullet'><listitem>Type-0 grammars (<link><target>unrestricted grammar</target><trail>s</trail></link>) include all formal grammars. They generate exactly all languages that can be recognized by a<space/><link><target>Turing machine</target></link>. These languages are also known as the<space/><link><target>recursively enumerable language</target><trail>s</trail></link>. Note that this is different from the<space/><link><target>recursive language</target><trail>s</trail></link><space/>which can be<space/><italics>decided</italics><space/>by an<space/><link><target>machine that always halts</target><part>always-halting Turing machine</part></link>.</listitem><listitem>Type-1 grammars (<link><target>context-sensitive grammar</target><trail>s</trail></link>) generate the<space/><link><target>context-sensitive language</target><trail>s</trail></link>. These grammars have rules of the form<space/><extension extension_name='math'>\alpha A\beta \rightarrow \alpha\gamma\beta</extension><space/>with<space/><extension extension_name='math'>A</extension><space/>a nonterminal and<space/><extension extension_name='math'>\alpha</extension>,<space/><extension extension_name='math'>\beta</extension><space/>and<space/><extension extension_name='math'>\gamma</extension><space/>strings of terminals and/or nonterminals. The strings<space/><extension extension_name='math'>\alpha</extension><space/>and<space/><extension extension_name='math'>\beta</extension><space/>may be empty, but<space/><extension extension_name='math'>\gamma</extension><space/>must be nonempty. The rule<space/><extension extension_name='math'>S \rightarrow \epsilon</extension><space/>is allowed if<space/><extension extension_name='math'>S</extension><space/>does not appear on the right side of any rule. The languages described by these grammars are exactly all languages that can be recognized by a<space/><link><target>linear bounded automaton</target></link><space/>(a nondeterministic Turing machine whose tape is bounded by a constant times the length of the input.)</listitem><listitem>Type-2 grammars (<link><target>context-free grammar</target><trail>s</trail></link>) generate the<space/><link><target>context-free language</target><trail>s</trail></link>. These are defined by rules of the form<space/><extension extension_name='math'>A \rightarrow \gamma</extension><space/>with<space/><extension extension_name='math'>A</extension><space/>a nonterminal and<space/><extension extension_name='math'>\gamma</extension><space/>a string of terminals and/or nonterminals. These languages are exactly all languages that can be recognized by a non-deterministic<space/><link><target>pushdown automaton</target></link>. Context-free languages or rather its subset of<space/><link><target>deterministic context-free language</target></link><space/>are the theoretical basis for the phrase structure of most<space/><link><target>programming language</target><trail>s</trail></link>, though their syntax also includes context-sensitive name resolution due to declarations and<space/><link><target>Scope (computer science)</target><part>scope</part></link>. Often a subset of grammars are used to make parsing easier, such as by an<space/><link><target>LL parser</target></link>.</listitem><listitem>Type-3 grammars (<link><target>regular grammar</target><trail>s</trail></link>) generate the<space/><link><target>regular language</target><trail>s</trail></link>. Such a grammar restricts its rules to a single nonterminal on the left-hand side and a right-hand side consisting of a single terminal, possibly followed by a single nonterminal (right regular). Alternatively, the right-hand side of the grammar can consist of a single terminal, possibly preceded by a single nonterminal (left regular); these generate the same languages however, if left-regular rules and right-regular rules are combined, the language need no longer be regular. The rule<space/><extension extension_name='math'>S \rightarrow \epsilon</extension><space/>is also allowed here if<space/><extension extension_name='math'>S</extension><space/>does not appear on the right side of any rule. These languages are exactly all languages that can be decided by a<space/><link><target>finite state automaton</target></link>. Additionally, this family of formal languages can be obtained by<space/><link><target>regular expression</target><trail>s</trail></link>. Regular languages are commonly used to define search patterns and the lexical structure of programming languages.</listitem></list><paragraph>Note that the set of grammars corresponding to<space/><link><target>recursive language</target><trail>s</trail></link><space/>is not a member of this hierarchy; these would be properly between Type-0 and Type-1.</paragraph><paragraph>Every regular language is context-free, every context-free language (not containing the empty string) is context-sensitive, every context-sensitive language is recursive and every recursive language is recursively enumerable. These are all proper inclusions, meaning that there exist recursively enumerable languages which are not context-sensitive, context-sensitive languages which are not context-free and context-free languages which are not regular.</paragraph><heading level='3'>Summary</heading><paragraph>The following table summarizes each of Chomsky's four types of grammars, the class of language it generates, the type of automaton that recognizes it, and the form its rules must have.</paragraph><table class="wikitable"><tablerow><tablehead>Grammar</tablehead><tablehead>Languages</tablehead><tablehead>Automaton</tablehead><tablehead>Production rules (constraints)</tablehead></tablerow><tablerow><tablecell>Type-0</tablecell><tablecell><link><target>recursively enumerable language</target><part>Recursively enumerable</part></link></tablecell><tablecell><link><target>Turing machine</target></link></tablecell><tablecell><extension extension_name='math'>\alpha \rightarrow \beta</extension><space/>(no restrictions)</tablecell></tablerow><tablerow><tablecell>Type-1</tablecell><tablecell><link><target>context-sensitive grammar</target><part>Context-sensitive</part></link></tablecell><tablecell><link><target>Linear bounded automaton</target><part>Linear-bounded non-deterministic Turing machine</part></link></tablecell><tablecell><extension extension_name='math'>\alpha A \beta \rightarrow \alpha \gamma \beta</extension></tablecell></tablerow><tablerow><tablecell>Type-2</tablecell><tablecell><link><target>context-free grammar</target><part>Context-free</part></link></tablecell><tablecell>Non-deterministic<space/><link><target>pushdown automaton</target></link></tablecell><tablecell><extension extension_name='math'>A \rightarrow \gamma</extension></tablecell></tablerow><tablerow><tablecell>Type-3</tablecell><tablecell><link><target>regular grammar</target><part>Regular</part></link></tablecell><tablecell><link><target>Finite state automaton</target></link></tablecell><tablecell><extension extension_name='math'>A \rightarrow a</extension><xhtml:br></xhtml:br><space/>and<xhtml:br></xhtml:br><extension extension_name='math'>A \rightarrow aB</extension></tablecell></tablerow></table><paragraph>There are further categories of formal languages, some of which are given in the expandable navigation box at the bottom of this page.</paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target></template></paragraph><list type='bullet'><listitem><template><target>cite journal</target><arg name="last"><space/>Chomsky
<space/></arg><arg name="first"><space/>Noam
<space/></arg><arg name="authorlink"><space/>Noam Chomsky
<space/></arg><arg name="date"><space/>1959
<space/></arg><arg name="title"><space/>On certain formal properties of grammars
<space/></arg><arg name="volume"><space/>2
<space/></arg><arg name="journal"><space/>Information and Control
<space/></arg><arg name="doi"><space/>10.1016/S0019-9958(59)90362-6
<space/></arg><arg name="issue"><space/>2
<space/></arg><arg name="pages"><space/>137â€“167
<space/></arg><arg name="url"><space/>http://www.diku.dk/hjemmesider/ansatte/henglein/papers/chomsky1959.pdf<space/></arg><arg name="format">PDF
<space/></arg></template></listitem><listitem><template><target>cite book</target><arg name="last1"><space/>Chomsky<space/></arg><arg name="first1"><space/>Noam<space/></arg><arg name="authorlink"><space/>Noam Chomsky
<space/></arg><arg name="last2">SchÃ¼tzenberger<space/></arg><arg name="first2">Marcel P.
<space/></arg><arg name="editor1-last">Braffort<space/></arg><arg name="editor1-first">P.<space/></arg><arg name="editor2-last">Hirschberg<space/></arg><arg name="editor2-first">D.
<space/></arg><arg name="date"><space/>1963
<space/></arg><arg name="title"><space/>Computer Programming and Formal Languages
<space/></arg><arg name="chapter"><space/>The algebraic theory of context free languages
<space/></arg><arg name="publisher"><space/>North Holland
<space/></arg><arg name="location"><space/>Amsterdam
<space/></arg><arg name="pages"><space/>118â€“161
<space/></arg></template></listitem><listitem><template><target>Cite book</target><arg name="last1">Davis<space/></arg><arg name="first1">Martin D.
<space/></arg><arg name="last2">Sigal<space/></arg><arg name="first2">Ron
<space/></arg><arg name="last3">Weyuker<space/></arg><arg name="first3">Elaine J.
<space/></arg><arg name="date">1994
<space/></arg><arg name="title">Computability, Complexity, and Languages: Fundamentals of Theoretical Computer Science
<space/></arg><arg name="edition">2nd
<space/></arg><arg name="publisher">Academic Press, Harcourt, Brace 
<space/></arg><arg name="location">Boston 
<space/></arg><arg name="isbn">0-12-206382-1 
<space/></arg><arg name="page">327
<space/></arg></template></listitem></list><paragraph><template><target>Formal languages and grammars</target></template><template><target>Noam Chomsky</target></template></paragraph><paragraph><link><target>Category:1956 in computer science</target></link><link><target>Category:Formal languages</target></link><link><target>Category:Generative linguistics</target></link><link><target>Category:Noam Chomsky</target><part>Hierarchy, Chomsky</part></link></paragraph></article>