<article title='Central_processing_unit'><paragraph><template><target>Redirect</target><arg>CPU</arg></template><template><target>Redirect</target><arg>Computer processor</arg><arg>other uses</arg><arg>Processor (disambiguation)</arg></template><template><target>Refimprove</target><arg name="date">November 2014</arg></template></paragraph><paragraph><template><target>Multiple image</target><arg name="direction"><space/>vertical
</arg><arg name="width"><space/>220
</arg><arg name="image1"><space/>Intel 80486DX2 top.jpg
</arg><arg name="caption1"><space/>An [[Intel 80486DX2]] CPU, as seen from above
</arg><arg name="image2"><space/>Intel 80486DX2 bottom.jpg
</arg><arg name="caption2"><space/>Bottom side of an Intel 80486DX2
</arg></template></paragraph><paragraph>A<space/><bold>central processing unit</bold><space/>(<bold>CPU</bold>) is the<space/><link><target>electronic circuit</target><trail>ry</trail></link><space/>within a<space/><link><target>computer</target></link><space/>that carries out the<space/><link><target>Instruction (computing)</target><part>instruction</part><trail>s</trail></link><space/>of a<space/><link><target>computer program</target></link><space/>by performing the basic arithmetic, logical, control and<space/><link><target>input/output</target></link><space/>(I/O) operations specified by the instructions. The term has been used in the computer industry at least since the early 1960s.<extension extension_name='ref' name="weik1961"><template><target>cite journal</target><arg name="author"><space/>Weik, Martin H.<space/></arg><arg name="title"><space/>A Third Survey of Domestic Electronic Digital Computing Systems<space/></arg><arg name="publisher"><space/>[[Ballistic Research Laboratory]]<space/></arg><arg name="url"><space/>http://ed-thelen.org/comp-hist/BRL61.html<space/></arg><arg name="year"><space/>1961<space/></arg></template></extension><space/>Traditionally, the term &quot;CPU&quot; refers to a processor, more specifically to its processing unit and<space/><link><target>control unit</target></link><space/>(CU), distinguishing these core elements of a computer from external components such as<space/><link><target>main memory</target></link><space/>and I/O circuitry.<extension extension_name='ref' name="kuck"><template><target>cite book</target><arg name="last1">Kuck</arg><arg name="first1">David</arg><arg name="title">Computers and Computations, Vol 1</arg><arg name="date">1978</arg><arg name="publisher">John Wiley & Sons, Inc.</arg><arg name="isbn">0471027162</arg><arg name="page">12</arg></template></extension></paragraph><paragraph>The form,<space/><link><target>CPU design</target><part>design</part></link><space/>and implementation of CPUs have changed over the course of their history, but their fundamental operation remains almost unchanged. Principal components of a CPU include the<space/><link><target>arithmetic logic unit</target></link><space/>(ALU) that performs arithmetic and logic operations,<space/><link><target>processor register</target><trail>s</trail></link><space/>that supply<space/><link><target>operand</target><trail>s</trail></link><space/>to the ALU and store the results of ALU operations, and a control unit that fetches instructions from memory and &quot;executes&quot; them by directing the coordinated operations of the ALU, registers and other components.</paragraph><paragraph>Most modern CPUs are<space/><link><target>microprocessor</target><trail>s</trail></link>, meaning they are contained on a single<space/><link><target>integrated circuit</target></link><space/>(IC) chip. An IC that contains a CPU may also contain memory,<space/><link><target>peripheral</target></link><space/>interfaces, and other components of a computer; such integrated devices are variously called<space/><link><target>microcontroller</target><trail>s</trail></link><space/>or<space/><link><target>System on a chip</target><part>systems on a chip</part></link><space/>(SoC). Some computers employ a<space/><link><target>multi-core processor</target></link>, which is a single chip containing two or more CPUs called &quot;cores&quot;; in that context, single chips are sometimes referred to as &quot;sockets&quot;.<extension extension_name='ref' name="intel-pcm"></extension><space/>Array processors or<space/><link><target>vector processor</target><trail>s</trail></link><space/>have multiple processors that operate in parallel, with no unit considered central.</paragraph><heading level='2'>History</heading><paragraph><template><target>Main</target><arg>History of general-purpose CPUs</arg></template><link><target>File:Edvac.jpg</target><part>thumb</part><part><link><target>EDVAC</target></link>, one of the first stored-program computers</part></link></paragraph><paragraph>Computers such as the<space/><link><target>ENIAC</target></link><space/>had to be physically rewired to perform different tasks, which caused these machines to be called &quot;fixed-program computers&quot;.<extension extension_name='ref'><template><target>cite book</target><arg name="last1">Regan</arg><arg name="first1">Gerard</arg><arg name="title">A Brief History of Computing</arg><arg name="isbn">1848000839</arg><arg name="page">66</arg><arg name="url">http://books.google.com/books?isbn</arg><arg name="accessdate">26 November 2014</arg></template></extension><space/>Since the term &quot;CPU&quot; is generally defined as a device for<space/><link><target>software</target></link><space/>(computer program) execution, the earliest devices that could rightly be called CPUs came with the advent of the<space/><link><target>stored-program computer</target></link>.</paragraph><paragraph>The idea of a stored-program computer was already present in the design of<space/><link><target>J. Presper Eckert</target></link><space/>and<space/><link><target>John William Mauchly</target></link>'s<space/><link><target>ENIAC</target></link>, but was initially omitted so that it could be finished sooner.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Bit By Bit</arg><arg name="url">http://ds.haverford.edu/bitbybit/bit-by-bit-contents/chapter-five/5-1-stored-program-computing/</arg><arg name="archiveurl">https://web.archive.org/web/20121013210908/http://ds.haverford.edu/bitbybit/bit-by-bit-contents/chapter-five/5-1-stored-program-computing/</arg><arg name="publisher">Haverford College</arg><arg name="accessdate">August 1, 2015</arg><arg name="archivedate">October 13, 2012</arg></template></extension><space/>On June&amp;nbsp;30, 1945, before ENIAC was made, mathematician<space/><link><target>John von Neumann</target></link><space/>distributed the paper entitled<space/><italics><link><target>First Draft of a Report on the EDVAC</target></link></italics>. It was the outline of a stored-program computer that would eventually be completed in August 1949.<extension extension_name='ref'><template><target>cite journal</target><arg name="author"><space/></arg><arg name="title"><space/>First Draft of a Report on the EDVAC<space/></arg><arg name="publisher"><space/>[[Moore School of Electrical Engineering]], [[University of Pennsylvania]]<space/></arg><arg name="url"><space/>http://www.virtualtravelog.net/entries/2003-08-TheFirstDraft.pdf<space/></arg><arg name="year"><space/>1945<space/></arg></template></extension><space/><link><target>EDVAC</target></link><space/>was designed to perform a certain number of instructions (or operations) of various types. Significantly, the programs written for EDVAC were to be stored in high-speed<space/><link><target>Memory (computers)</target><part>computer memory</part></link><space/>rather than specified by the physical wiring of the computer.<extension extension_name='ref'><template><target>cite web</target><arg name="title">The Modern History of Computing</arg><arg name="url">http://plato.stanford.edu/entries/computing-history/</arg><arg name="author">Standford University</arg><arg name="publisher">The Stanford Encyclopedia of Philosophy</arg><arg name="accessdate">September 25, 2015</arg></template></extension><space/>This overcame a severe limitation of ENIAC, which was the considerable time and effort required to reconfigure the computer to perform a new task. With von Neumann's design, the program that EDVAC ran could be changed simply by changing the contents of the memory. EDVAC, however, was not the first stored-program computer; the<space/><link><target>Manchester Small-Scale Experimental Machine</target></link>, a small prototype stored-program computer, ran its first program on 21 June 1948<extension extension_name='ref'><template><target>citation</target><arg name="last">Enticknap<space/></arg><arg name="first">Nicholas<space/></arg><arg name="title">Computing's Golden Jubilee<space/></arg><arg name="journal">Resurrection<space/></arg><arg name="issue">20<space/></arg><arg name="publisher">The Computer Conservation Society<space/></arg><arg name="date">Summer 1998<space/></arg><arg name="url">http://www.cs.man.ac.uk/CCS/res/res20.htm#d<space/></arg><arg name="issn">0958-7403<space/></arg><arg name="accessdate">19 April 2008</arg></template></extension><space/>and the<space/><link><target>Manchester Mark 1</target></link><space/>ran its first program during the night of 1617 June 1949.<extension extension_name='ref'><template><target>cite web</target><arg name="title">The Manchester Mark 1</arg><arg name="url">http://curation.cs.manchester.ac.uk/digital60/www.digital60.org/birth/manchestercomputers/mark1/manchester.html</arg><arg name="work">The University of Manchester</arg><arg name="accessdate">September 25, 2015</arg></template></extension></paragraph><paragraph>Early CPUs were custom designs used as part of a larger and sometimes distinctive computer.<extension extension_name='ref'><template><target>cite web</target><arg name="title">The First Generation</arg><arg name="url">http://www.computerhistory.org/revolution/birth-of-the-computer/4/92</arg><arg name="publisher">Computer History Museum</arg><arg name="accessdate">September 29, 2015</arg></template></extension><space/>However, this method of designing custom CPUs for a particular application has largely given way to the development of multi-purpose processors produced in large quantities. This standardization began in the era of discrete<space/><link><target>transistor</target></link><space/><link><target>Mainframe computer</target><part>mainframes</part></link><space/>and<space/><link><target>minicomputer</target><trail>s</trail></link><space/>and has rapidly accelerated with the popularization of the<space/><link><target>integrated circuit</target></link>&amp;nbsp;(IC). The IC has allowed increasingly complex CPUs to be designed and manufactured to tolerances on the order of<space/><link><target>Nanometre</target><part>nanometers</part></link>.<extension extension_name='ref' name="nobel"><template><target>cite web</target><arg name="title">The History of the Integrated Circuit</arg><arg name="url">http://www.nobelprize.org/educational/physics/integrated_circuit/history/</arg><arg name="website">Nobelprize.org</arg><arg name="accessdate">September 29, 2015</arg></template></extension><space/>Both the miniaturization and standardization of CPUs have increased the presence of digital devices in modern life far beyond the limited application of dedicated computing machines. Modern microprocessors appear in electronic devices ranging from automobiles to cellphones, and sometimes even in children's toys.</paragraph><paragraph>While von Neumann is most often credited with the design of the stored-program computer because of his design of EDVAC, and the design became known as the<space/><link><target>Von Neumann architecture</target></link>, others before him, such as<space/><link><target>Konrad Zuse</target></link>, had suggested and implemented similar ideas.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Konrad Zuse</arg><arg name="url">http://www.computerhistory.org/fellowawards/hall/bios/Konrad,Zuse/</arg><arg name="publisher">Computer History Museum</arg><arg name="accessdate">September 29, 2015</arg></template></extension><space/>The so-called<space/><link><target>Harvard architecture</target></link><space/>of the<space/><link><target>Harvard Mark I</target></link>, which was completed before EDVAC, also utilized a stored-program design using<space/><link><target>Punched tape</target><part>punched paper tape</part></link><space/>rather than electronic memory. The key difference between the von Neumann and Harvard architectures is that the latter separates the storage and treatment of CPU instructions and data, while the former uses the same memory space for both. Most modern CPUs are primarily von Neumann in design, but CPUs with the Harvard architecture are seen as well, especially in embedded applications; for instance, the<space/><link><target>Atmel AVR</target></link><space/>microcontrollers are Harvard architecture processors.</paragraph><paragraph><link><target>Relay</target><trail>s</trail></link><space/>and<space/><link><target>vacuum tube</target><trail>s</trail></link><space/>(thermionic valves) were commonly used as switching elements; a useful computer requires thousands or tens of thousands of switching devices. The overall speed of a system is dependent on the speed of the switches. Tube computers like EDVAC tended to average eight hours between failures, whereas relay computers like the (slower, but earlier)<space/><link><target>Harvard Mark I</target></link><space/>failed very rarely.<extension extension_name='ref' name="weik1961"></extension><space/>In the end, tube-based CPUs became dominant because the significant speed advantages afforded generally outweighed the reliability problems. Most of these early synchronous CPUs ran at low<space/><link><target>clock rate</target><trail>s</trail></link><space/>compared to modern microelectronic designs (see below for a discussion of clock rate). Clock signal frequencies ranging from 100<space/><link><target>Hertz</target><part>kHz</part></link><space/>to 4&amp;nbsp;MHz were very common at this time, limited largely by the speed of the switching devices they were built with.</paragraph><heading level='3'>Transistor CPUs</heading><paragraph>The design complexity of CPUs increased as various technologies facilitated building smaller and more reliable electronic devices. The first such improvement came with the advent of the<space/><link><target>transistor</target></link>. Transistorized CPUs during the 1950s and 1960s no longer had to be built out of bulky, unreliable, and fragile switching elements like<space/><link><target>vacuum tube</target><trail>s</trail></link><space/>and<space/><link><target>Relay</target><part>electrical relays</part></link>. With this improvement more complex and reliable CPUs were built onto one or several<space/><link><target>printed circuit board</target><trail>s</trail></link><space/>containing discrete (individual) components.</paragraph><paragraph>In 1964,<space/><link><target>IBM</target></link><space/>introduced its<space/><link><target>System/360</target></link><space/>computer architecture that was used in a series of computers capable of running the same programs with different speed and performance. This was significant at a time when most electronic computers were incompatible with one another, even those made by the same manufacturer. To facilitate this improvement, IBM utilized the concept of a<space/><link><target>microprogram</target></link><space/>(often called &quot;microcode&quot;), which still sees widespread usage in modern CPUs.<extension extension_name='ref' name="amdahl1964"><template><target>cite journal</target><arg name="author"><space/>[[Gene Amdahl|Amdahl, G. M.]], Blaauw, G. A., & Brooks, F. P. Jr.<space/></arg><arg name="title"><space/>Architecture of the IBM System/360<space/></arg><arg name="publisher"><space/>IBM Research<space/></arg><arg name="year"><space/>1964<space/></arg><arg name="url"><space/>http://www.research.ibm.com/journal/rd/441/amdahl.pdf<space/></arg></template></extension><space/>The System/360 architecture was so popular that it dominated the<space/><link><target>mainframe computer</target></link><space/>market for decades and left a legacy that is still continued by similar modern computers like the IBM<space/><link><target>IBM System z</target><part>zSeries</part></link>. In 1965,<space/><link><target>Digital Equipment Corporation</target></link><space/>(DEC) introduced another influential computer aimed at the scientific and research markets, the<space/><link><target>PDP-8</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Online PDP-8 Home Page, Run a PDP-8</arg><arg name="url">http://www.pdp8.net/index.shtml</arg><arg name="website">PDP8</arg><arg name="accessdate">September 25, 2015</arg></template></extension></paragraph><paragraph>Transistor-based computers had several distinct advantages over their predecessors. Aside from facilitating increased reliability and lower power consumption, transistors also allowed CPUs to operate at much higher speeds because of the short switching time of a transistor in comparison to a tube or relay. Thanks to both the increased reliability as well as the dramatically increased speed of the switching elements (which were almost exclusively transistors by this time), CPU clock rates in the tens of megahertz were obtained during this period. Additionally while discrete transistor and IC CPUs were in heavy usage, new high-performance designs like<space/><link><target>SIMD</target></link><space/>(Single Instruction Multiple Data)<space/><link><target>vector processor</target><trail>s</trail></link><space/>began to appear. These early experimental designs later gave rise to the era of specialized<space/><link><target>supercomputer</target><trail>s</trail></link><space/>like those made by<space/><link><target>Cray Inc.</target></link></paragraph><heading level='3'>Small-scale integration CPUs</heading><paragraph><link><target>File:PDP-8i cpu.jpg</target><part>thumb</part><part>CPU,<space/><link><target>Magnetic core memory</target><part>core memory</part></link>, and<space/><link><target>external bus</target></link><space/>interface of a DEC<space/><link><target>PDP-8</target></link>/I. Made of medium-scale integrated circuits.</part></link></paragraph><paragraph>During this period, a method of manufacturing many interconnected transistors in a compact space was developed. The integrated circuit (IC) allowed a large number of transistors to be manufactured on a single<space/><link><target>semiconductor</target></link>-based<space/><link><target>Die (integrated circuit)</target><part>die</part></link>, or &quot;chip&quot;. At first only very basic non-specialized digital circuits such as<space/><link><target>NOR gate</target><trail>s</trail></link><space/>were miniaturized into ICs. CPUs based upon these &quot;building block&quot; ICs are generally referred to as &quot;small-scale integration&quot; (SSI) devices. SSI ICs, such as the ones used in the<space/><link><target>Apollo guidance computer</target></link>, usually contained up to a few score transistors. To build an entire CPU out of SSI ICs required thousands of individual chips, but still consumed much less space and power than earlier discrete transistor designs.</paragraph><paragraph>IBM's<space/><link><target>System/370</target></link><space/>follow-on to the System/360 used SSI ICs rather than<space/><link><target>Solid Logic Technology</target></link><space/>discrete-transistor modules. DEC's<space/><link><target>PDP-8</target></link>/I and KI10<space/><link><target>PDP-10</target></link><space/>also switched from the individual transistors used by the PDP-8 and PDP-10 to SSI ICs, and their extremely popular<space/><link><target>PDP-11</target></link><space/>line was originally built with SSI ICs but was eventually implemented with LSI components once these became practical.</paragraph><heading level='3'>Large-scale integration CPUs</heading><paragraph>Lee Boysel published influential articles, including a 1967 &quot;manifesto&quot;, which described how to build the equivalent of a 32-bit mainframe computer from a relatively small number of<space/><link><target>large-scale integration</target></link><space/>circuits (LSI).<extension extension_name='ref'>Ross Knox Bassett.<link type='external' href='https://books.google.com/books?id=UUbB3d2UnaAC'>&quot;To the Digital Age: Research Labs, Start-up Companies, and the Rise of MOS Technology&quot;</link>.2007.p. 127-128, 256, and 314.</extension><extension extension_name='ref' name="shirriff">Ken Shirriff.<link type='external' href='http://www.righto.com/2015/05/the-texas-instruments-tmx-1795-first.html'>&quot;The Texas Instruments TMX 1795: the first, forgotten microprocessor&quot;</link>.</extension><space/>At the time, the only way to build LSI chips, which are chips with a hundred or more gates, was to build them using a MOS process (i.e.,<space/><link><target>PMOS logic</target></link>,<space/><link><target>NMOS logic</target></link>, or<space/><link><target>CMOS logic</target></link>). However, some companies continued to build processors out of bipolar chips because<space/><link><target>bipolar junction transistor</target><trail>s</trail></link><space/>were so much faster than MOS chips; for example,<space/><link><target>Datapoint</target></link><space/>built processors out of TTL chips until the early 1980s.<extension extension_name='ref' name="shirriff"></extension></paragraph><paragraph>People building high-speed computers wanted them to be fast, so in the 1970s they built the CPUs from<space/><link><target>small-scale integration</target></link><space/>(SSI) and<space/><link><target>medium-scale integration</target></link><space/>(MSI)<space/><link><target>7400 series</target></link><space/>TTL gates. At the time, MOS ICs were so slow that they were considered useful only in a few niche applications that required low power.<extension extension_name='ref'><link type='external' href='http://www.engin.brown.edu/faculty/daniels/ddzo/speed.html'>&quot;Speed &amp; Power in Logic Families&quot;</link>.</extension><extension extension_name='ref'>T. J. Stonham.<link type='external' href='https://books.google.com/books?id=UE6vFEnGP2kC'>&quot;Digital Logic Techniques: Principles and Practice&quot;</link>.1996.p. 174.</extension></paragraph><paragraph>As the microelectronic technology advanced, an increasing number of transistors were placed on ICs, decreasing the quantity of individual ICs needed for a complete CPU. MSI and LSI ICs increased transistor counts to hundreds, and then thousands. By 1968, the number of ICs required to build a complete CPU had been reduced to 24 ICs of eight different types, with each IC containing roughly 1000 MOSFETs.<extension extension_name='ref'>R. K. Booher.<link type='external' href='http://www.computer.org/csdl/proceedings/afips/1968/5072/00/50720877.pdf'>&quot;MOS GP Computer&quot;</link>.afips, pp.877, 1968 Proceedings of the Fall Joint Computer Conference, 1968<template><target>doi</target><arg>10.1109/AFIPS.1968.126</arg></template></extension><space/>In stark contrast with its SSI and MSI predecessors, the first LSI implementation of the PDP-11 contained a CPU composed of only four LSI integrated circuits.<extension extension_name='ref'><template><target>cite book</target><arg name="date">November 1975<space/></arg><arg name="title"><space/>LSI-11, PDP-11/03 user's manual<space/></arg><arg name="chapter"><space/>LSI-11 Module Descriptions<space/></arg><arg name="edition"><space/>2nd<space/></arg><arg name="pages"><space/>4–3<space/></arg><arg name="publisher"><space/>[[Digital Equipment Corporation]]<space/></arg><arg name="location"><space/>Maynard, Massachusetts<space/></arg><arg name="url"><space/>http://www.bitsavers.org/pdf/dec/pdp11/1103/EK-LSI11-TM-002.pdf</arg></template></extension></paragraph><heading level='3'>Microprocessors</heading><paragraph><template><target>Main</target><arg>Microprocessor</arg></template><template><target>Multiple image</target><arg name="width"><space/>220
</arg><arg name="direction"><space/>vertical
</arg><arg name="image1"><space/>80486dx2-large.jpg
</arg><arg name="caption1"><space/>[[Die (integrated circuit)|Die]] of an [[Intel 80486DX2]] microprocessor (actual size: 12×6.75&nbsp;mm) in its packaging
</arg><arg name="image2"><space/>EBIntel Corei5.JPG
</arg><arg name="caption2"><space/>[[Intel]] Core i5 CPU on a [[Sony Vaio E series|Vaio E series]] laptop motherboard (on the right, beneath the [[heat pipe]])
</arg></template></paragraph><paragraph>In the 1970s the fundamental inventions by<space/><link><target>Federico Faggin</target></link><space/>(Silicon Gate MOS ICs with<space/><link><target>self-aligned gate</target><trail>s</trail></link><space/>along with his new random logic design methodology) changed the design and implementation of CPUs forever. Since the introduction of the first commercially available microprocessor (the<space/><link><target>Intel 4004</target></link>) in 1970, and the first widely used<space/><link><target>microprocessor</target></link><space/>(the<space/><link><target>Intel 8080</target></link>) in 1974, this class of CPUs has almost completely overtaken all other central processing unit implementation methods. Mainframe and minicomputer manufacturers of the time launched proprietary IC development programs to upgrade their older<space/><link><target>computer architecture</target><trail>s</trail></link>, and eventually produced<space/><link><target>instruction set</target></link><space/>compatible microprocessors that were backward-compatible with their older hardware and software. Combined with the advent and eventual success of the ubiquitous<space/><link><target>personal computer</target></link>, the term<space/><italics>CPU</italics><space/>is now applied almost exclusively<template><target>Efn</target><arg>Integrated circuits are now used to implement all CPUs, except for a few machines designed to withstand large electromagnetic pulses, say from a nuclear weapon.</arg></template><space/>to microprocessors. Several CPUs (denoted<space/><italics>cores</italics>) can be combined in a single processing chip.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://searchdatacenter.techtarget.com/sDefinition/0,,sid80_gci1015740,00.html<space/></arg><arg name="publisher">TechTarget<space/></arg><arg name="title">Definition: multi-core processor<space/></arg><arg name="author">Margaret Rouse<space/></arg><arg name="date">March 27, 2007<space/></arg><arg name="accessdate">March 6, 2013</arg></template></extension></paragraph><paragraph><template><target>Anchor</target><arg>DISCRETE-PROCESSOR</arg></template>Previous generations of CPUs were implemented as<space/><link><target>discrete components</target></link><space/>and numerous small<space/><link><target>integrated circuit</target><trail>s</trail></link><space/>(ICs) on one or more circuit boards.<extension extension_name='ref'><template><target>cite web</target><arg name="title">A Brief History of the Microprocessor<space/></arg><arg name="url">http://www.computermuseum.li/Testpage/MicroprocessorHistory.htm<space/></arg><arg name="website">computermuseum.li<space/></arg><arg name="author">Richard Birkby<space/></arg><arg name="accessdate">October 13, 2015</arg></template></extension><space/>Microprocessors, on the other hand, are CPUs manufactured on a very small number of ICs; usually just one.<extension extension_name='ref' name="Osborne80"><template><target>cite book</target><arg name="first">Adam<space/></arg><arg name="last">Osborne<space/></arg><arg name="title">An Introduction to Microcomputers<space/></arg><arg name="volume">Volume 1: Basic Concepts<space/></arg><arg name="edition">2nd<space/></arg><arg name="publisher">Osborne-McGraw Hill<space/></arg><arg name="location">Berkeley, California<space/></arg><arg name="year">1980<space/></arg><arg name="isbn">0-931988-34-9</arg></template></extension><space/>The overall smaller CPU size, as a result of being implemented on a single die, means faster switching time because of physical factors like decreased gate<space/><link><target>parasitic capacitance</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Zhislina</arg><arg name="first1">Victoria</arg><arg name="title">Why has CPU frequency ceased to grow?</arg><arg name="url">https://software.intel.com/en-us/blogs/2014/02/19/why-has-cpu-frequency-ceased-to-grow</arg><arg name="publisher">Intel</arg><arg name="accessdate">October 14, 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="title">MOS Transistor - Electrical Engineering & Computer Science</arg><arg name="url">http://www.eecs.berkeley.edu/~tking/theses/bsriram.pdf</arg><arg name="publisher">University of California</arg><arg name="accessdate">October 14, 2015</arg></template></extension><space/>This has allowed synchronous microprocessors to have clock rates ranging from tens of megahertz to several gigahertz. Additionally, as the ability to construct exceedingly small transistors on an IC has increased, the complexity and number of transistors in a single CPU has increased many fold. This widely observed trend is described by<space/><link><target>Moore's law</target></link>, which has proven to be a fairly accurate predictor of the growth of CPU (and other IC) complexity.<extension extension_name='ref' name="MooresLaw"><template><target>cite journal</target><arg name="title">Excerpts from A Conversation with Gordon Moore: Moore's Law<space/></arg><arg name="publisher">Intel<space/></arg><arg name="year">2005<space/></arg><arg name="url">ftp://download.intel.com/museum/Moores_Law/Video-Transcripts/Excepts_A_Conversation_with_Gordon_Moore.pdf<space/></arg><arg name="format">PDF<space/></arg><arg name="accessdate">2012-07-25</arg></template></extension></paragraph><paragraph>While the complexity, size, construction, and general form of CPUs have changed enormously since 1950, it is notable that the basic design and function has not changed much at all. Almost all common CPUs today can be very accurately described as von Neumann stored-program machines.<template><target>Efn</target><arg name="The so-called "von Neumann" memo expounded the idea of stored programs,<ref>{{cite web|last1">Aspray|first1</arg></template><space/>As the aforementioned Moore's law continues to hold true,<extension extension_name='ref' name="MooresLaw"></extension><space/>concerns have arisen about the limits of integrated circuit transistor technology. Extreme miniaturization of electronic gates is causing the effects of phenomena like<space/><link><target>electromigration</target></link><space/>and<space/><link><target>subthreshold leakage</target></link><space/>to become much more significant. These newer concerns are among the many factors causing researchers to investigate new methods of computing such as the<space/><link><target>quantum computer</target></link>, as well as to expand the usage of<space/><link><target>Parallel computing</target><part>parallelism</part></link><space/>and other methods that extend the usefulness of the classical von Neumann model.</paragraph><heading level='2'>Operation</heading><paragraph>The fundamental operation of most CPUs, regardless of the physical form they take, is to execute a sequence of stored<space/><link><target>instruction (computing)</target><part>instructions</part></link><space/>that is called a program. The instructions to be executed are kept in some kind of<space/><link><target>Memory (computers)</target><part>computer memory</part></link>. Nearly all CPUs follow the fetch, decode and execute steps in their operation, which are collectively known as the<space/><link><target>instruction cycle</target></link>.</paragraph><paragraph>After the execution of an instruction, the entire process repeats, with the next instruction cycle normally fetching the next-in-sequence instruction because of the incremented value in the<space/><link><target>program counter</target></link>. If a jump instruction was executed, the program counter will be modified to contain the address of the instruction that was jumped to and program execution continues normally. In more complex CPUs, multiple instructions can be fetched, decoded, and executed simultaneously. This section describes what is generally referred to as the &quot;<link><target>classic RISC pipeline</target></link>&quot;, which is quite common among the simple CPUs used in many electronic devices (often called microcontroller). It largely ignores the important role of<space/><link><target>CPU cache</target></link>, and therefore the access stage of the pipeline.</paragraph><paragraph>Some instructions manipulate the program counter rather than producing result data directly; such instructions are generally called &quot;jumps&quot; and facilitate program behavior like<space/><link><target>Control flow#Loops</target><part>loops</part></link>, conditional program execution (through the use of a conditional jump), and existence of<space/><link><target>Subroutine</target><part>functions</part></link>.<template><target>Efn</target><arg>Some early computers like the Harvard Mark I did not support any kind of "jump" instruction, effectively limiting the complexity of the programs they could run. It is largely for this reason that these computers are often not considered to contain a proper CPU, despite their close similarity to stored-program computers.</arg></template><space/>In some processors, some other instructions change the state of bits in a<space/><link><target>Status register</target><part>&quot;flags&quot; register</part></link>. These flags can be used to influence how a program behaves, since they often indicate the outcome of various operations. For example, in such processors a &quot;compare&quot; instruction evaluates two values and sets or clears bits in the flags register to indicate which one is greater or whether they are equal; one of these flags could then be used by a later jump instruction to determine program flow.</paragraph><heading level='3'>Fetch</heading><paragraph>The first step, fetch, involves retrieving an<space/><link><target>instruction (computing)</target><part>instruction</part></link><space/>(which is represented by a number or sequence of numbers) from program memory. The instruction's location (address) in program memory is determined by a program counter (PC), which stores a number that identifies the address of the next instruction to be fetched. After an instruction is fetched, the PC is incremented by the length of the instruction so that it will contain the address of the next instruction in the sequence.<template><target>Efn</target><arg>Since the program counter counts ''memory addresses'' and not ''instructions'', it is incremented by the number of memory units that the instruction word contains. In the case of simple fixed-length instruction word ISAs, this is always the same number. For example, a fixed-length 32-bit instruction word ISA that uses 8-bit memory words would always increment the PC by four (except in the case of jumps). ISAs that use variable-length instruction words increment the PC by the number of memory words corresponding to the last instruction's length.</arg></template><space/>Often, the instruction to be fetched must be retrieved from relatively slow memory, causing the CPU to stall while waiting for the instruction to be returned. This issue is largely addressed in modern processors by caches and pipeline architectures (see below).</paragraph><heading level='3'>Decode</heading><paragraph>The instruction that the CPU fetches from memory determines what the CPU will do. In the decode step, performed by the circuitry known as the<space/><bold>instruction decoder</bold>, the instruction is converted into signals that control other parts of the CPU.</paragraph><paragraph>The way in which the instruction is interpreted is defined by the CPU's instruction set architecture (ISA).<template><target>Efn</target><arg>Because the instruction set architecture of a CPU is fundamental to its interface and usage, it is often used as a classification of the "type" of CPU. For example, a "PowerPC CPU" uses some variant of the PowerPC ISA. A system can execute a different ISA by running an emulator.</arg></template><space/>Often, one group of bits (that is, a &quot;field&quot;) within the instruction, called the opcode, indicates which operation is to be performed, while the remaining fields usually provide supplemental information required for the operation, such as the operands. Those operands may be specified as a constant value (called an immediate value), or as the location of a value that may be a<space/><link><target>processor register</target></link><space/>or a memory address, as determined by some<space/><link><target>addressing mode</target></link>.</paragraph><paragraph>In some CPU designs the instruction decoder is implemented as a hardwired, unchangeable circuit. In others, a<space/><link><target>microprogram</target></link><space/>is used to translate instructions into sets of CPU configuration signals that are applied sequentially over multiple clock pulses. In some cases the memory that stores the microprogram is rewritable, making it possible to change the way in which the CPU decodes instructions.</paragraph><heading level='3'>Execute</heading><paragraph>After the fetch and decode steps, the execute step is performed. Depending on the CPU architecture, this may consist of a single action or a sequence of actions. During each action, various parts of the CPU are electrically connected so they can perform all or part of the desired operation and then the action is completed, typically in response to a clock pulse. Very often the results are written to an internal CPU register for quick access by subsequent instructions. In other cases results may be written to slower, but less expensive and higher capacity<space/><link><target>Random access memory</target><part>main memory</part></link>.</paragraph><paragraph>For example, if an addition instruction is to be executed, the<space/><link><target>arithmetic logic unit</target></link><space/>(ALU) inputs are connected to a pair of operand sources (numbers to be summed), the ALU is configured to perform an addition operation so that the sum of its operand inputs will appear at its output, and the ALU output is connected to storage (e.g., a register or memory) that will receive the sum. When the clock pulse occurs, the sum will be transferred to storage and, if the resulting sum is too large (i.e., it is larger than the ALU's output word size), an arithmetic overflow flag will be set.</paragraph><heading level='2'>Structure and implementation</heading><paragraph><template><target>See also</target><arg>Processor design</arg></template><link><target>File:ABasicComputer.gif</target><part>thumb</part><part>upright=1.7</part><part>Block diagram of a basic uniprocessor-CPU computer. Black lines indicate data flow, whereas red lines indicate control flow; arrows indicate flow directions.</part></link></paragraph><paragraph>Hardwired into a CPU's circuitry is a set of basic operations it can perform, called an<space/><link><target>instruction set</target></link>. Such operations may involve, for example, adding or subtracting two numbers, comparing two numbers, or jumping to a different part of a program. Each basic operation is represented by a particular combination of<space/><link><target>bit</target><trail>s</trail></link>, known as the machine language<space/><link><target>opcode</target></link>; while executing instructions in a machine language program, the CPU decides which operation to perform by &quot;decoding&quot; the opcode. A complete machine language instruction consists of an opcode and, in many cases, additional bits that specify arguments for the operation (for example, the numbers to be summed in the case of an addition operation). Going up the complexity scale, a machine language program is a collection of machine language instructions that the CPU executes.</paragraph><paragraph>The actual mathematical operation for each instruction is performed by a<space/><link><target>combinational logic</target></link><space/>circuit within the CPU's processor known as the<space/><link><target>arithmetic logic unit</target></link><space/>or ALU. In general, a CPU executes an instruction by fetching it from memory, using its ALU to perform an operation, and then storing the result to memory. Beside the instructions for integer mathematics and logic operations, various other machine instructions exist, such as those for loading data from memory and storing it back, branching operations, and mathematical operations on floating-point numbers performed by the CPU's<space/><link><target>floating-point unit</target></link><space/>(FPU).<extension extension_name='ref'><template><target>cite web</target><arg name="url"><space/>http://www.bottomupcs.com/csbu.pdf#page</arg><arg name="title"><space/>Computer Science from the Bottom Up, Chapter 3. Computer Architecture
<space/></arg><arg name="date"><space/>September 3, 2013<space/></arg><arg name="accessdate"><space/>January 7, 2015
<space/></arg><arg name="author"><space/>Ian Wienand<space/></arg><arg name="website"><space/>bottomupcs.com
<space/></arg><arg name="format"><space/>PDF
</arg></template></extension></paragraph><heading level='3'>Control unit</heading><paragraph><template><target>Main</target><arg>Control unit</arg></template></paragraph><paragraph>The control unit of the CPU contains circuitry that uses electrical signals to direct the entire computer system to carry out stored program instructions. The control unit does not execute program instructions; rather, it directs other parts of the system to do so. The control unit communicates with both the ALU and memory.</paragraph><heading level='3'>Arithmetic logic unit</heading><paragraph><template><target>Main</target><arg>Arithmetic logic unit</arg></template><link><target>File:ALU block.gif</target><part>thumb</part><part>upright=1.3</part><part>Symbolic representation of an ALU and its input and output signals</part></link></paragraph><paragraph>The arithmetic logic unit (ALU) is a digital circuit within the processor that performs integer arithmetic and<space/><link><target>bitwise logic</target></link><space/>operations. The inputs to the ALU are the data words to be operated on (called<space/><link><target>operands</target></link>), status information from previous operations, and a code from the control unit indicating which operation to perform. Depending on the instruction being executed, the operands may come from<space/><link><target>processor register</target><part>internal CPU register</part><trail>s</trail></link><space/>or external memory, or they may be constants generated by the ALU itself.</paragraph><paragraph>When all input signals have settled and propagated through the ALU circuitry, the result of the performed operation appears at the ALU's outputs. The result consists of both a data word, which may be stored in a register or memory, and status information that is typically stored in a special, internal CPU register reserved for this purpose.</paragraph><heading level='3'>Integer range</heading><paragraph>Every CPU represents numerical values in a specific way. For example, some early digital computers represented numbers as familiar<space/><link><target>decimal</target></link><space/>(base 10)<space/><link><target>numeral system</target></link><space/>values, and others have employed more unusual representations such as<space/><link><target>Balanced ternary</target><part>ternary</part></link><space/>(base three). Nearly all modern CPUs represent numbers in<space/><link><target>Binary numeral system</target><part>binary</part></link><space/>form, with each digit being represented by some two-valued physical quantity such as a &quot;high&quot; or &quot;low&quot;<space/><link><target>volt</target><trail>age</trail></link>.<template><target>Efn</target><arg>The physical concept of [[voltage]] is an analog one by nature, practically having an infinite range of possible values. For the purpose of physical representation of binary numbers, two specific ranges of voltages are defined, one for logic '0' and another for logic '1'. These ranges are dictated by design considerations such as noise margins and characteristics of the devices used to create the CPU.</arg></template></paragraph><paragraph><link><target>File:Binary Forty.PNG</target><part>thumb</part><part>left</part><part>A six-bit word containing the binary encoded representation of decimal value 40. Most modern CPUs employ word sizes that are a power of two, for example eight, 16, 32 or 64 bits.</part></link></paragraph><paragraph>Related to numeric representation is the size and precision of integer numbers that a CPU can represent. In the case of a binary CPU, this is measured by the number of bits (significant digits of a binary encoded integer) that the CPU can process in one operation, which is commonly called &quot;<link><target>Word (data type)</target><part>word size</part></link>&quot;, &quot;bit width&quot;, &quot;data path width&quot;, &quot;integer precision&quot;, or &quot;integer size&quot;. A CPU's integer size determines the range of integer values it can directly operate on.<template><target>Efn</target><arg>While a CPU's integer size sets a limit on integer ranges, this can (and often is) overcome using a combination of software and hardware techniques. By using additional memory, software can represent integers many magnitudes larger than the CPU can. Sometimes the CPU's ISA will even facilitate operations on integers larger than it can natively represent by providing instructions to make large integer arithmetic relatively quick. This method of dealing with large integers is slower than utilizing a CPU with higher integer size, but is a reasonable trade-off in cases where natively supporting the full integer range needed would be cost-prohibitive. See [[Arbitrary-precision arithmetic]] for more details on purely software-supported arbitrary-sized integers.</arg></template><space/>For example, an<space/><link><target>8-bit</target></link><space/>CPU can directly manipulate integers represented by eight bits, which have a range of 256 (2<xhtml:sup>8</xhtml:sup>) discrete integer values.</paragraph><paragraph>Integer range can also affect the number of memory locations the CPU can directly address (an address is an integer value representing a specific memory location). For example, if a binary CPU uses 32 bits to represent a memory address then it can directly address 2<xhtml:sup>32</xhtml:sup><space/>memory locations. To circumvent this limitation and for various other reasons, some CPUs use mechanisms (such as<space/><link><target>bank switching</target></link>) that allow additional memory to be addressed.</paragraph><paragraph>CPUs with larger word sizes require more circuitry and consequently are physically larger, cost more, and consume more power (and therefore generate more heat). As a result, smaller 4- or 8-bit<space/><link><target>microcontroller</target><trail>s</trail></link><space/>are commonly used in modern applications even though CPUs with much larger word sizes (such as 16, 32, 64, even 128-bit) are available. When higher performance is required, however, the benefits of a larger word size (larger data ranges and address spaces) may outweigh the disadvantages.</paragraph><paragraph>To gain some of the advantages afforded by both lower and higher bit lengths, many CPUs are designed with different bit widths for different portions of the device. For example, the IBM<space/><link><target>System/370</target></link><space/>used a CPU that was primarily 32 bit, but it used 128-bit precision inside its<space/><link><target>floating point</target></link><space/>units to facilitate greater accuracy and range in floating point numbers.<extension extension_name='ref' name="amdahl1964"></extension><space/>Many later CPU designs use similar mixed bit width, especially when the processor is meant for general-purpose usage where a reasonable balance of integer and floating point capability is required.</paragraph><heading level='3'>Clock rate</heading><paragraph><template><target>Main</target><arg>Clock rate</arg></template></paragraph><paragraph>Most CPUs are<space/><link><target>synchronous circuit</target><trail>s</trail></link>, which means they employ a<space/><link><target>clock signal</target></link><space/>to pace their sequential operations. The clock signal is produced by an external<space/><link><target>oscillator</target></link><space/>circuit that generates a consistent number of pulses each second in the form of a periodic<space/><link><target>square wave</target></link>. The frequency of the clock pulses determines the rate at which a CPU executes instructions and, consequently, the faster the clock, the more instructions the CPU will execute each second.</paragraph><paragraph>To ensure proper operation of the CPU, the clock period is longer than the maximum time needed for all signals to propagate (move) through the CPU. In setting the clock period to a value well above the worst-case<space/><link><target>propagation delay</target></link>, it is possible to design the entire CPU and the way it moves data around the &quot;edges&quot; of the rising and falling clock signal. This has the advantage of simplifying the CPU significantly, both from a design perspective and a component-count perspective. However, it also carries the disadvantage that the entire CPU must wait on its slowest elements, even though some portions of it are much faster. This limitation has largely been compensated for by various methods of increasing CPU parallelism (see below).</paragraph><paragraph>However, architectural improvements alone do not solve all of the drawbacks of globally synchronous CPUs. For example, a clock signal is subject to the delays of any other electrical signal. Higher clock rates in increasingly complex CPUs make it more difficult to keep the clock signal in phase (synchronized) throughout the entire unit. This has led many modern CPUs to require multiple identical clock signals to be provided to avoid delaying a single signal significantly enough to cause the CPU to malfunction. Another major issue, as clock rates increase dramatically, is the amount of heat that is<space/><link><target>CPU power dissipation</target><part>dissipated by the CPU</part></link>. The constantly changing clock causes many components to switch regardless of whether they are being used at that time. In general, a component that is switching uses more energy than an element in a static state. Therefore, as clock rate increases, so does energy consumption, causing the CPU to require more<space/><link><target>heat dissipation</target></link><space/>in the form of<space/><link><target>CPU cooling</target></link><space/>solutions.</paragraph><paragraph>One method of dealing with the switching of unneeded components is called<space/><link><target>clock gating</target></link>, which involves turning off the clock signal to unneeded components (effectively disabling them). However, this is often regarded as difficult to implement and therefore does not see common usage outside of very low-power designs. One notable recent CPU design that uses extensive clock gating is the IBM<space/><link><target>PowerPC</target></link>-based<space/><link><target>Xenon (processor)</target><part>Xenon</part></link><space/>used in the<space/><link><target>Xbox 360</target></link>; that way, power requirements of the Xbox 360 are greatly reduced.<extension extension_name='ref'><template><target>cite web</target><arg name="last"><space/>Brown<space/></arg><arg name="first"><space/>Jeffery<space/></arg><arg name="title"><space/>Application-customized CPU design<space/></arg><arg name="publisher"><space/>IBM developerWorks<space/></arg><arg name="url"><space/>http://www-128.ibm.com/developerworks/power/library/pa-fpfxbox/?ca</arg><arg name="year"><space/>2005<space/></arg><arg name="accessdate"><space/>2005-12-17<space/></arg></template></extension><space/>Another method of addressing some of the problems with a global clock signal is the removal of the clock signal altogether. While removing the global clock signal makes the design process considerably more complex in many ways, asynchronous (or clockless) designs carry marked advantages in power consumption and<space/><link><target>heat dissipation</target></link><space/>in comparison with similar synchronous designs. While somewhat uncommon, entire<space/><link><target>Asynchronous circuit#Asynchronous CPU</target><part>asynchronous CPU</part><trail>s</trail></link><space/>have been built without utilizing a global clock signal. Two notable examples of this are the<space/><link><target>ARM architecture</target><part>ARM</part></link><space/>compliant<space/><link><target>AMULET microprocessor</target><part>AMULET</part></link><space/>and the<space/><link><target>MIPS architecture</target><part>MIPS</part></link><space/>R3000 compatible MiniMIPS.</paragraph><paragraph>Rather than totally removing the clock signal, some CPU designs allow certain portions of the device to be asynchronous, such as using asynchronous<space/><link><target>Arithmetic logic unit</target><part>ALUs</part></link><space/>in conjunction with superscalar pipelining to achieve some arithmetic performance gains. While it is not altogether clear whether totally asynchronous designs can perform at a comparable or better level than their synchronous counterparts, it is evident that they do at least excel in simpler math operations. This, combined with their excellent power consumption and heat dissipation properties, makes them very suitable for<space/><link><target>embedded computer</target><trail>s</trail></link>.<extension extension_name='ref'><template><target>cite journal</target><arg name="author"><space/>Garside, J. D., Furber, S. B., & Chung, S-H<space/></arg><arg name="title"><space/>AMULET3 Revealed<space/></arg><arg name="publisher"><space/>[[University of Manchester]] Computer Science Department<space/></arg><arg name="year"><space/>1999<space/></arg><arg name="url"><space/>http://www.cs.manchester.ac.uk/apt/publications/papers/async99_A3.php<space/></arg><arg name="archiveurl">https://web.archive.org/web/20051210205845/http://www.cs.manchester.ac.uk/apt/publications/papers/async99_A3.php<space/></arg><arg name="archivedate">December 10, 2005<space/></arg></template></extension></paragraph><heading level='3'>Parallelism</heading><paragraph><template><target>Main</target><arg>Parallel computing</arg></template><link><target>File:Nopipeline.png</target><part>thumb</part><part>upright=2</part><part>Model of a subscalar CPU, in which it takes fifteen cycles to complete three instructions.</part></link></paragraph><paragraph>The description of the basic operation of a CPU offered in the previous section describes the simplest form that a CPU can take. This type of CPU, usually referred to as<space/><italics>subscalar</italics>, operates on and executes one instruction on one or two pieces of data at a time.</paragraph><paragraph>This process gives rise to an inherent inefficiency in subscalar CPUs. Since only one instruction is executed at a time, the entire CPU must wait for that instruction to complete before proceeding to the next instruction. As a result, the subscalar CPU gets &quot;hung up&quot; on instructions which take more than one clock cycle to complete execution. Even adding a second<space/><link><target>execution unit</target></link><space/>(see below) does not improve performance much; rather than one pathway being hung up, now two pathways are hung up and the number of unused transistors is increased. This design, wherein the CPU's execution resources can operate on only one instruction at a time, can only possibly reach<space/><italics>scalar</italics><space/>performance (one instruction per clock). However, the performance is nearly always subscalar (less than one instruction per cycle).</paragraph><paragraph>Attempts to achieve scalar and better performance have resulted in a variety of design methodologies that cause the CPU to behave less linearly and more in parallel. When referring to parallelism in CPUs, two terms are generally used to classify these design techniques.<space/><link><target>Instruction level parallelism</target></link><space/>(ILP) seeks to increase the rate at which instructions are executed within a CPU (that is, to increase the utilization of on-die execution resources), and<space/><link><target>thread level parallelism</target></link><space/>(TLP) purposes to increase the number of<space/><link><target>Thread (computing)</target><part>threads</part></link><space/>(effectively individual programs) that a CPU can execute simultaneously. Each methodology differs both in the ways in which they are implemented, as well as the relative effectiveness they afford in increasing the CPU's performance for an application.<template><target>Efn</target><arg>Neither [[Instruction level parallelism|ILP]] nor [[Thread level parallelism|TLP]] is inherently superior over the other; they are simply different means by which to increase CPU parallelism. As such, they both have advantages and disadvantages, which are often determined by the type of software that the processor is intended to run. High-TLP CPUs are often used in applications that lend themselves well to being split up into numerous smaller applications, so-called "[[embarrassingly parallel]] problems". Frequently, a computational problem that can be solved quickly with high TLP design strategies like SMP take significantly more time on high ILP devices like superscalar CPUs, and vice versa.</arg></template></paragraph><heading level='4'>Instruction-level parallelism</heading><paragraph><template><target>Main</target><arg>Instruction pipelining</arg><arg>Superscalar</arg></template><link><target>File:Fivestagespipeline.png</target><part>thumb</part><part>left</part><part>upright=1.5</part><part>Basic five-stage pipeline. In the best case scenario, this pipeline can sustain a completion rate of one instruction per cycle.</part></link></paragraph><paragraph>One of the simplest methods used to accomplish increased parallelism is to begin the first steps of instruction fetching and decoding before the prior instruction finishes executing. This is the simplest form of a technique known as<space/><link><target>instruction pipelining</target></link>, and is utilized in almost all modern general-purpose CPUs. Pipelining allows more than one instruction to be executed at any given time by breaking down the execution pathway into discrete stages. This separation can be compared to an assembly line, in which an instruction is made more complete at each stage until it exits the execution pipeline and is retired.</paragraph><paragraph>Pipelining does, however, introduce the possibility for a situation where the result of the previous operation is needed to complete the next operation; a condition often termed data dependency conflict. To cope with this, additional care must be taken to check for these sorts of conditions and delay a portion of the<space/><link><target>instruction pipeline</target></link><space/>if this occurs. Naturally, accomplishing this requires additional circuitry, so pipelined processors are more complex than subscalar ones (though not very significantly so). A pipelined processor can become very nearly scalar, inhibited only by pipeline stalls (an instruction spending more than one clock cycle in a stage).</paragraph><paragraph><link><target>File:Superscalarpipeline.svg</target><part>thumb</part><part>upright=1.5</part><part>A simple superscalar pipeline. By fetching and dispatching two instructions at a time, a maximum of two instructions per cycle can be completed.</part></link></paragraph><paragraph>Further improvement upon the idea of instruction pipelining led to the development of a method that decreases the idle time of CPU components even further. Designs that are said to be<space/><italics>superscalar</italics><space/>include a long instruction pipeline and multiple identical execution units.<extension extension_name='ref'><template><target>cite web</target><arg name="last"><space/>Huynh<space/></arg><arg name="first"><space/>Jack<space/></arg><arg name="title"><space/>The AMD Athlon XP Processor with 512KB L2 Cache<space/></arg><arg name="publisher"><space/>University of Illinois&nbsp;— Urbana-Champaign<space/></arg><arg name="pages"><space/>6–11<space/></arg><arg name="url"><space/>http://courses.ece.uiuc.edu/ece512/Papers/Athlon.pdf<space/></arg><arg name="year"><space/>2003<space/></arg><arg name="accessdate"><space/>2007-10-06<space/></arg></template></extension><space/>In a superscalar pipeline, multiple instructions are read and passed to a dispatcher, which decides whether or not the instructions can be executed in parallel (simultaneously). If so they are dispatched to available execution units, resulting in the ability for several instructions to be executed simultaneously. In general, the more instructions a superscalar CPU is able to dispatch simultaneously to waiting execution units, the more instructions will be completed in a given cycle.</paragraph><paragraph>Most of the difficulty in the design of a superscalar CPU architecture lies in creating an effective dispatcher. The dispatcher needs to be able to quickly and correctly determine whether instructions can be executed in parallel, as well as dispatch them in such a way as to keep as many execution units busy as possible. This requires that the instruction pipeline is filled as often as possible and gives rise to the need in superscalar architectures for significant amounts of<space/><link><target>CPU cache</target></link>. It also makes<space/><link><target>Hazard (computer architecture)</target><part>hazard</part></link>-avoiding techniques like<space/><link><target>branch prediction</target></link>,<space/><link><target>speculative execution</target></link>, and<space/><link><target>out-of-order execution</target></link><space/>crucial to maintaining high levels of performance. By attempting to predict which branch (or path) a conditional instruction will take, the CPU can minimize the number of times that the entire pipeline must wait until a conditional instruction is completed. Speculative execution often provides modest performance increases by executing portions of code that may not be needed after a conditional operation completes. Out-of-order execution somewhat rearranges the order in which instructions are executed to reduce delays due to data dependencies. Also in case of Single Instructions Multiple Data&amp;nbsp; a case when a lot of data from the same type has to be processed, modern processors can disable parts of the pipeline so that when a single instruction is executed many times, the CPU skips the fetch and decode phases and thus greatly increases performance on certain occasions, especially in highly monotonous program engines such as video creation software and photo processing.</paragraph><paragraph>In the case where a portion of the CPU is superscalar and part is not, the part which is not suffers a performance penalty due to scheduling stalls. The Intel<space/><link><target>P5 (microarchitecture)</target><part>P5</part></link><space/><link><target>Pentium (brand)</target><part>Pentium</part></link><space/>had two superscalar ALUs which could accept one instruction per clock each, but its FPU could not accept one instruction per clock. Thus the P5 was integer superscalar but not floating point superscalar. Intel's successor to the P5 architecture,<space/><link><target>P6 (microarchitecture)</target><part>P6</part></link>, added superscalar capabilities to its floating point features, and therefore afforded a significant increase in floating point instruction performance.</paragraph><paragraph>Both simple pipelining and superscalar design increase a CPU's ILP by allowing a single processor to complete execution of instructions at rates surpassing one instruction per cycle (IPC).<template><target>Efn</target><arg>Best-case scenario (or peak) IPC rates in very superscalar architectures are difficult to maintain since it is impossible to keep the instruction pipeline filled all the time. Therefore, in highly superscalar CPUs, average sustained IPC is often discussed rather than peak IPC.</arg></template><space/>Most modern CPU designs are at least somewhat superscalar, and nearly all general purpose CPUs designed in the last decade are superscalar. In later years some of the emphasis in designing high-ILP computers has been moved out of the CPU's hardware and into its software interface, or<space/><link><target>Instruction set</target><part>ISA</part></link>. The strategy of the<space/><link><target>very long instruction word</target></link><space/>(VLIW) causes some ILP to become implied directly by the software, reducing the amount of work the CPU must perform to boost ILP and thereby reducing the design's complexity.</paragraph><heading level='4'>Thread-level parallelism</heading><paragraph>Another strategy of achieving performance is to execute multiple programs or<space/><link><target>Thread (computing)</target><part>threads</part></link><space/>in parallel.This area of research is known as<space/><link><target>parallel computing</target></link>. In<space/><link><target>Flynn's taxonomy</target></link>, this strategy is known as Multiple Instructions-Multiple Data or MIMD.</paragraph><paragraph>One technology used for this purpose was<space/><link><target>multiprocessing</target></link><space/>(MP). The initial flavor of this technology is known as<space/><link><target>symmetric multiprocessing</target></link><space/>(SMP), where a small number of CPUs share a coherent view of their memory system. In this scheme, each CPU has additional hardware to maintain a constantly up-to-date view of memory. By avoiding stale views of memory, the CPUs can cooperate on the same program and programs can migrate from one CPU to another. To increase the number of cooperating CPUs beyond a handful, schemes such as<space/><link><target>non-uniform memory access</target></link><space/>(NUMA) and<space/><link><target>directory-based coherence protocols</target></link><space/>were introduced in the 1990s. SMP systems are limited to a small number of CPUs while NUMA systems have been built with thousands of processors. Initially, multiprocessing was built using multiple discrete CPUs and boards to implement the interconnect between the processors. When the processors and their interconnect are all implemented on a single silicon chip, the technology is known as a<space/><link><target>multi-core processor</target></link>.</paragraph><paragraph>It was later recognized that finer-grain parallelism existed with a single program. A single program might have several threads (or functions) that could be executed separately or in parallel. Some of the earliest examples of this technology implemented<space/><link><target>input/output</target></link><space/>processing such as<space/><link><target>direct memory access</target></link><space/>as a separate thread from the computation thread. A more general approach to this technology was introduced in the 1970s when systems were designed to run multiple computation threads in parallel. This technology is known as<space/><link><target>Multithreading (computer architecture)</target><part>multi-threading</part></link><space/>(MT). This approach is considered more cost-effective than multiprocessing, as only a small number of components within a CPU is replicated to support MT as opposed to the entire CPU in the case of MP. In MT, the execution units and the memory system including the caches are shared among multiple threads. The downside of MT is that the hardware support for multithreading is more visible to software than that of MP and thus supervisor software like operating systems have to undergo larger changes to support MT. One type of MT that was implemented is known as block multithreading, where one thread is executed until it is stalled waiting for data to return from external memory. In this scheme, the CPU would then quickly switch to another thread which is ready to run, the switch often done in one CPU clock cycle, such as the<space/><link><target>UltraSPARC T1</target><part>UltraSPARC</part></link><space/>Technology. Another type of MT is known as<space/><link><target>simultaneous multithreading</target></link>, where instructions of multiple threads are executed in parallel within one CPU clock cycle.</paragraph><paragraph>For several decades from the 1970s to early 2000s, the focus in designing high performance general purpose CPUs was largely on achieving high ILP through technologies such as pipelining, caches, superscalar execution, out-of-order execution, etc. This trend culminated in large, power-hungry CPUs such as the Intel<space/><link><target>Pentium 4</target></link>. By the early 2000s, CPU designers were thwarted from achieving higher performance from ILP techniques due to the growing disparity between CPU operating frequencies and main memory operating frequencies as well as escalating CPU power dissipation owing to more esoteric ILP techniques.</paragraph><paragraph>CPU designers then borrowed ideas from commercial computing markets such as<space/><link><target>transaction processing</target></link>, where the aggregate performance of multiple programs, also known as<space/><link><target>throughput</target></link><space/>computing, was more important than the performance of a single thread or program.</paragraph><paragraph>This reversal of emphasis is evidenced by the proliferation of dual and multiple core CMP (chip-level multiprocessing) designs and notably, Intel's newer designs resembling its less superscalar<space/><link><target>P6 (microarchitecture)</target><part>P6</part></link><space/>architecture. Late designs in several processor families exhibit CMP, including the<space/><link><target>x86-64</target></link><space/><link><target>Opteron</target></link><space/>and<space/><link><target>Athlon 64 X2</target></link>, the<space/><link><target>SPARC</target></link><space/><link><target>UltraSPARC T1</target></link>, IBM<space/><link><target>POWER4</target></link><space/>and<space/><link><target>POWER5</target></link>, as well as several<space/><link><target>video game console</target></link><space/>CPUs like the<space/><link><target>Xbox 360</target></link>'s triple-core PowerPC design, and the<space/><link><target>PS3</target></link>'s 7-core<space/><link><target>Cell (microprocessor)</target><part>Cell microprocessor</part></link>.</paragraph><heading level='4'>Data parallelism</heading><paragraph><template><target>Main</target><arg>Vector processor</arg><arg>SIMD</arg></template></paragraph><paragraph>A less common but increasingly important paradigm of CPUs (and indeed, computing in general) deals with data parallelism. The processors discussed earlier are all referred to as some type of scalar device.<template><target>Efn</target><arg>Earlier the term scalar was used to compare the IPC (instructions per cycle) count afforded by various ILP methods. Here the term is used in the strictly mathematical sense to contrast with vectors. See [[scalar (mathematics)]] and [[Vector (geometric)]].</arg></template><space/>As the name implies, vector processors deal with multiple pieces of data in the context of one instruction. This contrasts with scalar processors, which deal with one piece of data for every instruction. Using<space/><link><target>Flynn's taxonomy</target></link>, these two schemes of dealing with data are generally referred to as<space/><link><target>SIMD</target></link><space/>(single instruction, multiple data) and<space/><link><target>SISD</target></link><space/>(single instruction, single data), respectively. The great utility in creating CPUs that deal with vectors of data lies in optimizing tasks that tend to require the same operation (for example, a sum or a<space/><link><target>dot product</target></link>) to be performed on a large set of data. Some classic examples of these types of tasks are<space/><link><target>multimedia</target></link><space/>applications (images, video, and sound), as well as many types of<space/><link><target>Scientific computing</target><part>scientific</part></link><space/>and engineering tasks. Whereas a scalar CPU must complete the entire process of fetching, decoding, and executing each instruction and value in a set of data, a vector CPU can perform a single operation on a comparatively large set of data with one instruction. Of course, this is only possible when the application tends to require many steps which apply one operation to a large set of data.</paragraph><paragraph>Most early vector CPUs, such as the<space/><link><target>Cray-1</target></link>, were associated almost exclusively with scientific research and<space/><link><target>cryptography</target></link><space/>applications. However, as multimedia has largely shifted to digital media, the need for some form of SIMD in general-purpose CPUs has become significant. Shortly after inclusion of<space/><link><target>Floating point unit</target><part>floating point execution units</part></link><space/>started to become commonplace in general-purpose processors, specifications for and implementations of SIMD execution units also began to appear for general-purpose CPUs. Some of these early SIMD specifications like HP's<space/><link><target>Multimedia Acceleration eXtensions</target></link><space/>(MAX) and Intel's<space/><link><target>MMX (instruction set)</target><part>MMX</part></link><space/>were integer-only. This proved to be a significant impediment for some software developers, since many of the applications that benefit from SIMD primarily deal with<space/><link><target>floating point</target></link><space/>numbers. Progressively, these early designs were refined and remade into some of the common, modern SIMD specifications, which are usually associated with one ISA. Some notable modern examples are Intel's<space/><link><target>Streaming SIMD Extensions</target><part>SSE</part></link><space/>and the PowerPC-related<space/><link><target>AltiVec</target></link><space/>(also known as VMX).<template><target>Efn</target><arg>Although SSE/SSE2/SSE3 have superseded MMX in Intel's general purpose CPUs, later [[IA-32]] designs still support MMX. This is usually accomplished by providing most of the MMX functionality with the same hardware that supports the much more expansive SSE instruction sets.</arg></template></paragraph><heading level='2'><template><target>Anchor</target><arg>PCM</arg></template>Performance</heading><paragraph><template><target>Further</target><arg>Computer performance</arg><arg>Benchmark (computing)</arg></template></paragraph><paragraph>The<space/><italics>performance</italics><space/>or<space/><italics>speed</italics><space/>of a processor depends on, among many other factors, the clock rate (generally given in multiples of<space/><link><target>hertz</target></link>) and the instructions per clock (IPC), which together are the factors for the<space/><link><target>instructions per second</target></link><space/>(IPS) that the CPU can perform.<extension extension_name='ref' name='Freq'><template><target>Cite web</target><arg name="title"><space/>CPU Frequency
<space/></arg><arg name="work"><space/>CPU World Glossary
<space/></arg><arg name="publisher"><space/>CPU World
<space/></arg><arg name="date"><space/>25 March 2008
<space/></arg><arg name="url"><space/>http://www.cpu-world.com/Glossary/C/CPU_Frequency.html
<space/></arg><arg name="accessdate"><space/>1 January 2010<space/></arg></template></extension>Many reported IPS values have represented &quot;peak&quot; execution rates on artificial instruction sequences with few branches, whereas realistic workloads consist of a mix of instructions and applications, some of which take longer to execute than others. The performance of the<space/><link><target>memory hierarchy</target></link><space/>also greatly affects processor performance, an issue barely considered in MIPS calculations. Because of these problems, various standardized tests, often called<space/><link><target>benchmark (computing)</target><part>&quot;benchmarks&quot;</part></link><space/>for this purpose<template><target>mdashb</target></template>such as<space/><link><target>SPECint</target></link><template><target>mdashb</target></template>have been developed to attempt to measure the real effective performance in commonly used applications.</paragraph><paragraph>Processing performance of computers is increased by using<space/><link><target>multi-core processor</target><trail>s</trail></link>, which essentially is plugging two or more individual processors (called<space/><italics>cores</italics><space/>in this sense) into one integrated circuit.<extension extension_name='ref' name="tt"><template><target>Cite web</target><arg name="title"><space/>What is (a) multi-core processor?
<space/></arg><arg name="work"><space/>Data Center Definitions
<space/></arg><arg name="publisher"><space/>SearchDataCenter.com
<space/></arg><arg name="date"><space/>27 March 2007
<space/></arg><arg name="url"><space/>http://searchdatacenter.techtarget.com/sDefinition/0,,sid80_gci1015740,00.html
<space/></arg><arg name="accessdate"><space/>1 January 2010<space/></arg></template></extension><space/>Ideally, a dual core processor would be nearly twice as powerful as a single core processor. In practice, the performance gain is far smaller, only about 50%, due to imperfect software algorithms and implementation.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Quad Core Vs. Dual Core</arg><arg name="url">http://www.buzzle.com/articles/quad-core-vs-dual-core.html</arg><arg name="publisher">Buzzle</arg><arg name="accessdate">26 November 2014</arg></template></extension><space/>Increasing the number of cores in a processor (i.e. dual-core, quad-core, etc.) increases the workload that can be handled. This means that the processor can now handle numerous asynchronous events, interrupts, etc. which can take a toll on the CPU when overwhelmed. These cores can be thought of as different floors in a processing plant, with each floor handling a different task. Sometimes, these cores will handle the same tasks as cores adjacent to them if a single core is not enough to handle the information.</paragraph><paragraph>Due to specific capabilities of modern CPUs, such as<space/><link><target>hyper-threading</target></link><space/>and<space/><link><target>uncore</target></link>, which involve sharing of actual CPU resources while aiming at increased utilization, monitoring performance levels and hardware utilization gradually became a more complex task.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Tegtmeier</arg><arg name="first1">Martin</arg><arg name="title">CPU utilization of multi-threaded architectures explained</arg><arg name="url">https://blogs.oracle.com/partnertech/entry/cpu_utilization_of_multi_threaded</arg><arg name="publisher">Oracle</arg><arg name="accessdate">September 29, 2015</arg></template></extension><space/>As a response, some CPUs implement additional hardware logic that monitors actual utilization of various parts of a CPU and provides various counters accessible to software; an example is Intel's<space/><italics>Performance Counter Monitor</italics><space/>technology.<extension extension_name='ref' name="intel-pcm"><template><target>cite web</target><arg name="url"><space/>https://software.intel.com/en-us/articles/intel-performance-counter-monitor-a-better-way-to-measure-cpu-utilization
<space/></arg><arg name="title"><space/>Intel Performance Counter Monitor{{snd}} A better way to measure CPU utilization
<space/></arg><arg name="date"><space/>December 18, 2014<space/></arg><arg name="accessdate"><space/>February 17, 2015
<space/></arg><arg name="author1"><space/>Thomas Willhalm<space/></arg><arg name="author2"><space/>Roman Dementiev<space/></arg><arg name="author3"><space/>Patrick Fay
<space/></arg><arg name="website"><space/>software.intel.com
</arg></template></extension></paragraph><heading level='2'>See also</heading><paragraph><template><target>Portal</target><arg>Information technology</arg><arg>Technology</arg></template><template><target>Div col</target><arg></arg><arg>20em</arg></template></paragraph><list type='bullet'><listitem><link><target>Addressing mode</target></link></listitem><listitem><link><target>AMD Accelerated Processing Unit</target></link></listitem><listitem><link><target>Complex instruction set computing</target><part>CISC</part></link></listitem><listitem><link><target>Bus (computing)</target><part>Computer bus</part></link></listitem><listitem><link><target>Computer engineering</target></link></listitem><listitem><link><target>CPU core voltage</target></link></listitem><listitem><link><target>CPU socket</target></link></listitem><listitem><link><target>Digital signal processor</target></link></listitem><listitem><link><target>Hyper-threading</target></link></listitem><listitem><link><target>List of CPU architectures</target></link></listitem><listitem><link><target>Microprocessor</target></link></listitem><listitem><link><target>Multi-core processor</target></link></listitem><listitem><link><target>Protection ring</target></link></listitem><listitem><link><target>Reduced instruction set computing</target><part>RISC</part></link></listitem><listitem><link><target>Stream processing</target></link></listitem><listitem><link><target>True Performance Index</target></link></listitem><listitem><link><target>Wait state</target></link></listitem></list><paragraph><template><target>Div col end</target></template></paragraph><heading level='2'>Notes</heading><paragraph><template><target>Notelist</target><arg>30em</arg></template></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>Spoken Wikipedia-2</target><arg>2006-06-13</arg><arg>Central Processing Unit (Part 1).ogg</arg><arg>Central Processing Unit (Part 2).ogg</arg></template><template><target>Commons category</target><arg>Microprocessors</arg></template><template><target>Wikiversity</target><arg>Introduction to Computers/Processor</arg></template></paragraph><list type='bullet'><listitem><template><target>HowStuffWorks</target><arg>microprocessor</arg><arg>How Microprocessors Work</arg></template>.</listitem><listitem><link type='external' href='http://spectrum.ieee.org/25chips'>25 Microchips that shook the world</link><space/>an article by the<space/><link><target>Institute of Electrical and Electronics Engineers</target></link>.</listitem></list><paragraph><template><target>CPU technologies</target></template><template><target>Basic computer components</target></template></paragraph><paragraph><link><target>Category:Central processing unit</target><part></part></link></paragraph></article>