<article title='Decision_problem'><paragraph><template><target>about</target><arg>decision problems in complexity theory</arg><arg>the decision problem in formal logic</arg><arg>Entscheidungsproblem</arg></template><link><target>Image:Decision Problem.svg</target><part>thumb</part><part>200px</part><part>A ''decision problem'' has only two possible outputs, ''yes'' or ''no'' (or alternately 1 or 0) on any input.</part></link>In<space/><link><target>computability theory</target></link><space/>and<space/><link><target>computational complexity theory</target></link>, a<space/><bold>decision problem</bold><space/>is a question in some<space/><link><target>formal system</target></link><space/>with a yes-or-no answer, depending on the values of some input parameters. Decision problems typically appear in mathematical questions of<space/><link><target>decidability (logic)</target><part>decidability</part></link>, that is, the question of the existence of an<space/><link><target>effective method</target></link><space/>to determine the existence of some object or its membership in a set; some of the most important problems in mathematics are<space/><link><target>undecidable problem</target><part>undecidable</part></link>.</paragraph><paragraph>For example, the problem &quot;given two numbers<space/><italics>x</italics><space/>and<space/><italics>y</italics>, does<space/><italics>x</italics><space/>evenly divide<space/><italics>y</italics>?&quot; is a decision problem. The answer can be either 'yes' or 'no', and depends upon the values of<space/><italics>x</italics><space/>and<space/><italics>y</italics>. A method for solving a decision problem, given in the form of an<space/><link><target>algorithm</target></link>, is called a<space/><bold>decision procedure</bold><space/>for that problem. A decision procedure for the decision problem &quot;given two numbers<space/><italics>x</italics><space/>and<space/><italics>y</italics>, does<space/><italics>x</italics><space/>evenly divide<space/><italics>y</italics>?&quot; would give the steps for determining whether<space/><italics>x</italics><space/>evenly divides<space/><italics>y</italics>, given<space/><italics>x</italics><space/>and<space/><italics>y</italics>. One such algorithm is<space/><link><target>long division</target></link>, taught to many school children. If the remainder is zero the answer produced is 'yes', otherwise it is 'no'. A decision problem which can be solved by an algorithm, such as this example, is called<space/><italics>decidable</italics>.</paragraph><paragraph>The field of computational complexity categorizes<space/><italics>decidable</italics><space/>decision problems by how difficult they are to solve. &quot;Difficult&quot;, in this sense, is described in terms of the<space/><link><target>computational resource</target><trail>s</trail></link><space/>needed by the most efficient algorithm for a certain problem. The field of<space/><link><target>recursion theory</target></link>, meanwhile, categorizes<space/><italics>undecidable</italics><space/>decision problems by<space/><link><target>Turing degree</target></link>, which is a measure of the noncomputability inherent in any solution. Decision problems are closely related to<space/><link><target>function problem</target><trail>s</trail></link>, which can have answers that are more complex than a simple 'yes' or 'no'. A corresponding function problem is &quot;given two numbers<space/><italics>x</italics><space/>and<space/><italics>y</italics>, what is<space/><italics>x</italics><space/>divided by<space/><italics>y</italics>?&quot;. They are also related to<space/><link><target>optimization problem</target><trail>s</trail></link>, which are concerned with finding the<space/><italics>best</italics><space/>answer to a particular problem. There are standard techniques for transforming function and optimization problems into decision problems, and vice versa, that do not significantly change the computational difficulty of these problems. For this reason, research in computability theory and complexity theory have typically focused on decision problems.</paragraph><heading level='2'>Definition</heading><paragraph>A<space/><italics>decision problem</italics><space/>is any arbitrary yes-or-no question on an infinite set of inputs. Because of this, it is traditional to define the decision problem equivalently as: the set of inputs for which the problem returns<space/><italics>yes</italics>.</paragraph><paragraph>These inputs can be natural numbers, but may also be values of some other kind, such as<space/><link><target>string (computer science)</target><part>string</part><trail>s</trail></link><space/>over the binary<space/><link><target>Alphabet (computer science)</target><part>alphabet</part></link><space/>{0,1} or over some other finite set of symbols. The subset of strings for which the problem returns &quot;yes&quot; is a<space/><link><target>formal language</target></link>, and often decision problems are defined in this way as formal languages.</paragraph><paragraph>Alternatively, using an encoding such as<space/><link><target>Gdel numbering</target><trail>s</trail></link>, any string can be encoded as a natural number, via which a decision problem can be defined as a subset of the natural numbers.</paragraph><heading level='2'>Examples</heading><paragraph>A classic example of a decidable decision problem is the set of prime numbers. It is possible to effectively decide whether a given natural number is prime by testing every possible nontrivial factor. Although much more efficient methods of<space/><link><target>primality testing</target></link><space/>are known, the existence of any effective method is enough to establish decidability.</paragraph><heading level='2'>Decidability</heading><paragraph><template><target>main</target><arg>Undecidable problem</arg></template></paragraph><paragraph>A decision problem<space/><italics>A</italics><space/>is called<space/><italics>decidable</italics><space/>or<space/><italics>effectively solvable</italics><space/>if<space/><italics>A</italics><space/>is a<space/><link><target>recursive set</target></link>. A problem is called<space/><italics>partially decidable</italics>,<space/><italics>semidecidable</italics>,<space/><italics>solvable</italics>, or<space/><italics>provable</italics><space/>if<space/><italics>A</italics><space/>is a<space/><link><target>recursively enumerable set</target></link>. Problems that are not decidable are called<space/><italics>undecidable</italics>.</paragraph><paragraph>The<space/><link><target>halting problem</target></link><space/>is an important undecidable decision problem; for more examples, see<space/><link><target>list of undecidable problems</target></link>.</paragraph><heading level='2'>Complete problems</heading><paragraph><template><target>main</target><arg>Complete problem</arg></template></paragraph><paragraph>Decision problems can be ordered according to<space/><link><target>many-one reduction</target><part>many-one reducibility</part></link><space/>and related feasible reductions such as<space/><link><target>polynomial-time reduction</target><trail>s</trail></link>. A decision problem<space/><italics>P</italics><space/>is said to be<space/><italics><link><target>complete problem</target><part>complete</part></link></italics><space/>for a set of decision problems<space/><italics>S</italics><space/>if<space/><italics>P</italics><space/>is a member of<space/><italics>S</italics><space/>and every problem in<space/><italics>S</italics><space/>can be reduced to<space/><italics>P</italics>. Complete decision problems are used in<space/><link><target>complexity theory (computation)</target><part>computational complexity</part></link><space/>to characterize<space/><link><target>complexity classes</target></link><space/>of decision problems. For example, the<space/><link><target>Boolean satisfiability problem</target></link><space/>is complete for the class<space/><link><target>NP (complexity)</target><part>NP</part></link><space/>of decision problems under polynomial-time reducibility.</paragraph><heading level='2'>Equivalence with function problems</heading><preblock><preline>A<space/><link><target>function problem</target></link><space/>consists of a<space/><link><target>partial function</target></link><space/><italics>f</italics>; the informal &quot;problem&quot; is to compute the values of<space/><italics>f</italics><space/>on the inputs for which it is defined.</preline></preblock><paragraph>Every function problem can be turned into a decision problem; the decision problem is just the graph of the associated function. (The graph of a function<space/><italics>f</italics><space/>is the set of pairs (<italics>x</italics>,<italics>y</italics>) such that<space/><italics>f</italics>(<italics>x</italics>) =<space/><italics>y</italics>.) If this decision problem were effectively solvable then the function problem would be as well. This reduction does not respect computational complexity, however. For example, it is possible for the graph of a function to be decidable in polynomial time (in which case running time is computed as a function of the pair (<italics>x</italics>,<italics>y</italics>) ) when the function is not computable in<space/><link><target>polynomial time</target></link><space/>(in which case running time is computed as a function of<space/><italics>x</italics><space/>alone). The function<space/><italics>f</italics>(<italics>x</italics>) =<space/><italics>2</italics><xhtml:sup><italics>x</italics></xhtml:sup><space/>has this property.</paragraph><paragraph>Every decision problem can be converted into the function problem of computing the<space/><link><target>indicator function</target><part>characteristic function</part></link><space/>of the set associated to the decision problem. If this function is computable then the associated decision problem is decidable. However, this reduction is more liberal than the standard reduction used in computational complexity (sometimes called polynomial-time many-one reduction); for example, the complexity of the characteristic functions of an<space/><link><target>NP-complete</target></link><space/>problem and its<space/><link><target>co-NP-complete</target></link><space/><link><target>Complement (complexity)</target><part>complement</part></link><space/>is exactly the same even though the underlying decision problems may not be considered equivalent in some typical models of computation.</paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>ALL (complexity)</target></link></listitem><listitem><link><target>Computational problem</target></link></listitem><listitem><link><target>Decidability (logic)</target></link><space/>&amp;ndash; for the problem of deciding whether a formula is a consequence of a logical theory.</listitem><listitem><link><target>yes-no question</target></link></listitem><listitem><link><target>Optimization problem</target></link></listitem><listitem><link><target>Search problem</target></link></listitem><listitem><link><target>Counting problem (complexity)</target></link></listitem><listitem><link><target>Function problem</target></link></listitem><listitem><link><target>Word problem (mathematics)</target></link></listitem></list><heading level='2'>References</heading><paragraph><template><target>no footnotes</target><arg name="date">October 2015</arg></template></paragraph><list type='bullet'><listitem>Kozen, D.C. (1997),<space/><italics>Automata and Computability</italics>, Springer.</listitem><listitem><link><target>Hartley Rogers, Jr</target></link>.,<space/><italics>The Theory of Recursive Functions and Effective Computability</italics>, MIT Press, ISBN 0-262-68052-1 (paperback), ISBN 0-07-053522-1</listitem><listitem><link><target>Michael Sipser</target><part>Sipser, M.</part></link><space/>(1996),<space/><italics>Introduction to the Theory of Computation</italics>, PWS Publishing Co.</listitem><listitem>Robert I. Soare (1987),<space/><italics>Recursively Enumerable Sets and Degrees</italics>, Springer-Verlag, ISBN 0-387-15299-7</listitem><listitem>Daniel Kroening &amp; Ofer Strichman,<space/><italics>Decision procedures</italics>, Springer, ISBN 978-3-540-74104-6</listitem><listitem>Aaron Bradley &amp;<space/><link><target>Zohar Manna</target></link>,<space/><italics>The calculus of computation</italics>, Springer, ISBN 978-3-540-74112-1</listitem></list><paragraph><template><target>Authority control</target></template><link><target>Category:Computational problems</target></link><link><target>Category:Computability theory</target></link></paragraph><paragraph><link><target>de:Entscheidungsproblem</target></link></paragraph></article>