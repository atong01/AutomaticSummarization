<article title='Bash_%28Unix_shell%29'><paragraph><template><target>Redirect</target><arg>Bash (software)</arg><arg>other software</arg><arg>Bash (disambiguation)</arg></template><template><target>Use mdy dates</target><arg name="date">March 2014</arg></template><template><target>Infobox software</target><arg name="name"><space/>Bash
</arg><arg name="logo"><space/>
</arg><arg name="screenshot"><space/>[[Image:Bash screenshot.png|250px]]
</arg><arg name="caption"><space/>Screenshot of a Bash session
</arg><arg name="author"><space/>[[Brian Fox (computer programmer)|Brian Fox]]
</arg><arg name="released"><space/>{{start date and age|1989|6|7}}
</arg><arg name="latest release version"><space/>4.3.42
</arg><arg name="latest release date"><space/>{{Start date and age|2015|08|13}}<ref>{{cite web | url<space/></arg><arg name="programming language"><space/>[[C (programming language)|C]]
</arg><arg name="operating system"><space/>[[Cross-platform]]
</arg><arg name="platform"><space/>[[GNU]]
</arg><arg name="language"><space/>English, multilingual ([[gettext]])
</arg><arg name="status"><space/>
</arg><arg name="genre"><space/>[[Unix shell]], [[command language]]
</arg><arg name="source model"><space/>[[Free software]]
</arg><arg name="license"><space/>[[GNU GPL#Version 3|GNU GPL v3]]+<ref name</arg><arg name="website"><space/>{{URL|https://www.gnu.org/software/bash/}}
</arg></template></paragraph><paragraph><bold>Bash</bold><space/>is a<space/><link><target>Unix shell</target></link><space/>and<space/><link><target>command language</target></link><space/>written by<space/><link><target>Brian Fox (computer programmer)</target><part>Brian Fox</part></link><space/>for the<space/><link><target>GNU Project</target></link><space/>as a<space/><link><target>free software</target></link><space/>replacement for the<space/><link><target>Bourne shell</target></link>.<extension extension_name='ref' name="GNUBSD"><template><target>Cite newsgroup</target><arg name="title"><space/>GNU + BSD<space/></arg><arg name="author"><space/>[[Richard Stallman]] (forwarded with comments by Chet Ramey)
<space/></arg><arg name="date"><space/>February 10, 1988
<space/></arg><arg name="newsgroup"><space/>comp.unix.questions
<space/></arg><arg name="message-id">2362@mandrill.CWRU.Edu
<space/></arg><arg name="url">https://groups.google.com/forum/#!original/comp.unix.questions/iNjWwkyroR8/yedr9yDWSuQJ
<space/></arg><arg name="accessdate"><space/>March 22, 2011
<space/></arg><arg name="quote"><space/>For a year and a half, the GNU shell was "just about done". The author made repeated promises to deliver what he had done, and never kept them. Finally I could no longer believe he would ever deliver anything. So Foundation staff member Brian Fox is now implementing an imitation of the Bourne shell.
</arg></template></extension><extension extension_name='ref'><template><target>Citation</target><arg name="last"><space/>Hamilton
<space/></arg><arg name="first"><space/>Naomi
<space/></arg><arg name="title"><space/>The A-Z of Programming Languages: BASH/Bourne-Again Shell
<space/></arg><arg name="journal"><space/>Computerworld
<space/></arg><arg name="page"><space/>2
<space/></arg><arg name="date"><space/>May 30, 2008
<space/></arg><arg name="accessdate"><space/>March 21, 2011
<space/></arg><arg name="url"><space/>http://www.computerworld.com.au/article/222764/a-z_programming_languages_bash_bourne-again_shell/?pp</arg><arg name="quote"><space/>When Richard Stallman decided to create a full replacement for the then-encumbered Unix systems, he knew that he would eventually have to have replacements for all of the common utilities, especially the standard shell, and those replacements would have to have acceptable licensing.
</arg></template></extension><space/>Released in 1989,<extension extension_name='ref' name="BashBeta"><template><target>Cite newsgroup</target><arg name="title"><space/>Bash is in beta release!
<space/></arg><arg name="author"><space/>Brian Fox (forwarded by Leonard H. Tower Jr.)
<space/></arg><arg name="date"><space/>June 8, 1989
<space/></arg><arg name="newsgroup"><space/>gnu.announce
<space/></arg><arg name="url"><space/>http://groups.google.com/group/gnu.announce/msg/a509f48ffb298c35?hl</arg><arg name="accessdate"><space/>October 28, 2010
</arg></template></extension><space/>it has been distributed widely as the shell for the<space/><link><target>GNU operating system</target></link><space/>and as a default shell on<space/><link><target>Linux</target></link><space/>and<space/><template><target>nowrap</target><arg>[[OS X]]</arg></template>. It has been ported to<space/><link><target>Microsoft Windows</target></link><space/>and distributed with<space/><link><target>Cygwin</target></link><space/>and<space/><link><target>MinGW</target></link>, to<space/><link><target>DOS</target></link><space/>by the<space/><link><target>DJGPP</target></link><space/>project, to<space/><link><target>Novell NetWare</target></link><space/>and to<space/><link><target>Android (operating system)</target><part>Android</part></link><space/>via various terminal emulation applications. In the late 1990s, Bash was a minor player among multiple commonly used shells; at present Bash has overwhelming favor.</paragraph><paragraph>Bash is a<space/><link><target>Command-line interpreter</target><part>command processor</part></link><space/>that typically runs in a text window, where the user types commands that cause actions. Bash can also read commands from a file, called a<space/><link><target>Shell script</target><part>script</part></link>. Like all Unix shells, it supports filename<space/><link><target>glob (programming)</target><part>globbing</part></link><space/>(wildcard matching),<space/><link><target>Pipeline (Unix)</target><part>piping</part></link>,<space/><link><target>here document</target><trail>s</trail></link>,<space/><link><target>command substitution</target></link>,<space/><link><target>Variable (programming)</target><part>variables</part></link><space/>and<space/><link><target>control flow</target><part>control structures</part></link><space/>for<space/><link><target>Conditional (programming)</target><part>condition-testing</part></link><space/>and<space/><link><target>iteration</target></link>. The<space/><link><target>Keyword (computer programming)</target><part>keywords</part></link>,<space/><link><target>Syntax (programming languages)</target><part>syntax</part></link><space/>and other basic features of the<space/><link><target>Language (computer science)</target><part>language</part></link><space/>were all copied from<space/><link><target>Thompson shell</target><part>sh</part></link>. Other features, e.g.,<space/><link><target>C shell#History</target><part>history</part></link>, were copied from<space/><link><target>C shell</target><part>csh</part></link><space/>and<space/><link><target>Korn shell</target><part>ksh</part></link>. Bash is a<space/><link><target>POSIX</target></link><space/>shell, but with a number of extensions.</paragraph><paragraph>The name itself is an<space/><link><target>acronym</target></link>, a<space/><link><target>pun</target></link>, and a description. As an acronym, it stands for<space/><italics>Bourne-again shell</italics>, referring to its objective as a free replacement for the Bourne shell.<extension extension_name='ref'><link type='external' href='http://www.ddj.com/cpp/184404693'>C Programming</link><space/>by Al Stevens,<space/><link><target>Dr. Dobb's Journal</target></link>, July 1, 2001</extension>As a pun, it expressed that objective in a phrase that sounds similar to<space/><italics><link><target>Born again (Christianity)</target><part>born again</part></link></italics>, a term for spiritual rebirth.<extension extension_name='ref'><template><target>cite web</target><arg name="author"><space/>[[Richard Stallman]]
<space/></arg><arg name="title"><space/>About the GNU Project
<space/></arg><arg name="publisher"><space/>[[Free Software Foundation]]
<space/></arg><arg name="date"><space/>November 12, 2010
<space/></arg><arg name="url"><space/>https://www.gnu.org/gnu/thegnuproject.html
<space/></arg><arg name="quote"><space/>"Bourne Again Shell" is a play on the name ''Bourne Shell'', which was the usual shell on Unix.
<space/></arg><arg name="accessdate"><space/>March 13, 2011
</arg><arg name="archiveurl"><space/>https://web.archive.org/web/20110424064815/http://www.gnu.org/gnu/thegnuproject.html</arg><arg name="archivedate">April 24, 2011<space/></arg><arg name="deadurl"><space/>no</arg></template></extension><extension extension_name='ref'><template><target>Citation</target><arg name="last"><space/>Gattol
<space/></arg><arg name="first"><space/>Markus
<space/></arg><arg name="title"><space/>Bourne-again Shell
<space/></arg><arg name="date"><space/>March 13, 2011
<space/></arg><arg name="url"><space/>http://www.markus-gattol.name/ws/bash.html
<space/></arg><arg name="quote"><space/>The name is a pun on the name of the Bourne shell (sh), an early and important Unix shell written by Stephen Bourne and distributed with Version 7 Unix circa 1978, and the concept of being "born again".
<space/></arg><arg name="accessdate"><space/>March 13, 2011
</arg></template></extension><space/>The name is also descriptive of what it did,<space/><italics>bashing together</italics><space/>the features of sh, csh, and ksh.<extension extension_name='ref'><template><target>Cite newsgroup</target><arg name="title"><space/>at&t-free ksh (was: job control is a bug, not a feature)
<space/></arg><arg name="author"><space/>Ian Darwin
<space/></arg><arg name="date"><space/>June 13, 1989
<space/></arg><arg name="newsgroup"><space/>comp.os.minix
<space/></arg><arg name="message-id">
<space/></arg><arg name="url"><space/>http://groups.google.com/group/comp.os.minix/msg/63c036d82ceca4d6?hl</arg><arg name="accessdate"><space/>March 21, 2011
<space/></arg><arg name="quote"><space/>Yup, the gnu project's Born Again Shell ("bash") is an attempt at bashing all the features of sh together with many of those from both csh and ksh.
</arg></template></extension></paragraph><paragraph>A<space/><link><target>security bug</target><part>security hole</part></link><space/>in Bash dating from version 1.03 (August 1989),<extension extension_name='ref' name="Seclists-20141004"><template><target>cite web</target><arg name="last">Chazelas<space/></arg><arg name="first">Stephane<space/></arg><arg name="title">oss-sec mailing list archives<space/></arg><arg name="url">http://seclists.org/oss-sec/2014/q4/102<space/></arg><arg name="date">4 October 2014<space/></arg><arg name="work">Seclists.org<space/></arg><arg name="accessdate">4 October 2014</arg></template></extension><space/>dubbed<space/><link><target>Shellshock (software bug)</target><part>Shellshock</part></link>, was discovered in early September 2014.<extension extension_name='ref' name="TR-20140924"><template><target>cite web</target><arg name="last">Leyden<space/></arg><arg name="first">John<space/></arg><arg name="title">Patch Bash NOW: 'Shell Shock' bug blasts OS X, Linux systems wide open<space/></arg><arg name="url">http://www.theregister.co.uk/2014/09/24/bash_shell_vuln/<space/></arg><arg name="work">[[The Register]]<space/></arg><arg name="date">September 24, 2014<space/></arg><arg name="accessdate">September 25, 2014</arg></template></extension><extension extension_name='ref' name="NYT-20140925-NP"><template><target>cite news</target><arg name="last">Perlroth<space/></arg><arg name="first">Nicole<space/></arg><arg name="title">Security Experts Expect ‘Shellshock’ Software Bug in Bash to Be Significant<space/></arg><arg name="url">http://www.nytimes.com/2014/09/26/technology/security-experts-expect-shellshock-software-bug-to-be-significant.html<space/></arg><arg name="date">September 25, 2014<space/></arg><arg name="work">[[New York Times]]<space/></arg><arg name="accessdate">September 25, 2014<space/></arg></template></extension></paragraph><heading level='2'>History</heading><paragraph><link><target>Brian Fox (computer programmer)</target><part>Brian Fox</part></link><space/>began<space/><link><target>Computer programming</target><part>coding</part></link><space/>Bash on January 10, 1988<extension extension_name='ref'><template><target>Citation</target><arg name="author"><space/>Brian Fox
<space/></arg><arg name="title"><space/>shell.c
<space/></arg><arg name="place">
<space/></arg><arg name="publisher"><space/>[[Free Software Foundation]]
<space/></arg><arg name="date"><space/>August 29, 1996
<space/></arg><arg name="url"><space/>http://ftp.gnu.org/gnu/bash/bash-1.14.7.tar.gz
<space/></arg><arg name="quote"><space/>Birthdate: Sunday, January 10th, 1988. Initial author: Brian Fox
<space/></arg></template></extension><space/>after<space/><link><target>Richard Stallman</target></link><space/>became dissatisfied with the lack of progress being made by a prior developer.<extension extension_name='ref' name="GNUBSD"></extension><space/>Stallman and the<space/><link><target>Free Software Foundation</target></link><space/>(FSF) considered a free shell that could run existing shell scripts so strategic to a completely free system built from BSD and GNU code that this was one of the few projects they funded themselves, with Fox undertaking the work as an employee of FSF.<extension extension_name='ref' name="GNUBSD"></extension><extension extension_name='ref'><template><target>cite web</target><arg name="author"><space/>[[Richard Stallman]]
<space/></arg><arg name="title"><space/>About the GNU Project
<space/></arg><arg name="publisher"><space/>[[Free Software Foundation]]
<space/></arg><arg name="date"><space/>October 3, 2010
<space/></arg><arg name="url"><space/>https://www.gnu.org/gnu/thegnuproject.html
<space/></arg><arg name="accessdate"><space/>March 21, 2011
<space/></arg><arg name="quote"><space/>Free Software Foundation employees have written and maintained a number of GNU software packages. Two notable ones are the C library and the shell. ... We funded development of these programs because the GNU Project was not just about tools or a development environment. Our goal was a complete operating system, and these programs were needed for that goal.
</arg><arg name="archiveurl"><space/>https://web.archive.org/web/20110424064815/http://www.gnu.org/gnu/thegnuproject.html</arg><arg name="archivedate">April 24, 2011<space/></arg><arg name="deadurl"><space/>no</arg></template></extension><space/>Fox released Bash as a beta, version .99, on June 7, 1989<extension extension_name='ref' name="BashBeta"></extension><space/>and remained the primary maintainer until sometime between mid-1992<extension extension_name='ref'><template><target>Cite newsgroup</target><arg name="title"><space/>January 1993 GNU's Bulletin
<space/></arg><arg name="author"><space/>len (g...@prep.ai.mit.edu)
<space/></arg><arg name="date"><space/>April 20, 1993
<space/></arg><arg name="newsgroup"><space/>gnu.announce
<space/></arg><arg name="message-id"><space/>gnusenet930421bulletin@prep.ai.mit.edu
<space/></arg><arg name="url"><space/>http://groups.google.com/group/gnu.misc.discuss/msg/4f42c739cd7e8bd8
<space/></arg><arg name="accessdate"><space/>October 28, 2010
</arg></template></extension><space/>and mid-1994,<extension extension_name='ref' name="Bourne shell grammar"><template><target>cite web</target><arg name="first">Chet</arg><arg name="last">Ramey</arg><arg name="title">Bash - the GNU shell (Reflections and Lessons Learned)</arg><arg name="url">http://www.linuxjournal.com/article/2800#N0xa50890.0xb46380</arg><arg name="accessdate">November 13, 2008</arg><arg name="date">August 1, 1994</arg><arg name="work">[[Linux Journal]]</arg><arg name="archiveurl"><space/>http://web.archive.org/web/20081205082152/http://www.linuxjournal.com/article/2800</arg><arg name="archivedate">December 5, 2008<space/></arg><arg name="deadurl"><space/>no</arg></template></extension><space/>when he was laid off from FSF<extension extension_name='ref'><template><target>Citation</target><arg name="title"><space/>Dates in your Computerworld interview
<space/></arg><arg name="author"><space/>Chet Ramey
<space/></arg><arg name="date"><space/>October 31, 2010
<space/></arg><arg name="url"><space/>http://www.scribd.com/doc/40556434/2010-10-31-Chet-Ramey-Early-Bash-Dates
<space/></arg><arg name="accessdate"><space/>October 31, 2010
</arg></template></extension><space/>and his responsibility was transitioned to another early contributor, Chet Ramey.<extension extension_name='ref'><template><target>Cite newsgroup</target><arg name="title"><space/>Bash 0.99 fixes & improvements
<space/></arg><arg name="author"><space/>Chet Ramey
<space/></arg><arg name="date"><space/>June 12, 1989
<space/></arg><arg name="newsgroup"><space/>gnu.bash.bug
<space/></arg><arg name="message-id">
<space/></arg><arg name="url"><space/>http://groups.google.com/group/gnu.bash.bug/msg/1fc7b688f5d44438?hl</arg><arg name="accessdate"><space/>November 1, 2010
</arg></template></extension><extension extension_name='ref'><template><target>Cite newsgroup</target><arg name="title"><space/>Some bash-1.02 fixes
<space/></arg><arg name="author"><space/>Chet Ramey
<space/></arg><arg name="date"><space/>July 24, 1989
<space/></arg><arg name="newsgroup"><space/>gnu.bash.bug
<space/></arg><arg name="message-id">
<space/></arg><arg name="url"><space/>http://groups.google.com/group/gnu.bash.bug/msg/072a03645663caea?hl</arg><arg name="accessdate"><space/>October 30, 2010
</arg></template></extension><extension extension_name='ref'><template><target>Cite newsgroup</target><arg name="title"><space/>Availability of bash 1.05
</arg><arg name="author"><space/>Brian Fox
</arg><arg name="date"><space/>March 2, 1990
</arg><arg name="newsgroup"><space/>gnu.bash.bug
</arg><arg name="message-id">
</arg><arg name="url"><space/>http://groups.google.com/group/gnu.bash.bug/msg/e6112ccc8866e2f4?hl</arg><arg name="accessdate"><space/>October 30, 2010
</arg></template></extension></paragraph><paragraph>In September 2014, Stphane Chazelas, a Unix/Linux, network and telecom specialist working in the UK,<extension extension_name='ref'>https://www.linkedin.com/pub/st%C3%A9phane-chazelas/7/2a2/834</extension><space/>discovered a<space/><link><target>security bug</target></link><space/>in the program. The bug, first disclosed on September 24, was named<space/><link><target>Shellshock (software bug)</target><part>Shellshock</part></link><space/>and assigned the numbers<space/><link type='external' href='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271'>CVE-2014-6271</link>, CVE-2014-6277<extension extension_name='ref'>https://cve.mitre.org/cgi-bin/cvename.cgi?name=2014-6277</extension><space/>and<space/><link type='external' href='http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7169'>CVE-2014-7169</link>. The bug was regarded as severe, since<space/><link><target>Common Gateway Interface</target><part>CGI</part></link><space/>scripts using Bash could be vulnerable, enabling<space/><link><target>arbitrary code execution</target></link>. The bug is related to how Bash passes function definitions to subshells through<space/><link><target>environment variable</target><trail>s</trail></link>.<extension extension_name='ref'><template><target>Cite web</target><arg name="author"><space/>Huzaifa Sidhpurwala
</arg><arg name="title"><space/>Bash specially-crafted environment variables code injection attack
</arg><arg name="publisher"><space/>[[Redhat]]
</arg><arg name="url"><space/>https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack/
</arg><arg name="date"><space/>2014-09-24
</arg></template></extension></paragraph><heading level='2'>Features</heading><paragraph><template><target>Expand section</target><arg name="with">Bash ${PIPESTATUS[*]}[http://www.cyberciti.biz/faq/unix-linux-bash-find-out-the-exit-codes-of-all-piped-commands/][http://unix.stackexchange.com/questions/14270/get-exit-status-of-process-thats-piped-to-another]</arg><arg name="date">August 2015</arg></template>The Bash<space/><link><target>command (computing)</target><part>command</part></link><space/>syntax is a<space/><link><target>superset</target></link><space/>of the Bourne shell command syntax. Bash can execute the vast majority of Bourne shell scripts without modification, with the exception of Bourne shell scripts stumbling into fringe syntax behavior interpreted differently in Bash or attempting to run a system command matching a newer Bash builtin, etc. Bash command syntax includes ideas drawn from the<space/><link><target>Korn shell</target></link><space/>(ksh) and the<space/><link><target>C shell</target></link><space/>(csh) such as command line editing,<space/><link><target>command history</target></link>, the directory stack, the<space/><xhtml:code>$RANDOM</xhtml:code><space/>and<space/><xhtml:code>$PPID</xhtml:code><space/>variables, and POSIX<space/><link><target>command substitution</target></link><space/>syntax<space/><xhtml:code>$()</xhtml:code>.</paragraph><paragraph>When a user presses the<space/><link><target>tab key</target></link><space/>within an interactive command-shell, Bash automatically uses<space/><link><target>command line completion</target></link><space/>to match partly typed program names, filenames and variable names. The Bash command-line completion system is very flexible and customizable, and is often packaged with functions that complete arguments and filenames for specific programs and tasks.</paragraph><paragraph>Bash's syntax has many extensions lacking in the Bourne shell. Bash can perform integer calculations (&quot;arithmetic evaluation&quot;) without spawning external processes. It uses the<space/><xhtml:code>(())</xhtml:code><space/>command and the<space/><xhtml:code>$(())</xhtml:code><space/>variable syntax for this purpose. Its syntax simplifies<space/><link><target>redirection (computing)</target><part>I/O redirection</part></link>. For example, it can redirect<space/><link><target>standard out</target><trail>put</trail></link><space/>(stdout) and<space/><link><target>Standard error stream</target><part>standard error</part></link><space/>(stderr) at the same time using the<space/><xhtml:code>&amp;&gt;</xhtml:code><space/>operator. This is simpler to type than the Bourne shell equivalent '<xhtml:code>command &gt; file 2&gt;&amp;1</xhtml:code>'. Bash supports<space/><link><target>process substitution</target></link><space/>using the &lt;code&gt;&lt;(command)&lt;/code&gt; and<space/><xhtml:code>&gt;(command)</xhtml:code>syntax, which substitutes the output of (or input to) a command where a filename is normally used. (This is implemented through<space/><italics>/proc/fd/</italics><space/>unnamed pipes on systems which support that, or via temporary<space/><link><target>named pipe</target><trail>s</trail></link><space/>where necessary).</paragraph><paragraph>When using the 'function' keyword, Bash function declarations are not compatible with Bourne/Korn/POSIX scripts (the Korn shell has the same problem when using 'function'), but Bash accepts the same function declaration syntax as the Bourne and Korn shells, and is POSIX-conformant. Because of these and other differences, Bash shell scripts are rarely runnable under the Bourne or Korn shell interpreters unless deliberately written with that compatibility in mind, which is becoming less common as Linux becomes more widespread. But in POSIX mode,<extension extension_name='ref' name="GNUBASHREF"><template><target>Citation</target><arg name="title"><space/>The GNU Bash Reference Manual, for Bash, Version 4.1
<space/></arg><arg name="place">
<space/></arg><arg name="publisher">
<space/></arg><arg name="origyear">
<space/></arg><arg name="date"><space/>December 23, 2009
<space/></arg><arg name="volume">
<space/></arg><arg name="edition">
<space/></arg><arg name="chapter"><space/>6.11 Bash POSIX Mode
<space/></arg><arg name="chapterurl"><space/>https://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html
<space/></arg><arg name="accessdate"><space/>October 26, 2010

<space/></arg><arg name="url"><space/>https://www.gnu.org/software/bash/manual/html_node/index.html
</arg><arg name="archiveurl"><space/>https://web.archive.org/web/20101203065400/http://www.gnu.org/software/bash/manual/html_node/index.html</arg><arg name="archivedate"><space/>December 3, 2010<space/></arg><arg name="deadurl"><space/>no</arg></template></extension><space/>Bash conformance with POSIX is nearly perfect.<template><target>Citation needed</target><arg name="date">March 2014</arg></template></paragraph><paragraph>Bash supports<space/><link><target>here document</target><trail>s</trail></link>. Since version 2.05b Bash can redirect<space/><link><target>Stdin</target><part>standard input</part></link><space/>(stdin) from a &quot;here string&quot; using the &lt;code&gt;&lt;&lt;&lt;&lt;/code&gt; operator.</paragraph><paragraph>Bash 3.0 supports in-process<space/><link><target>regular expression</target></link><space/>matching using a syntax reminiscent of<space/><link><target>Perl</target></link>.<extension extension_name='ref'>The syntax matches that shown on the<space/><xhtml:code><link type='external' href='http://www.tin.org/bin/man.cgi?section=7&amp;amp;topic=regex'>regex(7)</link></xhtml:code><space/><link><target>man page</target></link>.</extension></paragraph><paragraph>Bash 4.0 introduced support for associative arrays.<extension extension_name='ref' name="GNUBASHREF"></extension><extension extension_name='ref'>&quot;The shell provides associative array variables, with the appropriate support to create, delete, assign values to, and expand them.&quot; http://tiswww.case.edu/php/chet/bash/NEWS</extension><space/>Associative arrays allow a fake support for multi-dimensional (indexed) arrays, in a similar way to<space/><link><target>AWK</target></link>:</paragraph><paragraph><extension extension_name='source' lang="bash">declare -A a # declare an associative array 'a' faking a bi-dimensional indexed arrayi=1; j=2 # initialize some indicesa[$i,$j]=5 # associate value &quot;5&quot; to key &quot;$i,$j&quot; (i.e. &quot;1,2&quot;)echo ${a[$i,$j]} # print the stored value at key &quot;$i,$j&quot;</extension></paragraph><heading level='3'>Brace expansion</heading><paragraph>Brace expansion, also called alternation, is a feature copied from the<space/><link><target>C shell</target></link>. It generates a set of alternative combinations. Generated results need not exist as files. The results of each expanded string are not sorted and left to right order is preserved:</paragraph><paragraph><extension extension_name='source' lang="bash">echo a{p,c,d,b}e # ape ace ade abeecho {a,b,c}{d,e,f} # ad ae af bd be bf cd ce cf</extension>Users should not use brace expansions in portable shell scripts, because the Bourne shell does not produce the same output.</paragraph><paragraph><extension extension_name='source' lang="bash"><list type='numbered'><listitem>!/bin/sh</listitem></list><list type='numbered'><listitem>A traditional shell does not produce the same output</listitem></list><paragraph>echo a{p,c,d,b}e # a{p,c,d,b}e</paragraph></extension></paragraph><paragraph>When brace expansion is combined with wildcards, the braces are expanded first, and then the resulting wildcards are substituted normally. Hence, a listing of JPEG and PNG images in the current directory could be obtained using:</paragraph><paragraph><extension extension_name='source' lang="bash"><paragraph>ls *.{jpg,jpeg,png} # expands to *.jpg *.jpeg *.png - after which,</paragraph><preblock><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/># the wildcards are processed</preline></preblock><paragraph>echo *.{png,jp{e,}g} # echo just show the expansions -</paragraph><preblock><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/><space/># and braces in braces are possible.</preline></preblock></extension></paragraph><paragraph>In addition to alternation, brace expansion can be used for sequential ranges between two integers or characters separated by double dots. Newer versions of Bash allow a third integer to specify the increment.</paragraph><paragraph><extension extension_name='source' lang="bash">echo {1..10} # expands to 1 2 3 4 5 6 7 8 9 10echo file{1..4}.txt # expands to file1.txt file2.txt file3.txt file4.txtecho {a..e} # expands to a b c d eecho {1..10..3} # expands to 1 4 7 10echo {a..j..3} # expands to a d g j</extension></paragraph><paragraph>When brace expansion is combined with variable expansion the variable expansion is performed<space/><bold>after</bold><space/>the brace expansion, which in some cases may necessitate the use of the built-in<space/><xhtml:code>eval</xhtml:code><space/>function thus:</paragraph><paragraph><extension extension_name='source' lang="bash"><paragraph>start=1; end=10echo {$start..$end} # fails to expand due to the evaluation ordereval echo {$start..$end} # variable expansion occurs</paragraph><preblock><preline><space/><space/># then resulting string is evaluated</preline></preblock></extension></paragraph><heading level='3'>Startup scripts</heading><paragraph>When Bash starts, it executes the commands in a variety of<space/><link><target>Hidden file and hidden directory#Unix and Unix-like environments</target><part>dot files</part></link>. Though similar to Bash shell script commands, which have execute permission enabled and an<space/><link><target>interpreter directive</target></link><space/>like<space/><xhtml:code><list type='numbered'><listitem>!/bin/bash</listitem></list></xhtml:code>, the initialization files used by Bash require neither.</paragraph><heading level='4'>Execution order of startup files</heading><preblock><preline><xhtml:div style="margin: 1.5em 3em"><heading level='5'>When started as an interactive login shell</heading><paragraph>Bash reads and executes<space/><xhtml:code>/etc/profile</xhtml:code><space/>(if it exists). (Often this file calls<space/><xhtml:code>/etc/bash.bashrc</xhtml:code>.)</paragraph><paragraph>After reading that file, it looks for<space/><xhtml:code>~/.bash_profile</xhtml:code>,<space/><xhtml:code>~/.bash_login</xhtml:code>, and<space/><xhtml:code>~/.profile</xhtml:code><space/><italics>in that order</italics>, and reads and executes the first one that exists and is readable.</paragraph><heading level='5'>When a login shell exits</heading><paragraph>Bash reads and executes<space/><xhtml:code>~/.bash_logout</xhtml:code><space/>(if it exists).</paragraph><heading level='5'>When started as an interactive shell (but not a login shell)</heading><paragraph>Bash reads and executes<space/><xhtml:code>~/.bashrc</xhtml:code><space/>(if it exists). This may be inhibited by using the<space/><xhtml:code>--norc</xhtml:code><space/>option. The<space/><xhtml:code>--rcfile file</xhtml:code><space/>option forces Bash to read and execute commands from<space/><xhtml:code>file</xhtml:code><space/>instead of<space/><xhtml:code>~/.bashrc</xhtml:code>.</paragraph></xhtml:div></preline></preblock><heading level='4'>Comparison with the Bourne shell and csh startup sequences</heading><paragraph>Elements of Bash were derived from the<space/><link><target>Bourne shell</target></link><space/>and<space/><link><target>C shell</target><part>csh</part></link>, and allow limited startup file sharing with the Bourne shell and provide some startup features familiar to users of the csh.</paragraph><preblock><preline><xhtml:div style="margin: 1.5em 3em"><heading level='5'>Setting inheritable environment variables</heading><paragraph>The Bourne shell uses the<space/><xhtml:code>~/.profile</xhtml:code><space/>at login to set environment variables that subprocesses then inherit. Bash can use the<space/><xhtml:code>~/.profile</xhtml:code><space/>in a compatible way, by executing it explicitly from the Bash-specific<space/><xhtml:code>~/.bash_profile</xhtml:code><space/>or<space/><xhtml:code>~/.bash_login</xhtml:code><space/>with the line below. Bash-specific syntax can be kept out of the<space/><xhtml:code>~/.profile</xhtml:code><space/>to keep the latter compatible with the Bourne shell.<extension extension_name='source' lang="bash">. ~/.profile</extension></paragraph><heading level='5'>Aliases and Functions</heading><paragraph>These two facilities,<space/><link><target>alias (command)</target><part>aliases</part></link><space/>from<space/><italics>csh</italics><space/>and the more general functions that largely supersede them from Bourne shell, were not typically inheritable from the login shell, and had to be redefined in each subshell spawned from the login shell. Although there is an<space/><xhtml:code>ENV</xhtml:code><space/>environment variable that could be applied to the problem, both<space/><italics>csh</italics><space/>and Bash support per-subshell startup files that address it directly. In Bash, the<space/><xhtml:code>~/.bashrc</xhtml:code><space/>is called for interactive subshells. If user-defined functions from the<space/><xhtml:code>~/.bashrc</xhtml:code><space/>are desired in the login shell as well, the<space/><xhtml:code>~/.bash_login</xhtml:code><space/>can include the line below after any setting up of environment variables:<extension extension_name='source' lang="bash">. ~/.bashrc</extension></paragraph><heading level='5'>Commands performed only at login and logout</heading><paragraph>The<space/><italics>csh</italics><space/>supports a<space/><xhtml:code>~/.login</xhtml:code><space/>file for purposes of tasks performed only during initial login, such as displaying system load, disk status, whether email has come in, logging the login time, etc. The Bourne shell can emulate this in the<space/><xhtml:code>~/.profile</xhtml:code>, but doesn't predefine a file name. To achieve similar semantics to the csh model, the<space/><xhtml:code>~/.bash_profile</xhtml:code><space/>can contain the line below, after the environment setup and function setup:<extension extension_name='source' lang="bash">. ~/.bash_login</extension><space/>Likewise, the<space/><italics>csh</italics><space/>has a<space/><xhtml:code>~/.logout</xhtml:code><space/>file run only when the login shell exits. The Bash equivalent is<space/><xhtml:code>~/.bash_logout</xhtml:code>, and requires no special setup. In the Bourne shell, the<space/><xhtml:code>trap</xhtml:code><space/>built-in can be used to achieve a similar effect.</paragraph></xhtml:div></preline></preblock><heading level='5'>Legacy-compatible Bash startup example</heading><paragraph>The skeleton<space/><xhtml:code>~/.bash_profile</xhtml:code><space/>below is compatible with the Bourne shell and gives semantics similar to csh for the<space/><xhtml:code>~/.bashrc</xhtml:code><space/>and<space/><xhtml:code>~/.bash_login</xhtml:code>. The<space/><xhtml:code>[ -r<space/><italics>filename</italics><space/>]</xhtml:code><space/>are tests to see if the<space/><italics>filename</italics><space/>exists and is readable, simply skipping the part after the<space/><xhtml:code>&amp;&amp;</xhtml:code><space/>if it's not.</paragraph><paragraph><extension extension_name='source' lang="bash"><paragraph>[ -r ~/.profile ] &amp;&amp; . ~/.profile # set up environment, once, Bourne-sh syntax only.if [ -n &quot;$PS1&quot; ] ; then # are we interactive?</paragraph><preblock><preline><space/><space/>[ -r ~/.bashrc ] &amp;&amp; . ~/.bashrc # tty/prompt/function setup for interactive shells.</preline><preline><space/><space/>[ -r ~/.bash_login ] &amp;&amp; . ~/.bash_login # any at-login tasks for login shell only.</preline></preblock><paragraph>fi</paragraph></extension></paragraph><heading level='4'>Operating system issues in Bash startup</heading><paragraph>Some versions of<space/><link><target>Unix</target></link><space/>and<space/><link><target>Linux</target></link><space/>contain Bash system startup scripts, generally under the<space/><xhtml:code>/etc</xhtml:code><space/>directories. Bash calls these as part of its standard initialization, but other startup files can read them in a different order than the documented Bash startup sequence. The default content of the root user's files may also have issues, as well as the skeleton files the system provides to new user accounts upon setup. The startup scripts that launch the<space/><link><target>X window system</target></link><space/>may also do surprising things with the user's Bash startup scripts in an attempt to set up user-environment variables before launching the<space/><link><target>window manager</target></link>. These issues can often be addressed using a<space/><xhtml:code>~/.xsession</xhtml:code><space/>or<space/><xhtml:code>~/.xprofile</xhtml:code><space/>file to read the<space/><xhtml:code>~/.profile</xhtml:code><space/>which provides the environment variables which Bash shell windows spawned from the window manager need, such as<space/><link><target>xterm</target></link><space/>or<space/><link><target>Gnome Terminal</target></link>.</paragraph><heading level='3'>Portability</heading><paragraph>Invoking Bash with the<space/><xhtml:code>--posix</xhtml:code><space/>option or stating<space/><xhtml:code>set -o posix</xhtml:code><space/>in a script causes Bash to conform very closely to the<space/><link><target>Posix#POSIX.2</target><part>POSIX 1003.2 standard</part></link>.<extension extension_name='ref' name="tldp"></extension>Bash shell scripts intended for<space/><link><target>portability (computer science)</target><part>portability</part></link><space/>should at least take into account the Bourne shell it intends to replace. Bash has certain features that the traditional Bourne shell lacks. The include:<extension extension_name='ref' name="tldp"><template><target>cite web</target><arg name="author">Mendel Cooper</arg><arg name="title">Portability Issues</arg><arg name="url">http://tldp.org/LDP/abs/html/portabilityissues.html</arg><arg name="work">The Linux Documentation Project</arg><arg name="publisher">ibiblio.org</arg></template></extension></paragraph><list type='bullet'><listitem>Certain extended invocation options</listitem><listitem>Command substitution using $( ) notation (this feature is part of the POSIX 1003.2 standard though)</listitem><listitem>Brace expansion</listitem><listitem>Certain array operations, and associative arrays</listitem><listitem>The double brackets extended test construct</listitem><listitem>The double-parentheses arithmetic-evaluation construct</listitem><listitem>Certain string-manipulation operations</listitem><listitem>Process substitution</listitem><listitem>A Regular Expression matching operator</listitem><listitem>Bash-specific builtins</listitem><listitem><link><target>Coprocess</target><trail>es</trail></link></listitem></list><heading level='3'>Keyboard shortcuts</heading><paragraph>The following shortcuts work when using default (<link><target>Emacs</target></link>) key bindings.<space/><link><target>Vi-binding</target><trail>s</trail></link><space/>can be enabled by running<space/><xhtml:code>set -o vi</xhtml:code>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.hypexr.org/bash_tutorial.php#emacs<space/></arg><arg name="title">BASH Help - A Bash Tutorial<space/></arg><arg name="publisher">Hypexr.org<space/></arg><arg name="date">October 5, 2012<space/></arg><arg name="accessdate">July 21, 2013</arg></template></extension></paragraph><paragraph>Note: For shortcuts involving<space/><template><target>key press</target><arg>Alt</arg></template>, you may be able to use<space/><template><target>key press</target><arg>Esc</arg></template><space/>instead.</paragraph><paragraph>Note: Sometimes, you must use<space/><template><target>key press</target><arg>Esc</arg></template><space/>instead of<space/><template><target>key press</target><arg>Alt</arg></template>, because the<space/><template><target>key press</target><arg>Alt</arg></template><space/>shortcut conflicts with another shortcut. For example, in<space/><link><target>Trisquel</target><part>Trisquel 5.0</part></link><space/>(a distribution of Linux), pressing<space/><template><target>key press</target><arg>Alt</arg><arg>f</arg></template><space/>does not move the cursor forward one word, but activates &quot;File&quot; in the menu of the terminal window.</paragraph><paragraph><template><target>See also</target><arg>Readline</arg></template></paragraph><list type='bullet'><listitem><template><target>key press</target><arg>TAB</arg></template><space/>:<space/><link><target>Autocomplete</target><trail>s</trail></link><space/>from the cursor position.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>a</arg></template><space/>: Moves the cursor to the line start (equivalent to the key<space/><template><target>key press</target><arg>[[home key|Home]]</arg></template>).</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>b</arg></template><space/>: Moves the cursor back one character (equivalent to the key<space/><template><target>key press</target><arg>[[arrow keys|Left]]</arg></template>).</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>c</arg></template><space/>: Sends the signal<space/><link><target>SIGINT (POSIX)</target><part>SIGINT</part></link><space/>to the current task, which aborts and closes it.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>d</arg></template><list type='bullet'><listitem>Sends an EOF marker, which (unless disabled by an option) closes the current shell (equivalent to the command<space/><xhtml:code><link><target>exit (command)</target><part>exit</part></link></xhtml:code>). (Only if there is no text on the current line)</listitem><listitem>If there is text on the current line, deletes the current character (then equivalent to the key<space/><template><target>key press</target><arg>[[Delete key|Delete]]</arg></template>).</listitem></list></listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>e</arg></template><space/>: (<link><target>wikt:end</target><part>end</part></link>) moves the cursor to the line end (equivalent to the key<space/><template><target>key press</target><arg>[[end key|End]]</arg></template>).</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>f</arg></template><space/>: Moves the cursor forward one character (equivalent to the key<space/><template><target>key press</target><arg>[[arrow keys|Right]]</arg></template>).</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>g</arg></template><space/>: Abort the research and restore the original line.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>h</arg></template><space/>: Deletes the previous character (same as backspace).</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>i</arg></template><space/>: Equivalent to the tab key.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>j</arg></template><space/>: Equivalent to the enter key.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>k</arg></template><space/>: Clears the line content after the cursor and copies it into the<space/><link><target>clipboard (software)</target><part>clipboard</part></link>.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>l</arg></template><space/>: Clears the screen content (equivalent to the command<space/><xhtml:code><link><target>clear (Unix)</target><part>clear</part></link></xhtml:code>).</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>n</arg></template><space/>: (<link><target>wikt:next</target><part>next</part></link>) recalls the next command (equivalent to the key<space/><template><target>key press</target><arg>[[arrow keys|Down]]</arg></template>).</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>o</arg></template><space/>: Executes the found command from history, and fetch the next line relative to the current line from the history for editing.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>p</arg></template><space/>: (<link><target>wikt:previous</target><part>previous</part></link>) recalls the prior command (equivalent to the key<space/><template><target>key press</target><arg>[[arrow keys|Up]]</arg></template>).</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>r</arg></template><space/>: (reverse search) recalls the last command including the specified character(s). A second<space/><template><target>key press</target><arg>Ctrl</arg><arg>r</arg></template><space/>recalls the next anterior command that corresponds to the search</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>s</arg></template><space/>: Go back to the next more recent command of the research (beware to not execute it from a terminal because this command also launches its XOFF). If you changed that XOFF setting, use<space/><template><target>key press</target><arg>Ctrl</arg><arg>q</arg></template><space/>to return.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>t</arg></template><space/>: Transpose the previous two characters.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>u</arg></template><space/>: Clears the line content before the cursor and copies it into the<space/><link><target>clipboard (software)</target><part>clipboard</part></link>.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>v</arg></template><space/>: If the next input is also a control sequence, type it literally (e. g. *<space/><template><target>key press</target><arg>Ctrl</arg><arg>v</arg></template><space/><template><target>key press</target><arg>Ctrl</arg><arg>h</arg></template><space/>types &quot;^H&quot;, a literal backspace.)</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>w</arg></template><space/>: Clears the word before the cursor and copies it into the<space/><link><target>clipboard (software)</target><part>clipboard</part></link>.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>x</arg></template><space/><template><target>key press</target><arg>Ctrl</arg><arg>e</arg></template><space/>: Edits the current line in the $EDITOR program, or<space/><link><target>vi</target></link><space/>if undefined.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>x</arg></template><space/><template><target>key press</target><arg>Ctrl</arg><arg>r</arg></template><space/>: Read in the contents of the inputrc file, and incorporate any bindings or variable assignments found there.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>x</arg></template><space/><template><target>key press</target><arg>Ctrl</arg><arg>u</arg></template><space/>: Incremental undo, separately remembered for each line.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>x</arg></template><space/><template><target>key press</target><arg>Ctrl</arg><arg>v</arg></template><space/>: Display version information about the current instance of Bash.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>x</arg></template><space/><template><target>key press</target><arg>Ctrl</arg><arg>x</arg></template><space/>: Alternates the cursor with its old position. (C-x, because x has a crossing shape).</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>y</arg></template><space/>: (<link><target>wikt:yank</target><part>yank</part></link>) adds the<space/><link><target>clipboard (software)</target><part>clipboard</part></link><space/>content from the cursor position.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>z</arg></template><space/>: Sends the signal<space/><link><target>SIGTSTP</target></link><space/>to the current task, which suspends it. To execute it in background one can enter<space/><xhtml:code>bg</xhtml:code>. To bring it back from background or suspension<space/><xhtml:code>fg ['process name or job id']</xhtml:code><space/>(<link><target>foreground process</target><part>foreground</part></link>) can be issued.</listitem><listitem><template><target>key press</target><arg>Ctrl</arg><arg>_</arg></template><space/>: Incremental undo, separately remembered for each line.</listitem><listitem><template><target>key press</target><arg>Alt</arg><arg>b</arg></template><space/>: (<link><target>wikt:backward</target><part>backward</part></link>) moves the cursor backward one word.</listitem><listitem><template><target>key press</target><arg>Alt</arg><arg>c</arg></template><space/>: Capitalizes the character under the cursor and moves to the end of the word.</listitem><listitem><template><target>key press</target><arg>Alt</arg><arg>d</arg></template><space/>: Cuts the word after the cursor.</listitem><listitem><template><target>key press</target><arg>Alt</arg><arg>f</arg></template><space/>: (<link><target>wikt:forward</target><part>forward</part></link>) moves the cursor forward one word.</listitem><listitem><template><target>key press</target><arg>Alt</arg><arg>l</arg></template><space/>: Lowers the case of every character from the cursor's position to the end of the current word.</listitem><listitem><template><target>key press</target><arg>Alt</arg><arg>r</arg></template><space/>: Cancels the changes and puts back the line as it was in the history.</listitem><listitem><template><target>key press</target><arg>Alt</arg><arg>u</arg></template><space/>: Capitalizes every character from the cursor's position to the end of the current word.</listitem><listitem><template><target>key press</target><arg>Alt</arg><arg>.</arg></template><space/>: Insert the last argument to the previous command (the last word of the previous history entry).</listitem></list><heading level='3'>Process management</heading><paragraph>The Bash shell has two modes of execution for commands:<space/><link><target>batch (Unix)</target></link>, and concurrent mode.</paragraph><paragraph>To execute commands in batch (i.e., in sequence) they must be separated by the character &quot;;&quot;:<extension extension_name='source' lang="bash">command1; command2</extension>in this example, when command1 is finished, command2 is executed.</paragraph><paragraph>To have a concurrent execution of command1 and command2, they must be executed in the Bash shell in the following way:<extension extension_name='source' lang="bash">command1 &amp; command2</extension>In this case command1 is executed in background (symbol &amp;), returning immediately the control to the shell that executes command2.</paragraph><paragraph>Summarizing:</paragraph><list type='bullet'><listitem>Normally a command is executed in foreground (<xhtml:code>fg</xhtml:code>). The control of the shell returns to the user after the command finishes its execution and the special variable<space/><xhtml:code>$!</xhtml:code><space/>is set to the process ID of the newly spawned background job.</listitem><listitem>With the symbol &amp; after the command, it can be executed in background (<xhtml:code>bg</xhtml:code>). The shell is ready to execute other commands, concurrently to the first command.</listitem><listitem>A program in the running state and in foreground (<xhtml:code>fg</xhtml:code>) can be suspended pressing<space/><template><target>keypress</target><arg>Ctrl</arg><arg>z</arg></template></listitem><listitem>A suspended program can be resumed in foreground using the command<space/><xhtml:code>fg</xhtml:code><space/>or background using the command<space/><xhtml:code>bg</xhtml:code>.</listitem><listitem>A background process may become blocked on attempts to write to the terminal device (as distinct from simple writes to its standard output).</listitem><listitem>The shell can synchronize with the completion of specific background jobs using the<space/><xhtml:code>wait</xhtml:code><space/>command by supplying a process ID or job number, or await completion of all background jobs by calling<space/><xhtml:code>wait</xhtml:code><space/>with no arguments.</listitem></list><heading level='3'>Conditional Execution</heading><paragraph>Bash supplies &quot;conditional execution&quot; command separators which allow for the execution of a command to be contingent on the<space/><link><target>Exit status</target><part>exit code</part></link><space/>set by a precedent command. For example:</paragraph><paragraph><extension extension_name='source' lang="bash">cd &quot;$SOMEWHERE&quot; &amp;&amp; ./do_something || echo &quot;An error occurred&quot; &gt;&amp;2</extension></paragraph><paragraph>Where<space/><italics>./do_something</italics><space/>is only executed if the<space/><italics>cd</italics><space/>(change directory) command was &quot;successful&quot; (returned an exit status of zero) and the<space/><italics>echo</italics><space/>command would only be executed if either the<space/><italics>cd' or the<space/></italics>./do_something'' command return an &quot;error&quot; (non-zero exit status).</paragraph><paragraph>For all commands the exit status is stored in the special variable<space/><xhtml:code>$?</xhtml:code>. Bash also support<space/><template><target>code</target><arg name="2">bash</arg><arg>if ...;then ...;else ...;fi</arg></template><space/>and<space/><template><target>code</target><arg name="2">bash</arg><arg>case $VARIABLE in $pattern)...;;$other_pattern)...;; esac</arg></template><space/>forms of conditional command evaluation.</paragraph><heading level='3'>Bug reporting</heading><paragraph><template><target>Redirect</target><arg>bashbug</arg><arg>the widely reported September 2014 bug found in Bash</arg><arg>Shellshock (software bug)</arg></template>An external command called<space/><italics>bashbug</italics><space/>reports Bash shell bugs.<extension extension_name='ref'><link type='external' href='http://linux.die.net/man/1/bashbug'>bashbug(1)</link>, die.net</extension><extension extension_name='ref'><link type='external' href='https://developer.apple.com/library/prerelease/mac/documentation/Darwin/Reference/ManPages/man1/bashbug.1.html'>&quot;Linux / Unix Command: bashbug&quot;</link>, apple.com</extension>When the command is invoked, it brings up the user's default editor with a form to fill in. The form is mailed to the Bash maintainers (or optionally to other email addresses).</paragraph><heading level='2'>See also</heading><paragraph><template><target>Portal</target><arg>Free software</arg></template></paragraph><list type='bullet'><listitem><link><target>Comparison of command shells</target></link></listitem></list><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>Commons category</target><arg>GNU Bash</arg><arg>Bash</arg></template><template><target>wikibooks</target><arg>Bash Shell Scripting</arg></template></paragraph><list type='bullet'><listitem><template><target>official website</target><arg>https://www.gnu.org/software/bash/bash.html</arg></template></listitem><listitem><link type='external' href='https://www.gnu.org/software/bash/manual/'>Bash Reference Manual</link>&amp;nbsp; (<link type='external' href='https://www.gnu.org/software/bash/manual/html_node/index.html'>HTML</link><space/><link type='external' href='https://www.gnu.org/software/bash/manual/bash.ps.gz'>PS</link><space/><link type='external' href='https://www.gnu.org/software/bash/manual/bash.pdf'>PDF</link>)</listitem><listitem><template><target>tldp</target><arg>LDP/Bash-Beginners-Guide</arg><arg>Bash Guide for Beginners</arg></template></listitem><listitem><template><target>tldp</target><arg>LDP/abs</arg><arg>Advanced Bash Scripting Guide</arg></template></listitem><listitem><link type='external' href='http://bash.cyberciti.biz/guide/Main_Page'>Linux Shell Scripting Tutorial (LSST) v2.0 wiki</link></listitem><listitem><link type='external' href='http://www.bashcookbook.com/bashinfo/'>&quot;The Comprehensive List of bash Reference Documentation and Examples&quot;</link></listitem><listitem><link type='external' href='http://spsneo.com/blog/2009/09/19/bash-history-tips-and-tricks/'>Useful Bash History Tips and Tricks</link></listitem><listitem><link type='external' href='http://www.computerworld.com.au/index.php/id;1591223321;fp;16;fpid;1;pf;1'>2008 interview with GNU Bash's maintainer, Chet Ramey</link></listitem><listitem><link type='external' href='http://www.geeksww.com/tutorials/operating_systems/linux/tips_and_tricks/working_bash_environment_variables_beginners_linux.php'>Working with BASH environment variables</link></listitem><listitem><link type='external' href='http://www.galatech.co.uk/index.php/component/content/article/37-blogs/100-how-to-create-a-bash-script'>Video Tutorial for Creating a Bash Script</link></listitem><listitem><link type='external' href='http://www.shell-fu.org/lister.php?tag=bash'>Bash commands and examples</link></listitem><listitem><link type='external' href='http://www.markus-gattol.name/ws/bash.html#colorized_shell_prompt'>Colorized Bash prompt</link><space/>- how to set up a colorized Bash prompt based on the current connection method (SSH, telnet, etc.).</listitem><listitem><link type='external' href='https://code.google.com/p/jbash/'>jBash Project is a Java Parser for the Bourne Again Shell</link></listitem><listitem><link type='external' href='http://mywiki.wooledge.org/EnglishFrontPage'>The 'official' channel FAQ for freenode's #bash channel is BashFAQ.</link></listitem><listitem><link type='external' href='http://bashdb.sourceforge.net/'>BASHDB - Bash with a built-in debugger.</link></listitem><listitem><link type='external' href='http://www.digilife.be/quickreferences/QRC/Bash%20Quick%20Reference.pdf'>Bash Quick Reference card</link><space/>&lt;-- Dates from 1999 and version 2.02.0 of BASH. Very old. --&gt;</listitem><listitem><link type='external' href='http://ryanstutorials.net/linuxtutorial'>Beginner Linux Command Line Tutorial</link><space/>- Covers the basics, all the way up to scripting.</listitem><listitem><link type='external' href='http://wiki.altervista.org/cs/bash_shell'>Bash tutorial</link><space/>- A quick tutorial about Bash shell, with the explanation of the most useful commands. Slides provided.</listitem></list><paragraph><template><target>GNU</target></template><template><target>Unix Shells</target></template><template><target>Programming languages</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Bash (Unix Shell)</target></template><link><target>Category:Text-oriented programming languages</target></link><link><target>Category:Domain-specific programming languages</target></link><link><target>Category:Scripting languages</target></link><link><target>Category:Unix shells</target></link><link><target>Category:GNU Project software</target></link><link><target>Category:Free software programmed in C</target></link><link><target>Category:Cross-platform free software</target></link><link><target>Category:1989 software</target></link></paragraph></article>