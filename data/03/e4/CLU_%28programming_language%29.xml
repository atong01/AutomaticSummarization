<article title='CLU_%28programming_language%29'><paragraph><template><target>refimprove</target><arg name="date">February 2013</arg></template><template><target>Infobox programming language</target><arg name="name"><space/>CLU
</arg><arg name="logo">
</arg><arg name="paradigm"><space/>[[Multi-paradigm programming language|multi-paradigm]]: [[Object-oriented programming|object-oriented]], [[Procedural programming|procedural]]
</arg><arg name="year"><space/>1974
</arg><arg name="designer"><space/>[[Barbara Liskov]] and her students at [[MIT]]
</arg><arg name="developer"><space/>Barbara Liskov and her students at MIT
</arg><arg name="latest release version">
</arg><arg name="latest release date">
</arg><arg name="typing"><space/>[[strong typing|strong]]
</arg><arg name="website"><space/>{{URL|www.pmg.lcs.mit.edu/CLU.html}}
</arg><arg name="implementations"><space/>[ftp://ftp.lcs.mit.edu/pub/pclu/ Portable CLU], [http://pmg.csail.mit.edu/~dcurtis/clu/ Native CLU], [http://woodsheep.jp/clu2c.html clu2c]
</arg><arg name="dialects">
</arg><arg name="influenced_by"><space/>[[ALGOL| ALGOL 60]], [[Lisp programming language|Lisp]], [[Simula]]
</arg><arg name="influenced"><space/>[[Ada (programming language)|Ada]], [[Argus (programming language)|Argus]], [[Lua (programming language)|Lua]], [[Ruby programming language|Ruby]], [[Sather]], [[Swift (Apple programming language)|Swift]]<ref name</arg></template></paragraph><paragraph><bold>CLU</bold><space/>is a pioneering<space/><link><target>programming language</target></link><space/>created at<space/><link><target>Massachusetts Institute of Technology</target><part>MIT</part></link><space/>by<space/><link><target>Barbara Liskov</target></link><space/>and her students between 1974 and 1975. While it did not find extensive use itself, it introduced many features that are now widely used, and is seen as a step in the development of<space/><link><target>object-oriented programming</target></link><space/>(OOP). However, it is not object-oriented itself, instead being considered &quot;object-based&quot;, as it lacked many features of OOP.</paragraph><paragraph>Key contributions include<space/><link><target>abstract data type</target><trail>s</trail></link>,<extension extension_name='ref'><template><target>Cite conference</target><arg name="doi"><space/>10.1145/800233.807045</arg><arg name="chapter"><space/>Programming with abstract data types</arg><arg name="title"><space/>Proceedings of the ACM SIGPLAN symposium on Very high level languages</arg><arg name="pages"><space/>50–59</arg><arg name="year"><space/>1974</arg><arg name="last1"><space/>Liskov<space/></arg><arg name="first1"><space/>Barbara<space/></arg><arg name="authorlink1"><space/>Barbara Liskov</arg><arg name="last2"><space/>Zilles<space/></arg><arg name="first2"><space/>Stephen</arg><arg name="ref"><space/>harv</arg></template></extension><space/><link><target>call-by-sharing</target></link>,<space/><link><target>iterator</target><trail>s</trail></link>, multiple return values (a form of<space/><link><target>parallel assignment</target></link>), type-safe<space/><link><target>parameterized type</target><trail>s</trail></link>, and type-safe<space/><link><target>variant type</target><trail>s</trail></link>. It is also notable for its use of<space/><link><target>Class (computer programming)</target><part>classes</part></link><space/>with<space/><link><target>Constructor (object-oriented programming)</target><part>constructors</part></link><space/>and methods, but without<space/><link><target>Inheritance (object-oriented programming)</target><part>inheritance</part></link>.</paragraph><heading level='2'>Clusters</heading><paragraph>The<space/><link><target>syntax</target></link><space/>of CLU was based on<space/><link><target>ALGOL</target></link>, then the starting point for most new language designs. The key addition was the concept of a<space/><italics>cluster</italics>, CLU's type extension system and the root of the language's name (CLUster).<extension extension_name='ref' name="Liskov1977"><template><target>Cite journal</target><arg name="last1"><space/>Liskov<space/></arg><arg name="first1"><space/>B.<space/></arg><arg name="authorlink1"><space/>Barbara Liskov</arg><arg name="last2"><space/>Snyder<space/></arg><arg name="first2"><space/>A.</arg><arg name="last3"><space/>Atkinson<space/></arg><arg name="first3"><space/>R.</arg><arg name="last4"><space/>Schaffert<space/></arg><arg name="first4"><space/>C.</arg><arg name="title"><space/>Abstraction mechanisms in CLU</arg><arg name="doi"><space/>10.1145/359763.359789</arg><arg name="journal"><space/>[[Communications of the ACM|Comm. ACM]]</arg><arg name="volume"><space/>20</arg><arg name="issue"><space/>8</arg><arg name="pages"><space/>564–576</arg><arg name="date">August 1977<space/></arg><arg name="id"><space/>{{citeseerx|10.1.1.112.656}}<space/></arg></template></extension><space/>Clusters correspond generally to the concept of an &quot;class&quot; in an OO language, and have similar syntax. For instance, here is the CLU syntax for a cluster that implements<space/><link><target>complex number</target><trail>s</trail></link>:</paragraph><preblock><preline><extension extension_name='source' lang="algol68"><preblock><preline><space/><space/><space/>complex_number = cluster is add, subtract, multiply, ...</preline><preline><space/><space/><space/><space/><space/><space/><space/>rep = record [ real_part: real, imag_part: real ]</preline><preline><space/><space/><space/><space/><space/><space/><space/>add = proc ... end add;</preline><preline><space/><space/><space/><space/><space/><space/><space/>subtract = proc ... end subtract;</preline><preline><space/><space/><space/><space/><space/><space/><space/>multiply = proc ... end multiply;</preline><preline><space/><space/><space/><space/><space/><space/><space/>...</preline><preline><space/><space/><space/>end complex_number;</preline></preblock></extension></preline></preblock><paragraph>A cluster is a module that encapsulates all of its components except for those explicitly named in the &quot;is&quot; clause. These correspond to the public components of a class in recent OO languages. A cluster also defines a type that can be named outside the cluster (in this case, &quot;complex_number&quot;), but its representation type (rep) is hidden from external clients.</paragraph><paragraph>Cluster names are global, and no namespace mechanism was provided to group clusters or allow them to be created &quot;locally&quot; inside other clusters.</paragraph><paragraph>CLU does not perform implicit type conversions. In a cluster, the explicit type conversions 'up' and 'down' change between the abstract type and the representation. There is a universal type 'any', and a procedure force[] to check that an object is a certain type. Objects may be mutable or immutable, the latter being &quot;base types&quot; such as integers, booleans, characters and strings.<extension extension_name='ref' name="Liskov1977"></extension></paragraph><heading level='2'>Other features</heading><paragraph>Another key feature of the CLU type system are<space/><italics><link><target>iterator</target><trail>s</trail></link></italics>, which return objects from a collection one after the other.<extension extension_name='ref' name="Liskov1977"></extension><space/>Iterators offer an identical<space/><link><target>application programming interface</target><part>API</part></link><space/>no matter what data they are being used with. Thus the iterator for a collection of<space/><xhtml:code>complex_number</xhtml:code>s can be used interchangeably with that for an array of<space/><xhtml:code>integer</xhtml:code>s. A distinctive feature of CLU iterators is that they are implemented as coroutines, with each value being provided to the caller via a &quot;yield&quot; statement. Iterators like those in CLU are now a common feature of many modern languages, such as C#, Ruby, and Python, though recently they are often referred to as generators.</paragraph><paragraph>CLU also includes<space/><link><target>exception handling</target></link>, based on various attempts in other languages; exceptions are raised using<space/><xhtml:code>signal</xhtml:code><space/>and handled with<space/><xhtml:code>except</xhtml:code>. Unlike most other languages with exception handling, exceptions are not implicitly resignaled up the calling chain; exceptions that are neither caught nor resignaled explicitly are immediately converted into a special failure exception that typically terminates the program.</paragraph><paragraph>CLU is often credited as being the first language with type-safe<space/><link><target>variant type</target><trail>s</trail></link><space/>(called oneofs), preceding ML in this respect.</paragraph><paragraph>A final distinctive feature in CLU is<space/><link><target>parallel assignment</target></link><space/>(&quot;multiple assignment&quot;), where more than one variable can appear on the left hand side of an<space/><link><target>Assignment (computer science)</target><part>assignment operator</part></link>. For instance, writing<space/><xhtml:code>x,y = y,x</xhtml:code><space/>would exchange values of<space/><xhtml:code>x</xhtml:code><space/>and<space/><xhtml:code>y</xhtml:code>. In the same way, functions could return several values, like<space/><xhtml:code>x,y,z = f(t)</xhtml:code>. Parallel assignment (though not multiple return values) predates CLU, appearing in<space/><link><target>CPL (programming language)</target><part>CPL</part></link><space/>(1963), under the name<space/><bold>simultaneous assignment</bold>,<extension extension_name='ref'><template><target>cite journal</target><arg name="first1"><space/>D. W.<space/></arg><arg name="last1"><space/>Barron<space/></arg><arg name="first2"><space/>J. N.<space/></arg><arg name="last2"><space/>Buxton<space/></arg><arg name="first3"><space/>D. F.<space/></arg><arg name="last3"><space/>Hartley<space/></arg><arg name="first4"><space/>E.<space/></arg><arg name="last4"><space/>Nixon<space/></arg><arg name="first5"><space/>C.<space/></arg><arg name="last5"><space/>Strachey<space/></arg><arg name="title"><space/>The main features of CPL<space/></arg><arg name="journal"><space/>Computer Journal<space/></arg><arg name="volume"><space/>6<space/></arg><arg name="issue"><space/>2<space/></arg><arg name="pages"><space/>134–143<space/></arg><arg name="date"><space/>1963<space/></arg><arg name="url"><space/>http://comjnl.oxfordjournals.org/cgi/reprint/6/2/134<space/></arg><arg name="doi"><space/>10.1093/comjnl/6.2.134<space/></arg></template></extension><space/>but CLU popularized it and is often credited as the direct influence leading to parallel assignment in later languages.</paragraph><paragraph>All objects in a CLU program live in the heap, and memory management is automatic.</paragraph><paragraph>CLU supported<space/><link><target>generic programming</target><part>type parameterized</part></link><space/>user-defined data abstractions. It was the first language to offer type-safe bounded parameterized types, using structure &quot;where clauses&quot; to express constraints on actual type arguments.</paragraph><heading level='2'>Influence on other programming languages</heading><preblock><preline>*<space/><link><target>Python (programming language)</target><part>Python</part></link><space/>and<space/><link><target>Ruby (programming language)</target><part>Ruby</part></link><space/>borrowed several concepts from CLU, such as<space/><link><target>call by sharing</target></link>, the<space/><italics>yield</italics><space/>statement, and multiple assignment<template><target>Citation needed</target><arg name="date">July 2011</arg></template></preline></preblock><list type='bullet'><listitem>CLU and<space/><link><target>Ada (programming language)</target><part>Ada</part></link><space/>were major inspirations for<space/><link><target>C++</target></link><space/>templates.</listitem><listitem>CLU's exception handling mechanisms also influenced newer languages like C++ and<space/><link><target>Java (programming language)</target><part>Java</part></link>.</listitem><listitem><link><target>C++</target></link>,<space/><link><target>C Sharp (programming language)</target><part>C#</part></link>, Python, and<space/><link><target>Sather</target></link><space/>include<space/><link><target>iterator</target><trail>s</trail></link>, which first appeared in CLU.</listitem><listitem><link><target>Perl</target></link><space/>and<space/><link><target>Lua (programming language)</target><part>Lua</part></link><space/>took multiple assignment and multiple returns from function calls from CLU.<extension extension_name='ref'><template><target>Cite conference</target><arg name="last1"><space/>Ierusalimschy<space/></arg><arg name="first1"><space/>R.</arg><arg name="last2"><space/>De Figueiredo<space/></arg><arg name="first2"><space/>L. H.</arg><arg name="last3"><space/>Celes<space/></arg><arg name="first3"><space/>W.</arg><arg name="doi"><space/>10.1145/1238844.1238846</arg><arg name="chapter"><space/>The evolution of Lua</arg><arg name="title"><space/>Proceedings of the third ACM SIGPLAN conference on History of programming languages - HOPL III</arg><arg name="pages"><space/>2-1–2-26</arg><arg name="year"><space/>2007</arg><arg name="isbn"><space/>978-1-59593-766-7</arg><arg name="url">http://www.lua.org/doc/hopl.pdf</arg></template></extension></listitem></list><paragraph><template><target>Expand section</target><arg name="date">June 2008</arg></template></paragraph><heading level='2'>References</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><template><target>Official website</target><arg>www.pmg.lcs.mit.edu/CLU.html</arg></template></listitem><listitem><link type='external' href='http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-561.pdf'>A History of CLU</link><space/>(pdf)</listitem><listitem><link type='external' href='http://woodsheep.jp/clu2c.html'>clu2c</link>: a program to compile CLU code to<space/><link><target>C (programming language)</target><part>C</part></link></listitem><listitem><link type='external' href='http://cgibin.erols.com/ziring/cgi-bin/cep/cep.pl?_key=CLU'>Dictionary of Programming Languages</link></listitem><listitem><link type='external' href='http://99-bottles-of-beer.net/language-clu-133.html'>CLU</link><space/>comparison at '99 bottles of beer' multi-language demo algorithm site</listitem></list><paragraph><template><target>DEFAULTSORT:Clu (programming language)</target></template><link><target>Category:Academic programming languages</target></link><link><target>Category:Class-based programming languages</target></link><link><target>Category:Procedural programming languages</target></link><link><target>Category:Programming languages created in the 1970s</target></link><link><target>Category:Programming languages created by women</target></link></paragraph></article>