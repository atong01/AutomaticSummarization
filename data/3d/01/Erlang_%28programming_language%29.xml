<article title='Erlang_%28programming_language%29'><paragraph><template><target>about</target><arg>the programming language</arg><arg>other things named "Erlang"</arg><arg>Erlang (disambiguation)</arg></template></paragraph><paragraph><template><target>Infobox programming language</target><arg name="name"><space/>Erlang
</arg><arg name="logo"><space/>[[File:Erlang logo.png|200x100px]]
</arg><arg name="paradigm"><space/>[[multi-paradigm programming language|multi-paradigm]]: [[concurrent programming|concurrent]], [[functional programming|functional]]
</arg><arg name="year"><space/>{{Start date and age|1986}}
</arg><arg name="designer"><space/>Joe Armstrong, Robert Virding and Mike Williams
</arg><arg name="developer"><space/>[[Ericsson]]
</arg><arg name="latest release version"><space/>18.1<ref>[http://www.erlang.org/news/92 Erlang OTP 18.1 has been released]</ref>
</arg><arg name="latest release date"><space/>{{Start date and age|2015|09|23}}
</arg><arg name="typing"><space/>[[type system|dynamic]], [[strong typing|strong]]
</arg><arg name="implementations"><space/>Erlang
</arg><arg name="dialects">
</arg><arg name="influenced_by"><space/>[[Prolog]], [[Smalltalk]], [[PLEX (programming language)|PLEX]]<ref>http://vimeo.com/97329186 18:30</ref>
</arg><arg name="influenced"><space/>[[F Sharp (programming language)|F#]], [[Clojure]], [[Rust (programming language)|Rust]], [[Scala (programming language)|Scala]], [[Opa (programming language)|Opa]], [[Reia (programming language)|Reia]], [[Elixir (programming language)|Elixir]], [[Dart (programming language)|Dart]], [[Akka (toolkit)|Akka]]
</arg><arg name="file_ext"><space/>.erl .hrl
</arg><arg name="license"><space/>[[Apache License|Apache License 2.0]] (since OTP 18.0)
[[Erlang Public License| Erlang Public License 1.1]] (earlier releases)
</arg><arg name="[[Garbage Collected|garbage collection]]"><space/>yes
</arg><arg name="website"><space/>{{url|http://www.erlang.org}}
</arg><arg name="wikibooks"><space/>Erlang Programming
</arg></template></paragraph><paragraph><bold>Erlang</bold><space/>(<template><target>IPAc-en</target><arg>ˈ</arg><arg>ɜr</arg><arg>l</arg><arg>æ</arg><arg>ŋ</arg></template><space/><template><target>respell</target><arg>ER</arg><arg>lang</arg></template>) is a<space/><link><target>General-purpose programming language</target><part>general-purpose</part></link>,<space/><link><target>concurrent computing</target><part>concurrent</part></link>,<space/><link><target>garbage collection (computer science)</target><part>garbage-collected</part></link><space/><link><target>programming language</target></link><space/>and<space/><link><target>run time system</target><part>runtime</part></link><space/>system. The sequential subset of Erlang is almost a<space/><link><target>functional language</target></link><space/>(excluding certain built-in<space/><link><target>subroutine</target><part>functions</part></link><space/>(BIFs) such as those manipulating the process dictionary), with<space/><link><target>eager evaluation</target></link>,<space/><link><target>single assignment</target></link>, and<space/><link><target>dynamic typing</target></link>. It was originally designed by<space/><link><target>Ericsson</target></link><space/>to support<space/><link><target>Distributed computing</target><part>distributed</part></link>,<space/><link><target>fault-tolerance</target><part>fault-tolerant</part></link>,<space/><link><target>soft real-time</target></link>,<space/><link><target>High availability</target><part>highly available</part></link>,<space/><link><target>Uptime</target><part>non-stop</part></link><space/>applications. It supports<space/><link><target>hot swapping</target></link>, thus code can be changed without stopping a system.<extension extension_name='ref'><template><target>cite web</target><arg name="author">Joe Armstrong, Bjarne Däcker, Thomas Lindgren, Håkan Millroth</arg><arg name="title">Open-source Erlang - White Paper</arg><arg name="url">http://ftp.sunet.se/pub/lang/erlang/white_paper.html</arg><arg name="accessdate">31 July 2011</arg></template></extension></paragraph><paragraph>While<space/><link><target>thread (computer science)</target><part>thread</part><trail>s</trail></link><space/>require external library support in most languages, Erlang provides language-level features for creating and managing processes with the aim of simplifying concurrent programming. Though all concurrency is explicit in Erlang, processes communicate using<space/><link><target>message passing</target></link><space/>instead of shared variables, which removes the need for explicit<space/><link><target>lock (computer science)</target><part>locks</part></link><space/>(a locking scheme is still used internally by the<space/><link><target>Virtual machine</target><part>VM</part></link><extension extension_name='ref'><template><target>cite web</target><arg name="title">Lock-free message queue</arg><arg name="url">http://erlang.2086793.n4.nabble.com/Lock-free-message-queue-td2550221.html</arg><arg name="accessdate">23 December 2013</arg></template></extension>).</paragraph><paragraph>The first version was developed by Joe Armstrong, Robert Virding and Mike Williams in 1986.<extension extension_name='ref' name="hopl">Joe Armstrong, &quot;History of Erlang&quot;, in<space/><italics>HOPL III: Proceedings of the third ACM SIGPLAN conference on History of programming languages</italics>, 2007, ISBN 978-1-59593-766-7</extension><space/>It was originally a<space/><link><target>proprietary programming language</target><part>proprietary language</part></link><space/>within Ericsson, but was released as<space/><link><target>open source</target></link><space/>in 1998. Erlang, along with<space/><link><target>Open Telecom Platform</target><part>OTP</part></link>, a collection of middleware and libraries in Erlang, are now supported and maintained by the<space/><link><target>Open Telecom Platform</target><part>OTP product unit</part></link><space/>at<space/><link><target>Ericsson</target></link><space/>and widely referred to as Erlang/OTP.</paragraph><heading level='2'>History</heading><paragraph>The name &quot;Erlang&quot;, attributed to Bjarne Dcker, has been presumed by those working on the telephony switches (for whom the language was designed) to be a reference to Danish mathematician and engineer<space/><link><target>Agner Krarup Erlang</target></link><space/>or the ubiquitous use of the<space/><link><target>Erlang (unit)</target><part>unit named for him</part></link>, and (initially at least) simultaneously as a<space/><link><target>syllabic abbreviation</target></link><space/>of &quot;Ericsson Language&quot;.<extension extension_name='ref' name="hopl"></extension><extension extension_name='ref'><link type='external' href='http://www.erlang.org/pipermail/erlang-questions/1999-February/000098.html'>Erlang, the mathematician?</link></extension></paragraph><paragraph>Erlang was designed with the aim of improving the development of telephony applications. The initial version of Erlang was implemented in<space/><link><target>Prolog</target></link><space/>and was influenced by the programming language<space/><link><target>PLEX (programming language)</target><part>PLEX</part></link><space/>used in earlier Ericsson exchanges. According to Armstrong, the language went from lab product to real applications following the collapse of the next-generation<space/><link><target>AXE telephone exchange</target><part>AXE exchange</part></link><space/>named<space/><italics>AXE-N</italics><space/>in 1995. As a result, Erlang was chosen for the next<space/><link><target>Asynchronous Transfer Mode</target><part>ATM exchange</part></link><space/><italics>AXD</italics>.<extension extension_name='ref' name="hopl"></extension></paragraph><paragraph>In 1998 Ericsson announced the AXD301 switch, containing over a million lines of Erlang and reported to achieve a<space/><link><target>high availability</target></link><space/>of<space/><link><target>nines (engineering)</target><part>nine &quot;9&quot;s</part></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://ll2.ai.mit.edu/talks/armstrong.pdf</arg><arg name="title">Concurrency Oriented Programming in Erlang</arg><arg name="date">2 November 2002</arg></template></extension><space/>Shortly thereafter, Ericsson Radio Systems banned the in-house use of Erlang for new products, citing a preference for non-proprietary languages. The ban caused Armstrong and others to leave Ericsson.<extension extension_name='ref' name="questions"></extension><space/>The implementation was open-sourced at the end of the year.<extension extension_name='ref' name="hopl"></extension><space/>Ericsson eventually lifted the ban; it re-hired Armstrong in 2004.<extension extension_name='ref' name="questions"><template><target>cite web</target><arg name="url">http://erlang.org/pipermail/erlang-questions/2006-July/021368.html</arg><arg name="title">question about Erlang's future</arg><arg name="date">6 July 2010</arg></template></extension></paragraph><paragraph>In 2006, native<space/><link><target>symmetric multiprocessing</target></link><space/>support was added to the runtime system and<space/><link><target>virtual machine</target></link>.<extension extension_name='ref' name="hopl"></extension></paragraph><paragraph>Erlang has now been adopted by companies worldwide, including<space/><link><target>Nortel</target></link><space/>and<space/><link><target>T-Mobile</target></link>. Erlang is used in<space/><link><target>Ericsson</target></link>s support nodes, and in<space/><link><target>GPRS</target></link>,<space/><link><target>3G</target></link><space/>and<space/><link><target>LTE (telecommunication)</target><part>LTE</part></link><space/>mobile networks worldwide.<extension extension_name='ref'><link type='external' href='http://www.ericsson.com/news/141204-inside-erlang-creator-joe-armstrong-tells-his-story_244099435_c'>Inside Erlang creator Joe Armstrong tells his story</link></extension></paragraph><paragraph>As Tim Bray, director of Web Technologies at<space/><link><target>Sun Microsystems</target></link>, expressed in his keynote at<space/><link><target>O'Reilly Open Source Convention</target><part>OSCON</part></link><space/>in July 2008:<template><target>quote</target><arg>If somebody came to me and wanted to pay me a lot of money to build a large scale message handling system that really had to be up all the time, could never afford to go down for years at a time, I would unhesitatingly choose Erlang to build it in.</arg></template></paragraph><heading level='2'>Functional programming examples</heading><paragraph>An Erlang function that uses recursion to count to ten:<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://brikis98.blogspot.se/2012/11/seven-languages-in-seven-weeks-erlang.html</arg><arg name="title">Redirecting...</arg><arg name="publisher"></arg><arg name="accessdate">2 May 2015</arg></template></extension><space/><extension extension_name='source' lang="erlang"><paragraph>-module(count_to_ten).-export([count_to_ten/0]).</paragraph><preblock><preline></preline></preblock><paragraph>count_to_ten() -&gt; do_count(0).</paragraph><preblock><preline></preline></preblock><paragraph>do_count(10) -&gt; 10;do_count(Value) -&gt; do_count(Value + 1).</paragraph></extension>A<space/><link><target>factorial</target></link><space/>algorithm implemented in Erlang:<extension extension_name='source' lang="erlang"><paragraph>-module(fact). % This is the file 'fact.erl', the module and the filename must match-export([fac/1]). % This exports the function 'fac' of arity 1 (1 parameter, no type, no name)</paragraph><paragraph>fac(0) -&gt; 1; % If 0, then return 1, otherwise (note the semicolon ; meaning 'else')fac(N) when N &gt; 0, is_integer(N) -&gt; N * fac(N-1).% Recursively determine, then return the result% (note the period . meaning 'endif' or 'function end')%% This function will crash if anything other than a positive integer is given.%% It illustrates the Let it crash philosophy of Erlang.</paragraph></extension></paragraph><paragraph>A<space/><link><target>Fibonacci number</target><part>Fibonacci</part></link><space/>algorithm implemented in Erlang (Note: This is only for demonstrating the Erlang<space/><link><target>Syntax (programming languages)</target><part>syntax</part></link>. This algorithm is rather slow.<extension extension_name='ref'>http://www.aquabu.com/2008/02/16/fibonacci-sequence-recursion-in-erlang/</extension>):<extension extension_name='source' lang="erlang"><paragraph>-module(fib). % This is the file 'fib.erl', the module and the filename must match-export([fib/1]). % This exports the function 'fib' of arity 1</paragraph><paragraph>fib(1) -&gt; 1; % If 1, then return 1, otherwise (note the semicolon ; meaning 'else')fib(2) -&gt; 1; % If 2, then return 1, otherwisefib(N) -&gt; fib(N - 2) + fib(N - 1).</paragraph></extension></paragraph><paragraph>A sorting algorithm (similar to<space/><link><target>quicksort</target></link>):<extension extension_name='source' lang="erlang"><paragraph>%% qsort:qsort(List)%% Sort a list of items-module(qsort). % This is the file 'qsort.erl'-export([qsort/1]). % A function 'qsort' with 1 parameter is exported (no type, no name)</paragraph><paragraph>qsort([]) -&gt; []; % If the list [] is empty, return an empty list (nothing to sort)qsort([Pivot|Rest]) -&gt;</paragraph><preblock><preline><space/><space/><space/>% Compose recursively a list with 'Front' for all elements that should be before 'Pivot'</preline><preline><space/><space/><space/>% then 'Pivot' then 'Back' for all elements that should be after 'Pivot'</preline><preline><space/><space/><space/>qsort([Front || Front &lt;- Rest, Front &lt; Pivot])</preline><preline><space/><space/><space/>++ [Pivot] ++</preline><preline><space/><space/><space/>qsort([Back || Back &lt;- Rest, Back &gt;= Pivot]).</preline></preblock></extension></paragraph><paragraph>The above example recursively invokes the function<space/><xhtml:code>qsort</xhtml:code><space/>until nothing remains to be sorted. The expression &lt;code&gt;[Front || Front &lt;- Rest, Front &lt; Pivot]&lt;/code&gt; is a<space/><link><target>list comprehension</target></link>, meaning Construct a list of elements<space/><xhtml:code>Front</xhtml:code><space/>such that<space/><xhtml:code>Front</xhtml:code><space/>is a member of<space/><xhtml:code>Rest</xhtml:code>, and<space/><xhtml:code>Front</xhtml:code><space/>is less than<space/><xhtml:code>Pivot</xhtml:code>.<space/><xhtml:code>++</xhtml:code><space/>is the list concatenation operator.</paragraph><paragraph>A comparison function can be used for more complicated structures for the sake of readability.</paragraph><paragraph>The following code would sort lists according to length:<extension extension_name='source' lang="erlang"><paragraph>% This is file 'listsort.erl' (the compiler is made this way)-module(listsort).% Export 'by_length' with 1 parameter (don't care about the type and name)-export([by_length/1]).</paragraph><paragraph>by_length(Lists) -&gt; % Use 'qsort/2' and provides an anonymous function as a parameter</paragraph><preblock><preline><space/><space/>qsort(Lists, fun(A,B) -&gt; length(A) &lt; length(B) end).</preline></preblock><paragraph>qsort([], _)-&gt; []; % If list is empty, return an empty list (ignore the second parameter)qsort([Pivot|Rest], Smaller) -&gt;</paragraph><preblock><preline><space/><space/><space/>% Partition list with 'Smaller' elements in front of 'Pivot' and not-'Smaller' elements</preline><preline><space/><space/><space/>% after 'Pivot' and sort the sublists.</preline><preline><space/><space/><space/>qsort([X || X &lt;- Rest, Smaller(X,Pivot)], Smaller)</preline><preline><space/><space/><space/>++ [Pivot] ++</preline><preline><space/><space/><space/>qsort([Y || Y &lt;- Rest, not(Smaller(Y, Pivot))], Smaller).</preline></preblock></extension></paragraph><paragraph>Here again, a<space/><xhtml:code>Pivot</xhtml:code><space/>is taken from the first parameter given to<space/><xhtml:code>qsort()</xhtml:code><space/>and the rest of<space/><xhtml:code>Lists</xhtml:code><space/>is named<space/><xhtml:code>Rest</xhtml:code>. Note that the expression</paragraph><paragraph><extension extension_name='source' lang="erlang">[X || X &lt;- Rest, Smaller(X,Pivot)]</extension></paragraph><paragraph>is no different in form from</paragraph><paragraph>&lt;source lang=&quot;erlang&quot;&gt;[Front || Front &lt;- Rest, Front &lt; Pivot]&lt;/source&gt;</paragraph><paragraph>(in the previous example) except for the use of a comparison function in the last part, saying Construct a list of elements<space/><xhtml:code>X</xhtml:code><space/>such that<space/><xhtml:code>X</xhtml:code><space/>is a member of<space/><xhtml:code>Rest</xhtml:code>, and<space/><xhtml:code>Smaller</xhtml:code><space/>is true&quot;, with<space/><xhtml:code>Smaller</xhtml:code><space/>being defined earlier as</paragraph><paragraph><extension extension_name='source' lang="erlang">fun(A,B) -&gt; length(A) &lt; length(B) end</extension></paragraph><paragraph>Note also that the<space/><link><target>anonymous function</target></link><space/>is named<space/><xhtml:code>Smaller</xhtml:code><space/>in the parameter list of the second definition of<space/><xhtml:code>qsort</xhtml:code><space/>so that it can be referenced by that name within that function. It is not named in the first definition of<space/><xhtml:code>qsort</xhtml:code>, which deals with the base case of an empty list and thus has no need of this function, let alone a name for it.</paragraph><heading level='2'>Data types</heading><paragraph>Erlang has eight primitive<space/><link><target>data type</target><trail>s</trail></link>:</paragraph><list type='def'><listitem><defkey>Integers</defkey><defval><space/>Integers are written as sequences of decimal digits, for example, 12, 12375 and -23427 are integers. Integer arithmetic is exact and only limited by available memory on the machine. (This is called<space/><link><target>arbitrary-precision arithmetic</target></link>.)</defval></listitem><listitem><defkey>Atoms</defkey><defval><space/>Atoms are used within a program to denote distinguished values. They are written as strings of consecutive alphanumeric characters, the first character being lowercase. Atoms can contain any character if they are enclosed within single quotes and an escape convention exists which allows any character to be used within an atom.</defval></listitem><listitem><defkey>Floats</defkey><defval><space/>Floating point numbers use the<space/><link><target>binary64</target><part>IEEE 754 64-bit representation</part></link>.</defval></listitem><listitem><defkey>References</defkey><defval><space/>References are globally unique symbols whose only property is that they can be compared for equality. They are created by evaluating the Erlang primitive<space/><xhtml:code>make_ref()</xhtml:code>.</defval></listitem><listitem><defkey>Binaries</defkey><defval><space/>A binary is a sequence of bytes. Binaries provide a space-efficient way of storing binary data. Erlang primitives exist for composing and decomposing binaries and for efficient input/output of binaries.</defval></listitem><listitem><defkey>Pids</defkey><defval><space/>Pid is short for<space/><italics>process identifier</italics>a Pid is created by the Erlang primitive<space/><xhtml:code>spawn(...)</xhtml:code><space/>Pids are references to Erlang processes.</defval></listitem><listitem><defkey>Ports</defkey><defval><space/>Ports are used to communicate with the external world. Ports are created with the built-in function<space/><xhtml:code>open_port</xhtml:code>. Messages can be sent to and received from ports, but these messages must obey the so-called &quot;port protocol.&quot;</defval></listitem><listitem><defkey>Funs</defkey><defval><space/>Funs are function closures. Funs are created by expressions of the form:<space/><xhtml:code>fun(...) -&gt; ... end</xhtml:code>.</defval></listitem></list><paragraph>And two compound data types:</paragraph><list type='def'><listitem><defkey>Tuples</defkey><defval><space/>Tuples are containers for a fixed number of Erlang data types. The syntax<space/><xhtml:code>{D1,D2,...,Dn}</xhtml:code><space/>denotes a tuple whose arguments are<space/><xhtml:code>D1, D2, ... Dn.</xhtml:code><space/>The arguments can be primitive data types or compound data types. Any element of a tuple can be accessed in constant time.</defval></listitem><listitem><defkey>Lists</defkey><defval><space/>Lists are containers for a variable number of Erlang data types. The syntax<space/><xhtml:code>[Dh|Dt]</xhtml:code><space/>denotes a list whose first element is<space/><xhtml:code>Dh</xhtml:code>, and whose remaining elements are the list<space/><xhtml:code>Dt</xhtml:code>. The syntax<space/><xhtml:code>[]</xhtml:code><space/>denotes an empty list. The syntax<space/><xhtml:code>[D1,D2,..,Dn]</xhtml:code><space/>is short for<space/><xhtml:code>[D1|[D2|..|[Dn|[]]]]</xhtml:code>. The first element of a list can be accessed in constant time. The first element of a list is called the<space/><italics>head</italics><space/>of the list. The remainder of a list when its head has been removed is called the<space/><italics>tail</italics><space/>of the list.</defval></listitem></list><paragraph>Two forms of<space/><link><target>syntactic sugar</target></link><space/>are provided:</paragraph><list type='def'><listitem><defkey>Strings</defkey><defval><space/>Strings are written as doubly quoted lists of characters. This is syntactic sugar for a list of the integer<space/><link><target>ASCII</target></link><space/>codes for the characters in the string. Thus, for example, the string &quot;cat&quot; is shorthand for<space/><xhtml:code>[99,97,116]</xhtml:code>. It has partial support for Unicode strings.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://erlang.org/doc/apps/stdlib/unicode_usage.html</arg><arg name="title">Erlang -- Using Unicode in Erlang</arg><arg name="publisher"></arg><arg name="accessdate">2 May 2015</arg></template></extension></defval></listitem><listitem><defkey>Records</defkey><defval><space/>Records provide a convenient way for associating a tag with each of the elements in a tuple. This allows one to refer to an element of a tuple by name and not by position. A pre-compiler takes the record definition and replaces it with the appropriate tuple reference.</defval></listitem></list><paragraph>Erlang has no method of defining classes, although there are external libraries available.<extension extension_name='ref'><template><target>cite web</target><arg name="url">https://code.google.com/p/ect/</arg><arg name="title">ect - Erlang Class Transformation - add object-oriented programming to Erlang - Google Project Hosting</arg><arg name="publisher"></arg><arg name="accessdate">2 May 2015</arg></template></extension></paragraph><heading level='2'>Concurrency and distribution orientation</heading><paragraph>Erlang's main strength is support for<space/><link><target>concurrency (computer science)</target><part>concurrency</part></link>. It has a small but powerful set of primitives to create processes and communicate among them. Erlang is conceptually similar to the<space/><link><target>occam (programming language)</target><part>occam programming language</part></link>, though it recasts the ideas of<space/><link><target>communicating sequential processes</target></link><space/>(CSP) in a functional framework and uses asynchronous message passing.<extension extension_name='ref'><template><target>Cite journal</target><arg name="title">Erlang
<space/></arg><arg name="journal">[[Communications of the ACM]]
<space/></arg><arg name="volume">53<space/></arg><arg name="issue">9
<space/></arg><arg name="date">September 2010 
<space/></arg><arg name="pages">68–75
<space/></arg><arg name="doi">10.1145/1810891.1810910
<space/></arg><arg name="author">Joe Armstrong 
<space/></arg><arg name="authorlink">Joe Armstrong (programming)
<space/></arg><arg name="quote">Erlang is conceptually similar to the occam programming language, though it recasts the ideas of CSP in a functional framework and uses asynchronous message passing.
</arg></template></extension><space/>Processes are the primary means to structure an Erlang application. They are neither operating system<space/><link><target>process (computing)</target><part>processes</part></link><space/>nor operating system<space/><link><target>thread (computer science)</target><part>threads</part></link>, but lightweight processes. Like operating system processes (but unlike operating system threads), they share no state with each other. The estimated minimal overhead for each is 300<space/><link><target>Word (data type)</target><part>words</part></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Erlang Efficiency Guide - Processes</arg><arg name="url">http://www.erlang.org/doc/efficiency_guide/processes.html</arg></template></extension><space/>Thus, many processes can be created without degrading performance. A benchmark with 20 million processes has been successfully performed.<extension extension_name='ref'><template><target>cite web</target><arg name="author">Ulf Wiger</arg><arg name="title">Stress-testing erlang</arg><arg name="url">http://groups.google.com/group/comp.lang.functional/msg/33b7a62afb727a4f?dmode</arg><arg name="work">comp.lang.functional.misc</arg><arg name="accessdate">25 August 2006</arg><arg name="date">14 November 2005</arg></template></extension><space/>Erlang has supported<space/><link><target>symmetric multiprocessing</target></link><space/>since release R11B of May 2006.</paragraph><paragraph><link><target>Inter-process communication</target></link><space/>works via a<space/><link><target>Shared nothing architecture</target><part>shared-nothing</part></link><space/><link><target>asynchronous method dispatch</target><part>asynchronous</part></link><space/><link><target>message passing</target></link><space/>system: every process has a &quot;mailbox&quot;, a<space/><link><target>queue (data structure)</target><part>queue</part></link><space/>of messages that have been sent by other processes and not yet consumed. A process uses the<space/><xhtml:code>receive</xhtml:code><space/>primitive to retrieve messages that match desired patterns. A message-handling routine tests messages in turn against each pattern, until one of them matches. When the message is consumed and removed from the mailbox the process resumes execution. A message may comprise any Erlang structure, including primitives (integers, floats, characters, atoms), tuples, lists, and functions.</paragraph><paragraph>The code example below shows the built-in support for distributed processes:<extension extension_name='source' lang="erlang"><preblock><preline>% Create a process and invoke the function web:start_server(Port, MaxConnections)</preline><preline>ServerProcess = spawn(web, start_server, [Port, MaxConnections]),</preline></preblock><preblock><preline>% Create a remote process and invoke the function</preline><preline>% web:start_server(Port, MaxConnections) on machine RemoteNode</preline><preline>RemoteProcess = spawn(RemoteNode, web, start_server, [Port, MaxConnections]),</preline></preblock><preblock><preline>% Send a message to ServerProcess (asynchronously). The message consists of a tuple</preline><preline>% with the atom &quot;pause&quot; and the number &quot;10&quot;.</preline><preline>ServerProcess ! {pause, 10},</preline></preblock><preblock><preline>% Receive messages sent to this process</preline><preline>receive</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/>a_message -&gt; do_something;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/>{data, DataContent} -&gt; handle(DataContent);</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/>{hello, Text} -&gt; io:format(&quot;Got hello message: ~s&quot;, [Text]);</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/>{goodbye, Text} -&gt; io:format(&quot;Got goodbye message: ~s&quot;, [Text])</preline><preline>end.</preline></preblock></extension></paragraph><paragraph>As the example shows, processes may be created on remote nodes, and communication with them is transparent in the sense that communication with remote processes works exactly as communication with local processes.</paragraph><paragraph>Concurrency supports the primary method of error-handling in Erlang. When a process crashes, it neatly exits and sends a message to the controlling process which can take action.<extension extension_name='ref'><template><target>cite web</target><arg name="author">Joe Armstrong</arg><arg name="title">Erlang robustness</arg><arg name="url">http://www.erlang.org/doc/getting_started/robustness.html</arg><arg name="accessdate">15 July 2010</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="title">Erlang Supervision principles</arg><arg name="url">http://www.erlang.org/doc/design_principles/sup_princ.html</arg><arg name="accessdate">15 July 2010</arg></template></extension></paragraph><heading level='2'>Implementation</heading><paragraph>The Ericsson Erlang implementation loads virtual machine<space/><link><target>bytecode</target></link><space/>which is converted to<space/><link><target>threaded code</target></link><space/>at load time. It also includes a native code compiler on most platforms, developed by the High Performance Erlang Project (HiPE) at<space/><link><target>Uppsala University</target></link>. Since October 2001 the HiPE system is fully integrated in Ericsson's Open Source Erlang/OTP system.<extension extension_name='ref'><template><target>cite web</target><arg name="title">High Performance Erlang</arg><arg name="url">http://www.it.uu.se/research/group/hipe/</arg><arg name="accessdate">26 March 2011</arg></template></extension><space/>It also supports interpreting, directly from source code via<space/><link><target>abstract syntax tree</target></link>, via script as of R11B-5 release of Erlang.</paragraph><heading level='2'>Hot code loading and modules</heading><paragraph>Erlang supports language-level<space/><link><target>Dynamic Software Updating</target></link>. To implement this, code is loaded and managed as &quot;module&quot; units; the module is a<space/><link><target>compilation unit</target></link>. The system can keep two versions of a module in memory at the same time, and processes can concurrently run code from each. The versions are referred to as the &quot;new&quot; and the &quot;old&quot; version. A process will not move into the new version until it makes an external call to its module.</paragraph><paragraph>An example of the mechanism of hot code loading:<extension extension_name='source' lang="erlang"><preblock><preline><space/>%% A process whose only job is to keep a counter.</preline><preline><space/>%% First version</preline><preline><space/>-module(counter).</preline><preline><space/>-export([start/0, codeswitch/1]).</preline></preblock><preblock><preline><space/>start() -&gt; loop(0).</preline></preblock><preblock><preline><space/>loop(Sum) -&gt;</preline><preline><space/><space/><space/>receive</preline><preline><space/><space/><space/><space/><space/><space/>{increment, Count} -&gt;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>loop(Sum+Count);</preline><preline><space/><space/><space/><space/><space/><space/>{counter, Pid} -&gt;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>Pid ! {counter, Sum},</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>loop(Sum);</preline><preline><space/><space/><space/><space/><space/><space/>code_switch -&gt;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>?MODULE:codeswitch(Sum)</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>% Force the use of 'codeswitch/1' from the latest MODULE version</preline><preline><space/><space/><space/>end.</preline></preblock><preblock><preline><space/>codeswitch(Sum) -&gt; loop(Sum).</preline></preblock></extension>For the second version, we add the possibility to reset the count to zero.<extension extension_name='source' lang="erlang"><preblock><preline><space/>%% Second version</preline><preline><space/>-module(counter).</preline><preline><space/>-export([start/0, codeswitch/1]).</preline></preblock><preblock><preline><space/>start() -&gt; loop(0).</preline></preblock><preblock><preline><space/>loop(Sum) -&gt;</preline><preline><space/><space/><space/>receive</preline><preline><space/><space/><space/><space/><space/><space/>{increment, Count} -&gt;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>loop(Sum+Count);</preline><preline><space/><space/><space/><space/><space/><space/>reset -&gt;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>loop(0);</preline><preline><space/><space/><space/><space/><space/><space/>{counter, Pid} -&gt;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>Pid ! {counter, Sum},</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>loop(Sum);</preline><preline><space/><space/><space/><space/><space/><space/>code_switch -&gt;</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>?MODULE:codeswitch(Sum)</preline><preline><space/><space/><space/>end.</preline></preblock><preblock><preline><space/>codeswitch(Sum) -&gt; loop(Sum).</preline></preblock></extension>Only when receiving a message consisting of the atom 'code_switch' will the loop execute an external call to codeswitch/1 (<xhtml:code>?MODULE</xhtml:code><space/>is a preprocessor macro for the current module). If there is a new version of the &quot;counter&quot; module in memory, then its codeswitch/1 function will be called. The practice of having a specific entry-point into a new version allows the programmer to transform state to what is required in the newer version. In our example we keep the state as an integer.</paragraph><paragraph>In practice, systems are built up using design principles from the Open Telecom Platform which leads to more code upgradable designs. Successful hot code loading is a tricky subject; Code needs to be written to make use of Erlang's facilities.</paragraph><heading level='2'>Distribution</heading><paragraph>In 1998, Ericsson released Erlang as<space/><link><target>open source</target></link><space/>to ensure its independence from a single vendor and to increase awareness of the language. Erlang, together with libraries and the real-time distributed database<space/><link><target>Mnesia</target></link>, forms the<space/><link><target>Open Telecom Platform</target></link><space/>(OTP) collection of libraries. Ericsson and a few other companies offer commercial support for Erlang.</paragraph><paragraph>Since the open source release, Erlang has been used by several firms worldwide, including<space/><link><target>Nortel Networks</target><part>Nortel</part></link><space/>and<space/><link><target>T-Mobile</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Who uses Erlang for product development?</arg><arg name="work">Frequently asked questions about Erlang</arg><arg name="url">http://www.erlang.org/faq/faq.html#AEN50</arg><arg name="accessdate">16 July 2007</arg><arg name="quote">''The largest user of Erlang is (surprise!) Ericsson. Ericsson use it to write software used in telecommunications systems. Many dozens of projects have used it, a particularly large one is the extremely scalable AXD301 ATM switch.'' Other commercial users listed as part of the FAQ include: Nortel, Deutsche Flugsicherung (the German national [[air traffic control]] organisation), and T-Mobile.</arg></template></extension><space/>Although Erlang was designed to fill a niche and has remained an obscure language for most of its existence, its popularity is growing due to demand for concurrent services.<extension extension_name='ref'><template><target>cite web</target><arg name="title">Programming Erlang</arg><arg name="url">http://www.ddj.com/linux-open-source/201001928?cid</arg><arg name="accessdate">13 December 2008</arg><arg name="quote">Virtually all language use shared state concurrency. This is very difficult and leads to terrible problems when you handle failure and scale up the system...Some pretty fast-moving startups in the financial world have latched onto Erlang; for example, the Swedish www.kreditor.se.</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="title">Erlang, the next Java</arg><arg name="url">http://www.cincomsmalltalk.com/userblogs/ralph/blogView?showComments</arg><arg name="accessdate">8 October 2008</arg><arg name="quote">I do not believe that other languages can catch up with Erlang anytime soon. It will be easy for them to add language features to be like Erlang. It will take a long time for them to build such a high-quality VM and the mature libraries for concurrency and reliability. So, Erlang is poised for success. If you want to build a multicore application in the next few years, you should look at Erlang.</arg></template></extension>Erlang has found some use in fielding<space/><link><target>MMORPG</target></link><space/>servers.<extension extension_name='ref'><template><target>cite web</target><arg name="last"><space/>Clarke
<space/></arg><arg name="first"><space/>Gavin
<space/></arg><arg name="title"><space/>Battlestar Galactica vets needed for online roleplay
<space/></arg><arg name="work"><space/>Music and Media
<space/></arg><arg name="publisher"><space/>[[The Reg]]
<space/></arg><arg name="date"><space/>5 Feb 2011
<space/></arg><arg name="url"><space/>http://www.theregister.co.uk/2011/02/05/battlestar_galactica_mmp/
<space/></arg><arg name="doi">
<space/></arg><arg name="accessdate"><space/>8 February 2011<space/></arg></template></extension></paragraph><heading level='3'>Projects using Erlang</heading><paragraph>Projects using Erlang include:</paragraph><list type='bullet'><listitem><link><target>Solution stack</target><trail>s</trail></link><list type='bullet'><listitem><link><target>LYME (software bundle)</target></link>, to serve<space/><link><target>dynamic web page</target><trail>s</trail></link></listitem><listitem><link><target>LYCE (software bundle)</target></link>, to serve<space/><link><target>dynamic web page</target><trail>s</trail></link></listitem></list></listitem></list><list type='bullet'><listitem>Web servers:<list type='bullet'><listitem><link><target>Yaws (web server)</target><part>Yaws</part></link><space/>web server</listitem></list></listitem></list><list type='bullet'><listitem>Database (distributed):<list type='bullet'><listitem><link><target>Cloudant</target></link>, a database service based on the company's fork of CouchDB,<space/><link><target>BigCouch</target></link></listitem><listitem><link><target>CouchDB</target></link>, a document-based database that uses<space/><link><target>MapReduce</target></link></listitem><listitem><link><target>Couchbase Server</target></link><space/>(ne Membase), database management system optimized for storing data behind interactive web applications<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://blog.couchbase.com/why-membase-uses-erlang</arg><arg name="title">Why Membase Uses Erlang</arg><arg name="publisher"></arg><arg name="accessdate">2 May 2015</arg></template></extension></listitem><listitem><link><target>Mnesia</target></link>, a distributed database</listitem><listitem><link><target>Riak</target></link>, a distributed database</listitem><listitem><link><target>SimpleDB</target></link>, a distributed database that is part of<space/><link><target>Amazon Web Services</target></link><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.satine.org/archives/2007/12/13/amazon-simpledb/</arg><arg name="title">satine.org</arg><arg name="work">satine.org</arg><arg name="accessdate">2 May 2015</arg></template></extension></listitem></list></listitem></list><list type='bullet'><listitem>Chat:<list type='bullet'><listitem><link><target>ejabberd</target></link>, an<space/><link><target>Extensible Messaging and Presence Protocol</target></link><space/>(XMPP) instant messaging server<list type='bullet'><listitem><link><target>Facebook Chat</target></link><space/>system was running on ejabberd based servers<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.facebook.com/note.php?note_id</arg><arg name="title">Thrift: (slightly more than) one year later<space/></arg><arg name="publisher">Facebook.com<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-07-10</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://developers.facebook.com/news.php?blog</arg><arg name="title">Using Facebook Chat via Jabber- Facebook Developers<space/></arg><arg name="publisher">Developers.facebook.com<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-07-10</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf<space/></arg><arg name="title">Erlang at Facebook - Eugene Letuchy<space/></arg><arg name="publisher">Erlang Factory<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2014-09-18</arg></template></extension></listitem><listitem><link><target>Tuenti</target></link><space/>chat is based on ejabberd<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://blog.tuenti.com/dev/chat-in-the-making/<space/></arg><arg name="title">Chat in the making &#124; Tuenti Corporate<space/></arg><arg name="language">es<space/></arg><arg name="publisher">Blog.tuenti.com<space/></arg><arg name="date">2010-03-17<space/></arg><arg name="accessdate">2013-07-10</arg></template></extension></listitem></list></listitem></list></listitem></list><list type='bullet'><listitem>CMS:<list type='bullet'><listitem><link><target>Zotonic</target></link>, a content management system and web framework</listitem></list></listitem></list><list type='bullet'><listitem><link><target>Configuration management</target></link>:<list type='bullet'><listitem><link><target>Chef (software)</target></link>, for which the core API server, originally written in<space/><link><target>Ruby (programming language)</target><part>Ruby</part></link>, was completely re-written in version 11 in Erlang<extension extension_name='ref' name="chef11"><template><target>cite web</target><arg name="url">http://www.opscode.com/blog/2013/02/04/chef-11-released/</arg><arg name="title">Chef 11 Released!</arg><arg name="publisher">[[Opscode]]</arg><arg name="date">4 February 2013</arg></template></extension></listitem></list></listitem></list><list type='bullet'><listitem>Queue:<list type='bullet'><listitem><link><target>RabbitMQ</target></link>, an implementation of<space/><link><target>Advanced Message Queuing Protocol</target></link><space/>(AMQP)</listitem></list></listitem></list><list type='bullet'><listitem>Desktop:<list type='bullet'><listitem><link><target>Wings 3D</target></link>, a 3D subdivision modeler, used to model and texture polygon meshes</listitem></list></listitem></list><list type='bullet'><listitem>Tools<list type='bullet'><listitem><link><target>GitHub</target></link>, a web-based hosting service for software development projects that use the<space/><link><target>Git (software)</target><part>Git</part></link><space/>version control system. Erlang is used for RPC proxies to ruby processes.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.infoq.com/interviews/erlang-and-github<space/></arg><arg name="title">The way GitHub helped Erlang and the way Erlang helped Github<space/></arg><arg name="publisher">Infoq.com<space/></arg><arg name="date">2010-08-16<space/></arg><arg name="accessdate">2013-07-10</arg></template></extension></listitem></list></listitem></list><list type='bullet'><listitem>Mobile:<list type='bullet'><listitem><link><target>WhatsApp</target></link>, mobile messenger<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://blog.whatsapp.com/index.php/2012/01/1-million-is-so-2011/<space/></arg><arg name="title">1 million is so 2011<space/></arg><arg name="publisher">Blog.whatsapp.com<space/></arg><arg name="date">2012-01-06<space/></arg><arg name="accessdate">2013-07-10</arg></template></extension></listitem><listitem><link><target>Whisper (app)</target><part>Whisper</part></link>, an anonymous social network<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://inaka.net/case-studies/case-studies-whisper.html</arg><arg name="title">inaka / case-studies</arg><arg name="author">inaka</arg><arg name="publisher"></arg><arg name="accessdate">2 May 2015</arg></template></extension></listitem></list></listitem></list><list type='bullet'><listitem>Enterprise:<list type='bullet'><listitem><link><target>Issuu</target></link>, an online digital publisher<extension extension_name='ref'><template><target>cite web</target><arg name="author">Af Tania Andersen Onsdag, 26. august 2009 - 8:10<space/></arg><arg name="url">http://www.version2.dk/artikel/saadan-fik-dansk-succes-website-held-med-erlang-og-amazon-11898<space/></arg><arg name="title">Sådan fik dansk succes-website held med Erlang og Amazon &#124; Version2<space/></arg><arg name="language">da<space/></arg><arg name="publisher">Version2.dk<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-07-10</arg></template></extension></listitem><listitem><link><target>Twitterfall</target></link>, a service to view trends and patterns from<space/><link><target>Twitter</target></link><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://twitter.com/jalada/status/1206606823<space/></arg><arg name="title">Twitter / jalada: Twitterfall is now powered<space/></arg><arg name="publisher">Twitter.com<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-07-10</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://twitter.com/jalada/statuses/1234217518<space/></arg><arg name="title">Twitter / jalada: @TacticalGrace Sure does. The<space/></arg><arg name="publisher">Twitter.com<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-07-10</arg></template></extension></listitem></list></listitem></list><list type='bullet'><listitem>Trading<list type='bullet'><listitem><link><target>Goldman Sachs</target></link>,<space/><link><target>high-frequency trading</target></link><space/>programs</listitem><listitem><link><target>Smarkets</target></link>, sports<space/><link><target>betting exchange</target></link></listitem></list></listitem></list><list type='bullet'><listitem>Gaming<list type='bullet'><listitem><link><target>Vendetta Online</target></link><space/>Naos game server<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.guildsoftware.com/naos/inbrief.html<space/></arg><arg name="title">The NAOS Engine - In Brief<space/></arg><arg name="publisher">Guildsoftware.com<space/></arg><arg name="date"><space/></arg><arg name="accessdate">2013-07-10</arg></template></extension></listitem><listitem><link><target>Battlestar Galactica Online</target></link><space/>game server by<space/><link><target>Bigpoint Games</target><part>Bigpoint</part></link></listitem><listitem><link><target>Call of Duty</target></link><space/>server core<extension extension_name='ref'><template><target>cite web</target><arg name="title">Erlang and First-Person Shooters<space/></arg><arg name="url">http://www.erlang-factory.com/upload/presentations/395/ErlangandFirst-PersonShooters.pdf<space/></arg><arg name="accessdate">9 August 2012<space/></arg><arg name="quote">Presentation about Erlang and [[Call of Duty]] from [[Demonware]].</arg></template></extension></listitem><listitem><link><target>League of Legends</target></link><space/>chat system by<space/><link><target>Riot Games</target></link>, based on ejabberd</listitem></list></listitem></list><heading level='3'>Companies using Erlang</heading><paragraph>Companies using Erlang in their production systems include:</paragraph><list type='bullet'><listitem><link><target>Amazon.com</target></link><space/>uses Erlang to implement<space/><link><target>Amazon SimpleDB</target><part>SimpleDB</part></link>, providing database services as a part of the Amazon Web Services offering.<extension extension_name='ref'><link type='external' href='http://radar.oreilly.com/2007/12/amazon-simpledb-is-built-on-er.html'>Amazon SimpleDB is built on Erlang - O'Reilly Radar</link></extension></listitem><listitem><link><target>Yahoo!</target></link><space/>uses it in its social bookmarking service, Delicious, which has more than 5 million users and 150 million bookmarked URLs.<template><target>citation needed</target><arg name="date">August 2012</arg></template></listitem><listitem><link><target>Facebook</target></link><space/>uses Erlang to power the backend of its chat service, handling more than 200 million active users.<extension extension_name='ref'><link type='external' href='http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf'>Erlang at Facebook - Eugene Letuchy, Apr 30, 2009</link></extension><space/>It can be observed in some of its<space/><link><target>HTTP response</target></link><space/>headers.</listitem><listitem><link><target>T-Mobile</target></link><space/>uses Erlang in its SMS and authentication systems.<template><target>citation needed</target><arg name="date">August 2012</arg></template></listitem><listitem><link><target>Motorola</target></link><space/>is using Erlang in call processing products in the public-safety industry.<template><target>citation needed</target><arg name="date">August 2012</arg></template></listitem><listitem><link><target>Ericsson</target></link><space/>uses Erlang in its support nodes, used in GPRS and 3G mobile networks worldwide.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.ericsson.com/ericsson/corpinfo/publications/review/2000_03/files/2000034.pdf<space/></arg><arg name="title">GPRS support notes<space/></arg><arg name="publisher">Ericsson.com<space/></arg><arg name="accessdate">2013-08-18</arg></template></extension></listitem><listitem><link><target>Linden Lab</target></link><space/>uses Erlang in its games.<extension extension_name='ref'><link type='external' href='https://erlangcentral.org/believe-in-erlang-in-games'>Believe in Erlang in Games - James Mayfield, Mario Izquierdo, Noah Gift</link></extension></listitem><listitem><link><target>WhatsApp</target></link><space/>uses Erlang to run messaging servers, achieving up to 2 million connected users per server.<extension extension_name='ref' name="whatsapp.blog.2012"><link type='external' href='http://blog.whatsapp.com/index.php/2012/01/1-million-is-so-2011/'>1 million is so 2011</link><space/>// WhatsApp blog, 2012-01-06: &quot; the last important piece of our infrastracture is Erlang&quot;</extension><extension extension_name='ref' name="whatsapp.at.SF.erlang.factory">Rick Reed (WhatsApp),<space/><link type='external' href='http://www.erlang-factory.com/upload/presentations/558/efsf2012-whatsapp-scaling.pdf'>Scaling to Millions of Simultaneous Connections</link><space/>- Erlang Factory SF, March 30, 2012</extension></listitem><listitem><link><target>Huffington Post</target></link><space/>uses Erlang for its commenting system on HuffPost Live<space/><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.huffingtonpost.com/adam-denenberg/huffington-post-engineeri_b_3818148.html<space/></arg><arg name="title">Huffington Post Engineering and Erlang<space/></arg><arg name="accessdate">2014-01-31</arg></template></extension></listitem><listitem><link><target>Rakuten</target></link><space/>uses Erlang for its distributed file system<space/><extension extension_name='ref'><template><target>cite web</target><arg name="url">https://erlangcentral.org/introducing-leofs-the-lion-of-storage-systems<space/></arg><arg name="title">Introducing LeoFS – the Lion of Storage Systems</arg></template></extension></listitem><listitem><link><target>Rackspace</target></link><space/>uses Erlang in some of its internal applications to manage networking devices<space/><extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.rackspace.com/blog/how-rackspace-is-using-erlang<space/></arg><arg name="title">How Rackspace Is Using Erlang</arg></template></extension></listitem><listitem><link><target>Klarna</target></link>, a Swedish e-commerce company, has been using Erlang to handle 9 million customers and 50 million transaction since 2005.</listitem><listitem><link><target>bet365</target></link>, the online gambling firm uses the language in production to drive its InPlay betting service, pushing live odds of sporting events to millions of customers in near real-time.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.techworld.com/apps/how-bet365-solved-reliability-scalability-by-swapping-java-for-erlang-3600737/<space/></arg><arg name="title">Online gambling firm bet365 has swapped Java for Erlang</arg></template></extension></listitem><listitem><link><target>AOL</target></link>'s digital advertising business is using Erlang for its real time bidding exchange systems.<extension extension_name='ref'>http://www.erlang-factory.com/static/upload/media/1434462592977425euc_2015_realtimebiddingwitherlang.pdf</extension></listitem><listitem>Machine Zone, a developer of<space/><link><target>Free-to-play</target></link><space/>games, uses Erlang in<space/><link><target>Game of War: Fire Age</target></link>.<extension extension_name='ref'><link type='external' href='http://www.erlang-factory.com/static/upload/media/143447066937592euc2015fredrik.pdf'>Erlang at Machine Zone - Fredrik Linder | Erlang User Conference 2015</link></extension></listitem><listitem><link><target>DNSimple</target></link>, a DNS provider that uses Erlang to run DNS servers in a globally distributed Anycast network, managing billions of requests per day.</listitem></list><heading level='2'>Variants</heading><list type='bullet'><listitem><link type='external' href='http://lfe.github.io/'>Lisp Flavoured Erlang (LFE)</link>: re-implementation with a<space/><link><target>LISP</target></link>-style syntax.</listitem><listitem><link><target>Elixir (programming language)</target><part>Elixir</part></link>: a functional, concurrent, general-purpose programming language that runs on the Erlang Virtual Machine (BEAM).</listitem></list><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg name="colwidth">30em</arg></template></paragraph><heading level='2'>Further reading</heading><paragraph><template><target>Refbegin</target></template></paragraph><list type='bullet'><listitem><template><target>Cite journal</target><arg name="author">Joe Armstrong</arg><arg name="title">Making reliable distributed systems in the presence of software errors</arg><arg name="url">http://www.sics.se/~joe/thesis/armstrong_thesis_2003.pdf</arg><arg name="version">Ph.D. Dissertation</arg><arg name="publisher">The Royal Institute of Technology, Stockholm, Sweden</arg><arg name="year">2003</arg></template></listitem><listitem><template><target>Cite book</target><arg name="doi"><space/>10.1145/1238844.1238850</arg><arg name="isbn"><space/>978-1-59593-766-7</arg><arg name="title"><space/>Proceedings of the third ACM SIGPLAN conference on History of programming languages - HOPL III</arg><arg name="year"><space/>2007</arg><arg name="chapter"><space/>A history of Erlang</arg><arg name="last1"><space/>Armstrong<space/></arg><arg name="first1"><space/>J.</arg><arg name="pages"><space/>6–1<space/></arg></template></listitem><listitem><link type='external' href='http://www.erlang.se/publications/bjarnelic.pdf'>Early history of Erlang</link><space/>by Bjarne Dcker</listitem><listitem><template><target>cite journal</target><arg name="authors">Mattsson, H.; Nilsson, H.; Wikstrom, C.</arg><arg name="year">1999</arg><arg name="title">Mnesia - A distributed robust DBMS for telecommunications applications</arg><arg name="journal">First International Workshop on Practical Aspects of Declarative Languages (PADL '99)</arg><arg name="pages">152–163</arg></template></listitem><listitem><template><target>cite book</target><arg name="first1"><space/>Joe
</arg><arg name="last1"><space/>Armstrong
</arg><arg name="first2"><space/>Robert
</arg><arg name="last2"><space/>Virding
</arg><arg name="first3"><space/>Mike
</arg><arg name="last3"><space/>Williams
</arg><arg name="first4"><space/>Claes
</arg><arg name="last4"><space/>Wikstrom
</arg><arg name="title"><space/>Concurrent Programming in Erlang
</arg><arg name="publisher"><space/>[[Prentice Hall]]
</arg><arg name="edition"><space/>2nd
</arg><arg name="date"><space/>16 January 1996
</arg><arg name="page"><space/>358
</arg><arg name="isbn"><space/>978-0-13-508301-7
</arg><arg name="url"><space/>http://www.erlang.org/erlang_book_toc.html
</arg></template></listitem><listitem><template><target>cite book</target><arg name="first1"><space/>Joe
</arg><arg name="last1"><space/>Armstrong
</arg><arg name="title"><space/>Programming Erlang: Software for a Concurrent World
</arg><arg name="publisher"><space/>[[Pragmatic Bookshelf]]
</arg><arg name="edition"><space/>1st
</arg><arg name="date"><space/>11 July 2007
</arg><arg name="page"><space/>536
</arg><arg name="isbn"><space/>978-1-934356-00-5
</arg><arg name="url"><space/>http://pragprog.com/titles/jaerlang/programming-erlang
</arg></template></listitem><listitem><template><target>cite book</target><arg name="first1"><space/>Simon J.
</arg><arg name="last1"><space/>Thompson
</arg><arg name="first2"><space/>Francesco
</arg><arg name="last2"><space/>Cesarini
</arg><arg name="title"><space/>Erlang Programming: A Concurrent Approach to Software Development
</arg><arg name="publisher"><space/>[[O'Reilly Media]], Inc
</arg><arg name="edition"><space/>1st
</arg><arg name="date"><space/>19 June 2009
</arg><arg name="page"><space/>496
</arg><arg name="location"><space/>Sebastopol, California
</arg><arg name="isbn"><space/>978-0-596-51818-9
</arg><arg name="url"><space/>http://www.erlangprogramming.org
</arg></template></listitem><listitem><template><target>cite book</target><arg name="first1"><space/>Martin
</arg><arg name="last1"><space/>Logan
</arg><arg name="first2"><space/>Eric
</arg><arg name="last2"><space/>Merritt
</arg><arg name="first3"><space/>Richard
</arg><arg name="last3"><space/>Carlsson
</arg><arg name="title"><space/>Erlang and OTP in Action
</arg><arg name="publisher"><space/>[[Manning Publications]]
</arg><arg name="edition"><space/>1st
</arg><arg name="date"><space/>28 May 2010
</arg><arg name="page"><space/>500
</arg><arg name="location"><space/>Greenwich, CT
</arg><arg name="isbn"><space/>978-1-933988-78-8
</arg><arg name="url">
</arg></template></listitem><listitem><template><target>cite web</target><arg name="last"><space/>Martin
</arg><arg name="first"><space/>Brown
</arg><arg name="title"><space/>Introduction to programming in Erlang, Part 1: The basics
</arg><arg name="work"><space/>developerWorks
</arg><arg name="publisher"><space/>IBM
</arg><arg name="date"><space/>10 May 2011
</arg><arg name="url"><space/>http://www.ibm.com/developerworks/opensource/library/os-erlang1/index.html
</arg><arg name="accessdate">10 May 2011
</arg></template></listitem><listitem><template><target>cite web</target><arg name="last"><space/>Martin
</arg><arg name="first"><space/>Brown
</arg><arg name="title"><space/>Introduction to programming in Erlang, Part 2: Use advanced features and functionality
</arg><arg name="work"><space/>developerWorks
</arg><arg name="publisher"><space/>IBM
</arg><arg name="date"><space/>17 May 2011
</arg><arg name="url"><space/>http://www.ibm.com/developerworks/opensource/library/os-erlang2/index.html
</arg><arg name="accessdate">17 May 2011</arg></template></listitem><listitem><template><target>cite web</target><arg name="last"><space/>Wiger
</arg><arg name="first"><space/>Ulf
</arg><arg name="title"><space/>Four-fold Increase in Productivity and Quality: Industrial-Strength Functional Programming in Telecom-Class Products
</arg><arg name="work"><space/>FEmSYS 2001 Deployment on distributed architectures
</arg><arg name="publisher"><space/>Ericsson Telecom AB
</arg><arg name="date"><space/>30 Mar 2001
</arg><arg name="url"><space/>http://www.erlang.se/publications/Ulf_Wiger.pdf
</arg><arg name="accessdate">16 Sep 2014
</arg></template></listitem></list><paragraph><template><target>Refend</target></template></paragraph><heading level='2'>External links</heading><paragraph><template><target>Commons category</target></template><template><target>Wikibooks</target><arg>Erlang Programming</arg></template></paragraph><list type='bullet'><listitem><template><target>Official website</target></template></listitem><listitem><link type='external' href='https://github.com/erlang/otp'>Code on GitHub</link></listitem><listitem><link type='external' href='http://erlangcentral.org/'>Erlang Central</link>, Erlang community site<space/></listitem><listitem><link type='external' href='http://www.erlang-factory.com/euc2015/'>Erlang User Conference</link>, an annual conference focused on Erlang, held in Stockholm, Sweden</listitem><listitem><template><target>dmoz</target><arg>Computers/Programming/Languages/Erlang</arg><arg>Erlang</arg></template></listitem><listitem><link type='external' href='http://www.archive.org/details/ErlangTheMovie'>Erlang: The Movie</link></listitem><listitem><link type='external' href='http://www.learnyousomeerlang.com/'>Learn You Some Erlang</link>, tutorial for beginners</listitem><listitem><link type='external' href='http://erldocs.com/'>erldocs.com</link>, alternative topic documentation</listitem><listitem><link type='external' href='http://www.se-radio.net/2008/03/episode-89-joe-armstrong-on-erlang'>Joe Armstrong on Erlang</link>, Software Engineering Radio Podcast</listitem></list><paragraph><template><target>use dmy dates</target><arg name="date">January 2012</arg></template></paragraph><paragraph><template><target>DEFAULTSORT:Erlang (Programming Language)</target></template><link><target>Category:Declarative programming languages</target></link><link><target>Category:Functional languages</target></link><link><target>Category:Concurrent programming languages</target></link><link><target>Category:Erlang (programming language)</target><part></part></link><link><target>Category:Register-based virtual machines</target></link><link><target>Category:Ericsson</target></link><link><target>Category:Articles with example Erlang code</target></link><link><target>Category:Software by programming language</target></link><link><target>Category:Programming languages created in 1986</target></link><link><target>Category:Programming languages created in the 1980s</target></link><link><target>Category:Pattern matching programming languages</target></link></paragraph></article>