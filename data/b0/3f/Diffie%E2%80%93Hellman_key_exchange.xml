<article title='Diffie%E2%80%93Hellman_key_exchange'><paragraph><template><target>Multiple issues</target><arg name="{{more footnotes|date">March 2013}}
{{technical|date</arg></template></paragraph><paragraph><link><target>File:Enigma keylist 3 rotor.jpg</target><part>thumb</part><part>Prior to public key methods like DiffieHellman, cryptographic keys had to be transmitted in physical form such as this World War II list of keys for the German<space/><link><target>Enigma Machine</target><part>Enigma cipher machine</part></link>.</part></link><bold>DiffieHellman key exchange</bold><space/>(<bold>DH</bold>)<space/><extension extension_name='ref' group="nb"><paragraph>Synonyms of DiffieHellman key exchange include:</paragraph><list type='bullet'><listitem>Diffie-Hellman-Merkle key exchange</listitem><listitem>DiffieHellman key agreement</listitem><listitem>DiffieHellman key establishment</listitem><listitem>DiffieHellman key negotiation</listitem><listitem>Exponential key exchange</listitem><listitem>DiffieHellman protocol</listitem><listitem>DiffieHellman handshake</listitem></list></extension><space/>is a specific method of securely exchanging<space/><link><target>Key (cryptography)</target><part>cryptographic keys</part></link><space/>over a public channel and was one of the first<space/><link><target>public-key cryptography</target><part>public-key protocol</part><trail>s</trail></link><space/>as originally conceptualized by<space/><link><target>Ralph Merkle</target></link>.<extension extension_name='ref' name="Merkle 1978"><template><target>cite journal</target><arg name="last1">Merkle</arg><arg name="first1">Ralph C</arg><arg name="title">Secure Communications Over Insecure Channels</arg><arg name="journal">Communications of the ACM</arg><arg name="date">April 1978</arg><arg name="volume">21</arg><arg name="issue">4</arg><arg name="pages">294–299</arg><arg name="doi">10.1145/359460.359473</arg><arg name="url">http://dl.acm.org/citation.cfm?id</arg><arg name="quote">Received August, 1975; revised September 1977</arg></template></extension><extension extension_name='ref' name="Diffie 1976"></extension><space/>DH is one of the earliest practical examples of public<space/><link><target>key exchange</target></link><space/>implemented within the field of<space/><link><target>cryptography</target></link>. Traditionally, secure encrypted communication between two parties required that they first exchange keys by some secure physical channel, such as paper key lists transported by a trusted<space/><link><target>courier</target></link>. The DiffieHellman key exchange method allows two parties that have no prior knowledge of each other to jointly establish a<space/><link><target>shared secret</target></link><space/>key over an<space/><link><target>Data security</target><part>insecure</part></link><space/><link><target>Channel (communications)</target><part>channel</part></link>. This key can then be used to encrypt subsequent communications using a<space/><link><target>symmetric key</target></link><space/><link><target>cipher</target></link>.</paragraph><paragraph>DiffieHellman is used to secure a variety of<space/><link><target>Internet</target></link><space/>services. However, research published in October 2015 suggests that the parameters in use for many D-H Internet applications at that time are not strong enough to prevent compromise by very well-funded attackers, such as the security services of large governments.<extension extension_name='ref' name="imperfectfs"></extension></paragraph><paragraph>The scheme was first published by<space/><link><target>Whitfield Diffie</target></link><space/>and<space/><link><target>Martin Hellman</target></link><space/>in 1976.<extension extension_name='ref' name="Diffie 1976"><template><target>Cite journal</target><arg name="last1"><space/>Diffie<space/></arg><arg name="first1"><space/>W.<space/></arg><arg name="authorlink1">Whitfield Diffie</arg><arg name="last2"><space/>Hellman<space/></arg><arg name="first2"><space/>M.<space/></arg><arg name="authorlink2">Martin Hellman</arg><arg name="doi"><space/>10.1109/TIT.1976.1055638<space/></arg><arg name="title"><space/>New directions in cryptography<space/></arg><arg name="journal"><space/>[[IEEE Transactions on Information Theory]]</arg><arg name="volume"><space/>22<space/></arg><arg name="issue"><space/>6<space/></arg><arg name="pages"><space/>644&ndash;654<space/></arg><arg name="year"><space/>1976<space/></arg><arg name="url"><space/>//ee.stanford.edu/%7Ehellman/publications/24.pdf<space/></arg></template></extension><space/>By 1975,<space/><link><target>James H. Ellis</target></link>,<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://cryptocellar.web.cern.ch/cryptocellar/cesg/possnse.pdf<space/></arg><arg name="title">The possibility of Non-Secret digital encryption<space/></arg><arg name="last1">Ellis<space/></arg><arg name="first1">J. H.<space/></arg><arg name="date">January 1970<space/></arg><arg name="work">CESG Research Report<space/></arg><arg name="access-date">2015-08-28<space/></arg></template></extension><space/><link><target>Clifford Cocks</target></link><space/>and<space/><link><target>Malcolm J. Williamson</target></link><space/>within<space/><link><target>Government Communications Headquarters</target><part>GCHQ</part></link>, the British signals intelligence agency, had previously shown how public-key cryptography could be achieved; however, their work was kept secret until 1997.<extension extension_name='ref'><template><target>cite web</target><arg name="title">GCHQ trio recognised for key to secure shopping online<space/></arg><arg name="url">http://www.bbc.co.uk/news/uk-england-gloucestershire-11475101<space/></arg><arg name="date">5 October 2010<space/></arg><arg name="accessdate">5 August 2014<space/></arg><arg name="website">BBC News<space/></arg></template></extension></paragraph><paragraph>Although DiffieHellman key agreement itself is a non-authenticated<space/><link><target>key-agreement protocol</target></link>, it provides the basis for a variety of authenticated protocols, and is used to provide<space/><link><target>forward secrecy</target></link><space/>in<space/><link><target>Transport Layer Security</target></link>'s<space/><link><target>ephemeral key</target><part>ephemeral</part></link><space/>modes (referred to as EDH or DHE depending on the cipher suite).<space/></paragraph><paragraph>The method was followed shortly afterwards by<space/><link><target>RSA (algorithm)</target><part>RSA</part></link>, an implementation of<space/><link><target>public-key cryptography</target></link><space/>using asymmetric algorithms.</paragraph><paragraph><template><target>US patent</target><arg>4,200,770</arg></template>,<extension extension_name='ref' name="USpat 4200770"><template><target>cite patent</target><arg name="country">US<space/></arg><arg name="number">4200770<space/></arg><arg name="title">Cryptographic apparatus and method<space/></arg><arg name="inventor1-given">Martin E.<space/></arg><arg name="inventor1-surname">Hellman<space/></arg><arg name="inventor2-given">Bailey W.<space/></arg><arg name="inventor2-surname">Diffie<space/></arg><arg name="inventor3-given">Ralph C.<space/></arg><arg name="inventor3-surname">Merkle<space/></arg><arg name="FilingDate">September 6, 1977<space/></arg><arg name="assign1">Stanford University<space/></arg><arg name="gdate">April 29, 1980<space/></arg></template></extension><space/>from 1977, is now expired and describes the now public domain algorithm. It credits Hellman, Diffie, and<space/><link><target>Ralph Merkle</target><part>Merkle</part></link><space/>as inventors.</paragraph><heading level='2'>Name</heading><paragraph>In 2002, Hellman suggested the algorithm be called<space/><bold>DiffieHellmanMerkle key exchange</bold><space/>in recognition of<space/><link><target>Ralph Merkle</target></link>'s contribution to the invention of<space/><link><target>public-key cryptography</target></link><space/>(Hellman, 2002), writing:</paragraph><list type='ident'><listitem>The system...has since become known as DiffieHellman key exchange. While that system was first described in a paper by Diffie and me, it is a public key distribution system, a concept developed by Merkle, and hence should be called 'DiffieHellmanMerkle key exchange' if names are to be associated with it. I hope this small pulpit might help in that endeavor to recognize Merkle's equal contribution to the invention of public key cryptography.<extension extension_name='ref' name="Hellman2002"><template><target>citation</target><arg name="last1">Hellman<space/></arg><arg name="first1">Martin E.<space/></arg><arg name="title">An overview of public key cryptography<space/></arg><arg name="journal">IEEE Communications Magazine<space/></arg><arg name="volume">40<space/></arg><arg name="issue">5<space/></arg><arg name="pages">42−49<space/></arg><arg name="date">May 2002<space/></arg><arg name="doi">10.1109/MCOM.2002.1006971<space/></arg></template></extension></listitem></list><heading level='2'>Description</heading><paragraph><link><target>File:Diffie-Hellman Key Exchange.svg</target><part>right</part><part>thumb</part><part>250px</part><part>Illustration of the DiffieHellman Key Exchange</part></link>DiffieHellman Key Exchange establishes a shared secret between two parties that can be used for secret communication for exchanging data over a public network. The following conceptual diagram illustrates the general idea of the key exchange by using colors instead of very large numbers.</paragraph><paragraph>The process begins by having the two parties,<space/><link><target>Alice and Bob</target></link>, agree on an arbitrary starting color that does not need to be kept secret (but should be different every time<extension extension_name='ref'><template><target>cite web</target><arg name="title">Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice</arg><arg name="url">https://weakdh.org/imperfect-forward-secrecy-ccs15.pdf</arg><arg name="accessdate">30 October 2015</arg></template></extension>); in this example the color is yellow. Each of them selects a secret colorred and aqua respectivelythat they keep to themselves. The crucial part of the process is that Alice and Bob now mix their secret color together with their mutually shared color, resulting in orange and blue mixtures respectively, then publicly exchange the two mixed colors. Finally, each of the two mix together the color they received from the partner with their own private color. The result is a final color mixture (brown) that is identical with the partner's color mixture.</paragraph><paragraph>If another party had been listening in on the exchange, it is computationally difficult for that person to determine the common secret color; in fact, when using large numbers rather than colors, this action is impossible for modern<space/><link><target>supercomputers</target></link><space/>to do in a reasonable amount of time.</paragraph><heading level='3'>Cryptographic explanation</heading><preblock><preline>The simplest and the original implementation of the protocol uses the<space/><link><target>Multiplicative group of integers modulo n</target><part>multiplicative group of integers modulo</part></link><space/><italics>p</italics>, where<space/><italics>p</italics><space/>is<space/><link><target>prime number</target><part>prime</part></link>, and<space/><italics>g</italics><space/>is a<space/><link><target>primitive root modulo n</target><part>primitive root</part></link><space/><link><target>Modular arithmetic</target><part>modulo</part></link><space/><italics>p</italics>. Here is an example of the protocol, with non-secret values in<space/><xhtml:span style="color:blue">blue</xhtml:span>, and secret values in<bold><xhtml:span style="color:red"><preblock><preline>red</preline></preblock></xhtml:span></bold>.</preline></preblock><list type='numbered'><listitem><link><target>Alice and Bob</target></link><space/>agree to use a modulus<space/><italics><xhtml:span style="color:blue">p</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">23</xhtml:span><space/>and base<space/><italics><xhtml:span style="color:blue">g</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span><space/>(which is a<space/><link><target>Primitive root modulo n</target><part>primitive root modulo</part></link><space/>23).</listitem><listitem>Alice chooses a secret integer<space/><bold><italics><xhtml:span style="color:red">a</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:red">6</xhtml:span></bold>, then sends Bob<space/><italics><xhtml:span style="color:blue">A</xhtml:span></italics><space/>=<space/><italics><xhtml:span style="color:blue">g</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">a</xhtml:span></bold></xhtml:sup></italics><space/>mod<space/><italics><xhtml:span style="color:blue">p</xhtml:span></italics><list type='bullet'><listitem><italics><xhtml:span style="color:blue">A</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">6</xhtml:span></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span><space/>=<space/><xhtml:span style="color:blue">8</xhtml:span></listitem></list></listitem><listitem>Bob chooses a secret integer<space/><bold><italics><xhtml:span style="color:red">b</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:red">15</xhtml:span></bold>, then sends Alice<space/><italics><xhtml:span style="color:blue">B</xhtml:span></italics><space/>=<space/><italics><xhtml:span style="color:blue">g</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">b</xhtml:span></bold></xhtml:sup></italics><space/>mod<space/><italics><xhtml:span style="color:blue">p</xhtml:span></italics><list type='bullet'><listitem><italics><xhtml:span style="color:blue">B</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">15</xhtml:span></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span><space/>=<space/><xhtml:span style="color:blue">19</xhtml:span></listitem></list></listitem><listitem>Alice computes<space/><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><italics><xhtml:span style="color:blue">B</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">a</xhtml:span></bold></xhtml:sup></italics><space/>mod<space/><italics><xhtml:span style="color:blue">p</xhtml:span></italics><list type='bullet'><listitem><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><xhtml:span style="color:blue">19</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">6</xhtml:span></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span><space/>=<space/><bold><xhtml:span style="color:red">2</xhtml:span></bold></listitem></list></listitem><listitem>Bob computes<space/><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><italics><xhtml:span style="color:blue">A</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">b</xhtml:span></bold></xhtml:sup></italics><space/>mod<space/><italics><xhtml:span style="color:blue">p</xhtml:span></italics><list type='bullet'><listitem><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><xhtml:span style="color:blue">8</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">15</xhtml:span></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span><space/>=<space/><bold><xhtml:span style="color:red">2</xhtml:span></bold></listitem></list></listitem><listitem>Alice and Bob now share a secret (the number<space/><bold><xhtml:span style="color:red">2</xhtml:span></bold>).</listitem></list><paragraph>Both Alice and Bob have arrived at the same value, because:</paragraph><list type='ident'><listitem><italics>A<xhtml:sup>b</xhtml:sup></italics><space/>mod<space/><italics>p</italics><space/>= (<italics>g<xhtml:sup>a</xhtml:sup></italics><space/>mod<space/><italics>p</italics>)<italics><xhtml:sup>b</xhtml:sup></italics><space/>mod<space/><italics>p</italics><space/>= (<italics>g<xhtml:sup>a</xhtml:sup></italics>)<italics><xhtml:sup>b</xhtml:sup></italics><space/>mod<space/><italics>p</italics><space/>= (<italics>g<xhtml:sup>b</xhtml:sup></italics>)<italics><xhtml:sup>a</xhtml:sup></italics><space/>mod<space/><italics>p</italics><space/>= (<italics>g<xhtml:sup>b</xhtml:sup></italics><space/>mod<space/><italics>p</italics>)<italics><xhtml:sup>a</xhtml:sup></italics><space/>mod<space/><italics>p</italics><space/>=<space/><italics>B<xhtml:sup>a</xhtml:sup></italics><space/>mod<space/><italics>p</italics><extension extension_name='ref'><template><target>citation</target><arg name="first1">F.<space/></arg><arg name="last1">Garzia<space/></arg><arg name="title">Handbook of Communications Security<space/></arg><arg name="page">182<space/></arg><arg name="publisher">WIT Press<space/></arg><arg name="date">2013<space/></arg><arg name="isbn">1845647688<space/></arg><arg name="url">https://books.google.com/books?id</arg></template></extension></listitem></list><paragraph>For Bob, (<italics>g<xhtml:sup>a</xhtml:sup></italics><space/>mod<space/><italics>p</italics>)<italics><xhtml:sup>b</xhtml:sup></italics><space/>mod<space/><italics>p</italics><space/>= (5<xhtml:sup>6</xhtml:sup><space/>mod 23)<xhtml:sup>15</xhtml:sup><space/>mod 23. Note that only<space/><italics>a</italics>,<space/><italics>b</italics>, and<space/><italics>(g<xhtml:sup>ab</xhtml:sup></italics><space/>mod<space/><italics>p</italics><space/>=<space/><italics>g<xhtml:sup>ba</xhtml:sup></italics><space/>mod<space/><italics>p)</italics><space/>are kept secret. All the other values<space/><italics>p</italics>,<space/><italics>g</italics>,<space/><italics>g<xhtml:sup>a</xhtml:sup></italics><space/>mod<space/><italics>p</italics>, and<space/><italics>g<xhtml:sup>b</xhtml:sup></italics><space/>mod<space/><italics>p</italics><space/>are sent in the clear. Once Alice and Bob compute the shared secret they can use it as an encryption key, known only to them, for sending messages across the same open communications channel.</paragraph><paragraph>Of course, much larger values of<space/><italics>a</italics>,<space/><italics>b</italics>, and<space/><italics>p</italics><space/>would be needed to make this example secure, since there are only 23 possible results of<space/><italics>n</italics><space/>mod 23. However, if<space/><italics>p</italics><space/>is a prime of at least 600 digits, then even the fastest modern computers cannot find<space/><italics>a</italics><space/>given only<space/><italics>g</italics>,<space/><italics>p</italics><space/>and<space/><italics>g<xhtml:sup>a</xhtml:sup></italics><space/>mod<space/><italics>p</italics>. Such a problem is called the<space/><link><target>discrete logarithm problem</target></link>.<extension extension_name='ref' name="imperfectfs"></extension><space/>The computation of<space/><italics>g<xhtml:sup>a</xhtml:sup></italics><space/>mod<space/><italics>p</italics><space/>is known as<space/><link><target>modular exponentiation</target></link><space/>and can be done efficiently even for large numbers.Note that<space/><italics>g</italics><space/>need not be large at all, and in practice is usually a small integer (like 2, 3, ...).</paragraph><heading level='3'>Generalization to finite cyclic groups</heading><paragraph>Here's a more general description of the protocol,<extension extension_name='ref'><template><target>citation</target><arg name="first1">Johannes A.<space/></arg><arg name="last1">Buchmann
<space/></arg><arg name="title">Introduction to Cryptography
<space/></arg><arg name="pages">190−191<space/></arg><arg name="edition">2nd<space/></arg><arg name="publisher">Springer Science & Business Media<space/></arg><arg name="year">2013<space/></arg><arg name="isbn">1441990038
<space/></arg><arg name="url">https://books.google.com/books?id</arg></template></extension></paragraph><list type='numbered'><listitem>Alice and Bob agree on a finite<space/><link><target>cyclic group</target></link><space/><italics>G</italics><space/>of order<space/><italics>n</italics><space/>and a<space/><link><target>Generating set of a group</target><part>generating</part></link><space/>element<space/><italics>g</italics><space/>in<space/><italics>G</italics>. (This is usually done long before the rest of the protocol;<space/><italics>g</italics><space/>is assumed to be known by all attackers.) The group<space/><italics>G</italics><space/>is written multiplicatively.</listitem><listitem>Alice picks a random<space/><link><target>natural number</target></link><space/><italics>a</italics>, where 1<space/><italics>a</italics><space/>&lt;<space/><italics>n</italics>, and sends<space/><italics>g<xhtml:sup>a</xhtml:sup></italics><space/>to Bob.</listitem><listitem>Bob picks a random natural number<space/><italics>b</italics>, which is also 1<space/><italics>b</italics><space/>&lt;<space/><italics>n</italics>, and sends<space/><italics>g<xhtml:sup>b</xhtml:sup></italics><space/>to Alice.</listitem><listitem>Alice computes (<italics>g<xhtml:sup>b</xhtml:sup></italics>)<italics><xhtml:sup>a</xhtml:sup></italics>.</listitem><listitem>Bob computes (<italics>g<xhtml:sup>a</xhtml:sup></italics>)<italics><xhtml:sup>b</xhtml:sup></italics>.</listitem></list><paragraph>Both Alice and Bob are now in possession of the group element<space/><italics>g<xhtml:sup>ab</xhtml:sup></italics>, which can serve as the shared secret key. The group<space/><italics>G</italics><space/>satisfies the requisite condition for secure communication if there is not an efficient algorithm for determining whether<space/><italics>g<xhtml:sup>ab</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>c</xhtml:sup></italics><space/>given<space/><italics>g<xhtml:sup>a</xhtml:sup></italics>,<space/><italics>g<xhtml:sup>b</xhtml:sup></italics>, and<space/><italics>g<xhtml:sup>c</xhtml:sup></italics><space/>for some<space/><italics>c</italics><space/>&amp;#8712;<space/><italics>G</italics>.</paragraph><heading level='3'>Secrecy chart</heading><paragraph>The chart below depicts who knows what, again with non-secret values in<space/><xhtml:span style="color:blue">blue</xhtml:span>, and secret values in<bold><xhtml:span style="color:red"><preblock><preline>red</preline></preblock></xhtml:span></bold>. Here Eve is an<space/><link><target>eavesdropper</target></link>&amp;mdash;she watches what is sent between Alice and Bob, but she does not alter the contents of their communications.</paragraph><list type='bullet'><listitem><italics><xhtml:span style="color:blue">g</xhtml:span></italics><space/>= public (prime) base, known to Alice, Bob, and Eve.<space/><italics><xhtml:span style="color:blue">g</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span></listitem><listitem><italics><xhtml:span style="color:blue">p</xhtml:span></italics><space/>= public (prime) modulus, known to Alice, Bob, and Eve.<space/><italics><xhtml:span style="color:blue">p</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">23</xhtml:span></listitem></list><list type='bullet'><listitem><bold><italics><xhtml:span style="color:red">a</xhtml:span></italics></bold><space/>= Alice's private key, known only to Alice.<space/><bold><italics><xhtml:span style="color:red">a</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:red">6</xhtml:span></bold></listitem><listitem><bold><italics><xhtml:span style="color:red">b</xhtml:span></italics></bold><space/>= Bob's private key known only to Bob.<space/><bold><italics><xhtml:span style="color:red">b</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:red">15</xhtml:span></bold></listitem></list><list type='bullet'><listitem><italics><xhtml:span style="color:blue">A</xhtml:span></italics><space/>= Alice's public key, known to Alice, Bob, and Eve.<space/><italics><xhtml:span style="color:blue">A</xhtml:span></italics><space/>=<space/><italics><xhtml:span style="color:blue">g</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">a</xhtml:span></bold></xhtml:sup></italics><space/>mod<space/><italics><xhtml:span style="color:blue">p</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">8</xhtml:span></listitem><listitem><italics><xhtml:span style="color:blue">B</xhtml:span></italics><space/>= Bob's public key, known to Alice, Bob, and Eve.<space/><italics><xhtml:span style="color:blue">B</xhtml:span></italics><space/>=<space/><italics><xhtml:span style="color:blue">g</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">b</xhtml:span></bold></xhtml:sup></italics><space/>mod<space/><italics><xhtml:span style="color:blue">p</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">19</xhtml:span></listitem></list><paragraph>{| border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;|-| valign=&quot;top&quot; |</paragraph><table class="wikitable"><tablecaption>Alice</tablecaption><tablerow style="text-align:center;"><tablehead>Known</tablehead><tablehead>Unknown</tablehead></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">p</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">23</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">g</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:red">a</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:red">6</xhtml:span></bold></tablecell><tablecell><bold><italics><xhtml:span style="color:red">b</xhtml:span></italics></bold></tablecell></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">A</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">a</xhtml:span></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">A</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">6</xhtml:span></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span><space/>=<space/><xhtml:span style="color:blue">8</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:blue">B</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:blue">19</xhtml:span></bold></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><xhtml:span style="color:blue">B</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">a</xhtml:span></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span>'''</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><xhtml:span style="color:blue">19</xhtml:span><xhtml:sup><bold><italics><xhtml:span style="color:red">6</xhtml:span></italics></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span><space/>=<space/><bold><xhtml:span style="color:red">2</xhtml:span></bold></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:red">2</xhtml:span></bold></tablecell><tablecell></tablecell></tablerow></table><paragraph>| valign=&quot;top&quot; |<space/></paragraph><table class="wikitable"><tablecaption>Bob</tablecaption><tablerow style="text-align:center;"><tablehead>Known</tablehead><tablehead>Unknown</tablehead></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">p</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">23</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">g</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:red">b</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:red">15</xhtml:span></bold></tablecell><tablecell><bold><italics><xhtml:span style="color:red">a</xhtml:span></italics></bold></tablecell></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">B</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span><xhtml:sup><bold><italics><xhtml:span style="color:red">b</xhtml:span></italics></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">B</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">15</xhtml:span></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span><space/>=<space/><xhtml:span style="color:blue">19</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:blue">A</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:blue">8</xhtml:span></bold></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><xhtml:span style="color:blue">A</xhtml:span><xhtml:sup><bold><xhtml:span style="color:red">b</xhtml:span></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span>'''</tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><xhtml:span style="color:blue">8</xhtml:span><xhtml:sup><bold><italics><xhtml:span style="color:red">15</xhtml:span></italics></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span><space/>=<space/><bold><xhtml:span style="color:red">2</xhtml:span></bold></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><bold><xhtml:span style="color:red">2</xhtml:span></bold></tablecell><tablecell></tablecell></tablerow></table><paragraph>| valign=&quot;top&quot; |<space/></paragraph><table class="wikitable"><tablecaption>Eve</tablecaption><tablerow style="text-align:center;"><tablehead>Known</tablehead><tablehead>Unknown</tablehead></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">p</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">23</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">g</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">5</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><bold><italics><xhtml:span style="color:red">a</xhtml:span></italics></bold>,<space/><bold><italics><xhtml:span style="color:red">b</xhtml:span></italics></bold></tablecell></tablerow><tablerow><tablecell>&amp;nbsp;</tablecell><tablecell>&amp;nbsp;</tablecell></tablerow><tablerow><tablecell>&amp;nbsp;</tablecell><tablecell>&amp;nbsp;</tablecell></tablerow><tablerow><tablecell><italics><xhtml:span style="color:blue">A</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">8</xhtml:span>,<space/><italics><xhtml:span style="color:blue">B</xhtml:span></italics><space/>=<space/><xhtml:span style="color:blue">19</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell>&amp;nbsp;</tablecell><tablecell>&amp;nbsp;</tablecell></tablerow><tablerow><tablecell><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>=<space/><xhtml:span style="color:blue">19</xhtml:span><xhtml:sup><bold><italics><xhtml:span style="color:red">a</xhtml:span></italics></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span><space/>=<space/><xhtml:span style="color:blue">8</xhtml:span><xhtml:sup><bold><italics><xhtml:span style="color:red">b</xhtml:span></italics></bold></xhtml:sup><space/>mod<space/><xhtml:span style="color:blue">23</xhtml:span></tablecell><tablecell></tablecell></tablerow><tablerow><tablecell></tablecell><tablecell><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold></tablecell></tablerow></table><paragraph>|}</paragraph><paragraph>Now<space/><bold><italics><xhtml:span style="color:red">s</xhtml:span></italics></bold><space/>is the shared secret key and it is known to both Alice and Bob, but<space/><italics>not</italics><space/>to Eve.</paragraph><paragraph>Note: It should be difficult for Alice to solve for Bob's private key or for Bob to solve for Alice's private key. If it is not difficult for Alice to solve for Bob's private key (or vice versa), Eve may simply substitute her own private / public key pair, plug Bob's public key into her private key, produce a fake shared secret key, and solve for Bob's private key (and use that to solve for the shared secret key. Eve may attempt to choose a public / private key pair that will make it easy for her to solve for Bob's private key).</paragraph><paragraph>Another demonstration of Diffie-Hellman (also using numbers too small for practical use) is given<space/><link type='external' href='http://buchananweb.co.uk/security02.aspx'>here</link>.<extension extension_name='ref'><template><target>citation</target><arg name="first1">Bill<space/></arg><arg name="last1">Buchanan<space/></arg><arg name="title">Diffie-Hellman Example in ASP.NET<space/></arg><arg name="work">Bill's Security Tips<space/></arg><arg name="url">http://buchananweb.co.uk/security02.aspx<space/></arg><arg name="accessdate">2015-08-27<space/></arg></template></extension></paragraph><heading level='2'>Operation with more than two parties</heading><paragraph>DiffieHellman key agreement is not limited to negotiating a key shared by only two participants. Any number of users can take part in an agreement by performing iterations of the agreement protocol and exchanging intermediate data (which does not itself need to be kept secret). For example, Alice, Bob, and Carol could participate in a DiffieHellman agreement as follows, with all operations taken to be modulo<space/><italics>p</italics>:</paragraph><list type='numbered'><listitem>The parties agree on the algorithm parameters<space/><italics>p</italics><space/>and<space/><italics>g</italics>.</listitem><listitem>The parties generate their private keys, named<space/><italics>a</italics>,<space/><italics>b</italics>, and<space/><italics>c</italics>.</listitem><listitem>Alice computes<space/><italics>g<xhtml:sup>a</xhtml:sup></italics><space/>and sends it to Bob.</listitem><listitem>Bob computes<space/><italics>(g<xhtml:sup>a</xhtml:sup>)<xhtml:sup>b</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>ab</xhtml:sup></italics><space/>and sends it to Carol.</listitem><listitem>Carol computes<space/><italics>(g<xhtml:sup>ab</xhtml:sup>)<xhtml:sup>c</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>abc</xhtml:sup></italics><space/>and uses it as her secret.</listitem><listitem>Bob computes<space/><italics>g<xhtml:sup>b</xhtml:sup></italics><space/>and sends it to Carol.</listitem><listitem>Carol computes<space/><italics>(g<xhtml:sup>b</xhtml:sup>)<xhtml:sup>c</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>bc</xhtml:sup></italics><space/>and sends it to Alice.</listitem><listitem>Alice computes<space/><italics>(g<xhtml:sup>bc</xhtml:sup>)<xhtml:sup>a</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>bca</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>abc</xhtml:sup></italics><space/>and uses it as her secret.</listitem><listitem>Carol computes<space/><italics>g<xhtml:sup>c</xhtml:sup></italics><space/>and sends it to Alice.</listitem><listitem>Alice computes<space/><italics>(g<xhtml:sup>c</xhtml:sup>)<xhtml:sup>a</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>ca</xhtml:sup></italics><space/>and sends it to Bob.</listitem><listitem>Bob computes<space/><italics>(g<xhtml:sup>ca</xhtml:sup>)<xhtml:sup>b</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>cab</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>abc</xhtml:sup></italics><space/>and uses it as his secret.</listitem></list><paragraph>An eavesdropper has been able to see<space/><italics>g<xhtml:sup>a</xhtml:sup></italics>,<space/><italics>g<xhtml:sup>b</xhtml:sup></italics>,<space/><italics>g<xhtml:sup>c</xhtml:sup></italics>,<space/><italics>g<xhtml:sup>ab</xhtml:sup></italics>,<space/><italics>g<xhtml:sup>ac</xhtml:sup></italics>, and<space/><italics>g<xhtml:sup>bc</xhtml:sup></italics>, but cannot use any combination of these to efficiently reproduce<space/><italics>g<xhtml:sup>abc</xhtml:sup></italics>.</paragraph><paragraph>To extend this mechanism to larger groups, two basic principles must be followed:</paragraph><list type='bullet'><listitem>Starting with an &quot;empty&quot; key consisting only of<space/><italics>g</italics>, the secret is made by raising the current value to every participants private exponent once, in any order (the first such exponentiation yields the participants own public key).</listitem><listitem>Any intermediate value (having up to<space/><italics>N</italics>-1 exponents applied, where<space/><italics>N</italics><space/>is the number of participants in the group) may be revealed publicly, but the final value (having had all<space/><italics>N</italics><space/>exponents applied) constitutes the shared secret and hence must never be revealed publicly. Thus, each user must obtain their copy of the secret by applying their own private key last (otherwise there would be no way for the last contributor to communicate the final key to its recipient, as that last contributor would have turned the key into the very secret the group wished to protect).</listitem></list><paragraph>These principles leave open various options for choosing in which order participants contribute to keys. The simplest and most obvious solution is to arrange the<space/><italics>N</italics><space/>participants in a circle and have<space/><italics>N</italics><space/>keys rotate around the circle, until eventually every key has been contributed to by all<space/><italics>N</italics><space/>participants (ending with its owner) and each participant has contributed to<space/><italics>N</italics><space/>keys (ending with their own). However, this requires that every participant perform<space/><italics>N</italics><space/>modular exponentiations.</paragraph><paragraph>By choosing a more optimal order, and relying on the fact that keys can be duplicated, it is possible to reduce the number of modular exponentiations performed by each participant to<space/><template><target>nowrap</target><arg>log<sub>2</sub>(''N'') + 1</arg></template><space/>using a<space/><link><target>Divide and conquer algorithms</target><part>divide-and-conquer-style</part></link><space/>approach, given here for eight participants:</paragraph><list type='numbered'><listitem>Participants A, B, C, and D each perform one exponentiation, yielding<space/><italics>g<xhtml:sup>abcd</xhtml:sup></italics>; this value is sent to E, F, G, and H. In return, participants A, B, C, and D receive<space/><italics>g<xhtml:sup>efgh</xhtml:sup></italics>.</listitem><listitem>Participants A and B each perform one exponentiation, yielding<space/><italics>g<xhtml:sup>efghab</xhtml:sup></italics>, which they send to C and D, while C and D do the same, yielding<space/><italics>g<xhtml:sup>efghcd</xhtml:sup></italics>, which they send to A and B.</listitem><listitem>Participant A performs an exponentiation, yielding<space/><italics>g<xhtml:sup>efghcda</xhtml:sup></italics>, which it sends to B; similarly, B sends<space/><italics>g<xhtml:sup>efghcdb</xhtml:sup></italics><space/>to A. C and D do similarly.</listitem><listitem>Participant A performs one final exponentiation, yielding the secret<space/><italics>g<xhtml:sup>efghcdba</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>abcdefgh</xhtml:sup></italics>, while B does the same to get<space/><italics>g<xhtml:sup>efghcdab</xhtml:sup></italics><space/>=<space/><italics>g<xhtml:sup>abcdefgh</xhtml:sup></italics>; again, C and D do similarly.</listitem><listitem>Participants E through H simultaneously perform the same operations using<space/><italics>g<xhtml:sup>abcd</xhtml:sup></italics><space/>as their starting point.</listitem></list><paragraph>Once this operation has been completed all participants will possess the secret<space/><italics>g<xhtml:sup>abcdefgh</xhtml:sup></italics>, but each participant will have performed only four modular exponentiations, rather than the eight implied by a simple circular arrangement.</paragraph><heading level='2'>Security</heading><paragraph>The protocol is considered secure against eavesdroppers if<space/><italics>G</italics><space/>and<space/><italics>g</italics><space/>are chosen properly. In particular, the order of the group G must be large, particularly if the same group is used for large amounts of traffic. The eavesdropper (&quot;<link><target>Alice and Bob</target><part>Eve</part></link>&quot;) has to solve the<space/><link><target>DiffieHellman problem</target></link><space/>to obtain<space/><italics>g</italics><xhtml:sup><italics>ab</italics></xhtml:sup>. This is currently considered difficult for groups whose order is large enough. An efficient algorithm to solve the<space/><link><target>discrete logarithm problem</target></link><space/>would make it easy to compute<space/><italics>a</italics><space/>or<space/><italics>b</italics><space/>and solve the DiffieHellman problem, making this and many other public key cryptosystems insecure. Fields of small characteristic may be less secure.<extension extension_name='ref'><template><target>cite conference</target><arg name="first1">Razvan<space/></arg><arg name="last1">Barbulescu<space/></arg><arg name="first2">Pierrick<space/></arg><arg name="last2">Gaudry<space/></arg><arg name="first3">Antoine<space/></arg><arg name="last3">Joux<space/></arg><arg name="first4">Emmanuel<space/></arg><arg name="last4">Thomé<space/></arg><arg name="title">A Heuristic Quasi-Polynomial Algorithm for Discrete Logarithm in Finite Fields of Small Characteristic<space/></arg><arg name="work">Lecture Notes in Computer Science<space/></arg><arg name="book-title">Advances in Cryptology – EUROCRYPT 2014<space/></arg><arg name="conference">Proceedings 33rd Annual International Conference on the Theory and Applications of Cryptographic Techniques<space/></arg><arg name="location">Copenhagen, Denmark<space/></arg><arg name="volume">8441<space/></arg><arg name="date">2014<space/></arg><arg name="pages">1–16<space/></arg><arg name="doi">10.1007/978-3-642-55220-5_1<space/></arg><arg name="isbn">978-3-642-55220-5<space/></arg></template></extension></paragraph><paragraph>The<space/><link><target>Order (group theory)</target><part>order</part></link><space/>of<space/><italics>G</italics><space/>should have a large prime factor to prevent use of the<space/><link><target>PohligHellman algorithm</target></link><space/>to obtain<space/><italics>a</italics><space/>or<space/><italics>b</italics>. For this reason, a<space/><link><target>Sophie Germain prime</target></link><space/><italics>q</italics><space/>is sometimes used to calculate<space/><template><target>nowrap</target><arg name="1">''p''<space/></arg></template>, called a<space/><link><target>safe prime</target></link>, since the order of<space/><italics>G</italics><space/>is then only divisible by 2 and<space/><italics>q</italics>.<space/><italics>g</italics><space/>is then sometimes chosen to generate the order<space/><italics>q</italics><space/>subgroup of<space/><italics>G</italics>, rather than<space/><italics>G</italics>, so that the<space/><link><target>Legendre symbol</target></link><space/>of<space/><italics>g<xhtml:sup>a</xhtml:sup></italics><space/>never reveals the low order bit of<space/><italics>a</italics>. A protocol using such a choice is for example<space/><link><target>Internet Key Exchange</target><part>IKEv2</part></link>.<extension extension_name='ref'><template><target>Cite news</target><arg name="title">RFC 4306 Internet Key Exchange (IKEv2) Protocol<space/></arg><arg name="publisher">Internet Engineering Task Force (IETF)<space/></arg><arg name="author">C. Kaufman (Microsoft)<space/></arg><arg name="date">December 2005<space/></arg><arg name="url">http://www.ietf.org/rfc/rfc4306.txt<space/></arg></template></extension></paragraph><paragraph><italics>g</italics><space/>is often a small integer such as 2. Because of the<space/><link><target>random self-reducibility</target></link><space/>of the discrete logarithm problem a small<space/><italics>g</italics><space/>is equally secure as any other generator of the same group.</paragraph><paragraph>If Alice and Bob use<space/><link><target>random number generator</target><trail>s</trail></link><space/>whose outputs are not completely random and can be predicted to some extent, then Eve's task is much easier.</paragraph><paragraph>In the original description, the DiffieHellman exchange by itself does not provide<space/><link><target>authentication</target></link><space/>of the communicating parties and is thus vulnerable to a<space/><link><target>man-in-the-middle attack</target></link>.<space/><link><target>Alice and Bob</target><part>Mallory</part></link><space/>may establish two distinct key exchanges, one with Alice and the other with Bob, effectively masquerading as Alice to Bob, and vice versa, allowing her to decrypt, then re-encrypt, the messages passed between them. Note that Mallory must continue to be in the middle, transferring messages every time Alice and Bob communicate. If she is ever absent, her previous presence is then revealed to Alice and Bob. They will know that all of their private conversations had been intercepted and decoded by someone in the channel.</paragraph><paragraph>A method to authenticate the communicating parties to each other is generally needed to prevent this type of attack. Variants of DiffieHellman, such as<space/><link><target>Station-to-Station protocol</target><part>STS protocol</part></link>, may be used instead to avoid these types of attacks.</paragraph><heading level='3'>Practical attacks on Internet traffic</heading><paragraph>The<space/><link><target>number field sieve</target></link><space/>algorithm, which is generally the most effective in solving the<space/><link><target>discrete logarithm problem</target></link>, consists of four computational steps. The first three steps only depend on the order of the group G, not on the specific number whose finite log is desired. It turns out that much Internet traffic uses one of a handful of groups that are of order 1024-bits or less. By<space/><link><target>precomputing</target></link><space/>the first three steps of the number field sieve for the most common groups, an attacker need only carry out the last step, which is much less computationally expensive than the first three steps, to obtain a specific logarithm. The<space/><link><target>Logjam (computer security)</target><part>Logjam</part></link><space/>attack used this vulnerability to compromise a variety of Internet services that allowed the use of groups whose order was a 512-bit prime number, so called<space/><link><target>export of cryptography</target><part>export grade</part></link>. The authors needed several thousand CPU cores for a week to precompute data for a single 512-bit prime. Once that was done, however, individual logarithms could be solved in about a minute using two 18-core Intel Xeon CPUs.<extension extension_name='ref' name="imperfectfs"></extension></paragraph><paragraph>As estimated by the authors behind the<space/><link><target>Logjam (computer security)</target><part>Logjam</part></link><space/>attack, the much more difficult precomputation needed to solve the discrete log problem for a 1024-bit prime would cost on the order of $100 million, well within the budget of large national<space/><link><target>intelligence agency</target></link><space/>such as the U.S.<space/><link><target>National Security Agency</target></link><space/>(NSA). The Logjam authors speculate that precomputation against widely reused 1024 DH primes is behind claims in<space/><link><target>Global surveillance disclosures (2013present)</target><part>leaked NSA documents</part></link><space/>that NSA is able break much of current crypto.<extension extension_name='ref' name="imperfectfs"></extension></paragraph><paragraph>To avoid these vulnerabilities, authors recommend use of<space/><link><target>elliptic curve cryptography</target></link>, for which no similar attack is known. Failing that, they recommend that the order,<space/><italics>p</italics>, of the DiffieHellman group should be at least 2048 bits. They estimate that the pre-computation required for a 2048-bit prime is 10<xhtml:sup>9</xhtml:sup><space/>more difficult than for 1024-bit primes.<extension extension_name='ref' name="imperfectfs"><template><target>cite web</target><arg name="last1">Adrian<space/></arg><arg name="first1">David<space/></arg><arg name="last2">Bhargavan<space/></arg><arg name="first2">Karthikeyan<space/></arg><arg name="last3">Durumeric<space/></arg><arg name="first3">Zakir<space/></arg><arg name="last4">Gaudry<space/></arg><arg name="first4">Pierrick<space/></arg><arg name="last5">Green<space/></arg><arg name="first5">Matthew<space/></arg><arg name="last6">Halderman<space/></arg><arg name="first6">J. Alex<space/></arg><arg name="last7">Heninger<space/></arg><arg name="first7">Nadia<space/></arg><arg name="last8">Springall<space/></arg><arg name="first8">Drew<space/></arg><arg name="last9">Thomé<space/></arg><arg name="first9">Emmanuel<space/></arg><arg name="last10">Valenta<space/></arg><arg name="first10">Luke<space/></arg><arg name="last11">VanderSloot<space/></arg><arg name="first11">Benjamin<space/></arg><arg name="last12">Wustrow<space/></arg><arg name="first12">Eric<space/></arg><arg name="last13">Zanella-Béguelin<space/></arg><arg name="first13">Santiago<space/></arg><arg name="last14">Zimmermann<space/></arg><arg name="first14">Paul<space/></arg><arg name="title">Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice<space/></arg><arg name="url">https://weakdh.org/imperfect-forward-secrecy.pdf<space/></arg><arg name="date">October 2015</arg></template></extension></paragraph><heading level='2'>Other uses</heading><heading level='3'>Encryption</heading><paragraph>Public key encryption schemes based on the DiffieHellman key exchange have been proposed. The first such scheme is the<space/><link><target>ElGamal encryption</target></link>. A more modern variant is the<space/><link><target>Integrated Encryption Scheme</target></link>.</paragraph><heading level='3'>Forward secrecy</heading><paragraph>Protocols that achieve<space/><link><target>forward secrecy</target></link><space/>generate new key pairs for each<space/><link><target>session (computer science)</target><part>session</part></link><space/>and discard them at the end of the session.The DiffieHellman key exchange is a frequent choice for such protocols, because of its fast key generation.</paragraph><heading level='3'>Password-authenticated key agreement</heading><paragraph>When Alice and Bob share a password, they may use a<space/><link><target>password-authenticated key agreement</target></link><space/>(PK) form of DiffieHellman to prevent man-in-the-middle attacks. One simple scheme is to compare the<space/><link><target>Cryptographic hash function</target><part>hash</part></link><space/>of<space/><bold>s</bold><space/>concatenated with the password calculated independently on both ends of channel. A feature of these schemes is that an attacker can only test one specific password on each iteration with the other party, and so the system provides good security with relatively weak passwords. This approach is described in<space/><link><target>ITU-T</target></link><space/>Recommendation<space/><link><target>X.1035</target></link>, which is used by the<space/><link><target>G.hn</target></link><space/>home networking standard.</paragraph><heading level='3'>Public key</heading><paragraph>It is also possible to use DiffieHellman as part of a<space/><link><target>public key infrastructure</target></link>, allowing Bob to encrypt a message so that only Alice will be able to decrypt it, with no prior communication between them other than Bob having trusted knowledge of Alice's public key. Alice's public key is<space/><extension extension_name='math'>(g^a \bmod{p}, g, p)</extension>. To send her a message, Bob chooses a random<space/><italics>b</italics><space/>and then sends Alice<space/><extension extension_name='math'>g^b \bmod p</extension><space/>(un-encrypted) together with the message encrypted with symmetric key<space/><extension extension_name='math'>(g^a)^b \bmod{p}</extension>. Only Alice can determine the symmetric key and hence decrypt the message because only she has<space/><italics>a</italics><space/>(the private key). A pre-shared public key also prevents man-in-the-middle attacks.</paragraph><paragraph>In practice, DiffieHellman is not used in this way, with<space/><link><target>RSA (algorithm)</target><part>RSA</part></link><space/>being the dominant public key algorithm. This is largely for historical and commercial reasons, namely that<space/><link><target>RSA (security firm)</target><part>RSA Security</part></link><space/>created a certificate authority for key signing that became<space/><link><target>Verisign</target></link>. DiffieHellman cannot be used to sign certificates. However, the<space/><link><target>ElGamal signature scheme</target><part>ElGamal</part></link><space/>and<space/><link><target>Digital Signature Algorithm</target><part>DSA</part></link><space/>signature algorithms are mathematically related to it, as well as<space/><link><target>MQV</target></link>,<space/><link><target>Station-to-Station protocol</target><part>STS</part></link><space/>and the<space/><link><target>Internet key exchange</target><part>IKE</part></link><space/>component of the<space/><link><target>IPsec</target></link><space/>protocol suite for securing<space/><link><target>Internet Protocol</target></link><space/>communications.</paragraph><heading level='2'>See also</heading><paragraph><template><target>Portal</target><arg>Cryptography</arg></template></paragraph><paragraph><template><target>Div col</target><arg></arg><arg>22em</arg></template></paragraph><list type='bullet'><listitem><link><target>Portal:Cryptography</target><part>Cryptography portal</part></link></listitem><listitem><link><target>Modular arithmetic</target></link></listitem><listitem><link><target>Elliptic curve DiffieHellman</target></link></listitem><listitem><link><target>ElGamal encryption</target></link></listitem><listitem><link><target>MQV</target></link></listitem><listitem><link><target>Password-authenticated key agreement</target></link></listitem><listitem><link><target>Secure Remote Password Protocol</target></link></listitem><listitem><link><target>Supersingular Isogeny Key Exchange</target></link></listitem><listitem><link><target>Logjam (computer security)</target><part>Logjam vulnerability</part></link></listitem></list><paragraph><template><target>Div col end</target></template></paragraph><heading level='2'>Notes</heading><paragraph><extension extension_name='references' group="nb"></extension></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target></template></paragraph><heading level='3'>General references</heading><list type='bullet'><listitem><template><target>cite book</target><arg name="last1">Gollman<space/></arg><arg name="first1">Dieter<space/></arg><arg name="title">Computer Security<space/></arg><arg name="year">2011<space/></arg><arg name="edition">2nd<space/></arg><arg name="publisher">John Wiley & Sons, Ltd.<space/></arg><arg name="publication-place">West Sussex, England<space/></arg><arg name="isbn">0470741155<space/></arg></template></listitem><listitem><template><target>cite techreport</target><arg name="last1">Williamson<space/></arg><arg name="first1">Malcolm J.<space/></arg><arg name="title">Non—secret encryption using a finite field<space/></arg><arg name="institution">Communications Electronics Security Group<space/></arg><arg name="date">January 21, 1974<space/></arg><arg name="url">https://www.cesg.gov.uk/publications/Documents/nonsecret_encryption_finite_field.pdf<space/></arg><arg name="accessdate">2015-08-25<space/></arg></template></listitem><listitem><template><target>cite techreport</target><arg name="last1">Williamson<space/></arg><arg name="first1">Malcolm J.<space/></arg><arg name="title">Thoughts on Cheaper Non-Secret Encryption<space/></arg><arg name="institution">Communications Electronics Security Group<space/></arg><arg name="date">August 10, 1976<space/></arg><arg name="url">http://www.fi.muni.cz/usr/matyas/lecture/paper3.pdf<space/></arg><arg name="accessdate">2015-08-25<space/></arg></template></listitem><listitem><link type='external' href='http://cryptocellar.web.cern.ch/cryptocellar/cesg/ellis.pdf'>The History of Non-Secret Encryption</link><space/><link><target>James H. Ellis</target><part>JH Ellis</part></link><space/>1987 (28K PDF file) (<link type='external' href='http://www.jya.com/ellisdoc.htm'>HTML version</link><template><target>Dead link</target><arg name="date">August 2012</arg></template>)</listitem><listitem><link type='external' href='http://cr.yp.to/bib/1988/diffie.pdf'>The First Ten Years of Public-Key Cryptography</link><space/>Whitfield Diffie, Proceedings of the IEEE, vol. 76, no. 5, May 1988, pp: 560577 (1.9MB PDF file)</listitem><listitem><link><target>Alfred Menezes</target><part>Menezes, Alfred</part></link>;<space/><link><target>Paul van Oorschot</target><part>van Oorschot, Paul</part></link>;<space/><link><target>Scott Vanstone</target><part>Vanstone, Scott</part></link><space/>(1997).<space/><italics><link><target>Handbook of Applied Cryptography</target></link></italics><space/>Boca Raton, Florida: CRC Press. ISBN 0-8493-8523-7. (<link type='external' href='http://www.cacr.math.uwaterloo.ca/hac/'>Available online</link>)</listitem><listitem><link><target>Simon Singh</target><part>Singh, Simon</part></link><space/>(1999)<space/><italics><link><target>The Code Book: the evolution of secrecy from Mary Queen of Scots to quantum cryptography</target></link></italics><space/>New York: Doubleday ISBN 0-385-49531-5</listitem><listitem><link type='external' href='http://dx.doi.org/10.1109/MCOM.2002.1006971'>An Overview of Public Key Cryptography</link><space/>Martin E. Hellman, IEEE Communications Magazine, May 2002, pp:4249. (123kB PDF file)</listitem></list><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://purl.umn.edu/107353'>Oral history interview with Martin Hellman</link>,<space/><link><target>Charles Babbage Institute</target></link>, University of Minnesota. Leading cryptography scholar<space/><link><target>Martin Hellman</target></link><space/>discusses the circumstances and fundamental insights of his invention of<space/><link><target>public key cryptography</target></link><space/>with collaborators<space/><link><target>Whitfield Diffie</target></link><space/>and<space/><link><target>Ralph Merkle</target></link><space/>at Stanford University in the mid-1970s.</listitem><listitem>RFC 2631<space/><italics>DiffieHellman Key Agreement Method</italics><space/>E. Rescorla June 1999.</listitem><listitem><link type='external' href='https://web.archive.org/web/20040903080553/http://csrc.nist.gov/CryptoToolkit/kms/summary-x9-42.pdf'>Summary of ANSI X9.42: Agreement of Symmetric Keys Using Discrete Logarithm Cryptography</link><space/>(64K PDF file) (<link type='external' href='http://www.rsasecurity.com/rsalabs/node.asp?id=2306'>Description of ANSI 9 Standards</link>)</listitem><listitem><link type='external' href='http://docs.google.com/viewer?a=v&amp;amp;pid=sites&amp;amp;srcid=bmV0aXAuY29tfGhvbWV8Z3g6NTA2NTM0YmNhZjRhZDYzZQ'>DiffieHellman Key Exchange A Non-Mathematicians Explanation</link><space/>by Keith Palmgren</listitem><listitem><link type='external' href='https://metacpan.org/module/Crypt::DH'>Crypt::DH</link><space/><link><target>Perl</target></link><space/>module from<space/><link><target>CPAN</target></link></listitem><listitem><link type='external' href='http://ds9a.nl/tmp/dh.html'>Hands-on DiffieHellman demonstration</link></listitem><listitem><link type='external' href='http://oldpiewiki.yoonkn.com/cgi-bin/moin.cgi/DiffieHellmanKeyExchange'>C implementation using GNU Multiple Precision Arithmetic Library</link><template><target>Dead link</target><arg name="date">December 2010</arg></template></listitem><listitem><link type='external' href='http://www.cypherspace.org/adam/rsa/perl-dh.html'>Diffie Hellman in 2 lines of Perl</link><space/>(using<space/><link><target>dc (computer program)</target><part>dc</part></link>)</listitem><listitem><link type='external' href='http://code.google.com/p/sacct/'>Smart Account Management (SAcct)</link><space/>(using DH key exchange to derive session key)</listitem><listitem><link type='external' href='https://www.youtube.com/watch?v=YEBfamv-_do'>Diffie-Hellman Key Exchange</link><space/>- A YouTube video by<space/><link><target>Khan Academy</target></link><space/>faculty member Brit Cruise</listitem><listitem><link type='external' href='http://video.google.com/videoplay?docid=8991737124862867507'>Talk by Martin Hellman in 2007, Google video</link><space/>(broken link)</listitem></list><paragraph><template><target>Cryptography navbox</target><arg><space/>public-key</arg></template></paragraph><paragraph><template><target>DEFAULTSORT:Diffie-Hellman Key Exchange</target></template><link><target>Category:Key-agreement protocols</target></link><link><target>Category:Public-key cryptography</target></link></paragraph></article>