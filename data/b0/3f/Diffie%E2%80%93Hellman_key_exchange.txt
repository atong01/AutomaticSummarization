{{Multiple issues|
{{more footnotes|date=March 2013}}
{{technical|date=April 2014}}
{{original research|date=November 2014}}
}}

[[File:Enigma keylist 3 rotor.jpg|thumb|Prior to public key methods like Diffie–Hellman, cryptographic keys had to be transmitted in physical form such as this World War II list of keys for the German [[Enigma Machine|Enigma cipher machine]]. ]]
'''Diffie–Hellman key exchange''' ('''D–H''') <ref group="nb">Synonyms of Diffie–Hellman key exchange include:
*Diffie-Hellman-Merkle key exchange
*Diffie–Hellman key agreement
*Diffie–Hellman key establishment
*Diffie–Hellman key negotiation
*Exponential key exchange
*Diffie–Hellman protocol
*Diffie–Hellman handshake</ref> is a specific method of securely exchanging [[Key (cryptography)|cryptographic keys]] over a public channel and was one of the first [[public-key cryptography|public-key protocol]]s as originally conceptualized by [[Ralph Merkle]].<ref name="Merkle 1978">{{cite journal|last1=Merkle|first1=Ralph C|title=Secure Communications Over Insecure Channels|journal=Communications of the ACM|date=April 1978|volume=21|issue=4|pages=294–299|doi=10.1145/359460.359473|url=http://dl.acm.org/citation.cfm?id=359473&CFID=457124994&CFTOKEN=90004398|quote=Received August, 1975; revised September 1977}}</ref><ref name="Diffie 1976" />  D–H is one of the earliest practical examples of public [[key exchange]] implemented within the field of [[cryptography]]. Traditionally, secure encrypted communication between two parties required that they first exchange  keys by some secure physical channel, such as paper key lists transported by a trusted [[courier]]. The Diffie–Hellman key exchange method allows two parties that have no prior knowledge of each other to jointly establish a [[shared secret]] key over an [[Data security|insecure]] [[Channel (communications)|channel]]. This key can then be used to encrypt subsequent communications using a [[symmetric key]] [[cipher]].

Diffie–Hellman is used to secure a variety of [[Internet]] services. However, research published in October 2015 suggests that the parameters in use for many D-H Internet applications at that time are not strong enough to prevent compromise by very well-funded attackers, such as the security services of large governments.<ref name=imperfectfs/>

The scheme was first published by [[Whitfield Diffie]] and [[Martin Hellman]] in 1976.<ref name="Diffie 1976">{{Cite journal | last1 = Diffie | first1 = W. |authorlink1=Whitfield Diffie| last2 = Hellman | first2 = M. |authorlink2=Martin Hellman| doi = 10.1109/TIT.1976.1055638 | title = New directions in cryptography | journal = [[IEEE Transactions on Information Theory]]| volume = 22 | issue = 6 | pages = 644&ndash;654 | year = 1976 | url = //ee.stanford.edu/%7Ehellman/publications/24.pdf  }}</ref> By 1975, [[James H. Ellis]],<ref>{{cite web | url=http://cryptocellar.web.cern.ch/cryptocellar/cesg/possnse.pdf | title=The possibility of Non-Secret digital encryption | last1=Ellis | first1=J. H. | date=January 1970 | work=CESG Research Report | access-date=2015-08-28 }}</ref> [[Clifford Cocks]] and [[Malcolm J. Williamson]] within [[Government Communications Headquarters|GCHQ]], the British signals intelligence agency, had previously shown how public-key cryptography could be achieved; however, their work was kept secret until 1997.<ref>{{cite web | title=GCHQ trio recognised for key to secure shopping online  | url=http://www.bbc.co.uk/news/uk-england-gloucestershire-11475101 | date=5 October 2010 | accessdate=5 August 2014 | website=BBC News }}</ref>

Although Diffie–Hellman key agreement itself is a non-authenticated [[key-agreement protocol]], it provides the basis for a variety of authenticated protocols, and is used to provide [[forward secrecy]] in [[Transport Layer Security]]'s [[ephemeral key|ephemeral]] modes (referred to as EDH or DHE depending on the cipher suite). 

The method was followed shortly afterwards by [[RSA (algorithm)|RSA]], an implementation of [[public-key cryptography]] using asymmetric algorithms.

{{US patent|4,200,770}},<ref name="USpat 4200770">{{cite patent | country=US | number=4200770 | title=Cryptographic apparatus and method | inventor1-given=Martin E. | inventor1-surname=Hellman | inventor2-given=Bailey W. | inventor2-surname=Diffie | inventor3-given=Ralph C. | inventor3-surname=Merkle | FilingDate=September 6, 1977 | assign1=Stanford University | gdate=April 29, 1980 }}</ref> from 1977, is now expired and describes the now public domain algorithm. It credits Hellman, Diffie, and [[Ralph Merkle|Merkle]] as inventors.

==Name==
In 2002, Hellman suggested the algorithm be called '''Diffie–Hellman–Merkle key exchange''' in recognition of [[Ralph Merkle]]'s contribution to the invention of [[public-key cryptography]] (Hellman, 2002), writing:
: The system...has since become known as Diffie–Hellman key exchange. While that system was first described in a paper by Diffie and me, it is a public key distribution system, a concept developed by Merkle, and hence should be called 'Diffie–Hellman–Merkle key exchange' if names are to be associated with it. I hope this small pulpit might help in that endeavor to recognize Merkle's equal contribution to the invention of public key cryptography.<ref name="Hellman2002">{{citation | last1=Hellman | first1=Martin E. | title=An overview of public key cryptography | journal=IEEE Communications Magazine | volume=40 | issue=5 | pages=42−49 | date=May 2002 | doi=10.1109/MCOM.2002.1006971 }}</ref>

== Description ==
[[File:Diffie-Hellman Key Exchange.svg|right|thumb|250px|Illustration of the Diffie–Hellman Key Exchange]]
Diffie–Hellman Key Exchange establishes a shared secret between two parties that can be used for secret communication for exchanging data over a public network. The following conceptual diagram illustrates the general idea of the key exchange by using colors instead of very large numbers.

The process begins by having the two parties, [[Alice and Bob]], agree on an arbitrary starting color that does not need to be kept secret (but should be different every time<ref>{{cite web|title=Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice|url=https://weakdh.org/imperfect-forward-secrecy-ccs15.pdf|accessdate=30 October 2015}}</ref>); in this example the color is yellow. Each of them selects a secret color–red and aqua respectively–that they keep to themselves. The crucial part of the process is that Alice and Bob now mix their secret color together with their mutually shared color, resulting in orange and blue mixtures respectively, then publicly exchange the two mixed colors. Finally, each of the two mix together the color they received from the partner with their own private color. The result is a final color mixture (brown) that is identical with the partner's color mixture.

If another party had been listening in on the exchange, it is computationally difficult for that person to determine the common secret color; in fact, when using large numbers rather than colors, this action is impossible for modern [[supercomputers]] to do in a reasonable amount of time.

===Cryptographic explanation===

<!-- Deleted image removed: [[Image:DiffieHellman.png|center|thumb|600px|Diffie–Hellman key exchange]] -->
The simplest and the original implementation of the protocol uses the [[Multiplicative group of integers modulo n|multiplicative group of integers modulo]] ''p'', where ''p'' is [[prime number|prime]], and ''g'' is a [[primitive root modulo n|primitive root]] [[Modular arithmetic|modulo]] ''p''. Here is an example of the protocol, with non-secret values in <span style="color:blue">blue</span>, and secret values in'''<span style="color:red"> red</span>'''.

# [[Alice and Bob]] agree to use a modulus ''<span style="color:blue">p</span>'' = <span style="color:blue">23</span> and base ''<span style="color:blue">g</span>'' = <span style="color:blue">5</span> (which is a [[Primitive root modulo n|primitive root modulo]] 23).
# Alice chooses a secret integer '''''<span style="color:red">a</span>''''' = '''<span style="color:red">6</span>''', then sends Bob ''<span style="color:blue">A</span>'' = ''<span style="color:blue">g</span><sup>'''<span style="color:red">a</span>'''</sup>'' mod ''<span style="color:blue">p</span>''
#* ''<span style="color:blue">A</span>'' = <span style="color:blue">5</span><sup>'''<span style="color:red">6</span>'''</sup> mod <span style="color:blue">23</span> = <span style="color:blue">8</span>
# Bob chooses a secret integer '''''<span style="color:red">b</span>''''' = '''<span style="color:red">15</span>''', then sends Alice ''<span style="color:blue">B</span>'' = ''<span style="color:blue">g</span><sup>'''<span style="color:red">b</span>'''</sup>'' mod ''<span style="color:blue">p</span>''
#* ''<span style="color:blue">B</span>'' = <span style="color:blue">5</span><sup>'''<span style="color:red">15</span>'''</sup> mod <span style="color:blue">23</span> = <span style="color:blue">19</span>
# Alice computes '''''<span style="color:red">s</span>''''' = ''<span style="color:blue">B</span><sup>'''<span style="color:red">a</span>'''</sup>'' mod ''<span style="color:blue">p</span>''
#* '''''<span style="color:red">s</span>''''' = <span style="color:blue">19</span><sup>'''<span style="color:red">6</span>'''</sup> mod <span style="color:blue">23</span> = '''<span style="color:red">2</span>'''
# Bob computes '''''<span style="color:red">s</span>''''' = ''<span style="color:blue">A</span><sup>'''<span style="color:red">b</span>'''</sup>'' mod ''<span style="color:blue">p</span>''
#* '''''<span style="color:red">s</span>''''' = <span style="color:blue">8</span><sup>'''<span style="color:red">15</span>'''</sup> mod <span style="color:blue">23</span> = '''<span style="color:red">2</span>'''
# Alice and Bob now share a secret (the number '''<span style="color:red">2</span>''').

Both Alice and Bob have arrived at the same value, because:
: ''A<sup>b</sup>'' mod ''p'' = (''g<sup>a</sup>'' mod ''p'')''<sup>b</sup>'' mod ''p'' = (''g<sup>a</sup>'')''<sup>b</sup>''  mod ''p'' = (''g<sup>b</sup>'')''<sup>a</sup>''  mod ''p'' = (''g<sup>b</sup>'' mod ''p'')''<sup>a</sup>'' mod ''p'' = ''B<sup>a</sup>'' mod ''p''<ref>{{citation | first1=F. | last1=Garzia | title=Handbook of Communications Security | page=182 | publisher=WIT Press | date=2013 | isbn=1845647688 | url=https://books.google.com/books?id=F-KBlLnllSoC&pg=PA182 }}</ref>
For Bob, (''g<sup>a</sup>'' mod ''p'')''<sup>b</sup>'' mod ''p'' = (5<sup>6</sup> mod 23)<sup>15</sup> mod 23. Note that only ''a'', ''b'', and ''(g<sup>ab</sup>'' mod ''p'' = ''g<sup>ba</sup>'' mod ''p)'' are kept secret. All the other values – ''p'', ''g'', ''g<sup>a</sup>'' mod ''p'', and ''g<sup>b</sup>'' mod ''p'' – are sent in the clear. Once Alice and Bob compute the shared secret they can use it as an encryption key, known only to them, for sending messages across the same open communications channel.

Of course, much larger values of ''a'', ''b'', and ''p'' would be needed to make this example secure, since there are only 23 possible results of ''n'' mod 23. However, if ''p'' is a prime of at least 600 digits, then even the fastest modern computers cannot find ''a'' given only ''g'', ''p'' and ''g<sup>a</sup>'' mod ''p''. Such a problem is called the [[discrete logarithm problem]].<ref name=imperfectfs/> The computation of ''g<sup>a</sup>'' mod ''p'' is known as [[modular exponentiation]] and can be done efficiently even for large numbers.
Note that ''g'' need not be large at all, and in practice is usually a small integer (like 2, 3, ...).

=== Generalization to finite cyclic groups ===

Here's a more general description of the protocol,<ref>{{citation
 | first1=Johannes A. | last1=Buchmann
 | title=Introduction to Cryptography
 | pages=190−191 | edition=2nd | publisher=Springer Science & Business Media | year=2013 | isbn=1441990038
 | url=https://books.google.com/books?id=BuQlBQAAQBAJ&pg=PA190
}}</ref>

# Alice and Bob agree on a finite [[cyclic group]] ''G'' of order ''n'' and a [[Generating set of a group|generating]] element ''g'' in ''G''. (This is usually done long before the rest of the protocol; ''g'' is assumed to be known by all attackers.) The group ''G'' is written multiplicatively.
# Alice picks a random [[natural number]] ''a'', where 1 ≤ ''a'' < ''n'', and sends ''g<sup>a</sup>'' to Bob.
# Bob picks a random natural number ''b'', which is also 1 ≤ ''b'' < ''n'', and sends ''g<sup>b</sup>'' to Alice.
# Alice computes (''g<sup>b</sup>'')''<sup>a</sup>''.
# Bob computes (''g<sup>a</sup>'')''<sup>b</sup>''.

Both Alice and Bob are now in possession of the group element ''g<sup>ab</sup>'', which can serve as the shared secret key. The group ''G'' satisfies the requisite condition for secure communication if there is not an efficient algorithm for determining whether ''g<sup>ab</sup>'' = ''g<sup>c</sup>'' given ''g<sup>a</sup>'', ''g<sup>b</sup>'', and ''g<sup>c</sup>'' for some ''c'' &#8712; ''G''.

===Secrecy chart===
The chart below depicts who knows what, again with non-secret values in <span style="color:blue">blue</span>, and secret values in'''<span style="color:red"> red</span>'''. Here Eve is an [[eavesdropper]]&mdash;she watches what is sent between Alice and Bob, but she does not alter the contents of their communications.

* ''<span style="color:blue">g</span>'' = public (prime) base, known to Alice, Bob, and Eve. ''<span style="color:blue">g</span>'' = <span style="color:blue">5</span>
* ''<span style="color:blue">p</span>'' = public (prime) modulus, known to Alice, Bob, and Eve. ''<span style="color:blue">p</span>'' = <span style="color:blue">23</span>

* '''''<span style="color:red">a</span>''''' = Alice's private key, known only to Alice. '''''<span style="color:red">a</span>''''' = '''<span style="color:red">6</span>'''
* '''''<span style="color:red">b</span>''''' = Bob's private key known only to Bob. '''''<span style="color:red">b</span>''''' = '''<span style="color:red">15</span>'''

* ''<span style="color:blue">A</span>'' = Alice's public key, known to Alice, Bob, and Eve. ''<span style="color:blue">A</span>'' = ''<span style="color:blue">g</span><sup>'''<span style="color:red">a</span>'''</sup>'' mod ''<span style="color:blue">p</span>'' = <span style="color:blue">8</span>
* ''<span style="color:blue">B</span>'' = Bob's public key, known to Alice, Bob, and Eve. ''<span style="color:blue">B</span>'' = ''<span style="color:blue">g</span><sup>'''<span style="color:red">b</span>'''</sup>'' mod ''<span style="color:blue">p</span>'' = <span style="color:blue">19</span>

{| border="0" cellspacing="0" cellpadding="2"
|-
| valign="top" |
{| class="wikitable"
|+ Alice
|- style="text-align:center;" 
! Known
! Unknown
|-
| ''<span style="color:blue">p</span>'' = <span style="color:blue">23</span>
|
|-
| ''<span style="color:blue">g</span>'' = <span style="color:blue">5</span>
|
|-
| '''''<span style="color:red">a</span>''''' = '''<span style="color:red">6</span>'''
| '''''<span style="color:red">b</span>'''''
|-
| ''<span style="color:blue">A</span>'' = <span style="color:blue">5</span><sup>'''<span style="color:red">a</span>'''</sup> mod <span style="color:blue">23</span>
|
|-
| ''<span style="color:blue">A</span>'' = <span style="color:blue">5</span><sup>'''<span style="color:red">6</span>'''</sup> mod <span style="color:blue">23</span> = <span style="color:blue">8</span>
|
|-
| '''''<span style="color:blue">B</span>''''' = '''<span style="color:blue">19</span>'''
| 
|-
| '''''<span style="color:red">s</span>''''' =  <span style="color:blue">B</span><sup>'''<span style="color:red">a</span>'''</sup> mod <span style="color:blue">23</span>'''
|
|-
| '''''<span style="color:red">s</span>''''' = <span style="color:blue">19</span><sup>'''''<span style="color:red">6</span>'''''</sup> mod <span style="color:blue">23</span> = '''<span style="color:red">2</span>'''
|
|-
| '''''<span style="color:red">s</span>''''' = '''<span style="color:red">2</span>'''
|
|}
| valign="top" | 
{| class="wikitable"
|+ Bob
|- style="text-align:center;" 
! Known
! Unknown
|-
| ''<span style="color:blue">p</span>'' = <span style="color:blue">23</span>
|
|-
| ''<span style="color:blue">g</span>'' = <span style="color:blue">5</span>
|
|-
| '''''<span style="color:red">b</span>''''' = '''<span style="color:red">15</span>'''
| '''''<span style="color:red">a</span>'''''
|-
| ''<span style="color:blue">B</span>'' = <span style="color:blue">5</span><sup>'''''<span style="color:red">b</span>'''''</sup> mod <span style="color:blue">23</span>
|
|-
| ''<span style="color:blue">B</span>'' = <span style="color:blue">5</span><sup>'''<span style="color:red">15</span>'''</sup> mod <span style="color:blue">23</span> = <span style="color:blue">19</span>
|
|-
| '''''<span style="color:blue">A</span>''''' = '''<span style="color:blue">8</span>'''
| 
|-
| '''''<span style="color:red">s</span>''''' = <span style="color:blue">A</span><sup>'''<span style="color:red">b</span>'''</sup> mod <span style="color:blue">23</span>'''
|
|-
| '''''<span style="color:red">s</span>''''' = <span style="color:blue">8</span><sup>'''''<span style="color:red">15</span>'''''</sup> mod <span style="color:blue">23</span> = '''<span style="color:red">2</span>'''
|
|-
| '''''<span style="color:red">s</span>''''' = '''<span style="color:red">2</span>'''
|
|}
| valign="top" | 
{| class="wikitable"
|+ Eve
|- style="text-align:center;" 
! Known
! Unknown
|-
| ''<span style="color:blue">p</span>'' = <span style="color:blue">23</span>
|
|-
| ''<span style="color:blue">g</span>'' = <span style="color:blue">5</span>
|
|-
|
| '''''<span style="color:red">a</span>''''', '''''<span style="color:red">b</span>'''''
|-
| &nbsp;
| &nbsp;
|-
| &nbsp;
| &nbsp;
|-
| ''<span style="color:blue">A</span>'' = <span style="color:blue">8</span>, ''<span style="color:blue">B</span>'' = <span style="color:blue">19</span>
| 
|-
| &nbsp;
| &nbsp;
|-
| '''''<span style="color:red">s</span>''''' = <span style="color:blue">19</span><sup>'''''<span style="color:red">a</span>'''''</sup> mod <span style="color:blue">23</span> = <span style="color:blue">8</span><sup>'''''<span style="color:red">b</span>'''''</sup> mod <span style="color:blue">23</span>
|
|-
|
| '''''<span style="color:red">s</span>'''''
|}
|}

Now '''''<span style="color:red">s</span>''''' is the shared secret key and it is known to both Alice and Bob, but ''not'' to Eve.

Note: It should be difficult for Alice to solve for Bob's private key or for Bob to solve for Alice's private key. If it is not difficult for Alice to solve for Bob's private key (or vice versa), Eve may simply substitute her own private / public key pair, plug Bob's public key into her private key, produce a fake shared secret key, and solve for Bob's private key (and use that to solve for the shared secret key. Eve may attempt to choose a public / private key pair that will make it easy for her to solve for Bob's private key).

Another demonstration of Diffie-Hellman (also using numbers too small for practical use) is given [http://buchananweb.co.uk/security02.aspx here].<ref>{{citation | first1=Bill | last1=Buchanan | title=Diffie-Hellman Example in ASP.NET | work=Bill's Security Tips | url=http://buchananweb.co.uk/security02.aspx | accessdate=2015-08-27 }}</ref>

==Operation with more than two parties==
Diffie–Hellman key agreement is not limited to negotiating a key shared by only two participants. Any number of users can take part in an agreement by performing iterations of the agreement protocol and exchanging intermediate data (which does not itself need to be kept secret). For example, Alice, Bob, and Carol could participate in a Diffie–Hellman agreement as follows, with all operations taken to be modulo ''p'':

# The parties agree on the algorithm parameters ''p'' and ''g''.
# The parties generate their private keys, named ''a'', ''b'', and ''c''.
# Alice computes ''g<sup>a</sup>'' and sends it to Bob.
# Bob computes ''(g<sup>a</sup>)<sup>b</sup>'' = ''g<sup>ab</sup>'' and sends it to Carol.
# Carol computes ''(g<sup>ab</sup>)<sup>c</sup>'' = ''g<sup>abc</sup>'' and uses it as her secret.
# Bob computes ''g<sup>b</sup>'' and sends it to Carol.
# Carol computes ''(g<sup>b</sup>)<sup>c</sup>'' = ''g<sup>bc</sup>'' and sends it to Alice.
# Alice computes ''(g<sup>bc</sup>)<sup>a</sup>'' = ''g<sup>bca</sup>'' = ''g<sup>abc</sup>'' and uses it as her secret.
# Carol computes ''g<sup>c</sup>'' and sends it to Alice.
# Alice computes ''(g<sup>c</sup>)<sup>a</sup>'' = ''g<sup>ca</sup>'' and sends it to Bob.
# Bob computes ''(g<sup>ca</sup>)<sup>b</sup>'' = ''g<sup>cab</sup>'' = ''g<sup>abc</sup>'' and uses it as his secret.

An eavesdropper has been able to see ''g<sup>a</sup>'', ''g<sup>b</sup>'', ''g<sup>c</sup>'', ''g<sup>ab</sup>'', ''g<sup>ac</sup>'', and ''g<sup>bc</sup>'', but cannot use any combination of these to efficiently reproduce ''g<sup>abc</sup>''.

To extend this mechanism to larger groups, two basic principles must be followed:

* Starting with an "empty" key consisting only of ''g'', the secret is made by raising the current value to every participant’s private exponent once, in any order (the first such exponentiation yields the participant’s own public key).
* Any intermediate value (having up to ''N''-1 exponents applied, where ''N'' is the number of participants in the group) may be revealed publicly, but the final value (having had all ''N'' exponents applied) constitutes the shared secret and hence must never be revealed publicly. Thus, each user must obtain their copy of the secret by applying their own private key last (otherwise there would be no way for the last contributor to communicate the final key to its recipient, as that last contributor would have turned the key into the very secret the group wished to protect).

These principles leave open various options for choosing in which order participants contribute to keys. The simplest and most obvious solution is to arrange the ''N'' participants in a circle and have ''N'' keys rotate around the circle, until eventually every key has been contributed to by all ''N'' participants (ending with its owner) and each participant has contributed to ''N'' keys (ending with their own). However, this requires that every participant perform ''N'' modular exponentiations.

By choosing a more optimal order, and relying on the fact that keys can be duplicated, it is possible to reduce the number of modular exponentiations performed by each participant to {{nowrap|log<sub>2</sub>(''N'') + 1}} using a [[Divide and conquer algorithms|divide-and-conquer-style]] approach, given here for eight participants:

# Participants A, B, C, and D each perform one exponentiation, yielding ''g<sup>abcd</sup>''; this value is sent to E, F, G, and H. In return, participants A, B, C, and D receive ''g<sup>efgh</sup>''.
# Participants A and B each perform one exponentiation, yielding ''g<sup>efghab</sup>'', which they send to C and D, while C and D do the same, yielding ''g<sup>efghcd</sup>'', which they send to A and B.
# Participant A performs an exponentiation, yielding ''g<sup>efghcda</sup>'', which it sends to B; similarly, B sends ''g<sup>efghcdb</sup>'' to A. C and D do similarly.
# Participant A performs one final exponentiation, yielding the secret ''g<sup>efghcdba</sup>'' = ''g<sup>abcdefgh</sup>'', while B does the same to get ''g<sup>efghcdab</sup>'' = ''g<sup>abcdefgh</sup>''; again, C and D do similarly.
# Participants E through H simultaneously perform the same operations using ''g<sup>abcd</sup>'' as their starting point.

Once this operation has been completed all participants will possess the secret ''g<sup>abcdefgh</sup>'', but each participant will have performed only four modular exponentiations, rather than the eight implied by a simple circular arrangement.

==Security==
The protocol is considered secure against eavesdroppers if ''G'' and ''g'' are chosen properly. In particular, the order of the group G must be large, particularly if the same group is used for large amounts of traffic. The eavesdropper ("[[Alice and Bob|Eve]]") has to solve the [[Diffie–Hellman problem]] to obtain ''g''<sup>''ab''</sup>. This is currently considered difficult for groups whose order is large enough. An efficient algorithm to solve the [[discrete logarithm problem]] would make it easy to compute ''a'' or ''b'' and solve the Diffie–Hellman problem, making this and many other public key cryptosystems insecure.  Fields of small characteristic may be less secure.<ref>{{cite conference | first1=Razvan | last1=Barbulescu | first2=Pierrick | last2=Gaudry | first3=Antoine | last3=Joux | first4=Emmanuel | last4=Thomé  | title=A Heuristic Quasi-Polynomial Algorithm for Discrete Logarithm in Finite Fields of Small Characteristic | work=Lecture Notes in Computer Science | book-title=Advances in Cryptology – EUROCRYPT 2014 | conference=Proceedings 33rd Annual International Conference on the Theory and Applications of Cryptographic Techniques | location=Copenhagen, Denmark | volume=8441 | date=2014 | pages=1–16 | doi=10.1007/978-3-642-55220-5_1 | isbn=978-3-642-55220-5 }}</ref>

The [[Order (group theory)|order]] of ''G'' should have a large prime factor to prevent use of the [[Pohlig–Hellman algorithm]] to obtain ''a'' or ''b''. For this reason, a [[Sophie Germain prime]] ''q'' is sometimes used to calculate {{nowrap|1=''p'' = 2''q'' + 1}}, called a [[safe prime]], since the order of ''G'' is then only divisible by 2 and ''q''. ''g'' is then sometimes chosen to generate the order ''q'' subgroup of ''G'', rather than ''G'', so that the [[Legendre symbol]] of ''g<sup>a</sup>'' never reveals the low order bit of ''a''. A protocol using such a choice is for example [[Internet Key Exchange|IKEv2]].<ref>{{Cite news|title=RFC 4306 Internet Key Exchange (IKEv2) Protocol |publisher=Internet Engineering Task Force (IETF) |author=C. Kaufman (Microsoft) |date=December 2005 |url=http://www.ietf.org/rfc/rfc4306.txt }}</ref>

''g'' is often a small integer such as 2. Because of the [[random self-reducibility]] of the discrete logarithm problem a small ''g'' is equally secure as any other generator of the same group.

If Alice and Bob use [[random number generator]]s whose outputs are not completely random and can be predicted to some extent, then Eve's task is much easier.

In the original description, the Diffie–Hellman exchange by itself does not provide [[authentication]] of the communicating parties and is thus vulnerable to a [[man-in-the-middle attack]]. [[Alice and Bob|Mallory]] may establish two distinct key exchanges, one with Alice and the other with Bob, effectively masquerading as Alice to Bob, and vice versa, allowing her to decrypt, then re-encrypt, the messages passed between them. Note that Mallory must continue to be in the middle, transferring messages every time Alice and Bob communicate. If she is ever absent, her previous presence is then revealed to Alice and Bob. They will know that all of their private conversations had been intercepted and decoded by someone in the channel.

A method to authenticate the communicating parties to each other is generally needed to prevent this type of attack. Variants of Diffie–Hellman, such as [[Station-to-Station protocol|STS protocol]], may be used instead to avoid these types of attacks.

===Practical attacks on Internet traffic===
The [[number field sieve]] algorithm, which is generally the most effective in solving the [[discrete logarithm problem]], consists of four computational steps. The first three steps only depend on the order of the group G, not on the specific number whose finite log is desired. It turns out that much Internet traffic uses one of a handful of groups that are of order 1024-bits or less. By [[precomputing]] the first three steps of the number field sieve for the most common groups, an attacker need only carry out the last step, which is much less computationally expensive than the first three steps, to obtain a specific logarithm. The [[Logjam (computer security)|Logjam]] attack used this vulnerability to compromise a variety of Internet services that allowed the use of groups whose order was a 512-bit prime number, so called [[export of cryptography|export grade]]. The authors needed several thousand CPU cores for a week to precompute data for a single 512-bit prime. Once that was done, however, individual logarithms could be solved in about a minute using two 18-core Intel Xeon CPUs.<ref name=imperfectfs/>

As estimated by the authors behind the [[Logjam (computer security)|Logjam]] attack, the much more difficult precomputation needed to solve the discrete log problem for a 1024-bit prime would cost on the order of $100 million, well within the budget of large national [[intelligence agency]] such as the U.S. [[National Security Agency]] (NSA). The Logjam authors speculate that precomputation against widely reused 1024 DH primes is behind claims in [[Global surveillance disclosures (2013–present)|leaked NSA documents]] that NSA is able break much of current crypto.<ref name=imperfectfs/>

To avoid these vulnerabilities, authors recommend use of [[elliptic curve cryptography]], for which no similar attack is known. Failing that, they recommend that the order, ''p'', of the Diffie–Hellman group should be at least 2048 bits. They estimate that the pre-computation required for a 2048-bit prime is 10<sup>9</sup> more difficult than for 1024-bit primes.<ref name=imperfectfs>{{cite web |last1=Adrian |first1=David |last2=Bhargavan |first2=Karthikeyan |last3=Durumeric |first3=Zakir |last4=Gaudry |first4=Pierrick |last5=Green |first5=Matthew |last6=Halderman |first6=J. Alex |last7=Heninger |first7=Nadia |last8=Springall |first8=Drew |last9=Thomé |first9=Emmanuel |last10=Valenta |first10=Luke |last11=VanderSloot |first11=Benjamin |last12=Wustrow |first12=Eric |last13=Zanella-Béguelin |first13=Santiago |last14=Zimmermann |first14=Paul  |title=Imperfect Forward Secrecy: How Diffie-Hellman Fails in Practice |url=https://weakdh.org/imperfect-forward-secrecy.pdf |date=October 2015}}</ref>

==Other uses==

===Encryption===

Public key encryption schemes based on the Diffie–Hellman key exchange have been proposed. The first such scheme is the [[ElGamal encryption]]. A more modern variant is the [[Integrated Encryption Scheme]].

===Forward secrecy===

Protocols that achieve [[forward secrecy]] generate new key pairs for each [[session (computer science)|session]] and discard them at the end of the session.
The Diffie–Hellman key exchange is a frequent choice for such protocols, because of its fast key generation.

===Password-authenticated key agreement===

When Alice and Bob share a password, they may use a [[password-authenticated key agreement]] (PK) form of Diffie–Hellman to prevent man-in-the-middle attacks. One simple scheme is to compare the [[Cryptographic hash function|hash]] of '''s''' concatenated with the password calculated independently on both ends of channel. A feature of these schemes is that an attacker can only test one specific password on each iteration with the other party, and so the system provides good security with relatively weak passwords. This approach is described in [[ITU-T]] Recommendation [[X.1035]], which is used by the [[G.hn]] home networking standard.

===Public key===
It is also possible to use Diffie–Hellman as part of a [[public key infrastructure]], allowing Bob to encrypt a message so that only Alice will be able to decrypt it, with no prior communication between them other than Bob having trusted knowledge of Alice's public key. Alice's public key is <math>(g^a \bmod{p}, g, p)</math>. To send her a message, Bob chooses a random ''b'' and then sends Alice <math>g^b \bmod p</math> (un-encrypted) together with the message encrypted with symmetric key <math>(g^a)^b \bmod{p}</math>. Only Alice can determine the symmetric key and hence decrypt the message because only she has ''a'' (the private key). A pre-shared public key also prevents man-in-the-middle attacks.

In practice, Diffie–Hellman is not used in this way, with [[RSA (algorithm)|RSA]] being the dominant public key algorithm. This is largely for historical and commercial reasons, namely that [[RSA (security firm)|RSA Security]] created a certificate authority for key signing that became [[Verisign]]. Diffie–Hellman cannot be used to sign certificates. However, the [[ElGamal signature scheme|ElGamal]] and [[Digital Signature Algorithm|DSA]] signature algorithms are mathematically related to it, as well as [[MQV]], [[Station-to-Station protocol|STS]] and the [[Internet key exchange|IKE]] component of the [[IPsec]] protocol suite for securing [[Internet Protocol]] communications.

==See also==
{{Portal|Cryptography}}

{{Div col||22em}}
* [[Portal:Cryptography|Cryptography portal]]
* [[Modular arithmetic]]
* [[Elliptic curve Diffie–Hellman]]
* [[ElGamal encryption]]
* [[MQV]]
* [[Password-authenticated key agreement]]
* [[Secure Remote Password Protocol]]
* [[Supersingular Isogeny Key Exchange]]
* [[Logjam (computer security)|Logjam vulnerability]]
{{Div col end}}

== Notes ==
<references group="nb" />

==References==
{{Reflist}}

===General references===
* {{cite book | last1=Gollman | first1=Dieter | title=Computer Security | year=2011 | edition=2nd | publisher=John Wiley & Sons, Ltd. | publication-place=West Sussex, England | isbn=0470741155 }}
* {{cite techreport | last1=Williamson | first1=Malcolm J. | title=Non—secret encryption using a finite field | institution=Communications Electronics Security Group | date=January 21, 1974 | url=https://www.cesg.gov.uk/publications/Documents/nonsecret_encryption_finite_field.pdf | accessdate=2015-08-25 }}
* {{cite techreport | last1=Williamson | first1=Malcolm J. | title=Thoughts on Cheaper Non-Secret Encryption | institution=Communications Electronics Security Group | date=August 10, 1976 | url=http://www.fi.muni.cz/usr/matyas/lecture/paper3.pdf | accessdate=2015-08-25 }}
* [http://cryptocellar.web.cern.ch/cryptocellar/cesg/ellis.pdf The History of Non-Secret Encryption] [[James H. Ellis|JH Ellis]] 1987 (28K PDF file) ([http://www.jya.com/ellisdoc.htm HTML version]{{Dead link|date=August 2012}})
* [http://cr.yp.to/bib/1988/diffie.pdf The First Ten Years of Public-Key Cryptography] Whitfield Diffie, Proceedings of the IEEE, vol. 76, no. 5, May 1988, pp: 560–577 (1.9MB PDF file)
* [[Alfred Menezes|Menezes, Alfred]]; [[Paul van Oorschot|van Oorschot, Paul]]; [[Scott Vanstone|Vanstone, Scott]] (1997). ''[[Handbook of Applied Cryptography]]'' Boca Raton, Florida: CRC Press. ISBN 0-8493-8523-7. ([http://www.cacr.math.uwaterloo.ca/hac/ Available online])
* [[Simon Singh|Singh, Simon]] (1999) ''[[The Code Book: the evolution of secrecy from Mary Queen of Scots to quantum cryptography]]'' New York: Doubleday ISBN 0-385-49531-5
* [http://dx.doi.org/10.1109/MCOM.2002.1006971 An Overview of Public Key Cryptography] Martin E. Hellman, IEEE Communications Magazine, May 2002, pp:42–49. (123kB PDF file)

==External links==
*[http://purl.umn.edu/107353 Oral history interview with Martin Hellman], [[Charles Babbage Institute]], University of Minnesota. Leading cryptography scholar [[Martin Hellman]] discusses the circumstances and fundamental insights of his invention of [[public key cryptography]] with collaborators [[Whitfield Diffie]] and [[Ralph Merkle]] at Stanford University in the mid-1970s.
* RFC 2631 – ''Diffie–Hellman Key Agreement Method'' E. Rescorla June 1999.
* [https://web.archive.org/web/20040903080553/http://csrc.nist.gov/CryptoToolkit/kms/summary-x9-42.pdf Summary of ANSI X9.42: Agreement of Symmetric Keys Using Discrete Logarithm Cryptography] (64K PDF file) ([http://www.rsasecurity.com/rsalabs/node.asp?id=2306 Description of ANSI 9 Standards])
* [http://docs.google.com/viewer?a=v&pid=sites&srcid=bmV0aXAuY29tfGhvbWV8Z3g6NTA2NTM0YmNhZjRhZDYzZQ Diffie–Hellman Key Exchange – A Non-Mathematician’s Explanation] by Keith Palmgren
* [https://metacpan.org/module/Crypt::DH Crypt::DH] [[Perl]] module from [[CPAN]]
* [http://ds9a.nl/tmp/dh.html Hands-on Diffie–Hellman demonstration]
* [http://oldpiewiki.yoonkn.com/cgi-bin/moin.cgi/DiffieHellmanKeyExchange C implementation using GNU Multiple Precision Arithmetic Library]{{Dead link|date=December 2010}}
* [http://www.cypherspace.org/adam/rsa/perl-dh.html Diffie Hellman in 2 lines of Perl] (using [[dc (computer program)|dc]])
* [http://code.google.com/p/sacct/ Smart Account Management (SAcct)] (using DH key exchange to derive session key)
* [https://www.youtube.com/watch?v=YEBfamv-_do Diffie-Hellman Key Exchange] - A YouTube video by [[Khan Academy]] faculty member Brit Cruise
* [http://video.google.com/videoplay?docid=8991737124862867507 Talk by Martin Hellman in 2007, Google video] (broken link)

{{Cryptography navbox | public-key}}

{{DEFAULTSORT:Diffie-Hellman Key Exchange}}
[[Category:Key-agreement protocols]]
[[Category:Public-key cryptography]]