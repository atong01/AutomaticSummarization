<article title='C_%28programming_language%29'><paragraph><template><target>About</target><arg>the programming language</arg><arg name="3"><space/>C (disambiguation)</arg></template><template><target>Infobox programming language</target><arg name="name"><space/>C
</arg><arg name="paradigm"><space/>[[Imperative programming|Imperative]] ([[Procedural programming|procedural]]), [[structured programming|structured]]
</arg><arg name="logo"><space/>File:The C Programming Language logo.svg
</arg><arg name="logo size"><space/>140px
</arg><arg name="logo alt"><space/>Text in light blue serif capital letters on white background and very large light blue sans-serif letter C.
</arg><arg name="logo caption"><space/>''[[The C Programming Language]]''<ref name</arg><arg name="year"><space/>{{start date and age|1972}}<ref name</arg><arg name="designer"><space/>[[Dennis Ritchie]]
</arg><arg name="developer"><space/>Dennis Ritchie & [[Bell Labs]] (creators); ANSI X3J11 ([[ANSI C]]); {{nobr|ISO/IEC JTC1/SC22/WG14}} (ISO C)
</arg><arg name="latest release version"><space/>[[C11 (C standard revision)|C11]]
</arg><arg name="latest release date"><space/>{{start date and age|2011|12}}
</arg><arg name="turing-complete"><space/>Yes
</arg><arg name="typing"><space/>[[Type system|Static]], [[Weak typing|weak]], [[manifest typing|manifest]], [[Nominal type system|nominal]]
</arg><arg name="implementations"><space/>[[GNU Compiler Collection|GCC]], [[Clang]], {{nowrap|[[Intel C++ Compiler|Intel C]],}} [[MSVC]], {{nowrap|[[Pelles C]],}} {{nowrap|[[Watcom C/C++ compiler|Watcom C]]}}
</arg><arg name="influenced_by"><space/>[[B (programming language)|B]] ([[BCPL]], [[CPL (programming language)|CPL]]), [[ALGOL 68]],<ref name</arg><arg name="influenced"><space/>[[:Category:C programming language family|Numerous]]: [[AMPL]], [[AWK]], [[C shell|csh]], [[C++]], [[C--]], [[C Sharp (programming language)|C#]], [[Objective-C]], [[BitC]], [[D (programming language)|D]], [[Go (programming language)|Go]], [[Rust (programming language)|Rust]], [[Java (programming language)|Java]], [[JavaScript]], [[Limbo (programming language)|Limbo]], [[LPC (programming language)|LPC]], [[Perl]], [[PHP]], [[Pike (programming language)|Pike]], [[Processing (programming language)|Processing]], [[Python (programming language)|Python]], [[Seed7]], [[Verilog]] (HDL)<ref name</arg><arg name="dialects"><space/>[[Cyclone (programming language)|Cyclone]], [[Unified Parallel C]], [[Split-C]], [[Cilk]], [[C*]]
</arg><arg name="operating system"><space/>[[Cross-platform]]
</arg><arg name="file ext"><space/>{{Mono|.c}}, {{Mono|.h}}
</arg><arg name="wikibooks"><space/>C Programming
</arg></template></paragraph><paragraph><bold>C</bold><space/>(<template><target>IPAc-en</target><arg>'</arg><arg>s</arg><arg>iÀê</arg></template>, as in<space/><link><target>C</target><part>the letter ''c''</part></link>) is a<space/><link><target>General-purpose language</target><part>general-purpose</part></link>,<space/><link><target>imperative programming</target><part>imperative</part></link><space/>computer<space/><link><target>programming language</target></link>, supporting<space/><link><target>structured programming</target></link>,<space/><link><target>lexical variable scope</target></link><space/>and<space/><link><target>Recursion (computer science)</target><part>recursion</part></link>, while a<space/><link><target>static type system</target></link><space/>prevents many unintended operations. By design, C provides constructs that map efficiently to typical<space/><link><target>machine instruction</target><trail>s</trail></link>, and therefore it has found lasting use in applications that had formerly been coded in<space/><link><target>assembly language</target></link>, including<space/><link><target>operating system</target><trail>s</trail></link>, as well as various<space/><link><target>application software</target></link><space/>for computers ranging from<space/><link><target>supercomputer</target><trail>s</trail></link><space/>to<space/><link><target>embedded system</target><trail>s</trail></link>.</paragraph><paragraph>C was originally developed by<space/><link><target>Dennis Ritchie</target></link><space/>between 1969 and 1973 at<space/><link><target>AT&amp;T Bell Labs</target></link>,<extension extension_name='ref' name="chistory"></extension><space/>and used to re-implement the<space/><link><target>Unix</target></link><space/>operating system.<extension extension_name='ref' name="AutoTX-1"></extension><space/>It has since become one of the<space/><link><target>Measuring programming language popularity</target><part>most widely used</part></link><space/>programming languages of all time,<extension extension_name='ref' name="AutoTX-2"></extension><extension extension_name='ref' name="AutoTX-3"></extension><space/>with C<space/><link><target>compiler</target><trail>s</trail></link><space/>from various vendors available for the majority of existing<space/><link><target>computer architecture</target><trail>s</trail></link><space/>and operating systems. C has been standardized by the<space/><link><target>American National Standards Institute</target></link><space/>(ANSI) since 1989 (see<space/><link><target>ANSI C</target></link>) and subsequently by the<space/><link><target>International Organization for Standardization</target></link><space/>(ISO).</paragraph><heading level='2'>Design</heading><paragraph>C is an<space/><link><target>imperative programming</target><part>imperative</part></link><space/>(<link><target>procedural programming</target><part>procedural</part></link>) language. It was designed to be compiled using a relatively straightforward<space/><link><target>compiler</target></link>, to provide low-level access to memory, to provide language constructs that map efficiently to machine instructions, and to require minimal<space/><link><target>Run-time system</target><part>run-time support</part></link>. C was therefore useful for many applications that had formerly been coded in assembly language, such as in<space/><link><target>system programming</target></link>.</paragraph><paragraph>Despite its low-level capabilities, the language was designed to encourage<space/><link><target>cross-platform</target></link><space/>programming. A standards-compliant and<space/><link><target>porting</target><part>portably</part></link><space/>written C program can be compiled for a very wide variety of computer platforms and operating systems with few changes to its source code. The language has become available on a very wide range of platforms, from embedded<space/><link><target>microcontroller</target><trail>s</trail></link><space/>to<space/><link><target>supercomputer</target><trail>s</trail></link>.</paragraph><heading level='2'>Overview</heading><paragraph>Like most imperative languages in the<space/><link><target>ALGOL</target></link><space/>tradition, C has facilities for<space/><link><target>structured programming</target></link><space/>and allows<space/><link><target>lexical variable scope</target></link><space/>and<space/><link><target>Recursion (computer science)</target><part>recursion</part></link>, while a static<space/><link><target>type system</target></link><space/>prevents many unintended operations. In C, all executable code is contained within<space/><link><target>subroutine</target><trail>s</trail></link>, which are called &quot;functions&quot; (although not in the strict sense of<space/><link><target>functional programming</target></link>).<space/><link><target>Function parameter</target><trail>s</trail></link><space/>are always passed by value. Pass-by-reference is simulated in C by explicitly passing<space/><link><target>pointer (computer programming)</target><part>pointer</part></link><space/>values. C program source text is<space/><link><target>free-form language</target><part>free-format</part></link>, using the<space/><link><target>semicolon</target></link><space/>as a<space/><link><target>Statement (programming)</target><part>statement</part></link><space/>terminator and<space/><link><target>curly braces</target></link><space/>for grouping blocks of statements.</paragraph><paragraph>The C language also exhibits the following characteristics:</paragraph><list type='bullet'><listitem>There is a small, fixed number of keywords, including a full set of<space/><link><target>flow of control</target></link><space/>primitives:<space/><xhtml:code><link><target>For loop</target><part>for</part></link></xhtml:code>,<space/><xhtml:code><link><target>Conditional (programming)</target><part>if/else</part></link></xhtml:code>,<space/><xhtml:code><link><target>While loop</target><part>while</part></link></xhtml:code>,<space/><xhtml:code><link><target>Switch statement</target><part>switch</part></link></xhtml:code>, and<space/><xhtml:code><link><target>Do while loop</target><part>do/while</part></link></xhtml:code>. There is one<space/><link><target>namespace</target></link>, and user-defined names are not distinguished from keywords by any kind of<space/><link><target>Sigil (computer programming)</target><part>sigil</part></link>.</listitem><listitem>There are a large number of arithmetical and logical operators, such as<space/><xhtml:code>+</xhtml:code>,<space/><xhtml:code>+=</xhtml:code>,<space/><xhtml:code>++</xhtml:code>,<space/><xhtml:code>&amp;amp;</xhtml:code>,<space/><xhtml:code>~</xhtml:code>, etc.</listitem><listitem>More than one<space/><link><target>Assignment (computer science)</target><part>assignment</part></link><space/>may be performed in a single statement.</listitem><listitem>Function return values can be ignored when not needed.</listitem><listitem>Typing is<space/><link><target>Static typing</target><part>static</part></link>, but<space/><link><target>Strong and weak typing</target><part>weakly enforced</part></link>: all data has a type, but implicit conversions can be performed; for instance, characters can be used as integers.</listitem><listitem><link><target>Declaration (computer programming)</target><part>Declaration</part></link><space/><link><target>C syntax</target><part>syntax</part></link><space/>mimics usage context. C has no &quot;define&quot; keyword; instead, a statement beginning with the name of a type is taken as a declaration. There is no &quot;function&quot; keyword; instead, a function is indicated by the parentheses of an argument list.</listitem><listitem>User-defined (<xhtml:code>typedef</xhtml:code>) and compound types are possible.<list type='bullet'><listitem>Heterogeneous aggregate data types (<xhtml:code><link><target>struct (C programming language)</target><part>struct</part></link></xhtml:code>) allow related data elements to be accessed and assigned as a unit.</listitem><listitem><link><target>Array data type</target><part>Array</part></link><space/>indexing is a secondary notation, defined in terms of pointer arithmetic. Unlike structs, arrays are not first-class objects; they cannot be assigned or compared using single built-in operators. There is no &quot;array&quot; keyword, in use or definition; instead, square brackets indicate arrays syntactically, for example<space/><xhtml:code>month[11]</xhtml:code>.</listitem><listitem><link><target>Enumerated type</target><trail>s</trail></link><space/>are possible with the<space/><xhtml:code>enum</xhtml:code><space/>keyword. They are not tagged, and are freely interconvertible with integers.</listitem><listitem><link><target>String (computer science)</target><part>Strings</part></link><space/>are not a separate data type, but are conventionally implemented as<space/><link><target>Null-terminated string</target><part>null-terminated</part></link><space/>arrays of characters.</listitem></list></listitem><listitem>Low-level access to<space/><link><target>computer memory</target></link><space/>is possible by converting machine addresses to typed<space/><link><target>pointer (computer programming)</target><part>pointers</part></link>.</listitem><listitem><link><target>Procedure (computer science)</target><part>Procedures</part></link><space/>(subroutines not returning values) are a special case of function, with an untyped return type<space/><xhtml:code>void</xhtml:code>.</listitem><listitem>Functions may not be defined within the lexical scope of other functions.</listitem><listitem>Function and data pointers permit<space/><italics>ad hoc</italics><space/><link><target>run-time polymorphism</target></link>.</listitem><listitem>A<space/><link><target>C preprocessor</target><part>preprocessor</part></link><space/>performs<space/><link><target>Macro (computer science)</target><part>macro</part></link><space/>definition,<space/><link><target>source code</target></link><space/>file inclusion, and<space/><link><target>conditional compilation</target></link>.</listitem><listitem>There is a basic form of<space/><link><target>Modular programming</target><part>modularity</part></link>: files can be compiled separately and<space/><link><target>Linker (computing)</target><part>linked</part></link><space/>together, with control over which functions and data objects are visible to other files via<space/><link><target>Static (keyword)</target><part><xhtml:code>static</xhtml:code></part></link><space/>and<space/><xhtml:code>extern</xhtml:code><space/>attributes.</listitem><listitem>Complex functionality such as<space/><link><target>input/output</target><part>I/O</part></link>,<space/><link><target>string (computer science)</target><part>string</part></link><space/>manipulation, and mathematical functions are consistently delegated to<space/><link><target>library (computing)</target><part>library routines</part></link>.</listitem></list><paragraph>C does not include some features found in newer, more modern high-level languages, including<space/><link><target>object-oriented programming</target><part>object orientation</part></link><space/>and<space/><link><target>garbage collection (computer science)</target><part>garbage collection</part></link>.</paragraph><heading level='3'>Relations to other languages</heading><paragraph>Many later languages have borrowed directly or indirectly from C, including<space/><link><target>C++</target></link>,<space/><link><target>D (programming language)</target><part>D</part></link>,<space/><link><target>Go (programming language)</target><part>Go</part></link>,<space/><link><target>Rust (programming language)</target><part>Rust</part></link>,<space/><link><target>Java (programming language)</target><part>Java</part></link>,<space/><link><target>JavaScript</target></link>,<space/><link><target>Limbo (programming language)</target><part>Limbo</part></link>,<space/><link><target>LPC (programming language)</target><part>LPC</part></link>,<space/><link><target>C Sharp (programming language)</target><part>C#</part></link>,<space/><link><target>Objective-C</target></link>,<space/><link><target>Perl</target></link>,<space/><link><target>PHP</target></link>,<space/><link><target>Python (programming language)</target><part>Python</part></link>,<space/><link><target>Verilog</target></link><space/>(hardware description language),<extension extension_name='ref' name="vinsp"></extension><space/>and Unix's<space/><link><target>C shell</target></link>. These languages have drawn many of their<space/><link><target>control structures</target></link><space/>and other basic features from C. Most of them (with Python being the most dramatic exception) are also very<space/><link><target>Syntax (programming languages)</target><part>syntactically</part></link><space/>similar to C in general, and they tend to combine the recognizable expression and statement<space/><link><target>C syntax</target><part>syntax of C</part></link><space/>with underlying type systems, data models, and semantics that can be radically different.</paragraph><heading level='2'>History</heading><heading level='3'>Early developments</heading><paragraph><link><target>File:Ken n dennis.jpg</target><part>thumb</part><part><link><target>Ken Thompson</target></link><space/>(left) with<space/><link><target>Dennis Ritchie</target></link><space/>(right, the inventor of the C programming language)</part></link></paragraph><paragraph>The origin of C is closely tied to the development of the<space/><link><target>Unix</target></link><space/>operating system, originally implemented in<space/><link><target>assembly language</target></link><space/>on a<space/><link><target>PDP-7</target></link><space/>by Ritchie and Thompson, incorporating several ideas from colleagues. Eventually they decided to port the operating system to a<space/><link><target>PDP-11</target></link>. The original PDP-11 version of Unix was developed in assembly language. The developers were considering to rewrite the system using the<space/><link><target>B (programming language)</target><part>B language</part></link>, Thompson's simplified version of<space/><link><target>BCPL</target></link>.<extension extension_name='ref' name="sigplan"><template><target>cite journal</target><arg name="first"><space/>Dennis M.</arg><arg name="last"><space/>Ritchie<space/></arg><arg name="authorlink"><space/>Dennis Ritchie<space/></arg><arg name="title"><space/>The Development of the C Language<space/></arg><arg name="date"><space/>March 1993<space/></arg><arg name="journal"><space/>ACM SIGPLAN Notices<space/></arg><arg name="volume"><space/>28<space/></arg><arg name="issue"><space/>3<space/></arg><arg name="pages"><space/>201‚Äì208<space/></arg><arg name="url"><space/>http://www.bell-labs.com/usr/dmr/www/chist.html<space/></arg><arg name="doi"><space/>10.1145/155360.155580<space/></arg><arg name="ref"><space/>harv</arg></template></extension><space/>However B's inability to take advantage of some of the PDP-11's features, notably<space/><link><target>byte</target></link><space/>addressability, led to C.</paragraph><paragraph>The development of C started in 1972 on the PDP-11 Unix system,<extension extension_name='ref' name="unixport"></extension><space/>and first appeared in<space/><link><target>Version 2 Unix</target></link>.<extension extension_name='ref'><template><target>cite techreport</target><arg name="first">M. D.<space/></arg><arg name="last">McIlroy<space/></arg><arg name="authorlink">Doug McIlroy<space/></arg><arg name="year">1987<space/></arg><arg name="url">http://www.cs.dartmouth.edu/~doug/reader.pdf<space/></arg><arg name="title">A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971‚Äì1986<space/></arg><arg name="series">CSTR<space/></arg><arg name="number">139<space/></arg><arg name="institution">Bell Labs<space/></arg><arg name="format">PDF<space/></arg><arg name="page">10</arg></template></extension><space/>The language was not initially designed with portability in mind, but soon ran on different platforms as well: a compiler for the<space/><link><target>Honeywell 6000</target></link><space/>was written within the first year of C's history, while an<space/><link><target>IBM System/370</target></link><space/>port followed soon.<extension extension_name='ref' name="k&amp;r1e"></extension><extension extension_name='ref' name="unixport"></extension><space/>The name of C simply continued the alphabetic order started by B.<extension extension_name='ref'>Ulf Bilting &amp; Jan Skansholm &quot;Vgen till C&quot; (Swedish) meaning &quot;The Road to C&quot;, third edition, Studentlitteratur, year 2000, page 3. ISBN 91-44-01468-6.</extension></paragraph><paragraph>Also in 1972, a large part of Unix was rewritten in C.<extension extension_name='ref' name="Stallings">Stallings, William. &quot;Operating Systems: Internals and Design Principles&quot; 5th ed, page 91. Pearson Education, Inc. 2005.</extension><space/>By 1973, with the addition of<space/><xhtml:code>struct</xhtml:code><space/>types, the C language had become powerful enough that most of the<space/><link><target>Unix</target></link>'s<space/><link><target>Kernel (operating system)</target><part>kernel</part></link><space/>was now in C.</paragraph><paragraph>Unix was one of the first operating system kernels implemented in a language other than<space/><link><target>assembly language</target><part>assembly</part></link>. (Earlier instances include the<space/><link><target>Multics</target></link><space/>system (written in<space/><link><target>PL/I</target></link>), and MCP (<link><target>MCP (Burroughs Large Systems)</target><part>Master Control Program</part></link>) for the<space/><link><target>Burroughs large systems</target><part>Burroughs B5000</part></link><space/>written in<space/><link><target>ALGOL</target></link><space/>in 1961.) Circa 1977, further changes to the language were made by Ritchie and<space/><link><target>Stephen C. Johnson</target></link><space/>to facilitate portability of the Unix operating system. Johnson's<space/><link><target>Portable C Compiler</target></link><space/>served as the basis for several implementations of C on new platforms.<extension extension_name='ref' name="unixport"><template><target>cite journal</target><arg name="last1">Johnson<space/></arg><arg name="first1">S. C.<space/></arg><arg name="authorlink1">Stephen C. Johnson<space/></arg><arg name="last2">Ritchie<space/></arg><arg name="first2">D. M.<space/></arg><arg name="authorlink2">Dennis Ritchie<space/></arg><arg name="title">Portability of C Programs and the UNIX System<space/></arg><arg name="journal">Bell System Tech. J.<space/></arg><arg name="year">1978<space/></arg><arg name="volume">57<space/></arg><arg name="issue">6<space/></arg><arg name="pages">2021‚Äì2048<space/></arg><arg name="url">http://citeseerx.ist.psu.edu/viewdoc/download?doi</arg><arg name="accessdate">16 December 2012<space/></arg><arg name="doi">10.1002/j.1538-7305.1978.tb02141.x</arg></template><space/>(Note: this reference is an OCR scan of the original, and contains an OCR glitch rendering &quot;IBM 370&quot; as &quot;IBM 310&quot;.)</extension></paragraph><heading level='3'>K&amp;R C</heading><paragraph><link><target>File:The C Programming Language, First Edition Cover (2).svg</target><part>thumb</part><part>240x240px</part><part>The cover of the book, ''The C Programming Language''</part></link>In 1978,<space/><link><target>Brian Kernighan</target></link><space/>and<space/><link><target>Dennis Ritchie</target></link><space/>published the first edition of<space/><italics><link><target>The C Programming Language</target></link></italics>.<extension extension_name='ref' name="k&amp;r1e"></extension><space/>This book, known to C programmers as &quot;K&amp;R&quot;, served for many years as an informal<space/><link><target>specification</target></link><space/>of the language. The version of C that it describes is commonly referred to as<space/><italics>K&amp;R C</italics>. The second edition of the book<extension extension_name='ref' name="k&amp;r2e"></extension><space/>covers the later<space/><link><target>ANSI C</target></link><space/>standard, described below.</paragraph><paragraph>K&amp;R introduced several language features:</paragraph><list type='bullet'><listitem>standard I/O library</listitem><listitem><xhtml:code>long int</xhtml:code><space/>data type</listitem><listitem><xhtml:code>unsigned int</xhtml:code><space/>data type</listitem><listitem>compound assignment operators of the form<space/><xhtml:code>=<italics>op</italics></xhtml:code><space/>(such as<space/><xhtml:code>=-</xhtml:code>) were changed to the form<space/><xhtml:code><italics>op</italics>=</xhtml:code><space/>(that is,<space/><xhtml:code>-=</xhtml:code>) to remove the semantic ambiguity created by such constructs as<space/><xhtml:code>i=-10</xhtml:code>, which had been interpreted as<space/><xhtml:code>i&amp;nbsp;=-&amp;nbsp;10</xhtml:code><space/>(decrement i by 10) instead of the possibly intended<space/><xhtml:code>i&amp;nbsp;=&amp;nbsp;-10</xhtml:code><space/>(let i be -10)</listitem></list><paragraph>Even after the publication of the 1989 ANSI standard, for many years K&amp;R C was still considered the &quot;<link><target>Lowest common denominator (computers)</target><part>lowest common denominator</part></link>&quot; to which C programmers restricted themselves when maximum portability was desired, since many older compilers were still in use, and because carefully written K&amp;R C code can be legal Standard C as well.</paragraph><paragraph>In early versions of C, only functions that returned a non-<xhtml:code>int</xhtml:code><space/>value needed to be declared if used before the function definition; a function used without any previous declaration was assumed to return type<space/><xhtml:code>int</xhtml:code>, if its value was used.</paragraph><paragraph>For example:</paragraph><paragraph><extension extension_name='source' lang="cpp"><paragraph>long some_function();/* int */ other_function();</paragraph><paragraph>/* int */ calling_function(){</paragraph><preblock><preline><space/><space/><space/>long test1;</preline><preline><space/><space/><space/>register /* int */ test2;</preline></preblock><preblock><preline><space/><space/><space/>test1 = some_function();</preline><preline><space/><space/><space/>if (test1 &gt; 0)</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>test2 = 0;</preline><preline><space/><space/><space/>else</preline><preline><space/><space/><space/><space/><space/><space/><space/><space/><space/>test2 = other_function();</preline><preline><space/><space/><space/>return test2;</preline></preblock><paragraph>}</paragraph></extension></paragraph><paragraph>The<space/><xhtml:code>int</xhtml:code><space/>type specifiers which are commented out could be omitted in K&amp;R C, but are required in later standards.</paragraph><paragraph>Since K&amp;R function declarations did not include any information about function arguments, function parameter<space/><link><target>type checking</target><part>type checks</part></link><space/>were not performed, although some compilers would issue a warning message if a local function was called with the wrong number of arguments, or if multiple calls to an external function used different numbers or types of arguments. Separate tools such as Unix's<space/><link><target>lint programming tool</target><part>lint</part></link><space/>utility were developed that (among other things) could check for consistency of function use across multiple source files.</paragraph><paragraph>In the years following the publication of K&amp;R C, several features were added to the language, supported by compilers from AT&amp;T (in particular<space/><link><target>Portable C Compiler</target><part>PCC</part></link><extension extension_name='ref'><template><target>cite report</target><arg name="first">Bjarne<space/></arg><arg name="last">Stroustrup<space/></arg><arg name="authorlink">Bjarne Stroustrup<space/></arg><arg name="title">Sibling rivalry: C and C++<space/></arg><arg name="publisher">AT&T Labs<space/></arg><arg name="number">TD-54MQZY<space/></arg><arg name="year">2002<space/></arg><arg name="url">http://stroustrup.com/sibling_rivalry.pdf</arg></template></extension>) and some other vendors. These included:</paragraph><list type='bullet'><listitem><xhtml:code><link><target>void type</target><part>void</part></link></xhtml:code><space/>functions (i.e., functions with no return value)</listitem><listitem>functions returning<space/><xhtml:code><link><target>Struct (C programming language)</target><part>struct</part></link></xhtml:code><space/>or<space/><xhtml:code><link><target>union (computer science)</target><part>union</part></link></xhtml:code><space/>types (rather than pointers)</listitem><listitem><link><target>assignment (computer science)</target><part>assignment</part></link><space/>for<space/><xhtml:code>struct</xhtml:code><space/>data types</listitem><listitem><link><target>enumerated type</target><trail>s</trail></link></listitem></list><paragraph>The large number of extensions and lack of agreement on a<space/><link><target>C standard library</target><part>standard library</part></link>, together with the language popularity and the fact that not even the Unix compilers precisely implemented the K&amp;R specification, led to the necessity of standardization.</paragraph><heading level='3'>ANSI C and ISO C</heading><paragraph><template><target>Main</target><arg>ANSI C</arg></template></paragraph><paragraph>During the late 1970s and 1980s, versions of C were implemented for a wide variety of<space/><link><target>mainframe computer</target><trail>s</trail></link>,<space/><link><target>minicomputer</target><trail>s</trail></link>, and<space/><link><target>microcomputer</target><trail>s</trail></link>, including the<space/><link><target>IBM PC</target></link>, as its popularity began to increase significantly.</paragraph><paragraph>In 1983, the<space/><link><target>American National Standards Institute</target></link><space/>(ANSI) formed a committee, X3J11, to establish a standard specification of C. X3J11 based the C standard on the Unix implementation; however, the non-portable portion of the Unix C library was handed off to the<space/><link><target>Institute of Electrical and Electronics Engineers</target><part>IEEE</part></link><space/><link><target>working group</target></link><space/>1003 to become the basis for the 1988<space/><link><target>POSIX</target></link><space/>standard. In 1989, the C standard was ratified as ANSI X3.159-1989 &quot;Programming Language C&quot;. This version of the language is often referred to as<space/><link><target>ANSI C</target></link>, Standard C, or sometimes C89.</paragraph><paragraph>In 1990, the ANSI C standard (with formatting changes) was adopted by the<space/><link><target>International Organization for Standardization</target></link><space/>(ISO) as ISO/IEC 9899:1990, which is sometimes called C90. Therefore, the terms &quot;C89&quot; and &quot;C90&quot; refer to the same programming language.</paragraph><paragraph>ANSI, like other national standards bodies, no longer develops the C standard independently, but defers to the international C standard, maintained by the working group<space/><link><target>ISO/IEC JTC1/SC22</target></link>/WG14. National adoption of an update to the international standard typically occurs within a year of ISO publication.</paragraph><paragraph>One of the aims of the C standardization process was to produce a<space/><link><target>superset</target></link><space/>of K&amp;R C, incorporating many of the subsequently introduced unofficial features. The standards committee also included several additional features such as<space/><link><target>function prototype</target><trail>s</trail></link><space/>(borrowed from C++),<space/><xhtml:code>void</xhtml:code><space/>pointers, support for international<space/><link><target>character encoding</target><part>character sets</part></link><space/>and<space/><link><target>locale</target><trail>s</trail></link>, and preprocessor enhancements. Although the<space/><link><target>C syntax</target><part>syntax</part></link><space/>for parameter declarations was augmented to include the style used in C++, the K&amp;R interface continued to be permitted, for compatibility with existing source code.</paragraph><paragraph>C89 is supported by current C compilers, and most C code being written today is based on it. Any program written only in Standard C and without any hardware-dependent assumptions will run correctly on any<space/><link><target>Computing platform</target><part>platform</part></link><space/>with a conforming C implementation, within its resource limits. Without such precautions, programs may compile only on a certain platform or with a particular compiler, due, for example, to the use of non-standard libraries, such as<space/><link><target>Graphical user interface</target><part>GUI</part></link><space/>libraries, or to a reliance on compiler- or platform-specific attributes such as the exact size of data types and byte<space/><link><target>endianness</target></link>.</paragraph><paragraph>In cases where code must be compilable by either standard-conforming or K&amp;R C-based compilers, the<space/><xhtml:code><magic_variable>STDC</magic_variable></xhtml:code><space/>macro can be used to split the code into Standard and K&amp;R sections to prevent the use on a K&amp;R C-based compiler of features available only in Standard C.</paragraph><paragraph>After the ANSI/ISO standardization process, the C language specification remained relatively static for several years. In 1995 Normative Amendment 1 to the 1990 C standard (ISO/IEC 9899/AMD1:1995, known informally as C95) was published, to correct some details and to add more extensive support for international character sets.<template><target>citation needed</target><arg name="date">April 2015</arg></template></paragraph><heading level='3'>C99</heading><paragraph><template><target>Main</target><arg>C99</arg></template></paragraph><paragraph>The C standard was further revised in the late 1990s, leading to the publication of ISO/IEC 9899:1999 in 1999, which is commonly referred to as &quot;<link><target>C99</target></link>&quot;. It has since been amended three times by Technical Corrigenda.<extension extension_name='ref' name="AutoTX-5"></extension></paragraph><paragraph>C99 introduced several new features, including<space/><link><target>inline function</target><trail>s</trail></link>, several new<space/><link><target>data type</target><trail>s</trail></link><space/>(including<space/><xhtml:code>long long int</xhtml:code><space/>and a<space/><xhtml:code>complex</xhtml:code><space/>type to represent<space/><link><target>complex number</target><trail>s</trail></link>),<space/><link><target>variable-length array</target><trail>s</trail></link><space/>and<space/><link><target>flexible array member</target><trail>s</trail></link>, improved support for<space/><link><target>IEEE 754</target></link><space/>floating point, support for<space/><link><target>variadic macro</target><trail>s</trail></link><space/>(macros of variable<space/><link><target>arity</target></link>), and support for one-line comments beginning with<space/><xhtml:code>//</xhtml:code>, as in<space/><link><target>BCPL</target></link><space/>or C++. Many of these had already been implemented as extensions in several C compilers.</paragraph><paragraph>C99 is for the most part backward compatible with C90, but is stricter in some ways; in particular, a declaration that lacks a type specifier no longer has<space/><xhtml:code>int</xhtml:code><space/>implicitly assumed. A standard macro<space/><xhtml:code>__STDC_VERSION__</xhtml:code><space/>is defined with value<space/><xhtml:code>199901L</xhtml:code><space/>to indicate that C99 support is available.<space/><link><target>GNU Compiler Collection</target><part>GCC</part></link>,<space/><link><target>Sun Studio (software)</target><part>Solaris Studio</part></link>, and other C compilers now support many or all of the new features of C99. The C compiler in<space/><link><target>Microsoft Visual C++</target></link>, however, implements the C89 standard and those parts of C99 that are required for compatibility with<space/><link><target>C++11</target></link>.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.drdobbs.com/cpp/interview-with-herb-sutter/231900562<space/></arg><arg name="title">Interview with Herb Sutter<space/></arg><arg name="website">[[Dr. Dobbs]]<space/></arg><arg name="author">Andrew Binstock<space/></arg><arg name="date">October 12, 2011<space/></arg><arg name="accessdate">September 7, 2013</arg></template></extension></paragraph><heading level='3'>C11</heading><paragraph><template><target>Main</target><arg>C11 (C standard revision)</arg></template></paragraph><paragraph>In 2007, work began on another revision of the C standard, informally called &quot;C1X&quot; until its official publication on 2011-12-08. The C standards committee adopted guidelines to limit the adoption of new features that had not been tested by existing implementations.</paragraph><paragraph>The C11 standard adds numerous new features to C and the library, including type generic macros, anonymous structures, improved Unicode support, atomic operations, multi-threading, and bounds-checked functions. It also makes some portions of the existing C99 library optional, and improves compatibility with C++.</paragraph><heading level='3'>Embedded C</heading><paragraph><template><target>Main</target><arg>Embedded C</arg></template></paragraph><paragraph>Historically, embedded C programming requires nonstandard extensions to the C language in order to support exotic features such as fixed-point arithmetic, multiple distinct memory banks, and basic I/O operations.</paragraph><paragraph>In 2008, the C Standards Committee published a technical report extending the C language<extension extension_name='ref' name="AutoTX-6"></extension><space/>to address these issues by providing a common standard for all implementations to adhere to. It includes a number of features not available in normal C, such as<space/><link><target>fixed-point arithmetic</target></link>, named address spaces, and basic I/O hardware addressing.</paragraph><heading level='2'>Syntax</heading><paragraph><template><target>Main</target><arg>C syntax</arg></template></paragraph><paragraph>C has a<space/><link><target>formal grammar</target></link><space/>specified by the C standard.<extension extension_name='ref' name="h&amp;s5e"></extension><space/>Unlike languages such as<space/><link><target>FORTRAN 77</target></link>, C source code is<space/><link><target>free-form language</target><part>free-form</part></link><space/>which allows arbitrary use of whitespace to format code, rather than column-based or text-line-based restrictions. Comments may appear either between the delimiters<space/><xhtml:code>/*</xhtml:code><space/>and<space/><xhtml:code><list type='bullet'><listitem>/</listitem></list></xhtml:code>, or (since C99) following<space/><xhtml:code>//</xhtml:code><space/>until the end of the line. Comments delimited by<space/><xhtml:code>/*</xhtml:code><space/>and<space/><xhtml:code><list type='bullet'><listitem>/</listitem></list></xhtml:code><space/>do not nest, and these sequences of characters are not interpreted as comment delimiters if they appear inside<space/><link><target>string literal</target><part>string</part></link><space/>or character literals.<extension extension_name='ref' name="KandR1"><template><target>cite book</target><arg name="last"><space/>Kernighan
<space/></arg><arg name="first"><space/>Brian W.
<space/></arg><arg name="authorlink"><space/>Brian Kernighan
<space/></arg><arg name="last2"><space/>Ritchie
<space/></arg><arg name="first2"><space/>Dennis M.
<space/></arg><arg name="authorlink2"><space/>Dennis Ritchie
<space/></arg><arg name="title"><space/>The C Programming Language
<space/></arg><arg name="publisher"><space/>[[Prentice Hall]]
<space/></arg><arg name="series">
<space/></arg><arg name="volume">
<space/></arg><arg name="edition"><space/>2nd
<space/></arg><arg name="year"><space/>1996
<space/></arg><arg name="location">
<space/></arg><arg name="page"><space/>192
<space/></arg><arg name="language">
<space/></arg><arg name="url">
<space/></arg><arg name="doi">
<space/></arg><arg name="id">
<space/></arg><arg name="isbn"><space/>7 302 02412 X
<space/></arg><arg name="mr">
<space/></arg><arg name="zbl">
<space/></arg><arg name="jfm"><space/></arg></template></extension></paragraph><paragraph>C source files contain declarations and function definitions. Function definitions, in turn, contain declarations and<space/><link><target>Statement (programming)</target><part>statements</part></link>. Declarations either define new types using keywords such as<space/><xhtml:code>struct</xhtml:code>,<space/><xhtml:code>union</xhtml:code>, and<space/><xhtml:code>enum</xhtml:code>, or assign types to and perhaps reserve storage for new variables, usually by writing the type followed by the variable name. Keywords such as<space/><xhtml:code>char</xhtml:code><space/>and<space/><xhtml:code>int</xhtml:code><space/>specify built-in types. Sections of code are enclosed in braces (<xhtml:code>{</xhtml:code><space/>and<space/><xhtml:code>}</xhtml:code>, sometimes called &quot;curly brackets&quot;) to limit the scope of declarations and to act as a single statement for control structures.</paragraph><paragraph>As an imperative language, C uses<space/><italics>statements</italics><space/>to specify actions. The most common statement is an<space/><italics>expression statement</italics>, consisting of an expression to be evaluated, followed by a semicolon; as a side effect of the evaluation, functions may be<space/><link><target>procedure call</target><part>called</part></link><space/>and variables may be<space/><link><target>assignment (computer science)</target><part>assigned</part></link><space/>new values. To modify the normal sequential execution of statements, C provides several control-flow statements identified by reserved keywords.<space/><link><target>Structured programming</target></link><space/>is supported by<space/><xhtml:code>if</xhtml:code>(-<xhtml:code>else</xhtml:code>) conditional execution and by<space/><xhtml:code>do</xhtml:code>-<xhtml:code>while</xhtml:code>,<space/><xhtml:code>while</xhtml:code>, and<space/><xhtml:code>for</xhtml:code><space/>iterative execution (looping). The<space/><xhtml:code>for</xhtml:code><space/>statement has separate initialization, testing, and reinitialization expressions, any or all of which can be omitted.<space/><xhtml:code>break</xhtml:code><space/>and<space/><xhtml:code>continue</xhtml:code><space/>can be used to leave the innermost enclosing loop statement or skip to its reinitialization. There is also a non-structured<space/><xhtml:code><link><target>goto</target></link></xhtml:code><space/>statement which branches directly to the designated<space/><link><target>Label (computer science)</target><part>label</part></link><space/>within the function.<space/><xhtml:code>switch</xhtml:code><space/>selects a<space/><xhtml:code>case</xhtml:code><space/>to be executed based on the value of an integer expression.</paragraph><paragraph>Expressions can use a variety of built-in operators and may contain function calls. The order in which arguments to functions and operands to most operators are evaluated is unspecified. The evaluations may even be interleaved. However, all side effects (including storage to variables) will occur before the next &quot;<link><target>sequence point</target></link>&quot;; sequence points include the end of each expression statement, and the entry to and return from each function call. Sequence points also occur during evaluation of expressions containing certain operators (<xhtml:code>&amp;&amp;</xhtml:code>,<space/><xhtml:code>||</xhtml:code>,<space/><xhtml:code><link><target>?:</target></link></xhtml:code><space/>and the<space/><link><target>comma operator</target></link>). This permits a high degree of object code optimization by the compiler, but requires C programmers to take more care to obtain reliable results than is needed for other programming languages.</paragraph><paragraph>Kernighan and Ritchie say in the Introduction of<space/><italics>The C Programming Language</italics>: &quot;C, like any other language, has its blemishes. Some of the operators have the wrong precedence; some parts of the syntax could be better.&quot;<template><target>refn</target><arg name="Page 3 of the original K&R<ref name">"k&r1e" /></arg></template><space/>The C standard did not attempt to correct many of these blemishes, because of the impact of such changes on already existing software.</paragraph><heading level='3'>Character set</heading><paragraph>The basic C source character set includes the following characters:</paragraph><list type='bullet'><listitem>Lowercase and uppercase letters:<space/><xhtml:code>a</xhtml:code><xhtml:code>z</xhtml:code><space/><xhtml:code>A</xhtml:code><xhtml:code>Z</xhtml:code></listitem><listitem>Decimal digits:<space/><xhtml:code>0</xhtml:code><xhtml:code>9</xhtml:code></listitem><listitem>Graphic characters:<space/><xhtml:code>! &quot; # % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? [ \ ] ^ _ { | } ~</xhtml:code></listitem><listitem><link><target>Whitespace character</target><trail>s</trail></link>:<space/><italics><link><target>space (punctuation)</target><part>space</part></link></italics>,<space/><italics><link><target>Tab character</target><part>horizontal tab</part></link></italics>,<space/><italics><link><target>Tab character</target><part>vertical tab</part></link></italics>,<space/><italics><link><target>Page break</target><part>form feed</part></link></italics>,<space/><italics><link><target>newline</target></link></italics></listitem></list><paragraph>Newline indicates the end of a text line; it need not correspond to an actual single character, although for convenience C treats it as one.</paragraph><paragraph>Additional multibyte encoded characters may be used in string literals, but they are not entirely<space/><link><target>software portability</target><part>portable</part></link>. The latest C standard (<link><target>C11 (C standard revision)</target><part>C11</part></link>) allows multinational<space/><link><target>Unicode</target></link><space/>characters to be embedded portably within C source text by using<space/><xhtml:code>\uXXXX</xhtml:code><space/>or<space/><xhtml:code>\UXXXXXXXX</xhtml:code><space/>encoding (where the<space/><xhtml:code>X</xhtml:code><space/>denotes a hexadecimal character), although this feature is not yet widely implemented.</paragraph><paragraph>The basic C execution character set contains the same characters, along with representations for<space/><link><target>Bell character</target><part>alert</part></link>,<space/><link><target>backspace</target></link>, and<space/><link><target>carriage return</target></link>.<link><target>Run time (program lifecycle phase)</target><part>Run-time</part></link><space/>support for extended character sets has increased with each revision of the C standard.</paragraph><heading level='3'>Keywords</heading><paragraph>C89 has 32 keywords (reserved words with special meaning):</paragraph><paragraph><template><target>col-begin</target></template><template><target>col-break</target><arg name="width">20%</arg></template></paragraph><list type='ident'><listitem><xhtml:code>auto</xhtml:code></listitem><listitem><xhtml:code>break</xhtml:code></listitem><listitem><xhtml:code>case</xhtml:code></listitem><listitem><xhtml:code>char</xhtml:code></listitem><listitem><xhtml:code>const</xhtml:code></listitem><listitem><xhtml:code>continue</xhtml:code></listitem><listitem><xhtml:code>default</xhtml:code></listitem><listitem><xhtml:code>do</xhtml:code></listitem></list><paragraph><template><target>col-break</target><arg name="width">20%</arg></template></paragraph><list type='ident'><listitem><xhtml:code><link><target>double precision</target><part>double</part></link></xhtml:code></listitem><listitem><xhtml:code>else</xhtml:code></listitem><listitem><xhtml:code><link><target>enumerated type</target><part>enum</part></link></xhtml:code></listitem><listitem><xhtml:code><link><target>External variable</target><part>extern</part></link></xhtml:code></listitem><listitem><xhtml:code><link><target>floating point</target><part>float</part></link></xhtml:code></listitem><listitem><xhtml:code><link><target>for loop</target><part>for</part></link></xhtml:code></listitem><listitem><xhtml:code><link><target>goto</target></link></xhtml:code></listitem><listitem><xhtml:code>if</xhtml:code></listitem></list><paragraph><template><target>col-break</target><arg name="width">20%</arg></template></paragraph><list type='ident'><listitem><xhtml:code>int</xhtml:code></listitem><listitem><xhtml:code><link><target>long integer</target><part>long</part></link></xhtml:code></listitem><listitem><xhtml:code>register</xhtml:code></listitem><listitem><xhtml:code>return</xhtml:code></listitem><listitem><xhtml:code><link><target>short integer</target><part>short</part></link></xhtml:code></listitem><listitem><xhtml:code>signed</xhtml:code></listitem><listitem><xhtml:code><link><target>sizeof</target></link></xhtml:code></listitem><listitem><xhtml:code><link><target>Static (keyword)</target><part>static</part></link></xhtml:code></listitem></list><paragraph><template><target>col-break</target></template></paragraph><list type='ident'><listitem><xhtml:code><link><target>struct (C programming language)</target><part>struct</part></link></xhtml:code></listitem><listitem><xhtml:code><link><target>switch statement</target><part>switch</part></link></xhtml:code></listitem><listitem><xhtml:code>typedef</xhtml:code></listitem><listitem><xhtml:code>union</xhtml:code></listitem><listitem><xhtml:code>unsigned</xhtml:code></listitem><listitem><xhtml:code><link><target>void type</target><part>void</part></link></xhtml:code></listitem><listitem><xhtml:code><link><target>volatile variable</target><part>volatile</part></link></xhtml:code></listitem><listitem><xhtml:code><link><target>while loop</target><part>while</part></link></xhtml:code></listitem></list><paragraph><template><target>col-end</target></template></paragraph><paragraph>C99 adds five more keywords:<template><target>col-begin</target></template><template><target>col-break</target><arg name="width">20%</arg></template></paragraph><list type='ident'><listitem><xhtml:code>_Bool</xhtml:code></listitem><listitem><xhtml:code>_Complex</xhtml:code></listitem></list><paragraph><template><target>col-break</target><arg name="width">20%</arg></template></paragraph><list type='ident'><listitem><xhtml:code>_Imaginary</xhtml:code></listitem><listitem><xhtml:code><link><target>Inline function</target><part>inline</part></link></xhtml:code></listitem></list><paragraph><template><target>col-break</target></template></paragraph><list type='ident'><listitem><xhtml:code><link><target>restrict</target></link></xhtml:code></listitem></list><paragraph><template><target>col-end</target></template></paragraph><paragraph>C11 adds seven more keywords:<extension extension_name='ref' name="AutoTX-7"></extension><template><target>col-begin</target></template><template><target>col-break</target><arg name="width">20%</arg></template></paragraph><list type='ident'><listitem><xhtml:code>_Alignas</xhtml:code></listitem><listitem><xhtml:code>_Alignof</xhtml:code></listitem></list><paragraph><template><target>col-break</target><arg name="width">20%</arg></template></paragraph><list type='ident'><listitem><xhtml:code>_Atomic</xhtml:code></listitem><listitem><xhtml:code>_Generic</xhtml:code></listitem></list><paragraph><template><target>col-break</target><arg name="width">20%</arg></template></paragraph><list type='ident'><listitem><xhtml:code>_Noreturn</xhtml:code></listitem><listitem><xhtml:code>_Static_assert</xhtml:code></listitem></list><paragraph><template><target>col-break</target></template></paragraph><list type='ident'><listitem><xhtml:code>_Thread_local</xhtml:code></listitem></list><paragraph><template><target>col-end</target></template></paragraph><paragraph>Most of the recently added keywords begin with an underscore followed by a capital letter, because identifiers of that form were previously reserved by the C standard for use only by implementations. Since existing program source code should not have been using these identifiers, it would not be affected when C implementations started supporting these extensions to the programming language. Some standard headers do define more convenient synonyms for underscored identifiers. The language previously included a reserved keyword called<space/><xhtml:code>entry</xhtml:code>, but this was never implemented, and has now been removed as a reserved word.<extension extension_name='ref' name="KandR2"><template><target>cite book</target><arg name="last"><space/>Kernighan
<space/></arg><arg name="first"><space/>Brian W.
<space/></arg><arg name="authorlink"><space/>Brian Kernighan
<space/></arg><arg name="last2"><space/>Ritchie
<space/></arg><arg name="first2"><space/>Dennis M.
<space/></arg><arg name="authorlink2"><space/>Dennis Ritchie
<space/></arg><arg name="title"><space/>The C Programming Language
<space/></arg><arg name="publisher"><space/>[[Prentice Hall]]
<space/></arg><arg name="series">
<space/></arg><arg name="volume">
<space/></arg><arg name="edition"><space/>2nd
<space/></arg><arg name="year"><space/>1996
<space/></arg><arg name="location">
<space/></arg><arg name="pages"><space/>192, 259
<space/></arg><arg name="language">
<space/></arg><arg name="url">
<space/></arg><arg name="doi">
<space/></arg><arg name="id">
<space/></arg><arg name="isbn"><space/>7 302 02412 X
<space/></arg><arg name="mr">
<space/></arg><arg name="zbl">
<space/></arg><arg name="jfm"><space/></arg></template></extension></paragraph><heading level='3'>Operators</heading><paragraph><template><target>Main</target><arg>Operators in C and C++</arg></template></paragraph><paragraph>C supports a rich set of<space/><link><target>operator (programming)</target><part>operators</part></link>, which are symbols used within an<space/><link><target>expression (programming)</target><part>expression</part></link><space/>to specify the manipulations to be performed while evaluating that expression. C has operators for:</paragraph><list type='bullet'><listitem><link><target>arithmetic</target></link>:<space/><link><target>addition</target><part><xhtml:code>+</xhtml:code></part></link>,<space/><link><target>subtraction</target><part><xhtml:code>-</xhtml:code></part></link>,<space/><link><target>multiplication</target><part><xhtml:code><list type='bullet'><listitem></listitem></list></xhtml:code></part></link>,<space/><link><target>division (mathematics)</target><part><xhtml:code>/</xhtml:code></part></link>,<space/><link><target>modulo operation</target><part><xhtml:code>%</xhtml:code></part></link></listitem><listitem><link><target>assignment (computer science)</target><part>assignment</part></link>:<space/><xhtml:code>=</xhtml:code></listitem><listitem><link><target>augmented assignment</target></link>:<space/><xhtml:code>+=</xhtml:code>,<space/><xhtml:code>-=</xhtml:code>,<space/><xhtml:code><list type='bullet'><listitem>=</listitem></list></xhtml:code>,<space/><xhtml:code>/=</xhtml:code>,<space/><xhtml:code>%=</xhtml:code>,<space/><xhtml:code>&amp;=</xhtml:code>,<space/><xhtml:code>|=</xhtml:code>,<space/><xhtml:code>^=</xhtml:code>,<space/><xhtml:code>&amp;lt;&amp;lt;=</xhtml:code>,<space/><xhtml:code>&amp;gt;&amp;gt;=</xhtml:code></listitem><listitem><link><target>Bitwise operation</target><part>bitwise logic</part></link>:<space/><xhtml:code>~</xhtml:code>,<space/><xhtml:code>&amp;</xhtml:code>,<space/><xhtml:code>|</xhtml:code>,<space/><xhtml:code>^</xhtml:code></listitem><listitem><link><target>Bit shift</target><part>bitwise shifts</part></link>:<space/><xhtml:code>&amp;lt;&amp;lt;</xhtml:code>,<space/><xhtml:code>&amp;gt;&amp;gt;</xhtml:code></listitem><listitem><link><target>Boolean algebra</target><part>boolean logic</part></link>:<space/><xhtml:code>!</xhtml:code>,<space/><xhtml:code>&amp;&amp;</xhtml:code>,<space/><xhtml:code>||</xhtml:code></listitem><listitem><link><target>?:</target><part>conditional evaluation</part></link>:<space/><link><target>?:</target><part><xhtml:code>? :</xhtml:code></part></link></listitem><listitem>equality testing:<space/><link><target>equality (mathematics)</target><part><xhtml:code>==</xhtml:code></part></link>,<space/><link><target>inequality (mathematics)</target><part><xhtml:code>!=</xhtml:code></part></link></listitem><listitem><link><target>Subroutine</target><part>calling functions</part></link>:<space/><xhtml:code>( )</xhtml:code></listitem><listitem><link><target>increment and decrement operators</target><part>increment and decrement</part></link>:<space/><xhtml:code>++</xhtml:code>,<space/><xhtml:code>--</xhtml:code></listitem><listitem><link><target>record (computer science)</target><part>member selection</part></link>:<space/><xhtml:code>.</xhtml:code>,<space/><xhtml:code>-&gt;</xhtml:code></listitem><listitem>object size:<space/><xhtml:code><link><target>sizeof</target></link></xhtml:code></listitem><listitem><link><target>Order theory</target><part>order relations</part></link>:<space/><xhtml:code>&amp;lt;</xhtml:code>,<space/><xhtml:code>&amp;lt;=</xhtml:code>,<space/><xhtml:code>&amp;gt;</xhtml:code>,<space/><xhtml:code>&amp;gt;=</xhtml:code></listitem><listitem><link><target>pointer (computer programming)</target><part>reference and dereference</part></link>:<space/><xhtml:code>&amp;</xhtml:code>,<space/><xhtml:code><list type='bullet'><listitem></listitem></list></xhtml:code>,<space/><xhtml:code>[ ]</xhtml:code></listitem><listitem>sequencing:<space/><link><target>comma operator</target><part><xhtml:code>,</xhtml:code></part></link></listitem><listitem><link><target>order of operations#Mathematical precedence</target><part>subexpression grouping</part></link>:<space/><xhtml:code>( )</xhtml:code></listitem><listitem><link><target>type conversion</target></link>:<space/><xhtml:code>(<italics>typename</italics>)</xhtml:code></listitem></list><paragraph>C uses the<space/><xhtml:code>=</xhtml:code><space/>operator, reserved in mathematics to express equality, to indicate assignment, following the precedent of<space/><link><target>Fortran</target></link><space/>and<space/><link><target>PL/I</target></link>, but unlike<space/><link><target>ALGOL</target></link><space/>and its derivatives. The similarity between C's operator for assignment and that for equality (<xhtml:code>==</xhtml:code>) has been criticized<template><target>by whom</target><arg name="date">July 2015</arg></template><space/>as it makes it easy to accidentally substitute one for the other. In many cases, each may be used in the context of the other without a compilation error (although some compilers produce warnings). For example, the conditional expression in<space/><xhtml:code>if(a=b+1)</xhtml:code><space/>is true if<space/><xhtml:code>a</xhtml:code><space/>is not zero after the assignment.<extension extension_name='ref' name="AutoTX-8"></extension><space/>Additionally, C's<space/><link><target>operator precedence</target></link><space/>is non-intuitive, such as<space/><xhtml:code>==</xhtml:code><space/>binding more tightly than<space/><xhtml:code>&amp;</xhtml:code><space/>and<space/><xhtml:code>|</xhtml:code><space/>in expressions like<space/><xhtml:code>x &amp; 1 == 0</xhtml:code>, which would need to be written<space/><xhtml:code>(x &amp; 1) == 0</xhtml:code><space/>to be properly evaluated.<extension extension_name='ref' name="AutoTX-9"></extension></paragraph><heading level='2'><template><target>anchor</target><arg>HELLOWORLD</arg></template>&quot;Hello, world&quot; example</heading><paragraph>The &quot;<link><target>hello, world</target></link>&quot; example, which appeared in the first edition of<space/><link><target>The C Programming Language (book)</target><part>K&amp;R</part></link>, has become the model for an introductory program in most programming textbooks, regardless of programming language. The program prints &quot;hello, world&quot; to the<space/><link><target>standard output</target></link>, which is usually a terminal or screen display.</paragraph><paragraph>The original version was:<template><target>refn</target><arg name="Page 6 of the original K&R<ref name">"k&r1e" /></arg></template></paragraph><paragraph><extension extension_name='syntaxhighlight' lang="c"><paragraph>main(){</paragraph><preblock><preline><space/><space/><space/>printf(&quot;hello, world\n&quot;);</preline></preblock><paragraph>}</paragraph></extension></paragraph><paragraph>A standard-conforming &quot;hello, world&quot; program is:<template><target>Efn</target><arg>The original example code will compile on most modern compilers that are not in strict standard compliance mode, but it does not fully conform to the requirements of either C89 or C99. In fact, C99 requires that a diagnostic message be produced.</arg></template></paragraph><preblock><preline><extension extension_name='syntaxhighlight' lang="c"><list type='numbered'><listitem>include &lt;stdio.h&gt;</listitem></list><paragraph>int main(void){</paragraph><preblock><preline><space/><space/><space/>printf(&quot;hello, world\n&quot;);</preline></preblock><paragraph>}</paragraph></extension></preline></preblock><paragraph>The first line of the program contains a<space/><link><target>preprocessing</target><part>preprocessing directive</part></link>, indicated by<space/><xhtml:code><list type='numbered'><listitem>include</listitem></list></xhtml:code>. This causes the compiler to replace that line with the entire text of the<space/><xhtml:code><link><target>stdio.h</target></link></xhtml:code><space/>standard header, which contains declarations for standard input and output functions such as<space/><xhtml:code>printf</xhtml:code>. The angle brackets surrounding<space/><xhtml:code>stdio.h</xhtml:code><space/>indicate that<space/><xhtml:code>stdio.h</xhtml:code><space/>is located using a search strategy that prefers headers in the compiler's include path to other headers having the same name; double quotes are used to include local or project-specific header files.<template><target>discuss</target><arg>include-path not in C standard</arg></template></paragraph><paragraph>The next line indicates that a function named<space/><xhtml:code>main</xhtml:code><space/>is being defined. The<space/><xhtml:code><link><target>main function (programming)</target><part>main</part></link></xhtml:code><space/>function serves a special purpose in C programs; the run-time environment calls the<space/><xhtml:code>main</xhtml:code><space/>function to begin program execution. The type specifier<space/><xhtml:code>int</xhtml:code><space/>indicates that the value that is returned to the invoker (in this case the run-time environment) as a result of evaluating the<space/><xhtml:code>main</xhtml:code><space/>function, is an integer. The keyword<space/><xhtml:code>void</xhtml:code><space/>as a parameter list indicates that this function takes no arguments.<template><target>Efn</target><arg>The<space/><code>main</code><space/>function actually has two arguments,<space/><code>int argc</code><space/>and<space/><code>char *argv[]</code>, respectively, which can be used to handle [[command line arguments]]. The ISO C standard (section 5.1.2.2.1) requires both forms of<space/><code>main</code><space/>to be supported, which is special treatment not afforded to any other function.</arg></template></paragraph><paragraph>The opening curly brace indicates the beginning of the definition of the<space/><xhtml:code>main</xhtml:code><space/>function.</paragraph><paragraph>The next line<space/><italics>calls</italics><space/>(diverts execution to) a function named<space/><xhtml:code><link><target>printf</target></link></xhtml:code>, which is supplied from a system<space/><link><target>library (computing)</target><part>library</part></link>. In this call, the<space/><xhtml:code>printf</xhtml:code><space/>function is<space/><italics>passed</italics><space/>(provided with) a single argument, the address of the first character in the<space/><link><target>string literal</target></link><space/><xhtml:code>&quot;hello, world\n&quot;</xhtml:code>. The string literal is an unnamed<space/><link><target>Array data type</target><part>array</part></link><space/>with elements of type<space/><xhtml:code>char</xhtml:code>, set up automatically by the compiler with a final 0-valued character to mark the end of the array (<xhtml:code>printf</xhtml:code><space/>needs to know this). The<space/><xhtml:code>\n</xhtml:code><space/>is an<space/><italics><link><target>escape sequences in C</target><part>escape sequence</part></link></italics><space/>that C translates to a<space/><italics><link><target>newline</target></link></italics><space/>character, which on output signifies the end of the current line. The return value of the<space/><xhtml:code>printf</xhtml:code><space/>function is of type<space/><xhtml:code>int</xhtml:code>, but it is silently discarded since it is not used. (A more careful program might test the return value to determine whether or not the<space/><xhtml:code>printf</xhtml:code><space/>function succeeded.) The semicolon<space/><xhtml:code><list type='def'><listitem><defkey></defkey></listitem></list></xhtml:code><space/>terminates the statement.</paragraph><paragraph>The closing curly brace indicates the end of the code for the<space/><xhtml:code>main</xhtml:code><space/>function. According to the C99 specification and newer, the<space/><xhtml:code>main</xhtml:code><space/>function, unlike any other function, will implicitly return a status of<space/><xhtml:code>0</xhtml:code><space/>upon reaching the<space/><xhtml:code>}</xhtml:code><space/>that terminates the function. This is interpreted by the run-time system as an exit code indicating successful execution.<extension extension_name='ref' name="bk21st"><template><target>cite book</target><arg name="last">Klemens<space/></arg><arg name="first">Ben<space/></arg><arg name="authorlink">Ben Klemens<space/></arg><arg name="title">21st Century C<space/></arg><arg name="publisher">[[O'Reilly Media]]<space/></arg><arg name="year">2013<space/></arg><arg name="isbn">1-4493-2714-1</arg></template></extension></paragraph><heading level='2'>Data types</heading><paragraph><template><target>Main</target><arg>C variable types and declarations</arg></template><template><target>Refimprove section</target><arg name="date">October 2012</arg></template></paragraph><paragraph>The<space/><link><target>type system</target></link><space/>in C is<space/><link><target>static typing</target><part>static</part></link><space/>and<space/><link><target>weak typing</target><part>weakly typed</part></link>, which makes it similar to the type system of<space/><link><target>ALGOL</target></link><space/>descendants such as<space/><link><target>Pascal (programming language)</target><part>Pascal</part></link>, although C is unrelated to ALGOL.<extension extension_name='ref'><template><target>cite journal</target><arg name="title">Comparison of the Programming Languages C and Pascal<space/></arg><arg name="journal">ACM Computing Surveys<space/></arg><arg name="volume">14<space/></arg><arg name="issue">1<space/></arg><arg name="pages">73‚Äì92<space/></arg><arg name="doi">10.1145/356869.356872<space/></arg><arg name="first1">Alan R.<space/></arg><arg name="last1">Feuer<space/></arg><arg name="first2">Narain H.<space/></arg><arg name="last2">Gehani<space/></arg><arg name="subscription">yes<space/></arg><arg name="date">March 1982</arg></template></extension><space/>There are built-in types for integers of various sizes, both signed and unsigned,<space/><link><target>floating-point number</target><trail>s</trail></link>, characters, and enumerated types (<xhtml:code>enum</xhtml:code>). C99 added a<space/><link><target>boolean datatype</target></link>. There are also derived types including<space/><link><target>Array data type</target><part>arrays</part></link>,<space/><link><target>pointer (computer programming)</target><part>pointers</part></link>,<space/><link><target>record (computer science)</target><part>records</part></link><space/>(<xhtml:code><link><target>Struct (C programming language)</target><part>struct</part></link></xhtml:code>), and untagged<space/><link><target>union (computer science)</target><part>unions</part></link><space/>(<xhtml:code>union</xhtml:code>).</paragraph><paragraph>C is often used in low-level systems programming where escapes from the type system may be necessary. The compiler attempts to ensure type correctness of most expressions, but the programmer can override the checks in various ways, either by using a<space/><italics><link><target>type conversion</target><part>type cast</part></link></italics><space/>to explicitly convert a value from one type to another, or by using pointers or unions to reinterpret the underlying bits of a data object in some other way.</paragraph><paragraph>Some find C's declaration syntax unintuitive, particularly for<space/><link><target>function pointer</target><trail>s</trail></link>. (Ritchie's idea was to declare identifiers in contexts resembling their use: &quot;<link><target>declaration reflects use</target></link>&quot;.)<template><target>refn</target><arg name="Page 122 of K&R2<ref name">"k&r2e" /></arg></template></paragraph><paragraph>C's<space/><italics>usual arithmetic conversions</italics><space/>allow for efficient code to be generated, but can sometimes produce unexpected results. For example, a comparison of signed and unsigned integers of equal width requires a conversion of the signed value to unsigned. This can generate unexpected results if the signed value is negative.</paragraph><heading level='3'>Pointers</heading><paragraph>C supports the use of<space/><link><target>pointer (computer programming)</target><part>pointers</part></link>, a type of<space/><link><target>reference (computer science)</target><part>reference</part></link><space/>that records the address or location of an object or function in memory. Pointers can be<space/><italics>dereferenced</italics><space/>to access data stored at the address pointed to, or to invoke a pointed-to function. Pointers can be manipulated using assignment or<space/><link><target>pointer arithmetic</target></link>. The run-time representation of a pointer value is typically a raw memory address (perhaps augmented by an offset-within-word field), but since a pointer's type includes the type of the thing pointed to, expressions including pointers can be type-checked at compile time. Pointer arithmetic is automatically scaled by the size of the pointed-to data type. Pointers are used for many purposes in C.<space/><link><target>String (computer science)</target><part>Text strings</part></link><space/>are commonly manipulated using pointers into arrays of characters.<space/><link><target>Dynamic memory allocation</target></link><space/>is performed using pointers. Many data types, such as<space/><link><target>tree (data structure)</target><part>trees</part></link>, are commonly implemented as dynamically allocated<space/><xhtml:code>struct</xhtml:code><space/>objects linked together using pointers. Pointers to functions are useful for passing functions as arguments to<space/><link><target>higher-order function</target><trail>s</trail></link><space/>(such as<space/><link><target>qsort</target></link><space/>or<space/><link><target>bsearch</target></link>) or as<space/><link><target>callback (computer science)</target><part>callbacks</part></link><space/>to be invoked by event handlers.<extension extension_name='ref' name="bk21st"></extension></paragraph><paragraph>A<space/><italics><link><target>null pointer</target></link><space/>value</italics><space/>explicitly points to no valid location. Dereferencing a null pointer value is undefined, often resulting in a<space/><link><target>segmentation fault</target></link>. Null pointer values are useful for indicating special cases such as no &quot;next&quot; pointer in the final node of a<space/><link><target>linked list</target></link>, or as an error indication from functions returning pointers. In appropriate contexts in source code, such as for assigning to a pointer variable, a<space/><italics>null pointer constant</italics><space/>can be written as<space/><xhtml:code>0</xhtml:code>, with or without explicit casting to a pointer type, or as the<space/><xhtml:code>NULL</xhtml:code><space/>macro defined by several standard headers. In conditional contexts, null pointer values evaluate to false, while all other pointer values evaluate to true.</paragraph><paragraph>Void pointers (<xhtml:code>void *</xhtml:code>) point to objects of unspecified type, and can therefore be used as &quot;generic&quot; data pointers. Since the size and type of the pointed-to object is not known, void pointers cannot be dereferenced, nor is pointer arithmetic on them allowed, although they can easily be (and in many contexts implicitly are) converted to and from any other object pointer type.<extension extension_name='ref' name="bk21st"></extension></paragraph><paragraph>Careless use of pointers is potentially dangerous. Because they are typically unchecked, a pointer variable can be made to point to any arbitrary location, which can cause undesirable effects. Although properly used pointers point to safe places, they can be made to point to unsafe places by using invalid<space/><link><target>pointer arithmetic</target></link>; the objects they point to may be deallocated and reused (<link><target>dangling pointer</target><trail>s</trail></link>); they may be used without having been initialized (<link><target>wild pointer</target><trail>s</trail></link>); or they may be directly assigned an unsafe value using a cast, union, or through another corrupt pointer. In general, C is permissive in allowing manipulation of and conversion between pointer types, although compilers typically provide options for various levels of checking. Some other programming languages address these problems by using more restrictive<space/><link><target>reference (computer science)</target><part>reference</part></link><space/>types.</paragraph><heading level='3'>Arrays</heading><paragraph><template><target>See also</target><arg>C string</arg></template></paragraph><preblock><preline></preline></preblock><paragraph><link><target>Array data type</target><part>Array</part></link><space/>types in C are traditionally of a fixed, static size specified at compile time. (The more recent C99 standard also allows a form of variable-length arrays.) However, it is also possible to allocate a block of memory (of arbitrary size) at run-time, using the standard library's<space/><xhtml:code>malloc</xhtml:code><space/>function, and treat it as an array. C's unification of arrays and pointers means that declared arrays and these dynamically allocated simulated arrays are virtually interchangeable.</paragraph><paragraph>Since arrays are always accessed (in effect) via pointers, array accesses are typically<space/><italics>not</italics><space/>checked against the underlying array size, although some compilers may provide<space/><link><target>bounds checking</target></link><space/>as an option.<extension extension_name='ref' name="AutoTX-10"></extension><space/>Array bounds violations are therefore possible and rather common in carelessly written code, and can lead to various repercussions, including illegal memory accesses, corruption of data,<space/><link><target>buffer overflow</target><part>buffer overruns</part></link>, and run-time exceptions. If bounds checking is desired, it must be done manually.</paragraph><paragraph>C does not have a special provision for declaring multidimensional arrays, but rather relies on recursion within the type system to declare arrays of arrays, which effectively accomplishes the same thing. The index values of the resulting &quot;multidimensional array&quot; can be thought of as increasing in<space/><link><target>row-major order</target></link>.</paragraph><paragraph>Multidimensional arrays are commonly used in numerical algorithms (mainly from applied<space/><link><target>linear algebra</target></link>) to store matrices. The structure of the C array is well suited to this particular task. However, since arrays are passed merely as pointers, the bounds of the array must be known fixed values or else explicitly passed to any subroutine that requires them, and dynamically sized arrays of arrays cannot be accessed using double indexing. (A workaround for this is to allocate the array with an additional &quot;row vector&quot; of pointers to the columns.)</paragraph><paragraph>C99 introduced &quot;variable-length arrays&quot; which address some, but not all, of the issues with ordinary C arrays.</paragraph><heading level='3'>Arraypointer interchangeability</heading><paragraph>The subscript notation<space/><xhtml:code>x[i]</xhtml:code><space/>(where<space/><xhtml:code>x</xhtml:code><space/>designates a pointer) is a<space/><link><target>syntactic sugar</target></link><space/>for<space/><xhtml:code><list type='bullet'><listitem>(x+i)</listitem></list></xhtml:code>.<extension extension_name='ref' name="Raymond1996"></extension><space/>Taking advantage of the compiler's knowledge of the pointer type, the address that<space/><xhtml:code>x + i</xhtml:code><space/>points to is not the base address (pointed to by<space/><xhtml:code>x</xhtml:code>) incremented by<space/><xhtml:code>i</xhtml:code><space/>bytes, but rather is defined to be the base address incremented by<space/><xhtml:code>i</xhtml:code><space/>multiplied by the size of an element that<space/><xhtml:code>x</xhtml:code><space/>points to. Thus,<space/><xhtml:code>x[i]</xhtml:code><space/>designates the<space/><xhtml:code>i+1</xhtml:code>th element of the array.</paragraph><paragraph>Furthermore, in most expression contexts (a notable exception is as operand of<space/><xhtml:code><link><target>sizeof</target></link></xhtml:code>), the name of an array is automatically converted to a pointer to the array's first element. This implies that an array is never copied as a whole when named as an argument to a function, but rather only the address of its first element is passed. Therefore, although function calls in C use<space/><link><target>call-by-value</target><part>pass-by-value</part></link><space/>semantics, arrays are in effect passed by<space/><link><target>reference (computer science)</target><part>reference</part></link>.</paragraph><paragraph>The size of an element can be determined by applying the operator<space/><xhtml:code>sizeof</xhtml:code><space/>to any dereferenced element of<space/><xhtml:code>x</xhtml:code>, as in<space/><xhtml:code>n = sizeof *x</xhtml:code><space/>or<space/><xhtml:code>n = sizeof x[0]</xhtml:code>, and the number of elements in a declared array<space/><xhtml:code>A</xhtml:code><space/>can be determined as<space/><xhtml:code>sizeof A / sizeof A[0]</xhtml:code>. The latter only applies to array names: variables declared with subscripts (<xhtml:code>int A[20]</xhtml:code>). Due to the semantics of C, it is not possible to determine the entire size of arrays through pointers to arrays or those created by dynamic allocation (<xhtml:code><link><target>malloc</target></link></xhtml:code>); code such as<space/><xhtml:code>sizeof arr / sizeof arr[0]</xhtml:code><space/>(where<space/><xhtml:code>arr = A</xhtml:code><space/>designates a pointer) will not work since the compiler assumes the size of the pointer itself is being requested.<extension extension_name='ref' name="cfaq623"></extension><extension extension_name='ref' name="cfaq728"></extension><space/>Since array name arguments to<space/><xhtml:code>sizeof</xhtml:code><space/>are not converted to pointers, they do not exhibit such ambiguity. However, arrays created by dynamic allocation are initialized to pointers rather than true array variables, so they suffer from the same<space/><xhtml:code>sizeof</xhtml:code><space/>issues as array pointers.</paragraph><paragraph>Thus, despite this apparent equivalence between array and pointer variables, there is still a distinction to be made between them. Even though the name of an array is, in most expression contexts, converted into a pointer (to its first element), this pointer does not itself occupy any storage; the array name is not an<space/><link><target>Value (computer science)</target><part>l-value</part></link>, and its address is a constant, unlike a pointer variable. Consequently, what an array &quot;points to&quot; cannot be changed, and it is impossible to assign a new address to an array name. Array contents may be copied, however, by using the<space/><xhtml:code>memcpy</xhtml:code><space/>function, or by accessing the individual elements.</paragraph><heading level='2'>Memory management</heading><paragraph>One of the most important functions of a programming language is to provide facilities for managing<space/><link><target>computer memory</target><part>memory</part></link><space/>and the objects that are stored in memory. C provides three distinct ways to allocate memory for objects:<extension extension_name='ref' name="bk21st"></extension></paragraph><list type='bullet'><listitem><link><target>Static memory allocation</target></link>: space for the object is provided in the binary at compile-time; these objects have an<space/><link><target>Variable (programming)#Scope and extent</target><part>extent</part></link><space/>(or lifetime) as long as the binary which contains them is loaded into memory.</listitem><listitem><link><target>Automatic memory allocation</target></link>: temporary objects can be stored on the<space/><link><target>call stack</target><part>stack</part></link>, and this space is automatically freed and reusable after the block in which they are declared is exited.</listitem><listitem><link><target>Dynamic memory allocation</target></link>: blocks of memory of arbitrary size can be requested at run-time using library functions such as<space/><xhtml:code><link><target>malloc</target></link></xhtml:code><space/>from a region of memory called the<space/><link><target>dynamic memory allocation</target><part>heap</part></link>; these blocks persist until subsequently freed for reuse by calling the library function<space/><xhtml:code><link><target>malloc</target><part>realloc</part></link></xhtml:code><space/>or<space/><xhtml:code><link><target>malloc</target><part>free</part></link></xhtml:code></listitem></list><paragraph>These three approaches are appropriate in different situations and have various tradeoffs. For example, static memory allocation has little allocation overhead, automatic allocation may involve slightly more overhead, and dynamic memory allocation can potentially have a great deal of overhead for both allocation and deallocation. The persistent nature of static objects is useful for maintaining state information across function calls, automatic allocation is easy to use but stack space is typically much more limited and transient than either static memory or heap space, and dynamic memory allocation allows convenient allocation of objects whose size is known only at run-time. Most C programs make extensive use of all three.</paragraph><paragraph>Where possible, automatic or static allocation is usually simplest because the storage is managed by the compiler, freeing the programmer of the potentially error-prone chore of manually allocating and releasing storage. However, many data structures can change in size at runtime, and since static allocations (and automatic allocations before C99) must have a fixed size at compile-time, there are many situations in which dynamic allocation is necessary.<extension extension_name='ref' name="bk21st"></extension><space/>Prior to the C99 standard, variable-sized arrays were a common example of this. (See the article on<space/><xhtml:code><link><target>malloc</target></link></xhtml:code><space/>for an example of dynamically allocated arrays.) Unlike automatic allocation, which can fail at run time with uncontrolled consequences, the dynamic allocation functions return an indication (in the form of a null pointer value) when the required storage cannot be allocated. (Static allocation that is too large is usually detected by the<space/><link><target>Linker (computing)</target><part>linker</part></link><space/>or<space/><link><target>Loader (computing)</target><part>loader</part></link>, before the program can even begin execution.)</paragraph><paragraph>Unless otherwise specified, static objects contain zero or null pointer values upon program startup. Automatically and dynamically allocated objects are initialized only if an initial value is explicitly specified; otherwise they initially have indeterminate values (typically, whatever<space/><link><target>bit</target><part>bit pattern</part></link><space/>happens to be present in the<space/><link><target>computer storage</target><part>storage</part></link>, which might not even represent a valid value for that type). If the program attempts to access an uninitialized value, the results are undefined. Many modern compilers try to detect and warn about this problem, but both<space/><link><target>Type I and type II errors</target><part>false positives and false negatives</part></link><space/>can occur.</paragraph><paragraph>Another issue is that heap memory allocation has to be synchronized with its actual usage in any program in order for it to be reused as much as possible. For example, if the only pointer to a heap memory allocation goes out of scope or has its value overwritten before<space/><xhtml:code><link><target>malloc</target><part>free()</part></link></xhtml:code><space/>is called, then that memory cannot be recovered for later reuse and is essentially lost to the program, a phenomenon known as a<space/><italics><link><target>memory leak</target></link>.</italics><space/>Conversely, it is possible for memory to be freed but continue to be referenced, leading to unpredictable results. Typically, the symptoms will appear in a portion of the program far removed from the actual error, making it difficult to track down the problem. (Such issues are ameliorated in languages with<space/><link><target>garbage collection (computer science)</target><part>automatic garbage collection</part></link>.)</paragraph><heading level='2'>Libraries</heading><paragraph>The C programming language uses<space/><link><target>library (computing)</target><part>libraries</part></link><space/>as its primary method of extension. In C, a library is a set of functions contained within a single &quot;archive&quot; file. Each library typically has a<space/><link><target>header file</target></link>, which contains the prototypes of the functions contained within the library that may be used by a program, and declarations of special data types and macro symbols used with these functions. In order for a program to use a library, it must include the library's header file, and the library must be linked with the program, which in many cases requires<space/><link><target>compiler flag</target><trail>s</trail></link><space/>(e.g.,<space/><xhtml:code>-lm</xhtml:code>, shorthand for &quot;math library&quot;).<extension extension_name='ref' name="bk21st"></extension></paragraph><paragraph>The most common C library is the<space/><link><target>C standard library</target></link>, which is specified by the<space/><link><target>ISO standard</target><part>ISO</part></link><space/>and<space/><link><target>ANSI C</target></link><space/>standards and comes with every C implementation. (Implementations which target limited environments such as<space/><link><target>embedded systems</target></link><space/>may provide only a subset of the standard library.) This library supports stream input and output, memory allocation, mathematics, character strings, and time values. Several separate standard headers (for example,<space/><xhtml:code>stdio.h</xhtml:code>) specify the interfaces for these and other standard library facilities.</paragraph><paragraph>Another common set of C library functions are those used by applications specifically targeted for<space/><link><target>Unix</target></link><space/>and<space/><link><target>Unix-like</target></link><space/>systems, especially functions which provide an interface to the<space/><link><target>kernel (computer science)</target><part>kernel</part></link>. These functions are detailed in various standards such as<space/><link><target>POSIX</target></link><space/>and the<space/><link><target>Single UNIX Specification</target></link>.</paragraph><paragraph>Since many programs have been written in C, there are a wide variety of other libraries available. Libraries are often written in C because C compilers generate efficient<space/><link><target>object code</target></link>; programmers then create interfaces to the library so that the routines can be used from higher-level languages like<space/><link><target>Java (programming language)</target><part>Java</part></link>,<space/><link><target>Perl</target></link>, and<space/><link><target>Python (programming language)</target><part>Python</part></link>.<extension extension_name='ref' name="bk21st"></extension></paragraph><heading level='2'>Language tools</heading><paragraph><template><target>Refimprove section</target><arg name="date">July 2014</arg></template></paragraph><paragraph>Tools have been created to help C programmers avoid some of the problems inherent in the language, such as statements with undefined behavior or statements that are not a good practice because they are likely to result in unintended behavior or run-time errors.</paragraph><paragraph>Automated source code checking and auditing are beneficial in any language, and for C many such tools exist, such as<space/><link><target>lint (software)</target><part>Lint</part></link>. A common practice is to use Lint to detect questionable code when a program is first written. Once a program passes Lint, it is then compiled using the C compiler. Also, many compilers can optionally warn about syntactically valid constructs that are likely to actually be errors.<space/><link><target>MISRA C</target></link><space/>is a proprietary set of guidelines to avoid such questionable code, developed for embedded systems.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.unix.com/man-page/FreeBSD/1/lint<space/></arg><arg name="title">Man Page for lint (freebsd Section 1)<space/></arg><arg name="website">unix.com<space/></arg><arg name="date">2001-05-24<space/></arg><arg name="accessdate">2014-07-15</arg></template></extension></paragraph><paragraph>There are also compilers, libraries, and operating system level mechanisms for performing actions that are not a standard part of C, such as array bounds checking,<space/><link><target>buffer overflow</target></link><space/>detection,<space/><link><target>serialization</target></link>, and<space/><link><target>garbage collection (computer science)</target><part>automatic garbage collection</part></link>.</paragraph><paragraph>Tools such as<space/><link><target>IBM Rational Purify</target><part>Purify</part></link><space/>or<space/><link><target>Valgrind</target></link><space/>and linking with libraries containing special versions of the<space/><link><target>malloc</target><part>memory allocation functions</part></link><space/>can help uncover runtime errors in memory usage.</paragraph><heading level='2'>Uses</heading><paragraph><template><target>Refimprove section</target><arg name="date">October 2012</arg></template></paragraph><paragraph><link><target>File:Tiobe index.png</target><part>thumb</part><part>upright=1.9</part><part>The<space/><link><target>TIOBE index</target></link><space/>graph from 2002 to 2015, showing a comparison of the popularity of various programming languages<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.wired.com/2013/01/java-no-longer-a-favorite/</arg><arg name="title">Is Java Losing Its Mojo?<space/></arg><arg name="first">Robert<space/></arg><arg name="last">McMillan<space/></arg><arg name="date">2013-08-01<space/></arg><arg name="publisher">''[[Wired (magazine)|Wired]]''</arg></template></extension></part></link></paragraph><paragraph>C is widely used for &quot;<link><target>system programming</target></link>&quot;, including implementing<space/><link><target>operating system</target><trail>s</trail></link><space/>and<space/><link><target>embedded system</target></link><space/>applications, due to a combination of desirable characteristics such as code portability and efficiency, ability to access specific hardware addresses, ability to<space/><link><target>type punning</target><part>pun types</part></link><space/>to match externally imposed data access requirements, and low<space/><link><target>Run time (program lifecycle phase)</target><part>run-time</part></link><space/>demand on system resources. C can also be used for website programming using<space/><link><target>Common Gateway Interface</target><part>CGI</part></link><space/>as a &quot;gateway&quot; for information between the Web application, the server, and the browser.<extension extension_name='ref' name="AutoTX-11"></extension><space/>Some reasons for choosing C over<space/><link><target>interpreted language</target><trail>s</trail></link><space/>are its speed, stability, and near-universal availability.<extension extension_name='ref' name="AutoTX-12"></extension></paragraph><paragraph>One consequence of C's wide availability and efficiency is that compilers, libraries, and interpreters of<space/><italics>other</italics><space/>programming languages are often implemented in C. The primary implementations of<space/><link><target>Python (programming language)</target><part>Python</part></link><space/>(<link><target>CPython</target></link>),<space/><link><target>Perl</target></link><space/>5, and<space/><link><target>PHP</target></link><space/>are all written in C.</paragraph><paragraph>Due to its thin layer of abstraction and low overhead, C allows efficient implementations of algorithms and data structures, which is useful for programs that perform a lot of computations. For example, the<space/><link><target>GNU Multiple Precision Arithmetic Library</target></link>, the<space/><link><target>GNU Scientific Library</target></link>,<space/><link><target>Mathematica</target></link><space/>and<space/><link><target>MATLAB</target></link><space/>are completely or partially written in C.</paragraph><paragraph>C is sometimes used as an<space/><link><target>intermediate language</target></link><space/>by implementations of other languages. This approach may be used for portability or convenience; by using C as an intermediate language, it is not necessary to develop machine-specific code generators. C has some features, such as line-number preprocessor directives and optional superfluous commas at the end of initializer lists, which support compilation of generated code. However, some of C's shortcomings have prompted the development of other C-based languages specifically designed for use as intermediate languages, such as<space/><link><target>C--</target></link>.<space/></paragraph><paragraph>C has also been widely used to implement<space/><link><target>end-user (computer science)</target><part>end-user</part></link><space/>applications, but much of that development has shifted to newer, higher-level languages.</paragraph><heading level='2'>Related languages</heading><paragraph><template><target>Unreferenced section</target><arg name="date">October 2012</arg></template></paragraph><paragraph>C has directly or indirectly influenced many later languages such as<space/><link><target>C Sharp (programming language)</target><part>C#</part></link>,<space/><link><target>D (programming language)</target><part>D</part></link>,<space/><link><target>Go (programming language)</target><part>Go</part></link>,<space/><link><target>Java (programming language)</target><part>Java</part></link>,<space/><link><target>JavaScript</target></link>,<space/><link><target>Limbo (programming language)</target><part>Limbo</part></link>,<space/><link><target>LPC (programming language)</target><part>LPC</part></link>,<space/><link><target>Perl</target></link>,<space/><link><target>PHP</target></link>,<space/><link><target>Python (programming language)</target><part>Python</part></link>, and Unix's<space/><link><target>C shell</target></link>. The most pervasive influence has been syntactical: all of the languages mentioned combine the statement and (more or less recognizably) expression<space/><link><target>C syntax</target><part>syntax of C</part></link><space/>with type systems, data models and/or large-scale program structures that differ from those of C, sometimes radically.</paragraph><paragraph>Several C or near-C interpreters exist, including<space/><link><target>Ch (computer programming)</target><part>Ch</part></link><space/>and<space/><link><target>CINT</target></link>, which can also be used for scripting.</paragraph><paragraph>When object-oriented languages became popular,<space/><link><target>C++</target></link><space/>and<space/><link><target>Objective-C</target></link><space/>were two different extensions of C that provided object-oriented capabilities. Both languages were originally implemented as<space/><link><target>source-to-source compiler</target><trail>s</trail></link>; source code was translated into C, and then compiled with a C compiler.</paragraph><paragraph>The<space/><link><target>C++</target></link><space/>programming language was devised by<space/><link><target>Bjarne Stroustrup</target></link><space/>as an approach to providing<space/><link><target>Object-oriented programming</target><part>object-oriented</part></link><space/>functionality with a C-like syntax.<extension extension_name='ref' name="AutoTX-4"></extension><space/>C++ adds greater typing strength, scoping, and other tools useful in object-oriented programming, and permits<space/><link><target>generic programming</target></link><space/>via templates. Nearly a superset of C, C++ now supports most of C, with<space/><link><target>Compatibility of C and C++</target><part>a few exceptions</part></link>.</paragraph><paragraph><link><target>Objective-C</target></link><space/>was originally a very &quot;thin&quot; layer on top of C, and remains a strict superset of C that permits object-oriented programming using a hybrid dynamic/static typing paradigm. Objective-C derives its syntax from both C and<space/><link><target>Smalltalk</target></link>: syntax that involves preprocessing, expressions, function declarations, and function calls is inherited from C, while the syntax for object-oriented features was originally taken from Smalltalk.</paragraph><paragraph>In addition to<space/><link><target>C++</target></link><space/>and<space/><link><target>Objective-C</target></link>,<space/><link><target>Ch (computer programming)</target><part>Ch</part></link>,<space/><link><target>Cilk</target></link><space/>and<space/><link><target>Unified Parallel C</target></link><space/>are nearly supersets of C.</paragraph><heading level='2'>See also</heading><paragraph><template><target>Portal</target><arg>Computer programming</arg><arg>Information technology</arg></template></paragraph><list type='bullet'><listitem><link><target>Comparison of Pascal and C</target></link></listitem><listitem><link><target>Comparison of programming languages</target></link></listitem><listitem><link><target>International Obfuscated C Code Contest</target></link></listitem><listitem><link><target>List of C-based programming languages</target></link></listitem><listitem><link><target>List of C compilers</target></link></listitem></list><heading level='2'>Notes</heading><paragraph><template><target>Notelist</target></template></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg><arg name="refs">
<ref name</arg></template></paragraph><paragraph><template><target>refbegin</target></template></paragraph><list type='bullet'><listitem><template><target>cite conference</target><arg name="last">Ritchie<space/></arg><arg name="first">Dennis M.<space/></arg><arg name="authorlink">Dennis Ritchie<space/></arg><arg name="year">1993<space/></arg><arg name="title">The Development of the C Language<space/></arg><arg name="pages">201‚Äì208<space/></arg><arg name="doi">10.1145/154766.155580<space/></arg><arg name="location"><space/>Cambridge, MA, USA ‚Äî April 20‚Äì23, 1993<space/></arg><arg name="url">http://www.bell-labs.com/usr/dmr/www/chist.html<space/></arg><arg name="journal">The second ACM [[SIGPLAN]] History of Programming Languages Conference (HOPL-II)<space/></arg><arg name="publisher">[[Association for Computing Machinery|ACM]]<space/></arg><arg name="isbn">0-89791-570-4<space/></arg><arg name="accessdate"><space/>2014-11-04<space/></arg><arg name="ref">harv</arg></template></listitem></list><paragraph><template><target>refend</target></template></paragraph><heading level='2'>Further reading</heading><list type='bullet'><listitem><template><target>cite book</target><arg name="last1">Banahan<space/></arg><arg name="first1">M.<space/></arg><arg name="last2">Brady<space/></arg><arg name="first2">D.<space/></arg><arg name="last3">Doran<space/></arg><arg name="first3">M.<space/></arg><arg name="title">The C Book<space/></arg><arg name="url">http://publications.gbdirect.co.uk/c_book/<space/></arg><arg name="edition">2nd<space/></arg><arg name="year">1991<space/></arg><arg name="publisher">[[Addison-Wesley]]</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">King<space/></arg><arg name="first">K. N.<space/></arg><arg name="title">C Programming: A Modern Approach<space/></arg><arg name="edition">2nd<space/></arg><arg name="publisher">[[W. W. Norton & Company|Norton]]<space/></arg><arg name="date">April 2008<space/></arg><arg name="isbn">978-0-393-97950-3</arg></template></listitem><listitem><template><target>cite journal</target><arg name="last">Thompson<space/></arg><arg name="first">Ken<space/></arg><arg name="authorlink">Ken Thompson<space/></arg><arg name="title">A New C Compiler<space/></arg><arg name="publisher">AT&T Bell Laboratories<space/></arg><arg name="location">Murray Hill, New Jersey<space/></arg><arg name="url">http://doc.cat-v.org/bell_labs/new_c_compilers/new_c_compiler.pdf</arg></template></listitem><listitem><template><target>cite book</target><arg name="last">Feuer<space/></arg><arg name="first">Alan R.<space/></arg><arg name="title">The C Puzzle Book<space/></arg><arg name="edition">1st, revised printing<space/></arg><arg name="publisher">[[Addison-Wesley]]<space/></arg><arg name="year">1998<space/></arg><arg name="isbn">978-0-201-60461-0</arg></template></listitem></list><heading level='2'>External links</heading><paragraph><template><target>Sister project links</target><arg name="v"><space/>Topic:C</arg><arg name="commons"><space/>C (programming language)</arg><arg name="b"><space/>C programming language</arg><arg name="voy"><space/>no</arg><arg name="s"><space/>no</arg><arg name="wikt"><space/>no</arg></template></paragraph><list type='bullet'><listitem><link type='external' href='http://www.open-std.org/jtc1/sc22/wg14/'>ISO C Working Group official website</link></listitem><listitem><link type='external' href='http://www.c-faq.com/'>comp.lang.c Frequently Asked Questions</link></listitem><listitem><link type='external' href='http://www.open-std.org/JTC1/SC22/WG14/www/standards'>ISO/IEC 9899</link>, official C99 documents</listitem><listitem><link type='external' href='http://flash-gordon.me.uk/ansi.c.txt'>''ANSI C Standard'' (ANSI X3J11/88-090)</link><space/>(published on 13 May 1988),<space/><link type='external' href='http://groups.google.com/group/comp.lang.c/msg/20b174b18cdd919d?hl=en'>Third Public Review</link></listitem><listitem><link type='external' href='http://www.scribd.com/doc/16306895/Draft-ANSI-C-Rationale'>''ANSI C Rationale'' (ANSI X3J11/88-151)</link><space/>(published on 18 November 1988)</listitem><listitem><template><target>PDFlink</target><arg>[http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf C99 with Technical corrigenda TC1, TC2, and TC3 included]</arg><arg>3.61&nbsp;MB</arg></template></listitem><listitem><link type='external' href='http://web.archive.org/web/20040202065522/http://cm.bell-labs.com/cm/cs/who/dmr/chist.html'>A History of C</link>, by Dennis Richie, archived from the original on February 2, 2004</listitem></list><paragraph><template><target>C programming language</target><arg name="state">expanded</arg></template><template><target>Integrated development environments for C and C++</target></template><template><target>Programming languages</target></template></paragraph><paragraph><template><target>Authority control</target></template></paragraph><paragraph><link><target>Category:American inventions</target></link><link><target>Category:C (programming language)</target><part></part></link><link><target>Category:C programming language family</target></link><link><target>Category:Cross-platform software</target></link><link><target>Category:Low-level programming languages</target></link><link><target>Category:Procedural programming languages</target></link><link><target>Category:Programming languages created in 1972</target></link><link><target>Category:Programming languages with an ISO standard</target></link><link><target>Category:Statically typed programming languages</target></link><link><target>Category:Systems programming languages</target></link><link><target>Category:Articles with example code</target></link></paragraph></article>