<article title='Binary-coded_decimal'><paragraph><template><target>redir</target><arg>BCD code</arg><arg>BCD character sets</arg><arg>BCD (character encoding)</arg><arg></arg><arg></arg></template><link><target>Image:Binary clock.svg</target><part>250px</part><part>thumbnail</part><part>right</part><part>A<space/><link><target>binary clock</target></link><space/>might use<space/><link><target>Light-emitting diode</target><part>LEDs</part></link><space/>to express binary values. In this clock, each column of LEDs shows a binary-coded decimal numeral of the traditional<space/><link><target>sexagesimal</target></link><space/>time.</part></link></paragraph><paragraph>In<space/><link><target>computing</target></link><space/>and<space/><link><target>electronics</target><part>electronic</part></link><space/>systems,<space/><bold>binary-coded decimal</bold><space/>(<bold>BCD</bold>) is a class of<space/><link><target>Binary numeral system</target><part>binary</part></link><space/>encodings of<space/><link><target>decimal</target></link><space/>numbers where each decimal<space/><link><target>numerical digit</target><part>digit</part></link><space/>is represented by a fixed number of<space/><link><target>bit</target><trail>s</trail></link>, usually four or eight. Special bit patterns are sometimes used for a<space/><link><target>Sign (mathematics)</target><part>sign</part></link><space/>or for other indications (e.g., error or overflow).</paragraph><paragraph>In byte-oriented systems (i.e. most modern computers), the term<space/><italics>unpacked</italics><space/>BCD<extension extension_name='ref'><template><target>cite web</target><arg name="last1">Intel</arg><arg name="title">ia32 architecture manual</arg><arg name="url">http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developers-manual.pdf</arg><arg name="publisher">Intel</arg><arg name="accessdate">1 July 2015</arg></template></extension><space/>usually implies a full<space/><link><target>byte</target></link><space/>for each digit (often including a sign), whereas<space/><italics>packed</italics><space/>BCD typically encodes two decimal digits within a single byte by taking advantage of the fact that four bits are enough to represent the range 0 to 9. The precise 4-bit encoding may vary however, for technical reasons, see<space/><link><target>Excess-3</target></link><space/>for instance. The ten states representing a BCD decimal digit are sometimes called<space/><italics>tetrades</italics><space/>(for the<space/><link><target>nibble</target></link><space/>typically needed to hold them also known as<space/><link><target>tetrade (computing)</target><part>tetrade</part></link>) with those<space/><link><target>don't care</target></link>-states unused named<space/><template><target>ill</target><arg>de</arg><arg>pseudo-tetrade</arg><arg>Pseudotetrade</arg><arg>''pseudo-tetrad(e)s''</arg></template><extension extension_name='ref' name="Schneider_1986"><template><target>cite book</target><arg name="title">Lexikon der Informatik und Datenverarbeitung</arg><arg name="language">German</arg><arg name="first">Hans-Jochen</arg><arg name="last">Schneider</arg><arg name="date">1986</arg><arg name="edition">2</arg><arg name="publisher">R. Oldenbourg Verlag München Wien</arg><arg name="isbn">3-486-22662-2</arg><arg></arg></template></extension><extension extension_name='ref' name="Steinbuch-Weber_1974"><template><target>cite book</target><arg name="title">Taschenbuch der Informatik - Band II - Struktur und Programmierung von EDV-Systemen</arg><arg name="language">German</arg><arg name="first1">K.</arg><arg name="last1">Steinbuch</arg><arg name="first2">W.</arg><arg name="last2">Weber</arg><arg name="date">1974</arg><arg name="orig-year">1967</arg><arg name="edition">3</arg><arg name="volume">2</arg><arg name="work">Taschenbuch der Nachrichtenverarbeitung</arg><arg name="publisher">Springer Verlag Berlin</arg><arg name="isbn">3-540-06241-6</arg></template></extension><extension extension_name='ref' name="Tietze-Schenk_2013"><template><target>cite book</target><arg name="title">Advanced Electronic Circuits</arg><arg name="first1">U.</arg><arg name="last1">Tietze</arg><arg name="first2">C.</arg><arg name="last2">Schenk</arg><arg name="date">2012-12-06</arg><arg name="publisher">Springer Science & Business Media</arg><arg name="isbn">3642812414</arg><arg name="id">9783642812415</arg><arg name="url">http://books.google.de/books?id</arg><arg name="accessdate">2015-08-05</arg></template></extension><extension extension_name='ref' name="Kowalski_1070"><template><target>cite book</target><arg name="title">Nuclear Electronics</arg><arg name="first">Emil</arg><arg name="last">Kowalski</arg><arg name="date">2013-03-08</arg><arg name="orig-year">1970</arg><arg name="publisher">Springer-Verlag</arg><arg name="isbn">3642876633</arg><arg name="id">9783642876639, 978-3-642-87664-6</arg><arg name="doi">10.1007/978-3-642-87663-9</arg><arg name="url">http://books.google.de/books?id</arg><arg name="accessdate">2015-08-05</arg></template></extension><space/>or<space/><italics>pseudo-decimal digit</italics><extension extension_name='ref' name="Ferretti_2013"><template><target>cite book</target><arg name="title">Wörterbuch der Elektronik, Datentechnik und Telekommunikation / Dictionary of Electronics, Computing and Telecommunications: Teil 1: Deutsch-Englisch / Part 1: German-English</arg><arg name="first">Vittorio</arg><arg name="last">Ferretti</arg><arg name="edition">2</arg><arg name="volume">1</arg><arg name="publisher">Springer-Verlag</arg><arg name="date">2013-03-13
</arg><arg name="isbn">3642980880</arg><arg name="id">9783642980886</arg><arg name="url">http://books.google.de/books?id</arg><arg name="accessdate">2015-08-05</arg></template></extension>).<extension extension_name='ref' group="nb" name="Pseudo-tetrades">That is, in a standard packed 4-bit representation, there are 16 states (4 bits for 1 digit) with 10 tetrades and 6 pseudo-tetrades, whereas in more densely packed schemes such as<space/><link><target>Chen-Ho encoding</target><part>Chen-Ho</part></link><space/>or<space/><link><target>Densely Packed Decimal</target><part>DPD</part></link><space/>coding there are less, f.e. only 24 pseudo-tetrades in 1024 states (10 bits for 3 digits).</extension></paragraph><paragraph>BCD's main virtue is its more accurate representation and rounding of decimal quantities as well as an ease of conversion into human-readable representations, in comparison to binary<space/><link><target>positional system</target><trail>s</trail></link>. BCD's principal drawbacks are a small increase in the complexity of the circuits needed to implement basic arithmetics and a slightly less dense storage.</paragraph><paragraph>BCD was used in many early<space/><link><target>decimal computer</target><trail>s</trail></link>, and is implemented in the instruction set of machines such as the<space/><link><target>IBM System/360</target></link><space/>series and its descendants and<space/><link><target>Digital Equipment Corporation</target><part>Digital's</part></link><space/><link><target>VAX</target></link>. Although BCD<space/><italics>per se</italics><space/>is not as widely used as in the past and is no longer implemented in computers' instruction sets, decimal<space/><link><target>Fixed-point arithmetic</target><part>fixed-point</part></link><space/>and<space/><link><target>floating-point</target></link><space/>formats are still important and continue to be used in financial, commercial, and industrial computing, where subtle conversion and<space/><link><target>fraction (mathematics)</target><part>fractional</part></link><space/><link><target>rounding</target></link><space/><link><target>round-off error</target><part>errors</part></link><space/>that are inherent in floating point binary representations cannot be tolerated.<extension extension_name='ref'><template><target>cite web</target><arg name="url"><space/>http://speleotrove.com/decimal/<space/></arg><arg name="title"><space/>General Decimal Arithmetic</arg></template></extension></paragraph><heading level='2'><template><target>anchor</target><arg>Unpacked BCD</arg></template>Basics</heading><paragraph>BCD takes advantage of the fact that any one decimal numeral can be represented by a four bit pattern. The most obvious way of encoding digits is &quot;natural BCD&quot; (NBCD), where each decimal digit is represented by its corresponding four-bit binary value, as shown in the following table. This is also called &quot;8421&quot; encoding.<space/></paragraph><table border="1" cellpadding="2" cellspacing="0" align="center" width="30%"><tablerow><tablehead bgcolor="#E0E0E0" width="50%">Decimal<xhtml:br></xhtml:br>Digit</tablehead><tablehead bgcolor="#E0E0E0" width="50%">BCD<xhtml:br></xhtml:br>8 4 2 1</tablehead></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">0</tablehead><tablecell>0 0 0 0</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">1</tablehead><tablecell>0 0 0 1</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">2</tablehead><tablecell>0 0 1 0</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">3</tablehead><tablecell>0 0 1 1</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">4</tablehead><tablecell>0 1 0 0</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">5</tablehead><tablecell>0 1 0 1</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">6</tablehead><tablecell>0 1 1 0</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">7</tablehead><tablecell>0 1 1 1</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">8</tablehead><tablecell>1 0 0 0</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">9</tablehead><tablecell>1 0 0 1</tablecell></tablerow><tablerow align="center"></tablerow></table><paragraph>Other encodings are also used, including so-called &quot;4221&quot; and &quot;7421&quot; &amp;mdash; named after the weighting used for the bits &amp;mdash; and &quot;<link><target>excess-3</target></link>&quot;.<extension extension_name='ref'><template><target>cite book</target><arg name="last">Parag K.</arg><arg name="first">Lala</arg><arg name="title">Principles of Modern Digital Design</arg><arg name="date">2007</arg><arg name="publisher">John Wiley & Sons</arg><arg name="isbn">978-0-470-07296-7</arg><arg name="pages">20–25</arg><arg name="url">http://books.google.com/books?id</arg></template></extension><space/>For example the BCD digit 6, '0110'b in 8421 notation, is '1100'b in 4221 (two encodings are possible), '0110'b in 7421, and '1001'b (6+3=9) in excess-3.</paragraph><paragraph>As most computers deal with data in 8-bit<space/><link><target>byte</target><trail>s</trail></link>, it is possible to use one of the following methods to encode a BCD number:</paragraph><list type='bullet'><listitem><bold>Unpacked</bold>: each numeral is encoded into one byte, with four bits representing the numeral and the remaining bits having no significance.</listitem><listitem><bold>Packed</bold>: two numerals are encoded into a single byte, with one numeral in the least significant<space/><link><target>nibble</target></link><space/>(bits 0 through 3) and the other numeral in the most significant nibble (bits 4 through 7).</listitem></list><paragraph>As an example, encoding the decimal number<space/><xhtml:tt><bold>91</bold></xhtml:tt><space/>using unpacked BCD results in the following binary pattern of two bytes:</paragraph><preblock><preline><space/>Decimal: 9 1</preline><preline><space/>Binary : 0000 1001 0000 0001</preline></preblock><paragraph>In packed BCD, the same number would fit into a single byte:</paragraph><preblock><preline><space/>Decimal: 9 1</preline><preline><space/>Binary : 1001 0001</preline></preblock><paragraph>Hence the numerical range for one unpacked BCD byte is zero through nine inclusive, whereas the range for one packed BCD is zero through ninety-nine inclusive.</paragraph><paragraph>To represent numbers larger than the range of a single byte any number of contiguous bytes may be used.&amp;nbsp; For example, to represent the decimal number<space/><xhtml:tt><bold>12345</bold></xhtml:tt><space/>in packed BCD, using<space/><link><target>big-endian</target></link><space/>format, a program would encode as follows:</paragraph><preblock><preline><space/>Decimal: 1 2 3 4 5</preline><preline><space/>Binary : 0000 0001 0010 0011 0100 0101</preline></preblock><paragraph>Note that the most significant nibble of the most significant byte is zero, implying that the number is in actuality<space/><xhtml:tt><bold>012345</bold></xhtml:tt>.&amp;nbsp; Also note how packed BCD is more efficient in storage usage as compared to unpacked BCD; encoding the same number (with the leading zero) in unpacked format would consume twice the storage.</paragraph><paragraph><link><target>logical shift</target><part>Shifting</part></link><space/>and<space/><link><target>mask (computing)</target><part>masking</part></link><space/>operations are used to pack or unpack a packed BCD digit.&amp;nbsp; Other<space/><link><target>bitwise operation</target><part>logical operation</part><trail>s</trail></link><space/>are used to convert a numeral to its equivalent bit pattern or reverse the process.</paragraph><heading level='2'>BCD in electronics</heading><paragraph>BCD is very common in electronic systems where a numeric value is to be displayed, especially in systems consisting solely of digital logic, and not containing a microprocessor. By utilizing BCD, the manipulation of numerical data for display can be greatly simplified by treating each digit as a separate single sub-circuit. This matches much more closely the physical reality of display hardwarea designer might choose to use a series of separate identical<space/><link><target>seven-segment display</target><trail>s</trail></link><space/>to build a metering circuit, for example. If the numeric quantity were stored and manipulated as pure binary, interfacing to such a display would require complex circuitry. Therefore, in cases where the calculations are relatively simple working throughout with BCD can lead to a simpler overall system than converting to binary. Most pocket calculators do all the calculations in BCD.</paragraph><paragraph>The same argument applies when hardware of this type uses an embedded microcontroller or other small processor. Often, smaller code results when representing numbers internally in BCD format, since a conversion from or to binary representation can be expensive on such limited processors. For these applications, some small processors feature BCD arithmetic modes, which assist when writing routines that manipulate BCD quantities.<extension extension_name='ref'><template><target>cite web</target><arg name="last1">University of Alicante</arg><arg name="title">A Cordic-based Architecture for High Performance Decimal Calculations</arg><arg name="url">http://rua.ua.es/dspace/bitstream/10045/11826/1/VF-016519.pdf</arg><arg name="publisher">IEEE</arg><arg name="accessdate">15 August 2015</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="title">Decimal CORDIC Rotation based on Selection by Rounding: Algorithm and Architecture</arg><arg name="url">http://faculties.sbu.ac.ir/~jaberipur/Papers/Journals/19.pdf</arg><arg name="publisher">British Computer Society</arg><arg name="accessdate">14 August 2015</arg></template></extension></paragraph><heading level='2'>Packed BCD</heading><preblock><preline>In<space/><bold>Packed BCD</bold><space/>(or simply<space/><bold>packed decimal</bold>), each of the two<space/><link><target>nibble</target><trail>s</trail></link><space/>of each byte represent a decimal digit. Packed BCD has been in use since at least the 1960s and is implemented in all IBM mainframe hardware since then. Most implementations are<space/><link><target>big endian</target></link>, i.e. with the more significant digit in the upper half of each byte, and with the leftmost byte (residing at the lowest memory address) containing the most significant digits of the packed decimal value. The lower nibble of the rightmost byte is usually used as the sign flag, although some unsigned representations lack a sign flag. As an example, a 4-byte value consists of 8 nibbles, wherein the upper 7 nibbles store the digits of a 7-digit decimal value and the lowest nibble indicates the sign of the decimal integer value.</preline></preblock><paragraph>Standard sign values are 1100 (<link><target>hexadecimal</target><part>hex</part></link><space/>C) for positive (+) and 1101 (D) for negative (). This convention comes from the zone field for<space/><link><target>EBCDIC</target></link><space/>characters and the<space/><link><target>signed overpunch</target></link><space/>representation. Other allowed signs are 1010 (A) and 1110 (E) for positive and 1011 (B) for negative. IBM System/360 processors will use the 1010 (A) and 1011 (B) signs if the A bit is set in the PSW, for the ASCII-8 standard that never passed. Most implementations also provide unsigned BCD values with a sign nibble of 1111 (F).<extension extension_name='ref' name="IBM_POP"><template><target>citation</target><arg name="title">[[IBM System/370]] Principles of Operation<space/></arg><arg name="chapter">Chapter 8: Decimal Instructions<space/></arg><arg name="publisher">[[IBM]]<space/></arg><arg name="date">March 1980<space/></arg></template></extension><extension extension_name='ref' name="DEC_PDP11"><template><target>citation</target><arg name="title"><space/>[[PDP-11]] Architecture Handbook<space/></arg><arg name="chapter">Chapter 3: Data Representation<space/></arg><arg name="publisher">[[Digital Equipment Corporation]]<space/></arg><arg name="year">1983</arg></template></extension><extension extension_name='ref' name="DEC_VAX11"><template><target>citation</target><arg name="title">[[VAX-11]] Architecture Handbook<space/></arg><arg name="publisher">[[Digital Equipment Corporation]]<space/></arg><arg name="year">1985</arg></template></extension><space/>ILE RPG uses 1111 (F) for positive and 1101 (D) for negative.<extension extension_name='ref'><template><target>cite web</target><arg name="url"><space/>http://publib.boulder.ibm.com/iseries/v5r2/ic2924/books/c0925083170.htm<space/></arg><arg name="title"><space/>ILE RPG Reference</arg></template></extension><space/>These match the EBCDIC zone for digits without a sign overpunch. In packed BCD, the number 127 is represented by 0001 0010 0111 1100 (127C) and 127 is represented by 0001 0010 0111 1101 (127D). Burroughs systems used 1101 (D) for negative, and any other value is considered a positive sign value (the processors will normalize a positive sign to 1100 (C)).</paragraph><table border="1" cellpadding="2" cellspacing="0" align="center" width="40%"><tablerow><tablehead bgcolor="#E0E0E0" width="20%">Sign<xhtml:br></xhtml:br>Digit</tablehead><tablehead bgcolor="#E0E0E0" width="20%">BCD<xhtml:br></xhtml:br>8 4 2 1</tablehead><tablehead bgcolor="#E0E0E0" width="20%">Sign</tablehead><tablehead bgcolor="#E0E0E0" width="40%">Notes</tablehead></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">A</tablehead><tablecell>1 0 1 0</tablecell><tablecell><bold>+</bold></tablecell><tablecell>&amp;nbsp;</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">B</tablehead><tablecell>1 0 1 1</tablecell><tablecell><bold></bold></tablecell><tablecell>&amp;nbsp;</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">C</tablehead><tablecell>1 1 0 0</tablecell><tablecell><bold>+</bold></tablecell><tablecell>Preferred</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">D</tablehead><tablecell>1 1 0 1</tablecell><tablecell><bold></bold></tablecell><tablecell>Preferred</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">E</tablehead><tablecell>1 1 1 0</tablecell><tablecell><bold>+</bold></tablecell><tablecell>&amp;nbsp;</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">F</tablehead><tablecell>1 1 1 1</tablecell><tablecell><bold>+</bold></tablecell><tablecell>Unsigned</tablecell></tablerow></table><paragraph>No matter how many bytes wide a<space/><link><target>Word (data type)</target><part>word</part></link><space/>is, there are always an even number of nibbles because each byte has two of them. Therefore, a word of<space/><italics>n</italics><space/>bytes can contain up to (2<italics>n</italics>)1 decimal digits, which is always an odd number of digits. A decimal number with<space/><italics>d</italics><space/>digits requires (<italics>d</italics>+1) bytes of storage space.</paragraph><paragraph>For example, a 4-byte (32-bit) word can hold seven decimal digits plus a sign, and can represent values ranging from 9,999,999. Thus the number 1,234,567 is 7 digits wide and is encoded as:</paragraph><preblock><preline>0001 0010 0011 0100 0101 0110 0111 1101</preline><preline><italics>1 2 3 4 5 6 7<space/></italics></preline></preblock><paragraph>(Note that, like character strings, the first byte of the packed decimal with the most significant two digits is usually stored in the lowest address in memory, independent of the<space/><link><target>endianness</target></link><space/>of the machine.)</paragraph><paragraph>In contrast, a 4-byte binary<space/><link><target>two's complement</target></link><space/>integer can represent values from 2,147,483,648 to +2,147,483,647.</paragraph><paragraph>While packed BCD does not make optimal use of storage (about<space/><xhtml:sup>1</xhtml:sup>/<xhtml:sub>6</xhtml:sub><space/>of the memory used is wasted), conversion to<space/><link><target>ASCII</target></link>,<space/><link><target>EBCDIC</target></link>, or the various encodings of<space/><link><target>Unicode</target></link><space/>is still trivial, as no arithmetic operations are required. The extra storage requirements are usually offset by the need for the accuracy and compatibility with calculator or hand calculation that fixed-point decimal arithmetic provides. Denser packings of<space/><link><target>BCD</target></link><space/>exist which avoid the storage penalty and also need no arithmetic operations for common conversions.</paragraph><paragraph>Packed BCD is supported in the<space/><link><target>COBOL</target></link><space/>programming language as the &quot;COMPUTATIONAL-3&quot; (an IBM extension adopted by many other compiler vendors) or &quot;PACKED-DECIMAL&quot; (part of the 1985 COBOL standard) data type. It is supported in<space/><link><target>PL/I</target></link><space/>as &quot;FIXED DECIMAL&quot;. Besides the IBM System/360 and later compatible mainframes, packed BCD is implemented in the native instruction set of the original<space/><link><target>VAX</target></link><space/>processors from<space/><link><target>Digital Equipment Corporation</target></link><space/>and some models of the<space/><link><target>SDS Sigma series</target></link><space/>mainframes, and is the native format for the<space/><link><target>Burroughs Corporation</target></link><space/>Medium Systems line of mainframes (descended from the 1950s Electrodata 200 series).</paragraph><paragraph><link><target>Ten's complement</target></link><space/>representations for negative numbers offer an alternative approach to encoding the sign of packed (and other) BCD numbers. In this case, positive numbers always have a most significant digit between 0 and 4 (inclusive), while negative numbers are represented by the 10's complement of the corresponding positive number. As a result this system allows for, a 32-bit packed BCD numbers to range from -50,000,000 to 49,999,999, and -1 is represented as 99999999. (As with<space/><link><target>two's complement</target></link><space/>binary numbers, the range not symmetric about zero.)</paragraph><heading level='3'>Fixed-point packed decimal</heading><paragraph><link><target>Fixed-point arithmetic</target><part>Fixed-point</part></link><space/>decimal numbers are supported by some programming languages (such as<space/><link><target>COBOL</target></link><space/>and<space/><link><target>PL/I</target></link>). These languages allow the programmer to specify an implicit decimal point in front of one of the digits. For example, a packed decimal value encoded with the bytes 12 34 56 7C represents the fixed-point value +1,234.567 when the implied decimal point is located between the 4th and 5th digits:</paragraph><preblock><preline>12 34 56 7C</preline><preline><italics>12 34.56 7+</italics></preline></preblock><paragraph>The decimal point is not actually stored in memory, as the packed BCD storage format does not provide for it. Its location is simply known to the compiler and the generated code acts accordingly for the various arithmetic operations.</paragraph><heading level='3'>Higher-density encodings</heading><paragraph>If a decimal digit requires four bits, then three decimal digits require 12 bits. However, since 2<xhtml:sup>10</xhtml:sup><space/>(1,024) is greater than 10<xhtml:sup>3</xhtml:sup><space/>(1,000), if three decimal digits are encoded together, only 10 bits are needed. Two such encodings are<space/><italics><link><target>Chen-Ho encoding</target></link></italics><space/>and<space/><italics><link><target>Densely Packed Decimal</target></link></italics><space/>(DPD). The latter has the advantage that subsets of the encoding encode two digits in the optimal seven bits and one digit in four bits, as in regular BCD.</paragraph><heading level='2'><template><target>anchor</target><arg>Zoned BCD</arg></template>Zoned decimal</heading><paragraph>Some implementations, for example<space/><link><target>IBM</target></link><space/>mainframe systems, support<space/><bold>zoned decimal</bold><space/>numeric representations. Each decimal digit is stored in one byte, with the lower four bits encoding the digit in BCD form. The upper four bits, called the &quot;zone&quot; bits, are usually set to a fixed value so that the byte holds a character value corresponding to the digit. EBCDIC systems use a zone value of 1111 (hex F); this yields bytes in the range F0 to F9 (hex), which are the<space/><link><target>EBCDIC</target></link><space/>codes for the characters &quot;0&quot; through &quot;9&quot;. Similarly,<space/><link><target>ASCII</target></link><space/>systems use a zone value of 0011 (hex 3), giving character codes 30 to 39 (hex).</paragraph><paragraph>For signed zoned decimal values, the rightmost (least significant) zone nibble holds the sign digit, which is the same set of values that are used for signed packed decimal numbers (see above). Thus a zoned decimal value encoded as the hex bytes F1 F2 D3 represents the signed decimal value 123:</paragraph><preblock><preline>F1 F2 D3</preline><preline><italics><space/>1 2 3</italics></preline></preblock><heading level='3'>EBCDIC zoned decimal conversion table</heading><preblock><preline><table border="1" cellpadding="2" cellspacing="0" align="center" width="70%" class="wikitable"><tablerow><tablehead bgcolor="#E0E0E0">BCD Digit</tablehead><tablehead bgcolor="#E0E0E0" colspan="4">Hexadecimal</tablehead><tablehead bgcolor="#E0E0E0" colspan="4">EBCDIC Character</tablehead></tablerow><tablerow><tablecell width="20%" align="center"><xhtml:tt>0+</xhtml:tt></tablecell><tablecell width="10%" align="center"><xhtml:tt>C0</xhtml:tt></tablecell><tablecell width="10%" align="center"><xhtml:tt>A0</xhtml:tt></tablecell><tablecell width="10%" align="center"><xhtml:tt>E0</xhtml:tt></tablecell><tablecell width="10%" align="center"><xhtml:tt>F0</xhtml:tt></tablecell><tablecell width="10%" align="center"><xhtml:tt>{</xhtml:tt><space/>(*)</tablecell><tablecell width="10%" align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell width="10%" align="center"><xhtml:tt>\</xhtml:tt><space/>(*)</tablecell><tablecell width="10%" align="center"><xhtml:tt>0</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>1+</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C1</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A1</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E1</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F1</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>~</xhtml:tt><space/>(*)</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>1</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>2+</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C2</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A2</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E2</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F2</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>s</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>S</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>2</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>3+</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C3</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A3</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E3</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F3</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>t</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>T</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>3</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>4+</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C4</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A4</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E4</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F4</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>u</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>U</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>4</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>5+</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C5</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A5</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E5</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F5</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>v</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>V</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>5</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>6+</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C6</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A6</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E6</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F6</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>w</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>W</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>6</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>7+</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C7</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A7</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E7</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F7</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>G</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>x</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>X</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>7</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>8+</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C8</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A8</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E8</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F8</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>H</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>y</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>Y</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>8</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>9+</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>C9</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>A9</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>E9</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>F9</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>I</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>z</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>Z</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>9</xhtml:tt></tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>0</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D0</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B0</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>}</xhtml:tt><space/>&amp;nbsp;(*)</tablecell><tablecell align="center"><xhtml:tt>^</xhtml:tt><space/>&amp;nbsp;(*)</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>1</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D1</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B1</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>J</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>2</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D2</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B2</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>K</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>3</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D3</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B3</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>L</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>4</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D4</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B4</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>M</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>5</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D5</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B5</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>N</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>6</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D6</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B6</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>O</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>7</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D7</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B7</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>P</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>8</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D8</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B8</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>Q</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow><tablerow><tablecell align="center"><xhtml:tt>9</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>D9</xhtml:tt></tablecell><tablecell align="center"><xhtml:tt>B9</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center"><xhtml:tt>R</xhtml:tt></tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell><tablecell align="center" bgcolor="#F0F0F0">&amp;nbsp;</tablecell></tablerow></table>(*)<space/><italics>Note: These characters vary depending on the local character<space/><link><target>code page</target></link><space/>setting.</italics></preline></preblock><heading level='3'>Fixed-point zoned decimal</heading><paragraph>Some languages (such as<space/><link><target>COBOL</target></link><space/>and<space/><link><target>PL/I</target></link>) directly support fixed-point zoned decimal values, assigning an implicit decimal point at some location between the decimal digits of a number. For example, given a six-byte signed zoned decimal value with an implied decimal point to the right of the fourth digit, the hex bytes F1 F2 F7 F9 F5 C0 represent the value +1,279.50:</paragraph><preblock><preline>F1 F2 F7 F9 F5 C0</preline><preline><italics><space/>1 2 7 9. 5 +0</italics></preline></preblock><paragraph><template><target>Anchor</target><arg>IBMBCD</arg></template><space/></paragraph><heading level='2'>IBM and BCD</heading><paragraph><template><target>Main</target><arg>BCD (character encoding)</arg></template><link><target>IBM</target></link><space/>used the terms<space/><bold>binary-coded decimal</bold><space/>and<space/><bold>BCD</bold><space/>for 6-bit<space/><italics><link><target>alphanumeric</target></link></italics><space/>codes that represented numbers, upper-case letters and special characters. Some variation of BCD<space/><italics>alphamerics</italics><space/>is used in most early IBM computers, including the<space/><link><target>IBM 1620</target></link>,<space/><link><target>IBM 1400 series</target></link>, and non-<link><target>IBM 700/7000 series#Decimal architecture (7070/7072/7074)</target><part>Decimal Architecture</part></link><space/>members of the<space/><link><target>IBM 700/7000 series</target></link>.</paragraph><paragraph>The<space/><link><target>IBM 1400 series</target></link><space/>are character-addressable machines, each location being six bits labeled<space/><italics>B, A, 8, 4, 2</italics><space/>and<space/><italics>1,</italics>plus an odd parity check bit (<italics>C</italics>) and a word mark bit (<italics>M</italics>).For encoding digits<space/><italics>1</italics><space/>through<space/><italics>9</italics>,<space/><italics>B</italics><space/>and<space/><italics>A</italics><space/>are zero and the digit value represented by standard 4-bit BCD in bits<space/><italics>8</italics><space/>through<space/><italics>1</italics>.For most other characters bits<space/><italics>B</italics><space/>and<space/><italics>A</italics><space/>are derived simply from the &quot;12&quot;, &quot;11&quot;, and &quot;0&quot; &quot;zone punches&quot; in the punched card character code, and bits<space/><italics>8</italics><space/>through<space/><italics>1</italics><space/>from the<space/><italics>1</italics><space/>through<space/><italics>9</italics><space/>punches.A &quot;12 zone&quot; punch set both<space/><italics>B</italics><space/>and<space/><italics>A</italics>, an &quot;11 zone&quot; set<space/><italics>B</italics>, and a &quot;0 zone&quot; (a 0 punch combined with any others) set<space/><italics>A</italics>.Thus the letter<space/><bold>A</bold>, which is<space/><italics>(12,1)</italics><space/>in the punched card format, is encoded<space/><italics>(B,A,1)</italics>. The currency symbol<space/><bold>$</bold>,<space/><italics>(11,8,3)</italics><space/>in the punched card, was encoded in memory as<space/><italics>(B,8,2,1)</italics>.This allowed the circuitry to convert between the punched card format and the internal storage format to be very simple with only a few special cases.One important special case is digit<space/><italics>0</italics>, represented by a lone<space/><italics>0</italics><space/>punch in the card, and<space/><italics>(8,2)</italics><space/>in core memory.<extension extension_name='ref'><link type='external' href='http://ed-thelen.org/1401Project/Van1401-CodeChart.pdf'>IBM BM 1401/1440/1460/1410/7010 Character Code Chart in BCD Order</link></extension></paragraph><paragraph>The memory of the<space/><link><target>IBM 1620</target></link><space/>is organized into 6-bit addressable digits, the usual<space/><italics>8, 4, 2, 1</italics><space/>plus<space/><italics>F</italics>, used as a flag bit and<space/><italics>C</italics>, an odd parity check bit. BCD<space/><italics>alphamerics</italics><space/>are encoded using digit pairs, with the &quot;zone&quot; in the even-addressed digit and the &quot;digit&quot; in the odd-addressed digit, the &quot;zone&quot; being related to the<space/><italics>12</italics>,<space/><italics>11</italics>, and<space/><italics>0</italics><space/>&quot;zone punches&quot; as in the 1400 series. Input/Output translation hardware converted between the internal digit pairs and the external standard 6-bit BCD codes.</paragraph><paragraph>In the Decimal Architecture<space/><link><target>IBM 7070</target></link>,<space/><link><target>IBM 7072</target></link>, and<space/><link><target>IBM 7074</target></link><space/><italics>alphamerics</italics><space/>are encoded using digit pairs (using<space/><link><target>two-out-of-five code</target></link><space/>in the digits,<space/><bold>not</bold><space/>BCD) of the 10-digit word, with the &quot;zone&quot; in the left digit and the &quot;digit&quot; in the right digit. Input/Output translation hardware converted between the internal digit pairs and the external standard 6-bit BCD codes.</paragraph><paragraph>With the introduction of<space/><link><target>System/360</target></link>, IBM expanded 6-bit BCD<space/><italics>alphamerics</italics><space/>to 8-bit<space/><link><target>EBCDIC</target></link>, allowing the addition of many more characters (e.g., lowercase letters). A variable length Packed BCD<space/><italics>numeric</italics><space/>data type is also implemented, providing machine instructions that perform arithmetic directly on packed decimal data.</paragraph><paragraph>On the<space/><link><target>IBM 1130</target></link><space/>and<space/><link><target>IBM 1800</target><part>1800</part></link>, packed BCD is supported in software by IBM's Commercial Subroutine Package.</paragraph><paragraph>Today, BCD data is still heavily used in IBM processors and databases, such as<space/><link><target>IBM DB2</target></link>, mainframes, and<space/><link><target>Power6</target></link>. In these products, the BCD is usually zoned BCD (as in EBCDIC or ASCII), Packed BCD (two decimal digits per<space/><link><target>byte</target></link>), or &quot;pure&quot; BCD encoding (one decimal digit stored as BCD in the low four bits of each byte). All of these are used within hardware registers and processing units, and in software. To convert packed decimals in EBCDIC table unloads to readable numbers, you can use the OUTREC FIELDS mask of the JCL utility DFSORT.<extension extension_name='ref'>http://publib.boulder.ibm.com/infocenter/zos/v1r12/index.jsp?topic=%2Fcom.ibm.zos.r12.iceg200%2Fenf.htm</extension></paragraph><heading level='2'>Other computers and BCD</heading><paragraph>The<space/><link><target>Digital Equipment Corporation</target></link><space/><link><target>VAX</target><part>VAX-11</part></link><space/>series includes<space/><link><target>Instruction set</target><part>instructions</part></link><space/>that can perform arithmetic directly on packed BCD data and convert between packed BCD data and other integer representations.<extension extension_name='ref' name="DEC_VAX11"></extension><space/>The VAX's packed BCD format is compatible with that on IBM System/360 and IBM's later compatible processors. The MicroVAX and later VAX implementations dropped this ability from the CPU but retained code compatibility with earlier machines by implementing the missing instructions in an operating system-supplied software library. This is invoked automatically via exception handling when the no longer implemented instructions are encountered, so that programs using them can execute without modification on the newer machines.</paragraph><paragraph>The<space/><link><target>Intel</target></link><space/><link><target>x86</target></link><space/>architecture found on Intel systems supports a unique 18-digit (ten-byte) BCD format that can be loaded into and stored from the floating point registers, and computations can be performed there.</paragraph><paragraph>In more recent computers such capabilities are almost always implemented in software rather than the CPU's instruction set, but BCD numeric data is still extremely common in commercial and financial applications. There are tricks for implementing packed BCD and zoned decimal add or subtract operations using short but difficult to understand sequences of word-parallel logic and binary arithmetic operations.<extension extension_name='ref'>Douglas W. Jones,<space/><link type='external' href='http://homepage.cs.uiowa.edu/~jones/bcd/bcd.html'>BCD Arithmetic, a tutorial</link>, 2002.</extension><space/>For example, the following code (written in<space/><link><target>C (programming language)</target><part>C</part></link>) computes an unsigned 8-digit packed BCD add using 32-bit binary operations:<extension extension_name='source' lang="c"><paragraph>uint32_t BCDadd(uint32_t a,uint32_t b) {</paragraph><preblock><preline><space/><space/><space/><space/><space/><space/><space/>uint32_t t1 = a + 0x06666666;</preline><preline><space/><space/><space/><space/><space/><space/><space/>uint32_t t2 = t1 + b; /* provisional sum */</preline><preline><space/><space/><space/><space/><space/><space/><space/>uint32_t t3 = t1 ^ b; /* sum without carry propagation */</preline><preline><space/><space/><space/><space/><space/><space/><space/>uint32_t t4 = t2 ^ t3; /* all the binary carry bits */</preline><preline><space/><space/><space/><space/><space/><space/><space/>uint32_t t5 = ~t4 &amp; 0x11111110; /* just BCD carry bits */</preline><preline><space/><space/><space/><space/><space/><space/><space/>uint32_t t6 = (t5 &gt;&gt; 2) | (t5 &gt;&gt; 3); /* correction */</preline><preline><space/><space/><space/><space/><space/><space/><space/>return t2 - t6; /* corrected sum */</preline></preblock><paragraph>}</paragraph></extension></paragraph><heading level='2'>Addition with BCD</heading><paragraph>It is possible to perform<space/><link><target>addition</target></link><space/>in BCD by first adding in binary, and then converting to BCD afterwards. Conversion of the simple sum of two digits can be done by adding 6 (that is, 16 10) when the five-bit result of adding a pair of digits has a value greater than 9. For example:</paragraph><preblock><preline>1001 + 1000 = 10001</preline><preline><space/><space/><space/>9 + 8 = 17</preline></preblock><paragraph>Note that 10001 is the binary, not decimal, representation of the desired result. Also note that it cannot fit in a 4-bit number. In BCD as in decimal, there cannot exist a value greater than 9 (1001) per digit. To correct this, 6 (0110) is added to that sum and then the result is treated as two<space/><link><target>nibble</target><trail>s</trail></link>:</paragraph><preblock><preline>10001 + 0110 = 00010111 =&gt; 0001 0111</preline><preline><space/><space/><space/>17 + 6 = 23 1 7</preline></preblock><paragraph>The two nibbles of the result, 0001 and 0111, correspond to the digits &quot;1&quot; and &quot;7&quot;. This yields &quot;17&quot; in BCD, which is the correct result.</paragraph><paragraph>This technique can be extended to adding multiple digits by adding in groups from right to left, propagating the second digit as a carry, always comparing the 5-bit result of each digit-pair sum to 9. Some CPUs provide a<space/><link><target>half-carry flag</target></link><space/>to facilitate BCD arithmetic adjustments following binary addition and subtraction operations.</paragraph><heading level='2'>Subtraction with BCD</heading><paragraph>Subtraction is done by adding the<space/><link><target>ten's complement</target></link><space/>of the<space/><link><target>subtrahend</target></link>. To represent the sign of a number in BCD, the number 0000 is used to represent a<space/><link><target>positive number</target></link>, and 1001 is used to represent a<space/><link><target>negative number</target></link>. The remaining 14 combinations are invalid signs. To illustrate signed BCD subtraction, consider the following problem: 357 &amp;minus; 432.</paragraph><paragraph>In signed BCD, 357 is 0000 0011 0101 0111. The<space/><link><target>ten's complement</target></link><space/>of 432 can be obtained by taking the<space/><link><target>nine's complement</target></link><space/>of 432, and then adding one. So, 999 &amp;minus; 432 = 567, and 567 + 1 = 568. By preceding 568 in BCD by the negative sign code, the number &amp;minus;432 can be represented. So, &amp;minus;432 in signed BCD is 1001 0101 0110 1000.</paragraph><paragraph>Now that both numbers are represented in signed BCD, they can be added together:</paragraph><preblock><preline><space/><space/>0000 0011 0101 0111</preline><preline><space/><space/><space/><space/><space/>0 3 5 7</preline><preline>+ 1001 0101 0110 1000</preline><preline><xhtml:u><preblock><preline><space/><space/><space/><space/>9 5 6 8</preline></preblock></xhtml:u></preline><preline>= 1001 1000 1011 1111</preline><preline><space/><space/><space/><space/><space/>9 8 11 15</preline></preblock><paragraph>Since BCD is a form of decimal representation, several of the digit sums above are invalid. In the event that an invalid entry (any BCD digit greater than 1001) exists, 6 is added to generate a carry bit and cause the sum to become a valid entry. The reason for adding 6 is that there are 16 possible 4-bit BCD values (since 2<xhtml:sup>4</xhtml:sup><space/>= 16), but only 10 values are valid (0000 through 1001). So adding 6 to the invalid entries results in the following:</paragraph><preblock><preline><space/><space/>1001 1000 1011 1111</preline><preline><space/><space/><space/><space/><space/>9 8 11 15</preline><preline>+ 0000 0000 0110 0110</preline><preline><xhtml:u><preblock><preline><space/><space/><space/><space/>0 0 6 6</preline></preblock></xhtml:u></preline><preline>= 1001 1001 0010 0101</preline><preline><space/><space/><space/><space/><space/>9 9 2 5</preline></preblock><paragraph>Thus the result of the subtraction is 1001 1001 0010 0101 (-925). To check the answer, note that the first digit is 9, which means negative. This seems to be correct, since 357 &amp;minus; 432 should result in a negative number. To check the rest of the digits, represent them in decimal. 1001 0010 0101 is 925. The<space/><link><target>ten's complement</target></link><space/>of 925 is 1000 &amp;minus; 925 = 999 &amp;minus; 925 + 1 = 074 + 1 = 75, so the calculated answer is &amp;minus;75. To check, perform standard subtraction to verify that 357 &amp;minus; 432 is &amp;minus;75.</paragraph><paragraph>Note that in the event that there are a different number of nibbles being added together (such as 1053 &amp;minus; 122), the number with the fewest number of digits must first be padded with zeros before taking the<space/><link><target>ten's complement</target></link><space/>or subtracting. So, with 1053 &amp;minus; 122, 122 would have to first be represented as 0122, and the<space/><link><target>ten's complement</target></link><space/>of 0122 would have to be calculated.</paragraph><heading level='2'>Background</heading><paragraph>The binary-coded decimal scheme described in this article is the most common encoding, but there are many others. The method here can be referred to as<space/><italics>Simple Binary-Coded Decimal</italics><space/>(<italics>SBCD</italics>) or<space/><italics>BCD 8421</italics>.</paragraph><preblock><preline>In the headers to the table, the '8 4 2 1',<space/><italics>etc.</italics>, indicates the weight of each bit shown; note that in the fifth column two of the weights are negative. Both ASCII and EBCDIC character codes for the digits are examples of zoned BCD, and are also shown in the table.</preline></preblock><paragraph>The following table represents<space/><link><target>decimal</target></link><space/>digits from 0 to 9 in various BCD systems:</paragraph><table border="1" cellpadding="2" cellspacing="0" align="center"><tablerow><tablehead bgcolor="#E0E0E0">&amp;nbsp;<xhtml:br></xhtml:br>Digit</tablehead><tablehead bgcolor="#E0E0E0">BCD<xhtml:br></xhtml:br>8 4 2 1</tablehead><tablehead bgcolor="#E0E0E0"><link><target>Excess-3</target></link><xhtml:br></xhtml:br>or<space/><link><target>George Stibitz</target><part>Stibitz</part></link><space/>Code</tablehead><tablehead bgcolor="#E0E0E0">BCD 2 4 2 1<xhtml:br></xhtml:br>or<space/><link><target>Howard Aiken</target><part>Aiken</part></link><space/>Code</tablehead><tablehead bgcolor="#E0E0E0">BCD<xhtml:br></xhtml:br>8 4 2 1</tablehead><tablehead bgcolor="#E0E0E0"><link><target>IBM 702</target></link><space/><link><target>IBM 705</target></link><xhtml:br></xhtml:br><link><target>IBM 7080</target></link><space/><link><target>IBM 1401</target></link><xhtml:br></xhtml:br>8 4 2 1</tablehead><tablehead bgcolor="#E0E0E0"><link><target>ASCII</target></link><xhtml:br></xhtml:br>0000 8421</tablehead><tablehead bgcolor="#E0E0E0"><link><target>EBCDIC</target></link><xhtml:br></xhtml:br>0000 8421</tablehead></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">0</tablehead><tablecell>0000</tablecell><tablecell>0011</tablecell><tablecell>0000</tablecell><tablecell>0000</tablecell><tablecell>1010</tablecell><tablecell>0011 0000</tablecell><tablecell>1111 0000</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">1</tablehead><tablecell>0001</tablecell><tablecell>0100</tablecell><tablecell>0001</tablecell><tablecell>0111</tablecell><tablecell>0001</tablecell><tablecell>0011 0001</tablecell><tablecell>1111 0001</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">2</tablehead><tablecell>0010</tablecell><tablecell>0101</tablecell><tablecell>0010</tablecell><tablecell>0110</tablecell><tablecell>0010</tablecell><tablecell>0011 0010</tablecell><tablecell>1111 0010</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">3</tablehead><tablecell>0011</tablecell><tablecell>0110</tablecell><tablecell>0011</tablecell><tablecell>0101</tablecell><tablecell>0011</tablecell><tablecell>0011 0011</tablecell><tablecell>1111 0011</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">4</tablehead><tablecell>0100</tablecell><tablecell>0111</tablecell><tablecell>0100</tablecell><tablecell>0100</tablecell><tablecell>0100</tablecell><tablecell>0011 0100</tablecell><tablecell>1111 0100</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">5</tablehead><tablecell>0101</tablecell><tablecell>1000</tablecell><tablecell>1011</tablecell><tablecell>1011</tablecell><tablecell>0101</tablecell><tablecell>0011 0101</tablecell><tablecell>1111 0101</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">6</tablehead><tablecell>0110</tablecell><tablecell>1001</tablecell><tablecell>1100</tablecell><tablecell>1010</tablecell><tablecell>0110</tablecell><tablecell>0011 0110</tablecell><tablecell>1111 0110</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">7</tablehead><tablecell>0111</tablecell><tablecell>1010</tablecell><tablecell>1101</tablecell><tablecell>1001</tablecell><tablecell>0111</tablecell><tablecell>0011 0111</tablecell><tablecell>1111 0111</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">8</tablehead><tablecell>1000</tablecell><tablecell>1011</tablecell><tablecell>1110</tablecell><tablecell>1000</tablecell><tablecell>1000</tablecell><tablecell>0011 1000</tablecell><tablecell>1111 1000</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">9</tablehead><tablecell>1001</tablecell><tablecell>1100</tablecell><tablecell>1111</tablecell><tablecell>1111</tablecell><tablecell>1001</tablecell><tablecell>0011 1001</tablecell><tablecell>1111 1001</tablecell></tablerow></table><heading level='2'>Legal history</heading><paragraph>In the 1972 case<space/><link><target>Gottschalk v. Benson</target></link>, the U.S. Supreme Court overturned a lower court decision which had allowed a patent for converting BCD encoded numbers to binary on a computer. This was an important case in determining the patentability of software and algorithms.</paragraph><heading level='2'>Comparison with pure binary</heading><preblock><preline></preline></preblock><heading level='3'>Advantages</heading><list type='bullet'><listitem>Many non-integral values, such as decimal 0.2, have an infinite place-value representation in binary (.001100110011...) but have a finite place-value in binary-coded decimal (0.0010). Consequently a system based on binary-coded decimal representations of decimal fractions avoids errors representing and calculating such values.</listitem><listitem>Scaling by a factor of 10 (or a power of 10) is simple; this is useful when a decimal scaling factor is needed to represent a non-integer quantity (e.g., in financial calculations)</listitem><listitem><link><target>Rounding</target></link><space/>at a decimal digit boundary is simpler. Addition and subtraction in decimal does not require rounding.</listitem><listitem>Alignment of two decimal numbers (for example 1.3 + 27.08) is a simple, exact, shift.</listitem><listitem>Conversion to a character form or for display (e.g., to a text-based format such as<space/><link><target>XML</target></link>, or to drive signals for a<space/><link><target>seven-segment display</target></link>) is a simple per-digit mapping, and can be done in linear (<link><target>Big-O notation</target><part>O</part></link>(<italics>n</italics>)) time. Conversion from pure<space/><link><target>binary numeral system</target><part>binary</part></link><space/>involves relatively complex logic that spans digits, and for large numbers no linear-time conversion algorithm is known (see<space/><link><target>Binary numeral system#Conversion to and from other numeral systems</target><part>Binary numeral system</part></link>).</listitem></list><heading level='3'>Disadvantages</heading><list type='bullet'><listitem>Some operations are more complex to implement.<space/><link><target>Adder (electronics)</target><part>Adder</part><trail>s</trail></link><space/>require extra logic to cause them to wrap and generate a carry early. 15&amp;ndash;20 percent more circuitry is needed for BCD add compared to pure binary.<template><target>Citation needed</target><arg name="date">May 2011</arg></template><space/>Multiplication requires the use of algorithms that are somewhat more complex than shift-mask-add (a<space/><link><target>Binary numeral system#Multiplication</target><part>binary multiplication</part></link>, requiring binary shifts and adds or the equivalent, per-digit or group of digits is required)</listitem><listitem>Standard BCD requires four bits per digit, roughly 20 percent more space than a binary encoding (the ratio of 4 bits to log<xhtml:sub>2</xhtml:sub>10 bits is 1.204). When packed so that three digits are encoded in ten bits, the storage overhead is greatly reduced, at the expense of an encoding that is unaligned with the 8-bit byte boundaries common on existing hardware, resulting in slower implementations on these systems.</listitem></list><preblock><preline>* Practical existing implementations of BCD are typically slower than operations on binary representations, especially on embedded systems,<template><target>Citation needed</target><arg name="date">May 2011</arg></template><space/>due to limited processor support for native BCD operations.</preline></preblock><heading level='2'>Application</heading><paragraph>The<space/><link><target>BIOS</target></link><space/>in many<space/><link><target>personal computer</target><trail>s</trail></link><space/>stores the date and time in BCD because the<space/><link><target>MC6818</target></link><space/>real-time clock chip used in the original<space/><link><target>IBM PC AT</target></link><space/>motherboard provided the time encoded in BCD. This form is easily converted into ASCII for display.<extension extension_name='ref'>http://www.se.ecu.edu.au/units/ens1242/lectures/ens_Notes_08.pdf</extension></paragraph><paragraph>The<space/><link><target>Atari 8-bit family</target></link><space/>of computers used BCD to implement floating-point algorithms. The<space/><link><target>MOS Technology 6502</target><part>MOS 6502</part></link><space/>processor used has a BCD mode that affects the addition and subtraction instructions.</paragraph><paragraph>Early models of the<space/><link><target>PlayStation 3</target></link><space/>store the date and time in BCD. This led to a worldwide outage of the console on 1 March 2010. The last two digits of the year stored as BCD<space/><link><target>time formatting and storage bugs</target><part>were misinterpreted</part></link><space/>as 16 causing an error in the unit's date, rendering most functions inoperable. This has been referred to as the<space/><link><target>Year 2000 problem#Year 2010 problem</target><part>Year 2010 Problem</part></link>.</paragraph><heading level='2'>Representational variations</heading><paragraph>Various BCD implementations exist that employ other representations for numbers.<space/><link><target>Programmable calculator</target><trail>s</trail></link><space/>manufactured by<space/><link><target>Texas Instruments</target></link>,<space/><link><target>Hewlett-Packard</target></link>, and others typically employ a<space/><link><target>floating-point</target></link><space/>BCD format, typically with two or three digits for the (decimal) exponent. The extra bits of the sign digit may be used to indicate special numeric values, such as<space/><link><target>infinity</target></link>,<space/><link><target>arithmetic underflow</target><part>underflow</part></link>/<link><target>arithmetic overflow</target><part>overflow</part></link>, and<space/><link><target>Defined and undefined</target><part>error</part></link><space/>(a blinking display).</paragraph><heading level='3'>Signed variations</heading><paragraph>Signed decimal values may be represented in several ways. The<space/><link><target>COBOL</target></link><space/>programming language, for example, supports a total of five zoned decimal formats, each one encoding the numeric sign in a different way:</paragraph><table class="wikitable" style="width:95%"><tablerow><tablehead style="background:#D0E0FF; width:25%">Type</tablehead><tablehead style="background:#D0E0FF; width:55%">Description</tablehead><tablehead style="background:#D0E0FF; width:20%">Example</tablehead></tablerow><tablerow><tablecell>Unsigned</tablecell><tablecell>No sign nibble</tablecell><tablecell><xhtml:code>F1 F2<space/><xhtml:u>F</xhtml:u>3</xhtml:code></tablecell></tablerow><tablerow><tablecell>Signed trailing<space/><italics>(canonical format)</italics></tablecell><tablecell>Sign nibble in the last (least significant) byte</tablecell><tablecell><xhtml:code>F1 F2<space/><xhtml:u>C</xhtml:u>3</xhtml:code></tablecell></tablerow><tablerow><tablecell>Signed leading<space/><italics>(overpunch)</italics></tablecell><tablecell>Sign nibble in the first (most significant) byte</tablecell><tablecell><xhtml:code><xhtml:u>C</xhtml:u>1 F2 F3</xhtml:code></tablecell></tablerow><tablerow><tablecell>Signed trailing separate</tablecell><tablecell>Separate sign character byte (<xhtml:code>'+'</xhtml:code><space/>or<space/><xhtml:code>''</xhtml:code>) following the digit bytes</tablecell><tablecell><xhtml:code>F1 F2 F3<space/><xhtml:u>2B</xhtml:u></xhtml:code></tablecell></tablerow><tablerow><tablecell>Signed leading separate</tablecell><tablecell>Separate sign character byte (<xhtml:code>'+'</xhtml:code><space/>or<space/><xhtml:code>''</xhtml:code>) preceding the digit bytes</tablecell><tablecell><xhtml:code><xhtml:u>2B</xhtml:u><space/>F1 F2 F3</xhtml:code></tablecell></tablerow></table><heading level='3'><template><target>anchor</target><arg>TBCD</arg></template>Telephony Binary Coded Decimal (TBCD)</heading><paragraph><link><target>3GPP</target></link><space/>developed<space/><bold>TBCD</bold>,<extension extension_name='ref'><template><target>cite techreport</target><arg name="title">3GPP TS 29.002: Mobile Application Part (MAP) specification<space/></arg><arg name="at">sec. 17.7.8 Common data types<space/></arg><arg name="year">2013<space/></arg><arg name="url">http://www.3gpp.org/ftp/Specs/html-info/29002.htm</arg></template></extension><space/>an expansion to BCD where the remaining (unused) bit combinations are used to add specific<space/><link><target>telephony</target></link><space/>characters,<extension extension_name='ref'><template><target>cite web</target><arg name="url"><space/>http://www.etsi.org/deliver/etsi_etr/001_099/060/02_60/etr_060e02p.pdf<space/></arg><arg name="title"><space/>Signalling Protocols and Switching (SPS) Guidelines for using Abstract Syntax Notation One (ASN.1) in telecommunication application protocols<space/></arg><arg name="page">15</arg></template></extension><extension extension_name='ref'><template><target>cite web</target><arg name="url"><space/>http://www.openss7.org/specs/xmap.pdf<space/></arg><arg name="title"><space/>XOM Mobile Application Part (XMAP) Specification<space/></arg><arg name="page">93</arg></template></extension><space/>with digits similar to those found in<space/><link><target>Dual-tone multi-frequency signaling</target><part>telephone keypads</part></link><space/>original design. It is<space/><link><target>backward compatible</target></link><space/>to BCD.</paragraph><table border="1" cellpadding="2" cellspacing="0" align="center" width="30%"><tablerow><tablehead bgcolor="#E0E0E0" width="50%" align="center">Decimal<xhtml:br></xhtml:br>Digit</tablehead><tablehead bgcolor="#E0E0E0" width="50%" align="center">TBCD<xhtml:br></xhtml:br>8 4 2 1</tablehead></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0"><list type='bullet'><listitem></listitem></list></tablehead><tablecell>1 0 1 0</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0"><list type='numbered'><listitem></listitem></list></tablehead><tablecell>1 0 1 1</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">a</tablehead><tablecell>1 1 0 0</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">b</tablehead><tablecell>1 1 0 1</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">c</tablehead><tablecell>1 1 1 0</tablecell></tablerow><tablerow align="center"><tablehead bgcolor="#F0F0F0">Used as filler when there is an odd number of digits</tablehead><tablecell>1 1 1 1</tablecell></tablerow><tablerow align="center"></tablerow></table><heading level='2'>Alternative encodings</heading><paragraph>If errors in representation and computation are more important than the speed of conversion to and from display, a scaled binary representation may be used, which stores a decimal number as a binary-encoded integer and a binary-encoded signed decimal exponent. For example, 0.2 can be represented as 2<template><target>e</target><arg>-1</arg></template>.</paragraph><paragraph>This representation allows rapid multiplication and division, but may require shifting by a power of 10 during addition and subtraction to align the decimal points. It is appropriate for applications with a fixed number of decimal places that do not then require this adjustment&amp;mdash; particularly financial applications where 2 or 4 digits after the decimal point are usually enough. Indeed this is almost a form of<space/><link><target>fixed point arithmetic</target></link><space/>since the position of the<space/><link><target>radix point</target></link><space/>is implied.</paragraph><paragraph><link><target>Chen-Ho encoding</target></link><space/>provides a boolean transformation for converting groups of three BCD-encoded digits to and from 10-bit values that can be efficiently encoded in hardware with only 2 or 3 gate delays.<space/><link><target>Densely Packed Decimal</target></link><space/>is a similar scheme that is used for most of the<space/><link><target>significand</target></link>, except the lead digit, for one of the two alternative decimal encodings specified in the<space/><link><target>IEEE 754-2008</target></link><space/>standard.</paragraph><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Bi-quinary coded decimal</target></link></listitem><listitem><link><target>Chen-Ho encoding</target></link></listitem><listitem><link><target>Densely packed decimal</target></link></listitem><listitem><link><target>Double dabble</target></link>, an algorithm for converting binary numbers to BCD</listitem><listitem><link><target>Gray code</target></link></listitem><listitem><link><target>Year 2000 problem</target></link></listitem><listitem><link><target>Decimal computer</target></link></listitem></list><heading level='2'>Notes</heading><paragraph><extension extension_name='references' group="nb"></extension><extension extension_name='references' group="nb"></extension></paragraph><heading level='2'>References</heading><paragraph><extension extension_name='references'></extension></paragraph><heading level='2'>Further reading</heading><list type='bullet'><listitem><template><target>cite book</target><arg name="author">Mackenzie<space/></arg><arg name="first"><space/>Charles E.<space/></arg><arg name="title"><space/>Coded Character Sets: History and Development<space/></arg><arg name="publisher"><space/>Addison-Wesley<space/></arg><arg name="year"><space/>1980<space/></arg><arg name="isbn"><space/>0-201-14460-3</arg></template></listitem><listitem><italics>Arithmetic Operations in Digital Computers</italics>, R. K. Richards, 397pp, D. Van Nostrand Co., NY, 1955</listitem><listitem>Schmid, Hermann,<space/><italics>Decimal computation</italics>, ISBN 0-471-76180-X, 266pp, Wiley, 1974</listitem><listitem><italics>Superoptimizer: A Look at the Smallest Program</italics>, Henry Massalin, ACM Sigplan Notices, Vol. 22 #10 (Proceedings of the Second International Conference on Architectural support for Programming Languages and Operating Systems), pp122126, ACM, also IEEE Computer Society Press #87CH2440-6, October 1987</listitem><listitem><italics>VLSI designs for redundant binary-coded decimal addition</italics>, Behrooz Shirazi, David Y. Y. Yun, and Chang N. Zhang, IEEE Seventh Annual International Phoenix Conference on Computers and Communications, 1988, pp5256, IEEE, March 1988</listitem><listitem><italics>Fundamentals of Digital Logic</italics><space/>by Brown and Vranesic, 2003</listitem><listitem><italics>Modified Carry Look Ahead BCD Adder With CMOS and Reversible Logic Implementation</italics>, Himanshu Thapliyal and Hamid R. Arabnia, Proceedings of the 2006 International Conference on Computer Design (CDES'06), ISBN 1-60132-009-4, pp6469, CSREA Press, November 2006</listitem><listitem><italics>Reversible Implementation of<space/><template><target>Sic</target><arg name="hide">y</arg><arg>Densely</arg><arg>-</arg></template>Packed-Decimal Converter to and from Binary-Coded-Decimal Format Using in IEEE-754R</italics>, A. Kaivani, A. Zaker Alhosseini, S. Gorgin, and M. Fazlali, 9th International Conference on Information Technology (ICIT'06), pp273276, IEEE, December 2006.</listitem><listitem><link type='external' href='http://speleotrove.com/decimal/decbibindex.html'>Decimal Arithmetic Bibliography</link></listitem></list><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://speleotrove.com/decimal/chen-ho.html'>IBM: Chen-Ho encoding</link></listitem><listitem><link type='external' href='http://speleotrove.com/decimal/DPDecimal.html'>IBM: Densely Packed Decimal</link></listitem><listitem><link type='external' href='http://www.unitjuggler.com/convert-numbersystems-from-decimal-to-bcd.html'>Convert BCD to decimal, binary and hexadecimal and vice versa</link></listitem><listitem><link type='external' href='http://github.com/c-rack/bcd4j'>BCD for Java</link></listitem></list><paragraph><template><target>DEFAULTSORT:Binary-Coded Decimal</target></template><link><target>Category:Computer arithmetic</target></link><link><target>Category:Numeral systems</target></link></paragraph></article>