<article title='Co-NP'><paragraph><template><target>lowercase</target></template><template><target>unsolved</target><arg>computer science</arg><arg name="Is '''NP''' {{">}} '''co-NP''' ?</arg></template>In<space/><link><target>computational complexity theory</target></link>,<space/><bold>co-NP</bold><space/>is a<space/><link><target>complexity class</target></link>. A<space/><link><target>decision problem</target></link><space/><extension extension_name='math'>{\mathcal{X}}</extension><space/>is a member of<space/><bold>co-NP</bold><space/>if and only if its<space/><link><target>complement (complexity)</target><part>complement</part></link><space/><extension extension_name='math'>\overline{\mathcal{X}}</extension><space/>is in the complexity class<space/><bold><link><target>NP (complexity)</target><part>NP</part></link></bold>. In simple terms,<space/><bold>co-NP</bold><space/>is the class of problems for which efficiently verifiable proofs of &quot;no&quot; instances, sometimes called counterexamples, exist. Equivalently,<space/><bold>co-NP</bold><space/>is the set of decision problems where the &quot;no&quot; instances can be accepted in polynomial time by a<space/><link><target>non-deterministic Turing machine</target></link>.</paragraph><paragraph>An example of an<space/><link><target>NP-complete</target><part>'''NP'''-complete</part></link><space/>problem is the<space/><link><target>subset sum problem</target></link>: given a finite set of integers, is there a non-empty subset that sums to zero? To give a proof of a &quot;yes&quot; instance, one must specify a non-empty subset that does sum to zero. The complementary problem is in<space/><bold>co-NP</bold><space/>and asks: &quot;given a finite set of integers, does every non-empty subset have a non-zero sum?&quot; This problem is not obviously seen to be in<space/><bold>NP</bold>.</paragraph><heading level='2'>Relationship to other classes</heading><paragraph><link><target>P (complexity)</target><part>'''P'''</part></link>, the class of polynomial time solvable problems, is a subset of both<space/><bold>NP</bold><space/>and<space/><bold>co-NP</bold>.<space/><bold>P</bold><space/>is thought to be a strict subset in both cases (and demonstrably cannot be strict in one case and not strict in the other).<space/><bold>NP</bold><space/>and<space/><bold>co-NP</bold><space/>are also thought to be unequal.<extension extension_name='ref'><template><target>cite book</target><arg name="first"><space/>John E.<space/></arg><arg name="last"><space/>Hopcroft<space/></arg><arg name="title"><space/>Introduction to Automata Theory, Languages, and Computation (2nd Edition)<space/></arg><arg name="publisher"><space/>Addison-Wesley<space/></arg><arg name="location"><space/>Boston<space/></arg><arg name="year"><space/>2000<space/></arg><arg name="isbn"><space/>0-201-44124-1<space/></arg></template><space/>Chap. 11.</extension><space/>If so, then no<space/><bold>NP</bold>-complete problem can be in<space/><bold>co-NP</bold><space/>and no<space/><link><target>co-NP-complete</target><part>'''co-NP'''-complete</part></link><space/>problem can be in<space/><bold>NP</bold>.<extension extension_name='ref'><template><target>cite book</target><arg name="title"><space/>P, NP, and NP-completeness: The Basics of Computational Complexity<space/></arg><arg name="last1"><space/>Goldreich<space/></arg><arg name="first1"><space/>Oded<space/></arg><arg name="publisher"><space/>[[Cambridge University Press]]<space/></arg><arg name="year"><space/>2010<space/></arg><arg name="page"><space/>155<space/></arg><arg name="authorlink"><space/>Oded Goldreich<space/></arg><arg name="isbn"><space/>9781139490092<space/></arg></template></extension></paragraph><paragraph>This can be shown as follows. Suppose there exists an<space/><bold>NP</bold>-complete problem<space/><extension extension_name='math'>{\mathcal{X}}</extension><space/>that is in<space/><bold>co-NP</bold>. Since all problems in<space/><bold>NP</bold><space/>can be reduced to<space/><extension extension_name='math'>{\mathcal{X}}</extension>, it follows that for every problem in<space/><bold>NP</bold><space/>we can construct a<space/><link><target>non-deterministic Turing machine</target></link><space/>that decides its complement in polynomial time, i.e.,<space/><bold>NP</bold><space/>&amp;sube;<space/><bold>co-NP</bold>. From this it follows that the set of complements of the problems in<space/><bold>NP</bold><space/>is a subset of the set of complements of the problems in<space/><bold>co-NP</bold>, i.e.,<space/><bold>co-NP</bold><space/>&amp;sube;<space/><bold>NP</bold>. Thus<space/><bold>co-NP</bold><space/>=<space/><bold>NP</bold>. The proof that no<space/><bold>co-NP</bold>-complete problem can be in<space/><bold>NP</bold><space/>if<space/><bold>NP</bold><space/>&amp;ne;<space/><bold>co-NP</bold><space/>is symmetrical.</paragraph><paragraph>If a problem can be shown to be in both<space/><bold>NP</bold><space/>and<space/><bold>co-NP</bold>, that is generally accepted as strong evidence that the problem is probably not<space/><bold>NP</bold>-complete (since otherwise<space/><bold>NP</bold><space/>=<space/><bold>co-NP</bold>).</paragraph><paragraph>An example of a problem that is known to belong to both<space/><bold>NP</bold><space/>and in<space/><bold>co-NP</bold><space/>is<space/><link><target>integer factorization</target></link>: given positive integers<space/><italics>m</italics><space/>and<space/><italics>n</italics><space/>determine if<space/><italics>m</italics><space/>has a factor less than<space/><italics>n</italics><space/>and greater than one. Membership in<space/><bold>NP</bold><space/>is clear; if<space/><italics>m</italics><space/>does have such a factor then the factor itself is a certificate. Membership in<space/><bold>co-NP</bold><space/>is also straightforward: one can just list the prime factors of<space/><italics>m</italics>, which the verifier can confirm to be valid by multiplication and the<space/><link><target>AKS primality test</target></link>.</paragraph><paragraph><link><target>Integer factorization</target></link><space/>is closely related to the<space/><link><target>primality</target></link><space/>problem. Both primality testing and factorization have long been known to be<space/><bold>NP</bold><space/>and<space/><bold>co-NP</bold><space/>problems. The<space/><link><target>AKS primality test</target></link>, published in 2002, proves that primality testing also lies in<space/><bold>P</bold>, while factorization may or may not have a polynomial-time algorithm.<extension extension_name='ref'>Manindra Agrawal, Neeraj Kayal, Nitin Saxena, &quot;<link type='external' href='http://www.cse.iitk.ac.in/users/manindra/algebra/primality_v6.pdf'>PRIMES is in P</link>&quot;,<space/><italics>Annals of Mathematics</italics><space/>160 (2004), no. 2, pp. 781-793.</extension></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><template><target>CZoo</target><arg>coNP</arg><arg>C#conp</arg></template></listitem></list><paragraph><template><target>ComplexityClasses</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Co-Np</target></template><link><target>Category:Complexity classes</target></link></paragraph></article>