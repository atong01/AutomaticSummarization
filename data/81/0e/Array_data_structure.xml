<article title='Array_data_structure'><paragraph><template><target>About</target><arg>the byte-layout-level structure</arg><arg>the [[abstract data type]]</arg><arg>Array data type</arg><arg>other uses</arg><arg>Array (disambiguation){{!}}Array</arg></template><template><target>Use dmy dates</target><arg name="date">June 2013</arg></template><template><target>Refimprove</target><arg name="date">September 2008</arg></template></paragraph><paragraph>In<space/><link><target>computer science</target></link>, an<space/><bold>array data structure</bold><space/>or simply an<space/><bold>array</bold><space/>is a<space/><link><target>data structure</target></link><space/>consisting of a collection of<space/><italics>elements</italics><space/>(<link><target>value (computer science)</target><part>values</part></link><space/>or<space/><link><target>variable (programming)</target><part>variables</part></link>), each identified by at least one<space/><italics>array index</italics><space/>or<space/><italics>key</italics>. An array is stored so that the position of each element can be computed from its index<space/><link><target>tuple</target></link><space/>by a mathematical formula.<extension extension_name='ref'><template><target>cite web</target><arg name="url">http://www.nist.gov/dads/HTML/array.html</arg><arg name="title">array</arg><arg name="last">Black</arg><arg name="first">Paul E.</arg><arg name="date">13 November 2008</arg><arg name="work">[[Dictionary of Algorithms and Data Structures]]</arg><arg name="publisher">[[National Institute of Standards and Technology]]</arg><arg name="accessdate">22 August 2010</arg></template></extension><extension extension_name='ref' name="andres"><template><target>cite arXiv</target><arg name="eprint">1008.2909<space/></arg><arg name="author1">Bjoern Andres<space/></arg><arg name="author2">Ullrich Koethe<space/></arg><arg name="author3">Thorben Kroeger<space/></arg><arg name="author4">Hamprecht<space/></arg><arg name="title">Runtime-Flexible Multi-dimensional Arrays and Views for C++98 and C++0x<space/></arg><arg name="class">cs.DS<space/></arg><arg name="year">2010</arg></template></extension><extension extension_name='ref' name="garcia"><template><target>Cite journal</target><arg name="last1">Garcia</arg><arg name="first1">Ronald<space/></arg><arg name="first2">Andrew<space/></arg><arg name="last2">Lumsdaine</arg><arg name="year">2005</arg><arg name="title">MultiArray: a C++ library for generic programming with arrays</arg><arg name="journal">Software: Practice and Experience</arg><arg name="volume">35</arg><arg name="issue">2</arg><arg name="pages">159â€“188</arg><arg name="issn">0038-0644</arg><arg name="doi">10.1002/spe.630</arg></template></extension><space/>The simplest type of data structure is a linear array, also called one-dimensional array.</paragraph><paragraph>For example, an array of 10 32-bit integer variables, with indices 0 through 9, may be stored as 10<space/><link><target>Word (data type)</target><part>words</part></link><space/>at memory addresses 2000, 2004, 2008, ... 2036, so that the element with index<space/><italics>i</italics><space/>has the address 2000 + 4<space/><italics>i</italics>.<extension extension_name='ref'>David R. Richardson (2002), The Book on Data Structures. iUniverse, 112 pages. ISBN 0-595-24039-9, ISBN 978-0-595-24039-5.</extension></paragraph><paragraph>Because the mathematical concept of a<space/><link><target>matrix (mathematics)</target><part>matrix</part></link><space/>can be represented as a two-dimensional grid, two-dimensional arrays are also sometimes called matrices. In some cases the term &quot;vector&quot; is used in computing to refer to an array, although<space/><link><target>tuple</target><trail>s</trail></link><space/>rather than<space/><link><target>vector space</target><part>vectors</part></link><space/>are more correctly the mathematical equivalent. Arrays are often used to implement<space/><link><target>table (information)</target><part>table</part><trail>s</trail></link>, especially<space/><link><target>lookup table</target><trail>s</trail></link>; the word<space/><italics>table</italics><space/>is sometimes used as a synonym of<space/><italics>array</italics>.</paragraph><paragraph>Arrays are among the oldest and most important data structures, and are used by almost every program. They are also used to implement many other data structures, such as<space/><link><target>list (computing)</target><part>list</part><trail>s</trail></link><space/>and<space/><link><target>string (computer science)</target><part>string</part><trail>s</trail></link>. They effectively exploit the addressing logic of computers. In most modern computers and many<space/><link><target>external storage</target></link><space/>devices, the memory is a one-dimensional array of words, whose indices are their addresses.<space/><link><target>Central processing unit</target><part>Processors</part></link>, especially<space/><link><target>vector processor</target><trail>s</trail></link>, are often optimized for array operations.</paragraph><paragraph>Arrays are useful mostly because the element indices can be computed at<space/><link><target>Run time (program lifecycle phase)</target><part>run time</part></link>. Among other things, this feature allows a single iterative<space/><link><target>statement (programming)</target><part>statement</part></link><space/>to process arbitrarily many elements of an array. For that reason, the elements of an array data structure are required to have the same size and should use the same data representation. The set of valid index tuples and the addresses of the elements (and hence the element addressing formula) are usually,<extension extension_name='ref' name="garcia"></extension><extension extension_name='ref' name="veldhuizen"><template><target>cite conference</target><arg name="first1">Todd L.</arg><arg name="last1">Veldhuizen</arg><arg name="title">Arrays in Blitz++</arg><arg name="url">http://ubietylab.net/ubigraph/content/Papers/pdf/BlitzArrays.pdf</arg><arg name="publisher">Springer Berlin Heidelberg</arg><arg name="conference">Computing in Object-Oriented Parallel Environments</arg><arg name="date">December 1998</arg><arg name="isbn">978-3-540-65387-5</arg><arg name="pages">223-230</arg><arg name="series">Lecture Notes in Computer Science</arg><arg name="volume">1505</arg><arg name="doi">10.1007/3-540-49372-7_24</arg></template></extension><space/>but not always,<extension extension_name='ref' name="andres"></extension><space/>fixed while the array is in use.</paragraph><paragraph>The term<space/><italics>array</italics><space/>is often used to mean<space/><link><target>array data type</target></link>, a kind of<space/><link><target>data type</target></link><space/>provided by most<space/><link><target>high-level programming language</target><trail>s</trail></link><space/>that consists of a collection of values or variables that can be selected by one or more indices computed at run-time. Array types are often implemented by array structures; however, in some languages they may be implemented by<space/><link><target>hash table</target><trail>s</trail></link>,<space/><link><target>linked list</target><trail>s</trail></link>,<space/><link><target>search tree</target><trail>s</trail></link>, or other data structures.</paragraph><paragraph>The term is also used, especially in the description of<space/><link><target>algorithm</target><trail>s</trail></link>, to mean<space/><link><target>associative array</target></link><space/>or &quot;abstract array&quot;, a<space/><link><target>theoretical computer science</target></link><space/>model (an<space/><link><target>abstract data type</target></link><space/>or ADT) intended to capture the essential properties of arrays.</paragraph><heading level='2'>History</heading><paragraph>The first digital computers used machine-language programming to set up and access array structures for data tables, vector and matrix computations, and for many other purposes.<space/><link><target>John von Neumann</target></link><space/>wrote the first array-sorting program (<link><target>merge sort</target></link>) in 1945, during the building of the<space/><link><target>EDVAC</target><part>first stored-program computer</part></link>.<extension extension_name='ref'>Donald Knuth,<space/><italics><link><target>The Art of Computer Programming</target></link></italics>, vol. 3. Addison-Wesley</extension><xhtml:sup>p.&amp;nbsp;159</xhtml:sup><space/>Array indexing was originally done by<space/><link><target>self-modifying code</target></link>, and later using<space/><link><target>index register</target><trail>s</trail></link><space/>and<space/><link><target>Addressing mode</target><part>indirect addressing</part></link>. Some mainframes designed in the 1960s, such as the<space/><link><target>Burroughs large systems</target><part>Burroughs B5000</part></link><space/>and its successors, used<space/><link><target>memory segmentation</target></link><space/>to perform index-bounds checking in hardware.<extension extension_name='ref'><template><target>citation</target><arg name="title">Capability-based Computer Systems</arg><arg name="first">Henry M.</arg><arg name="last">Levy</arg><arg name="publisher">Digital Press</arg><arg name="year">1984</arg><arg name="isbn">9780932376220</arg><arg name="page">22</arg></template>.</extension></paragraph><paragraph>Assembly languages generally have no special support for arrays, other than what the machine itself provides. The earliest high-level programming languages, including<space/><link><target>Fortran</target><part>FORTRAN</part></link><space/>(1957),<space/><link><target>COBOL</target></link><space/>(1960), and<space/><link><target>ALGOL</target><part>ALGOL 60</part></link><space/>(1960), had support for multi-dimensional arrays, and so has<space/><link><target>C (programming language)</target><part>C</part></link><space/>(1972). In<space/><link><target>C++</target></link><space/>(1983), class templates exist for multi-dimensional arrays whose dimension is fixed at runtime<extension extension_name='ref' name="garcia"></extension><extension extension_name='ref' name="veldhuizen"></extension><space/>as well as for runtime-flexible arrays.<extension extension_name='ref' name="andres"></extension></paragraph><paragraph><template><target>Expand section</target><arg name="date">May 2009</arg></template></paragraph><heading level='2'>Applications</heading><paragraph>Arrays are used to implement mathematical<space/><link><target>coordinate vector</target><part>vectors</part></link><space/>and<space/><link><target>matrix (mathematics)</target><part>matrices</part></link>, as well as other kinds of rectangular tables. Many<space/><link><target>database</target><trail>s</trail></link>, small and large, consist of (or include) one-dimensional arrays whose elements are<space/><link><target>record (computer science)</target><part>record</part><trail>s</trail></link>.</paragraph><paragraph>Arrays are used to implement other data structures, such as<space/><link><target>heap (data structure)</target><part>heaps</part></link>,<space/><link><target>hash table</target><trail>s</trail></link>,<space/><link><target>double-ended queue</target><part>deque</part><trail>s</trail></link>,<space/><link><target>queue (data structure)</target><part>queue</part><trail>s</trail></link>,<space/><link><target>stack (data structure)</target><part>stacks</part></link>,<space/><link><target>String (computer science)</target><part>strings</part></link>, and<space/><link><target>VList</target><trail>s</trail></link>.</paragraph><paragraph>One or more large arrays are sometimes used to emulate in-program<space/><link><target>dynamic memory allocation</target></link>, particularly<space/><link><target>memory pool</target></link><space/>allocation. Historically, this has sometimes been the only way to allocate &quot;dynamic memory&quot; portably.</paragraph><paragraph>Arrays can be used to determine partial or complete<space/><link><target>control flow</target></link><space/>in programs, as a compact alternative to (otherwise repetitive) multiple<space/><xhtml:code>IF</xhtml:code><space/>statements. They are known in this context as<space/><link><target>control table</target><trail>s</trail></link><space/>and are used in conjunction with a purpose built interpreter whose<space/><link><target>control flow</target></link><space/>is altered according to values contained in the array. The array may contain<space/><link><target>subroutine</target></link><space/><link><target>Pointer (computer programming)</target><part>pointers</part></link><space/>(or relative subroutine numbers that can be acted upon by<space/><link><target>Switch statement</target><part>SWITCH</part></link><space/>statements) that direct the path of the execution.</paragraph><heading level='2'>Element identifier and addressing formulas</heading><paragraph>When data objects are stored in an array, individual objects are selected by an index that is usually a non-negative<space/><link><target>scalar (computing)</target><part>scalar</part></link><space/><link><target>integer</target></link>. Indices are also called subscripts. An index<space/><italics>maps</italics><space/>the array value to a stored object.</paragraph><paragraph>There are three ways in which the elements of an array can be indexed:</paragraph><list type='bullet'><listitem><bold>0</bold><space/>(<italics><link><target>Zero-based numbering</target><part>zero-based indexing</part></link></italics>): The first element of the array is indexed by subscript of 0.<extension extension_name='ref'><template><target>cite web</target><arg name="accessdate"><space/>8 April 2011
</arg><arg name="location"><space/>http://www.configure-all.com/
</arg><arg name="publisher"><space/>Computer Programming Web programming Tips
</arg><arg name="title"><space/>Array Code Examples - PHP Array Functions - PHP code
</arg><arg name="quote"><space/>In most computer languages array index (counting) starts from 0, not from 1. Index of the first element of the array is 0, index of the second element of the array is 1, and so on. In array of names below you can see indexes and values.
</arg><arg name="url"><space/>http://www.configure-all.com/arrays.php</arg></template></extension></listitem><listitem><bold>1</bold><space/>(<italics>one-based indexing</italics>): The first element of the array is indexed by subscript of 1.<extension extension_name='ref'><template><target>cite web</target><arg name="accessdate"><space/>8 April 2011
</arg><arg name="location"><space/>http://www.modula2.org/tutor/index.php
</arg><arg name="work"><space/>Modula-2 Tutorial
</arg><arg name="title"><space/>Chapter 6 - Arrays, Types, and Constants
</arg><arg name="quote"><space/>The names of the twelve variables are given by Automobiles[1], Automobiles[2], ... Automobiles[12]. The variable name is "Automobiles" and the array subscripts are the numbers 1 through 12. [i.e. in Modula-2, the index starts by one!]
</arg><arg name="url"><space/>http://www.modula2.org/tutor/chapter6.php</arg></template></extension></listitem><listitem><bold>n</bold><space/>(<italics>n-based indexing</italics>): The base index of an array can be freely chosen. Usually programming languages allowing<space/><italics>n-based indexing</italics><space/>also allow negative index values and other<space/><link><target>scalar (computing)</target><part>scalar</part></link><space/>data types like<space/><link><target>Enumerated type</target><part>enumerations</part></link>, or<space/><link><target>Character (computing)</target><part>characters</part></link><space/>may be used as an array index.</listitem></list><paragraph>Arrays can have multiple dimensions, thus it is not uncommon to access an array using multiple indices. For example a two-dimensional array<space/><xhtml:code>A</xhtml:code><space/>with three rows and four columns might provide access to the element at the 2nd row and 4th column by the expression<space/><xhtml:code>A[1, 3]</xhtml:code><space/>(in a<space/><link><target>row major</target></link><space/>language) or<space/><xhtml:code>A[3, 1]</xhtml:code><space/>(in a<space/><link><target>column major</target></link><space/>language) in the case of a zero-based indexing system. Thus two indices are used for a two-dimensional array, three for a three-dimensional array, and<space/><italics>n</italics><space/>for an<space/><italics>n</italics>-dimensional array.</paragraph><paragraph>The number of indices needed to specify an element is called the dimension, dimensionality, or<space/><link><target>rank (computer programming)</target><part>rank</part></link><space/>of the array.</paragraph><paragraph>In standard arrays, each index is restricted to a certain range of consecutive integers (or consecutive values of some<space/><link><target>enumerated type</target></link>), and the address of an element is computed by a &quot;linear&quot; formula on the indices.</paragraph><heading level='3'>One-dimensional arrays</heading><paragraph>A one-dimensional array (or single dimension array) is a type of linear array. Accessing its elements involves a single subscript which can either represent a row or column index.</paragraph><paragraph>As an example consider the C declaration<space/><xhtml:code>int anArrayName[10];</xhtml:code></paragraph><paragraph>Syntax : datatype anArrayname[sizeofArray];</paragraph><paragraph>In the given example the array can contain 10 elements of any value available to the<space/><xhtml:code>int</xhtml:code><space/>type. In C, the array element indices are 0-9 inclusive in this case. For example, the expressions<space/><xhtml:code>anArrayName[0]</xhtml:code><space/>and<space/><xhtml:code>anArrayName[9]</xhtml:code><space/>are the first and last elements respectively.</paragraph><paragraph>For a vector with linear addressing, the element with index<space/><italics>i</italics><space/>is located at the address<space/><italics>B</italics><space/>+<space/><italics>c</italics><space/><italics>i</italics>, where<space/><italics>B</italics><space/>is a fixed<space/><italics>base address</italics><space/>and<space/><italics>c</italics><space/>a fixed constant, sometimes called the<space/><italics>address increment</italics><space/>or<space/><italics>stride</italics>.</paragraph><paragraph>If the valid element indices begin at 0, the constant<space/><italics>B</italics><space/>is simply the address of the first element of the array. For this reason, the<space/><link><target>C (programming language)</target><part>C programming language</part></link><space/>specifies that array indices always begin at 0; and many programmers will call that element &quot;<link><target>Zero-based numbering</target><part>zeroth</part></link>&quot; rather than &quot;first&quot;.</paragraph><paragraph>However, one can choose the index of the first element by an appropriate choice of the base address<space/><italics>B</italics>. For example, if the array has five elements, indexed 1 through 5, and the base address<space/><italics>B</italics><space/>is replaced by<space/><italics>B</italics><space/>+ 30<italics>c</italics>, then the indices of those same elements will be 31 to 35. If the numbering does not start at 0, the constant<space/><italics>B</italics><space/>may not be the address of any element.</paragraph><heading level='3'>Multidimensional arrays</heading><paragraph>For a two-dimensional array, the element with indices<space/><italics>i</italics>,<italics>j</italics><space/>would have address<space/><italics>B</italics><space/>+<space/><italics>c</italics><space/><italics>i</italics><space/>+<space/><italics>d</italics><space/><italics>j</italics>, where the coefficients<space/><italics>c</italics><space/>and<space/><italics>d</italics><space/>are the<space/><italics>row</italics><space/>and<space/><italics>column address increments</italics>, respectively.</paragraph><paragraph>More generally, in a<space/><italics>k</italics>-dimensional array, the address of an element with indices<space/><italics>i</italics><xhtml:sub>1</xhtml:sub>,<space/><italics>i</italics><xhtml:sub>2</xhtml:sub>, ...,<space/><italics>i</italics><xhtml:sub><italics>k</italics></xhtml:sub><space/>is</paragraph><list type='ident'><listitem><italics>B</italics><space/>+<space/><italics>c</italics><xhtml:sub>1</xhtml:sub><space/><italics>i</italics><xhtml:sub>1</xhtml:sub><space/>+<space/><italics>c</italics><xhtml:sub>2</xhtml:sub><space/><italics>i</italics><xhtml:sub>2</xhtml:sub><space/>+ ... +<space/><italics>c</italics><xhtml:sub><italics>k</italics></xhtml:sub><space/><italics>i</italics><xhtml:sub><italics>k</italics></xhtml:sub>.</listitem></list><paragraph>For example: int a[3][2];</paragraph><paragraph>This means that array a has 3 rows and 2 columns, and the array is of integer type. Here we can store 6 elements they are stored linearly but starting from first row linear then continuing with second row. The above array will be stored as a<xhtml:sub>11</xhtml:sub>, a<xhtml:sub>12</xhtml:sub>, a<xhtml:sub>13</xhtml:sub>, a<xhtml:sub>21</xhtml:sub>, a<xhtml:sub>22</xhtml:sub>, a<xhtml:sub>23</xhtml:sub>.</paragraph><paragraph>This formula requires only<space/><italics>k</italics><space/>multiplications and<space/><italics>k</italics><space/>additions, for any array that can fit in memory. Moreover, if any coefficient is a fixed power of 2, the multiplication can be replaced by<space/><link><target>bitwise operation</target><part>bit shifting</part></link>.</paragraph><paragraph>The coefficients<space/><italics>c</italics><xhtml:sub><italics>k</italics></xhtml:sub><space/>must be chosen so that every valid index tuple maps to the address of a distinct element.</paragraph><paragraph>If the minimum legal value for every index is 0, then<space/><italics>B</italics><space/>is the address of the element whose indices are all zero. As in the one-dimensional case, the element indices may be changed by changing the base address<space/><italics>B</italics>. Thus, if a two-dimensional array has rows and columns indexed from 1 to 10 and 1 to 20, respectively, then replacing<space/><italics>B</italics><space/>by<space/><italics>B</italics><space/>+<space/><italics>c</italics><xhtml:sub>1</xhtml:sub><space/>- 3<space/><italics>c</italics><xhtml:sub>1</xhtml:sub><space/>will cause them to be renumbered from 0 through 9 and 4 through 23, respectively. Taking advantage of this feature, some languages (like FORTRAN 77) specify that array indices begin at 1, as in mathematical tradition; while other languages (like Fortran 90, Pascal and Algol) let the user choose the minimum value for each index.</paragraph><heading level='3'>Dope vectors</heading><paragraph>The addressing formula is completely defined by the dimension<space/><italics>d</italics>, the base address<space/><italics>B</italics>, and the increments<space/><italics>c</italics><xhtml:sub>1</xhtml:sub>,<space/><italics>c</italics><xhtml:sub>2</xhtml:sub>, ...,<space/><italics>c</italics><xhtml:sub><italics>k</italics></xhtml:sub>. It is often useful to pack these parameters into a record called the array's<space/><italics>descriptor</italics><space/>or<space/><italics>stride vector</italics><space/>or<space/><italics><link><target>dope vector</target></link></italics>.<extension extension_name='ref' name="andres"></extension><extension extension_name='ref' name="garcia"></extension><space/>The size of each element, and the minimum and maximum values allowed for each index may also be included in the dope vector. The dope vector is a complete<space/><link><target>handle (computing)</target><part>handle</part></link><space/>for the array, and is a convenient way to pass arrays as arguments to<space/><link><target>subroutine</target><part>procedures</part></link>. Many useful<space/><link><target>array slicing</target></link><space/>operations (such as selecting a sub-array, swapping indices, or reversing the direction of the indices) can be performed very efficiently by manipulating the dope vector.<extension extension_name='ref' name="andres"></extension></paragraph><heading level='3'>Compact layouts</heading><paragraph>Often the coefficients are chosen so that the elements occupy a contiguous area of memory. However, that is not necessary. Even if arrays are always created with contiguous elements, some array slicing operations may create non-contiguous sub-arrays from them.</paragraph><paragraph>There are two systematic compact layouts for a two-dimensional array. For example, consider the matrix</paragraph><list type='ident'><listitem><extension extension_name='math'>\mathbf{A} =
\begin{bmatrix}
1 &amp; 2 &amp; 3 \\
4 &amp; 5 &amp; 6 \\
7 &amp; 8 &amp; 9
\end{bmatrix}.
</extension></listitem></list><paragraph>In the<space/><link><target>row-major order</target></link><space/>layout (adopted by C for statically declared arrays), the elements in each row are stored in consecutive positions and all of the elements of a row have a lower address than any of the elements of a consecutive row:</paragraph><table border="1"><tablerow><tablecell>1</tablecell><tablecell>2</tablecell><tablecell>3</tablecell><tablecell>4</tablecell><tablecell>5</tablecell><tablecell>6</tablecell><tablecell>7</tablecell><tablecell>8</tablecell><tablecell>9</tablecell></tablerow></table><paragraph>In<space/><link><target>Row-major order</target><part>column-major order</part></link><space/>(traditionally used by Fortran), the elements in each column are consecutive in memory and all of the elements of a column have a lower address than any of the elements of a consecutive column:</paragraph><table border="1"><tablerow><tablecell>1</tablecell><tablecell>4</tablecell><tablecell>7</tablecell><tablecell>2</tablecell><tablecell>5</tablecell><tablecell>8</tablecell><tablecell>3</tablecell><tablecell>6</tablecell><tablecell>9</tablecell></tablerow></table><paragraph>For arrays with three or more indices, &quot;row major order&quot; puts in consecutive positions any two elements whose index tuples differ only by one in the<space/><italics>last</italics><space/>index. &quot;Column major order&quot; is analogous with respect to the<space/><italics>first</italics><space/>index.</paragraph><paragraph>In systems which use<space/><link><target>processor cache</target></link><space/>or<space/><link><target>virtual memory</target></link>, scanning an array is much faster if successive elements are stored in consecutive positions in memory, rather than sparsely scattered. Many algorithms that use multidimensional arrays will scan them in a predictable order. A programmer (or a sophisticated compiler) may use this information to choose between row- or column-major layout for each array. For example, when computing the product<space/><italics>A</italics><italics>B</italics><space/>of two matrices, it would be best to have<space/><italics>A</italics><space/>stored in row-major order, and<space/><italics>B</italics><space/>in column-major order.</paragraph><heading level='3'>Resizing</heading><paragraph><template><target>Main</target><arg>Dynamic array</arg></template></paragraph><paragraph>Static arrays have a size that is fixed when they are created and consequently do not allow elements to be inserted or removed. However, by allocating a new array and copying the contents of the old array to it, it is possible to effectively implement a<space/><italics>dynamic</italics><space/>version of an array; see<space/><link><target>dynamic array</target></link>. If this operation is done infrequently, insertions at the end of the array require only amortized constant time.</paragraph><paragraph>Some array data structures do not reallocate storage, but do store a count of the number of elements of the array in use, called the count or size. This effectively makes the array a<space/><link><target>dynamic array</target></link><space/>with a fixed maximum size or capacity;<space/><link><target>Pascal string</target><trail>s</trail></link><space/>are examples of this.</paragraph><heading level='3'>Non-linear formulas</heading><paragraph>More complicated (non-linear) formulas are occasionally used. For a compact two-dimensional<space/><link><target>triangular array</target></link>, for instance, the addressing formula is a polynomial of degree 2.</paragraph><heading level='2'>Efficiency</heading><paragraph>Both<space/><italics>store</italics><space/>and<space/><italics>select</italics><space/>take (deterministic worst case)<space/><link><target>constant time</target></link>. Arrays take linear (<link><target>Big-O notation</target><part>O</part></link>(<italics>n</italics>)) space in the number of elements<space/><italics>n</italics><space/>that they hold.</paragraph><paragraph>In an array with element size<space/><italics>k</italics><space/>and on a machine with a cache line size of B bytes, iterating through an array of<space/><italics>n</italics><space/>elements requires the minimum of ceiling(<italics>nk</italics>/B) cache misses, because its elements occupy contiguous memory locations. This is roughly a factor of B/<italics>k</italics><space/>better than the number of cache misses needed to access<space/><italics>n</italics><space/>elements at random memory locations. As a consequence, sequential iteration over an array is noticeably faster in practice than iteration over many other data structures, a property called<space/><link><target>locality of reference</target></link><space/>(this does<space/><italics>not</italics><space/>mean however, that using a<space/><link><target>Perfect hash function</target><part>perfect hash</part></link><space/>or<space/><link><target>hash function#Trivial hash function</target><part>trivial hash</part></link><space/>within the same (local) array, will not be even faster - and achievable in<space/><link><target>constant time</target></link>). Libraries provide low-level optimized facilities for copying ranges of memory (such as<space/><link><target>String.h</target><part>memcpy</part></link>) which can be used to move<space/><link><target>contiguous</target></link><space/>blocks of array elements significantly faster than can be achieved through individual element access. The speedup of such optimized routines varies by array element size, architecture, and implementation.</paragraph><paragraph>Memory-wise, arrays are compact data structures with no per-element<space/><link><target>Computational overhead</target><part>overhead</part></link>. There may be a per-array overhead, e.g. to store index bounds, but this is language-dependent. It can also happen that elements stored in an array require<space/><italics>less</italics><space/>memory than the same elements stored in individual variables, because several array elements can be stored in a single<space/><link><target>Word (data type)</target><part>word</part></link>; such arrays are often called<space/><italics>packed</italics><space/>arrays. An extreme (but commonly used) case is the<space/><link><target>bit array</target></link>, where every bit represents a single element. A single<space/><link><target>octet (computing)</target><part>octet</part></link><space/>can thus hold up to 256 different combinations of up to 8 different conditions, in the most compact form.</paragraph><paragraph>Array accesses with statically predictable access patterns are a major source of<space/><link><target>data parallelism</target></link>.</paragraph><heading level='3'>Comparison with other data structures</heading><paragraph><template><target>List data structure comparison</target></template><link><target>Dynamic array</target><part>Growable array</part><trail>s</trail></link><space/>are similar to arrays but add the ability to insert and delete elements; adding and deleting at the end is particularly efficient. However, they reserve linear (<link><target>Big-O notation#Family of BachmannLandau notations</target><part></part></link>(<italics>n</italics>)) additional storage, whereas arrays do not reserve additional storage.</paragraph><paragraph><link><target>Associative array</target><trail>s</trail></link><space/>provide a mechanism for array-like functionality without huge storage overheads when the index values are sparse. For example, an array that contains values only at indexes 1 and 2 billion may benefit from using such a structure. Specialized associative arrays with integer keys include<space/><link><target>Radix tree</target><part>Patricia trie</part><trail>s</trail></link>,<space/><link><target>Judy array</target><trail>s</trail></link>, and<space/><link><target>van Emde Boas tree</target><trail>s</trail></link>.</paragraph><paragraph><link><target>Self-balancing binary search tree</target><part>Balanced trees</part></link><space/>require O(log<space/><italics>n</italics>) time for indexed access, but also permit inserting or deleting elements in O(log<space/><italics>n</italics>) time,<extension extension_name='ref'><link type='external' href='http://www.chiark.greenend.org.uk/~sgtatham/algorithms/cbtree.html'>Counted B-Tree</link></extension><space/>whereas growable arrays require linear ((<italics>n</italics>)) time to insert or delete elements at an arbitrary position.</paragraph><paragraph><link><target>Linked list</target><trail>s</trail></link><space/>allow constant time removal and insertion in the middle but take linear time for indexed access. Their memory use is typically worse than arrays, but is still linear.</paragraph><paragraph><link><target>Image:Array of array storage.svg</target><part>120px</part><part>left</part><part>A two-dimensional array stored as a one-dimensional array of one-dimensional arrays (rows).</part></link>An<space/><link><target>Iliffe vector</target></link><space/>is an alternative to a multidimensional array structure. It uses a one-dimensional array of<space/><link><target>reference (computer science)</target><part>references</part></link><space/>to arrays of one dimension less. For two dimensions, in particular, this alternative structure would be a vector of pointers to vectors, one for each row. Thus an element in row<space/><italics>i</italics><space/>and column<space/><italics>j</italics><space/>of an array<space/><italics>A</italics><space/>would be accessed by double indexing (<italics>A</italics>[<italics>i</italics>][<italics>j</italics>] in typical notation). This alternative structure allows<space/><link><target>jagged array</target><trail>s</trail></link>, where each row may have a different size or, in general, where the valid range of each index depends on the values of all preceding indices. It also saves one multiplication (by the column address increment) replacing it by a bit shift (to index the vector of row pointers) and one extra memory access (fetching the row address), which may be worthwhile in some architectures.</paragraph><heading level='2'>Dimension</heading><paragraph>The dimension of an array is the number of indices needed to select an element. Thus, if the array is seen as a function on a set of possible index combinations, it is the dimension of the space of which its domain is a discrete subset. Thus a one-dimensional array is a list of data, a two-dimensional array a rectangle of data, a three-dimensional array a block of data, etc.</paragraph><paragraph>This should not be confused with the dimension of the set of all matrices with a given domain, that is, the number of elements in the array. For example, an array with 5 rows and 4 columns is two-dimensional, but such matrices form a 20-dimensional space. Similarly, a three-dimensional vector can be represented by a one-dimensional array of size three.</paragraph><heading level='2'>See also</heading><paragraph><template><target>Portal</target><arg>Computer programming</arg></template></paragraph><paragraph><template><target>Div col</target><arg></arg><arg>20em</arg></template></paragraph><list type='bullet'><listitem><link><target>Dynamic array</target></link></listitem><listitem><link><target>Parallel array</target></link></listitem><listitem><link><target>Variable-length array</target></link></listitem><listitem><link><target>Bit array</target></link></listitem><listitem><link><target>Array slicing</target></link></listitem><listitem><link><target>Offset (computer science)</target></link></listitem><listitem><link><target>Row-major order</target></link></listitem><listitem><link><target>Stride of an array</target></link></listitem></list><paragraph><template><target>Div col end</target></template></paragraph><heading level='2'>References</heading><paragraph><template><target>Reflist</target><arg>30em</arg></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem>https://www.tutorialcup.com/cplusplus/arrays.htm</listitem></list><paragraph><template><target>Wiktionary</target><arg>array</arg></template><template><target>Wikibooks</target><arg>Data Structures/Arrays</arg></template><template><target>Commons category</target><arg>Array data structure</arg></template></paragraph><paragraph><template><target>Data structures</target></template></paragraph><paragraph><template><target>Authority control</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Array Data Structure</target></template><link><target>Category:Arrays</target><part>*</part></link><link><target>Category:Data structures</target></link></paragraph></article>