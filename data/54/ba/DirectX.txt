{{Infobox Windows component
| name               = DirectX
| logo               = Microsoft-DirectX-Logo-wordmark.svg
| logo_size          = 250px
| screenshot         = Directx9.png
| screenshot_size    = 250px
| caption            = DirectX logo since DirectX 9
| included_with      = [[Windows 95]] OSR2<br />[[Windows NT 4.0]]<br />and all subsequent releases
| type               = API
| replaces           =
| replaced_by        =
| related_components = [[Direct2D]]<br />[[Direct3D]]<br />[[DirectWrite]]<br />[[XAudio2]]<br />[[XInput]]<br />
}}

'''Microsoft DirectX''' is a collection of [[application programming interface]]s (APIs) for handling tasks related to [[multimedia]], especially [[game programming]] and video, on [[Microsoft]] platforms. Originally, the names of these APIs all began with Direct, such as [[Direct3D]], [[DirectDraw]], [[DirectMusic]], [[DirectPlay]], [[DirectSound]], and so forth. The name Direct''X'' was coined as shorthand term for all of these APIs (the X standing in for the particular API names) and soon became the name of the collection. When Microsoft later set out to develop a gaming console, the X was used as the basis of the name [[Xbox (console)|Xbox]] to indicate that the console was based on DirectX technology.<ref>{{cite web|url=http://www.economist.com/node/5214861|title=Microsoft: The meaning of Xbox - The Economist|work=The Economist}}</ref> The X initial has been carried forward in the naming of APIs designed for the Xbox such as [[XInput]] and the [[Cross-platform Audio Creation Tool]] (XACT), while the DirectX pattern has been continued for Windows APIs such as [[Direct2D]] and [[DirectWrite]].

Direct3D (the 3D graphics API within DirectX) is widely used in the development of [[video game]]s for [[Microsoft Windows]], [[Sega]] [[Dreamcast]], [[Microsoft]] [[Xbox (console)|Xbox]],  Microsoft [[Xbox 360]], and Microsoft [[Xbox One]]. Direct3D is also used by other [[software]] applications for visualization and graphics tasks such as CAD/CAM engineering. As Direct3D is the most widely publicized component of DirectX, it is common to see the names "DirectX" and "Direct3D" used interchangeably.

The DirectX [[software development kit|software development kit (SDK)]] consists of [[runtime library|runtime libraries]] in redistributable binary form, along with accompanying documentation and [[header file|headers]] for use in coding. Originally, the runtimes were only installed by games or explicitly by the user. [[Windows 95]] did not launch with DirectX, but DirectX was included with Windows 95 OEM Service Release 2.<ref>{{cite web|url=http://www.computerhope.com/directx.htm|title=DirectX Help|work=computerhope.com}}</ref> [[Windows 98]] and [[Windows NT 4.0]] both shipped with DirectX, as has every version of Windows released since. The SDK is available as a free download. While the runtimes are proprietary, closed-source software, source code is provided for most of the SDK samples. Starting with the release of Windows 8 Developer Preview, DirectX SDK has been integrated into Windows SDK.<ref name=wheresDX>{{cite web|url=https://msdn.microsoft.com/en-us/library/ee663275%28v=VS.85%29.aspx|title=Where is the DirectX SDK?|publisher=Microsoft|work=microsoft.com}}</ref>

==Development history==
In late 1994, Microsoft was ready to release [[Windows 95]], its next [[operating system]]. An important factor in the value consumers would place on it was the programs that would be able to run on it. Three Microsoft employees—Craig Eisler, [[Alex St. John]], and Eric Engstrom—were concerned because [[game programmer|programmers]] tended to see Microsoft's previous operating system, [[MS-DOS]], as a better platform for game programming, meaning few games would be developed for Windows 95 and the operating system would not be as much of a success. This was compounded by negative reception surrounding the Windows port of ''[[The Lion King (video game)|The Lion King]]''. The game used [[WinG]], which crashed on [[Compaq Presario]]s that came shipped with it following a partnership between [[Compaq]] and [[Disney]], as the [[Cirrus Logic]] display drivers used by the Presarios were not thoroughly tested with the API.<ref name="Tynan">{{cite news|url=http://www.pcworld.com/article/125772/worst_products_ever.html?page=3|title=The 25 Worst Tech Products of All Time|last=Tynan|first=Dan|date=26 May 2006|work=[[PC World]]|accessdate=20 September 2015}}</ref>
   
DOS allowed direct access to video cards, [[computer keyboard|keyboards]], [[computer mouse|mice]], [[sound card|sound devices]], and all other parts of the system, while Windows 95 - with its protected memory model - restricted access to all of these, working on a much more standardized model. Microsoft needed a quick solution for programmers; the operating system was only months away from being released. Eisler (development lead), St. John, and Engstrom (program manager) worked together to fix this problem, with a solution that they eventually named DirectX.
   
The first version of DirectX was released in September 1995 as the Windows Games SDK. It was the [[Windows API|Win32]] replacement for the DCI<ref>{{cite web|url=http://stason.org/TULARC/pc/video-faq/54-What-is-DCI.html|title=54 What is DCI?|work=stason.org}}</ref> and WinG APIs for [[Windows 3.1]]. DirectX allowed all versions of Microsoft Windows, starting with Windows 95, to incorporate high-performance multimedia. Eisler wrote about the frenzy to build DirectX 1 through 5 in his blog.<ref>[http://craig.theeislers.com/2006/02/20/directx-then-and-now-part-1/ Craig Eisler's blog post about the frenzy to build DirectX 1 through 5] on craig.theeislers.com</ref>

Initial adoption of DirectX by game developers was slow.<ref name=Loyd>{{cite book|last=Case|first=Loyd|title=Building the ultimate game PC|year=1999|publisher=Que|location=Indianapolis, Ind.|isbn=978-0-7897-2204-1|page=162}}</ref>  There were fears that DirectX could be replaced as WinG had been, there was a performance penalty in using Windows over DOS, and there were many die-hard DOS programmers.<ref name=Loyd/>

DirectX 2.0 became a component of Windows itself with the releases of [[Windows 95]] OSR2 and  [[Windows NT 4.0]] in mid-1996.  Since Windows 95 was itself still new and few games had been released for it, Microsoft engaged in heavy promotion of DirectX to developers who were generally distrustful of Microsoft's ability to build a gaming platform in Windows.  Alex St. John, the evangelist for DirectX, staged an elaborate event at the 1996 [[Game Developers Conference|Computer Game Developers Conference]] which game developer Jay Barnson described as a [[Ancient Rome|Roman]] theme, including real [[lion]]s, togas, and something resembling an indoor carnival.<ref>{{cite web
|url=http://rampantgames.com/blog/2006/07/wildest-birthday-party-ever.html
|archiveurl=https://web.archive.org/web/20060717201712/http://www.rampantgames.com/blog/2006/07/wildest-birthday-party-ever.html
|title=Tales of the Rampant Coyote
|author=Jay Barnson
|date=July 13, 2006
|archivedate=July 17, 2006
}}</ref>  It was at this event that Microsoft first introduced [[Direct3D]] and [[DirectPlay]], and demonstrated multiplayer ''[[MechWarrior 2]]'' being played over the Internet.

The DirectX team faced the challenging task of testing each DirectX release against an array of [[computer hardware]] and [[software]].  A variety of different graphics cards, audio cards, motherboards, CPUs, input devices, games, and other multimedia applications were tested with each beta and final release. The DirectX team also built and distributed tests that allowed the hardware industry to confirm that new hardware designs and driver releases would be compatible with DirectX.

Prior to DirectX, Microsoft had included [[OpenGL]] on their [[Windows NT]] platform.<ref>{{cite web|title=Windows NT 3.51 Product Overview|url=http://support.microsoft.com/kb/124814|publisher=[[Microsoft]]|accessdate=16 September 2010|date=31 October 2006 }}</ref> At the time, [[OpenGL]] required "high-end" hardware and was focused on [[engineering]] and [[Computer-aided design|CAD]] uses.{{Citation needed|date=August 2009}} Direct3D was intended to be a lightweight partner to OpenGL, focused on game use. As 3D gaming grew, OpenGL developed to include better support for programming techniques for interactive multimedia applications like games, giving developers choice between using OpenGL or Direct3D as the 3D graphics API for their applications. At that point a "battle" began between supporters of the cross-platform OpenGL and the Windows-only Direct3D. Incidentally, OpenGL was supported at Microsoft by the DirectX team.  If a developer chose to use OpenGL 3D graphics API, the other APIs of DirectX are often combined with OpenGL in [[computer games]] because OpenGL does not include all of DirectX's functionality (such as sound or joystick support).

In a console-specific version, DirectX was used as a basis for Microsoft's [[Xbox (console)|Xbox]], [[Xbox 360]] and [[Xbox One]] [[video game console|console]] API. The API was developed jointly between Microsoft and [[Nvidia]], who developed the custom graphics hardware used by the original Xbox. The Xbox API was similar to DirectX version 8.1, but is non-updateable like other console technologies. The Xbox was code named DirectXbox, but this was shortened to Xbox for its commercial name.<ref>J. Allard, [http://www.pcpro.co.uk/news/55995/games-interview-xbox-supremo-allard-on-the-future-of-microsofts-console-part-ii.html PC Pro Interview], April 2004</ref>

In 2002, Microsoft released DirectX 9 with support for the use of much longer shader programs than before with pixel and vertex shader version 2.0. Microsoft has continued to update the DirectX suite since then, introducing Shader Model 3.0 in DirectX 9.0c, released in August 2004.

As of April 2005, [[DirectShow]] was removed from DirectX and moved to the [[Microsoft Platform SDK]] instead.

DirectX has been confirmed to be present in Microsoft's [[Windows Phone 8]].<ref>{{cite web | url=http://www.theverge.com/2012/6/20/3095150/microsoft-windows-phone-8-common-platform-directx | title=Windows Phone 8 adds DirectX, native development, easier app porting | date=June 20, 2012 | accessdate=June 23, 2012}}</ref>

===Logos===
The original logo resembled a deformed [[Radioactive sign|radiation warning symbol]]. Controversially, the original name for the DirectX project was the "Manhattan Project", a reference to the [[Manhattan Project|US nuclear weapons initiative]]. [[Alex St. John]], head of Microsoft DirectX evangelism at the time, claims<ref>{{cite web |title=Alex St John Interview |url=http://www.shacknews.com/article/46338/alex-st-john-interview |date=March 28, 2007 |accessdate=August 2011}}</ref> that the connotation of the ultimate outcome of the Manhattan Project (the [[Atomic bombings of Hiroshima and Nagasaki|nuclear bombing of Japan]]) is intentional, and that DirectX and its sister project, the [[Xbox (console)|Xbox]] (which shares a similar logo), were meant to displace Japanese videogame-makers from their dominance of the [[video-game industry]].<ref name="stjohn">{{cite web | url = http://www.shacknews.com/featuredarticle.x?id=283&page=2
| title=Alex St John Interview, page 2 | author=David Craddock | work=Shack News |date=March 2007 | accessdate=2008-06-03}}
</ref> However, Microsoft publicly denies this account, instead claiming that the logo is merely an artistic design.<ref name="stjohn"/>

<gallery perrow="3" style="text-align:center; margin:auto;">
DirectX 1 logo.png|DirectX 1.0–8.2
Directx9.png|DirectX 9.0–12
</gallery>

==Components==
DirectX is composed of multiple APIs:

* [[Microsoft Direct3D|Direct3D]] (D3D): for drawing [[3D computer graphics|3D graphics]].
* [[DXGI]]: for enumerating adapters and monitors and managing swap chains for Direct3D 10 and up.
* [[Direct2D]]: for 2D graphics.
* [[DirectWrite]]: for fonts.
* [[DirectCompute]]: for [[GPU]] Computing.
* [[DirectSound3D]] (DS3D): for the playback of [[3D audio effect|3D sounds]].
* [[DirectX Media]]: comprising DirectAnimation for 2D/3D<ref>[http://www.asahi-net.or.jp/~RB6K-IID/space.html 3D Animation of SPACE FIGHTER by DIRECT ANIMATION]</ref> web animation, [[DirectShow]] for multimedia playback and [[streaming media]], DirectX Transform for web interactivity, and Direct3D Retained Mode for higher level 3D graphics. DirectShow contains [[DirectX plugin]]s for [[audio signal processing]] and [[DXVA|DirectX Video Acceleration]] for accelerated video playback.
* DirectX Diagnostics (DxDiag): a tool for diagnosing and generating reports on components related to DirectX, such as audio, video, and input drivers.
* DirectX Media Objects: support for streaming objects such as encoders, decoders, and effects.
* DirectSetup: for the installation of DirectX components, and the detection of the current DirectX version.
* [[Cross-platform Audio Creation Tool|XACT3]] higher-level audio API
* [[XAudio2]]: low-level API for audio

Microsoft has deprecated, but still supports, these DirectX components:
* [[DirectDraw]]: for drawing 2D Graphics ([[raster graphics]]). Deprecated in favor of [[Direct2D]], though still in use by a number of games and as a video renderer in media applications.
* [[DirectInput]]: for interfacing with input devices including [[computer keyboard|keyboards]], [[computer mouse|mice]], [[joystick]]s, or other [[game controller]]s. Deprecated after version 8 in favor of [[XInput]] for [[Xbox 360]] controllers or standard WM_INPUT window message processing for keyboard and mouse input.
* [[DirectPlay]]: for communication over a local-area or wide-area network. Deprecated after version 8 in favor of [[Games for Windows Live]] and [[Xbox Live]].
* [[DirectSound]]: for the playback and recording of waveform sounds. Deprecated in favor of [[XAudio2]] and XACT3.
* [[DirectMusic]]: for playback of soundtracks authored in [[DirectMusic|DirectMusic Producer]]. Deprecated since DirectX 8 in favor of XAudio2 and XACT3.

DirectX functionality is provided in the form of [[Component Object Model|COM]]-style objects and interfaces. Additionally, while not DirectX components themselves, [[Managed code|managed]] objects have been built on top of some parts of DirectX, such as Managed Direct3D<ref>{{cite web|url=http://msdn2.microsoft.com/en-us/magazine/cc164112.aspx|title=DirectX 9: Using the Managed Direct3D Graphics API in .NET|publisher=Microsoft|work=microsoft.com}}</ref> and the XNA graphics library<ref>{{cite web|url=http://msdn2.microsoft.com/en-us/library/microsoft.xna.framework.graphics.aspx|title=Microsoft.Xna.Framework.Graphics Namespace|publisher=Microsoft|work=microsoft.com}}</ref> on top of Direct3D 9.

==Versions==

===DirectX 10===
{{See also|Direct3D#Direct3D 10|l1=Direct3D 10|List of games with DirectX 10 support}}
[[File:Microsoft-DirectX-10-Logo-wordmark.svg|thumb|Microsoft DirectX 10 logo wordmark]]
A major update to DirectX API, DirectX 10 ships with and is only available with [[Windows Vista]] and later; previous versions of Windows such as Windows XP are not able to run DirectX 10-exclusive applications. Rather, programs that are run on a Windows XP system with DirectX 10 hardware simply resort to the DirectX 9.0c code path, the latest available for Windows XP computers.<ref>{{cite web|url=https://msdn.microsoft.com/en-us/library/ee416788.aspx#WILL_DIRECTX_10_BE_AVAILABLE_FOR_WINDOWS_XP__|title=DirectX Frequently Asked Questions|publisher=Microsoft|work=microsoft.com}}</ref>

[[Features new to Windows Vista#DirectX|Changes for DirectX 10]] were extensive. Many former parts of DirectX API were deprecated in the latest DirectX SDK and are preserved for compatibility only: [[DirectInput]] was deprecated in favor of [[XInput]], [[DirectSound]] was deprecated in favor of the [[Cross-platform Audio Creation Tool]] system (XACT) and additionally lost support for hardware accelerated audio, since the [[Windows Vista audio architecture|Vista audio stack]] renders sound in software on the CPU. The DirectPlay DPLAY.DLL was also removed and was replaced with dplayx.dll; games that rely on this DLL must duplicate it and rename it to dplay.dll.

In order to achieve backwards compatibility, DirectX in Windows Vista contains several versions of Direct3D:<ref>{{cite web | url=https://msdn.microsoft.com/en-us/library/ee417756.aspx | title=Graphics APIs in Windows | author=Chuck Walbourn |date=August 2009 | work=MSDN | accessdate=2009-10-03}}</ref>
* '''Direct3D 9''': emulates Direct3D 9 behavior as it was on Windows XP. Details and advantages of Vista's [[Windows Display Driver Model]] are hidden from the application if WDDM drivers are installed. This is the only API available if there are only XP graphic drivers (XDDM) installed, after an upgrade to Vista for example.
* '''Direct3D 9Ex''' (known internally during Windows Vista development as 9.0L or 9.L): allows full access to the new capabilities of WDDM (if WDDM drivers are installed) while maintaining compatibility for existing Direct3D applications. The [[Windows Aero]] user interface relies on D3D 9Ex.
* '''Direct3D 10''': Designed around the new driver model in Windows Vista and featuring a number of improvements to rendering capabilities and flexibility, including [[High Level Shader Language|Shader Model 4]].

'''Direct3D 10.1''' is an incremental update of Direct3D 10.0 which shipped with, and required, [[Windows Vista Service Pack 1]].<ref name=Albanesius>{{cite news|last=Albanesius|first=Chloe|title=Microsoft Unleashes First Service Pack for Vista|url=http://www.pcmag.com/article2/0,1895,2177205,00.asp|accessdate=2007-08-29|newspaper=PC Magazine|date=2007-08-29}}</ref> This release mainly sets a few more image quality standards for graphics vendors, while giving developers more control over image quality.<ref>{{cite web|url=http://www.extremetech.com/article2/0,1558,2168429,00.asp?kc=ETRSS02129TX1K0000532|title=Microsoft Presents DirectX 10.1 Details at SIGGRAPH|date=2007-08-07|accessdate=2007-08-27}}</ref> It also adds support for cube map arrays, separate blend modes per-MRT, coverage mask export from a pixel shader, ability to run pixel shader per sample, access to multi-sampled depth buffers<ref>{{cite web|url=http://developer.amd.com/assets/GDC_2008_DirectX10.1.pdf |archiveurl=https://web.archive.org/web/20120410174855/http://developer.amd.com/assets/GDC_2008_DirectX10.1.pdf|title=Learn Network Inspire |publisher=AMD |date= |accessdate=2012-12-30|archivedate=2012-04-17}}</ref> and requires that the video card supports Shader Model 4.1 or higher and 32-bit floating-point operations. Direct3D 10.1 still fully supports Direct3D 10 hardware, but in order to utilize all of the new features, updated hardware is required.<ref>{{cite web|url=http://xyzzy-links.blogspot.com/2007/08/directx-101-requires-no-new-gpu.html|title=DirectX 10.1 Requires No New GPU|date=2008-03-05|accessdate=2008-03-05|publisher=Windows Vista: The Complete Guide |archiveurl = http://web.archive.org/web/20071029115642/http://xyzzy-links.blogspot.com/2007/08/directx-101-requires-no-new-gpu.html <!-- Bot retrieved archive --> |archivedate = 2007-10-29}}</ref>

===DirectX 11===
{{See also|Direct3D#Direct3D 11|l1=Direct3D 11|List of games with DirectX 11 support}}
[[File:Microsoft-DirectX-11-Logo-wordmark.svg|thumb|Microsoft DirectX 11 logo wordmark]]
Microsoft unveiled DirectX 11 at the Gamefest 08 event in Seattle, with the major scheduled features including [[GPGPU]] support ([[DirectCompute]]), and Direct3D 11 with [[tessellation (computer graphics)|tessellation]] support<ref name="DX11Overview-EB">{{cite web|url=http://www.elitebastards.com/cms/index.php?option=com_content&task=view&id=611&Itemid=29|title=What's next for DirectX? A DirectX 11 overview — A DirectX 11 overview|date=September 1, 2008 |publisher=Elite Bastards|accessdate=2008-09-04}}</ref><ref name="DX11-bit-tech">{{cite web|url=http://www.bit-tech.net/bits/2008/09/17/directx-11-a-look-at-what-s-coming/1|title=DirectX 11: A look at what's coming|date=September 17, 2008|publisher=bit-tech.net}}</ref> and improved [[Thread (computer science)|multi-threading]] support to assist video game developers in developing games that better utilize [[multi-core]] processors.<ref name="Windows 7 and D3D 11 release date">[http://unmashable.com/pc-hardware/graphics-cards/what-new-features-will-directx-11-bring/ Windows 7 and D3D 11 release date]</ref> Direct3D 11 runs on Windows Vista, Windows 7, Windows 8 and Windows 10. Parts of the new API such as multi-threaded resource handling can be supported on Direct3D 9/10/10.1-class hardware. Hardware tessellation and Shader Model 5.0 require Direct3D 11 supporting hardware.<ref>{{cite web|url=http://blogs.msdn.com/ptaylor/archive/2008/07/28/gamefest-2008-and-the-directx-11-announcement.aspx|title=MSDN Blogs|publisher=Microsoft|work=msdn.com}}</ref> Microsoft has since released the Direct3D 11 Technical Preview.<ref>{{cite web|url=http://www.microsoft.com/downloads/details.aspx?FamilyId=5493F76A-6D37-478D-BA17-28B1CCA4865A&displaylang=en|title=Download DirectX Software Development Kit from Official Microsoft Download Center|publisher=Microsoft|work=microsoft.com}}</ref> Direct3D 11 is a strict superset of Direct3D 10.1 — all hardware and API features of version 10.1 are retained, and new features are added only when necessary for exposing new functionality. This helps to keep backwards compatibility with previous versions of DirectX.

Microsoft released the Final Platform Update for Windows Vista on October 27, 2009, which was 5 days after the initial release of Windows 7 (launched with Direct3D 11 as a base standard).

'''DirectX 11.1''' is included in [[Windows 8]]. It supports [[Windows Display Driver Model|WDDM 1.2]] for increased performance, features improved integration of [[Direct2D]] (now at version 1.1), [[Direct3D]], and [[DirectCompute]], and includes DirectXMath, [[XAudio2]], and [[XInput]] libraries from the XNA framework. It also features [[stereoscopy|stereoscopic 3D]] support for gaming and video.<ref name="W8preview">[http://download.microsoft.com/download/1/E/4/1E455D53-C382-4A39-BA73-55413F183333/Windows_Developer_Preview-Windows8_guide.pdf Windows 8 Developer Preview Guide]</ref> DirectX 11.1 was also partially [[backport]]ed to Windows 7, via the [[Windows 7 platform update]].<ref>{{cite web|url=https://msdn.microsoft.com/en-us/library/jj863687.aspx |title=Platform Update for Windows 7 (Windows) |publisher=Msdn.microsoft.com |date= |accessdate=2014-08-09}}</ref><ref name="Eimandar2013">{{cite book|author=Pooya Eimandar|title=DirectX 11.1 Game Programming|year=2013|publisher=Packt Publishing Ltd|isbn=978-1-84969-481-0|page=45}}</ref>

'''DirectX 11.2''' is included in [[Windows 8.1]] (including the RT version) and [[Windows Server 2012 R2#Windows Server 2012 R2|Windows Server 2012 R2]].<ref>{{cite web|title=DirectX download page|url=http://support.microsoft.com/kb/179113|publisher=Microsoft|accessdate=13 October 2013}}</ref> It added some new features to [[Direct2D]] like geometry realizations.<ref>{{cite web|url=https://msdn.microsoft.com/en-us/library/windows/desktop/dn363632(v=vs.85).aspx|title=Geometry Realizations Overview|publisher=Microsoft|work=microsoft.com}}</ref> It also added swap chain composition, which allows some elements of the scene to be rendered at lower resolutions and then composited via hardware overlay with other parts rendered at higher resolution.<ref name=D3D11.2W8.1>{{cite web|url=http://channel9.msdn.com/Events/Build/2013/3-062|author=Bennett Sorbo|title=What's New in Direct3D 11.2|work =Channel9 - [[Build (developer conference)|BUILD]] 2013| date=June 26, 2013 |at=around 20:00}}</ref>

'''DirectX 11.X''' is a superset of DirectX 11.2 running on the [[Xbox One]].<ref>{{cite web|url=http://semiaccurate.com/2013/10/16/microsoft-rejects-mantle/|title=Microsoft officially turns down Mantle|work=semiaccurate.com}}</ref> It actually includes some features, such as draw bundles, that were later announced as part of DirectX 12.<ref>Chris Tector's segment of http://channel9.msdn.com/Blogs/DirectX-Developer-Blog/DirectX-Evolving-Microsoft-s-Graphics-Platform (starting approx. 18 minute in.)</ref>

'''DirectX 11.3''' was announced along with DirectX 12 at GDC and will be released in 2015. It is meant to complement DirectX 12 as a higher-level alternative.<ref>{{cite web |url= http://www.anandtech.com/show/8544/microsoft-details-direct3d-113-12-new-features |title= Microsoft Details Direct3D 11.3 & 12 New Rendering Features |first= Ryan |last= Smith |publisher= [[AnandTech]] |date= September 18, 2014 |accessdate= November 6, 2014}}</ref>

===DirectX 12===
{{See also|Direct3D#Direct3D 12|l1=Direct3D 12|List of games with DirectX 12 support}}

'''DirectX 12''' was announced by Microsoft on March 20, at [[Game Developers Conference|GDC]] 2014 and was officially launched alongside [[Windows 10]] on July 29, 2015. DirectX 12 APIs are also expected to feature on the [[Xbox One]] and [[Windows Phone]].<ref>{{cite web |url=http://www.neowin.net/news/directx-12-a-game-changer-for-xbox-one |title=DirectX 12: A game changer for Xbox One |last1=Wardell |first1=Brad  |date=April 4, 2015 |website=Neowin |publisher=Neowin LLC |access-date=August 22, 2015}}</ref> The previous version of DirectX (DirectX 11.X) that runs on the Xbox One already includes a subset of the features in DirectX 12,<ref name="Direct3D 12 API Preview">{{cite web |last1=McMullen |first1=Max |title=Direct3D 12 API Preview |url=https://channel9.msdn.com/Events/Build/2014/3-564 |website=[[Channel 9 (Microsoft)|Channel 9]] |publisher=[[Microsoft]] |date=2 April 2014}}</ref> Microsoft has stated that the performance improvements of DirectX 12 on the Xbox One will not be as substantial as that on the PC.<ref>{{cite web|url=http://www.extremetech.com/gaming/184768-head-of-xbox-warns-gamers-not-to-expect-dramatic-improvements-from-dx12/|title=Xbox One chief warns gamers not to expect dramatic improvements from DirectX 12 - ExtremeTech|work=ExtremeTech|accessdate=30 September 2014}}</ref>

The primary feature highlight for the new release of DirectX was the introduction of advanced [[Low-level programming language|low-level programming]] APIs for [[Direct3D 12]] which can reduce driver overhead, developers are now able to implement their own command lists and buffers to the GPU, allowing for more efficient resource utilisation through [[Parallel computing|parallel computation]]. Lead developer Max McMullen, stated that the main goal of Direct3D 12 is to achieve "console-level efficiency on phone, tablet and PC".<ref name="Direct3D 12 API Preview"/> The release of Direct3D 12 comes alongside other initiatives for low-overhead graphics APIs including AMD's [[Mantle (API)|Mantle]] for AMD graphics cards, Apple's [[Metal (API)|Metal]] for iOS and OS X and [[Khronos Group]]'s cross-platform [[Vulkan (API)|Vulkan]].

Multiadapter support will feature in DirectX 12 allowing developers to utilise multiple GPUs on a system simultaneously, multi-GPU support was previously dependent on vendor implementations such as [[AMD CrossFireX]] or [[Scalable Link Interface|NVIDIA SLI]].<ref>{{cite web |url=http://www.pcgamer.com/directx-12-will-be-able-to-use-your-integrated-gpu-to-improve-performance/ |title=DirectX 12 will be able to use your integrated GPU to improve performance |last1=Moore |first1=Bo |date=May 5, 2015 |website=PC Gamer |publisher=Future US |access-date=August 22, 2015}}</ref><ref>{{cite web |url=http://www.pcper.com/reviews/Graphics-Cards/BUILD-2015-Final-DirectX-12-Reveal |title=BUILD 2015: The Final DirectX 12 Reveal |last1=Michaud |first1=Scott |date=May 4, 2015 |website=PC Perspective |publisher=PC Perspective |access-date=August 22, 2015}}</ref><ref>{{cite web |url=http://blogs.msdn.com/b/directx/archive/2015/07/29/windows-10-and-directx-12-released.aspx |title=Windows 10 and DirectX 12 released! |last1=Langley |first1=Bryan |date=July 29, 2015 |website=MSDN DirectX Developer Blog |publisher=Microsoft |access-date=August 22, 2015}}</ref><ref>{{cite web |url=http://blogs.msdn.com/b/directx/archive/2015/05/01/directx-12-multiadapter-lighting-up-dormant-silicon-and-making-it-work-for-you.aspx |title=DirectX 12 Multiadapter: Lighting up dormant silicon and making it work for you |last1=Yeung |first1=Andrew |date=April 30, 2015 |website=MSDN DirectX Developer Blog |publisher=Microsoft |access-date=August 22, 2015}}</ref>
:''Implicit Multiadapter'' support will work in a similar manner to previous versions of DirectX where frames are rendered alternately across linked GPUs of similar compute-power.
:''Explicit Multiadapter'' will provide two distinct API patterns to developers. ''Linked GPUs'' will allow DirectX to view graphics cards in SLI or CrossFireX as a single GPU and use the combined resources. Whereas ''Unlinked GPUs'' will allow GPUs from diffrerent vendors to be utilised by DirectX, such as supplementing the [[Graphics processing unit#Dedicated graphics cards|dedicated GPU]] with the [[Graphics processing unit#Integrated graphics solutions|integrated GPU]] on the CPU, or combining AMD and NVIDIA cards. However, elaborate mixed multi-GPU setups requires significantly more attentive developer support.

DirectX 12 will be essentially supported on all [[Fermi (microarchitecture)|Fermi]] and later Nvidia GPUs, on AMD's [[Graphics Core Next|GCN]]-based chips and on Intel's [[Haswell (microarchitecture)|Haswell]] and later processors' graphics units.<ref name="anand12">{{cite web|url=http://www.anandtech.com/show/7889/microsoft-announces-directx-12-low-level-graphics-programming-comes-to-directx/2|title=AnandTech - Microsoft Announces DirectX 12: Low Level Graphics Programming Comes To DirectX|author=Ryan Smith|work=anandtech.com}}</ref>

At [[SIGGRAPH]] 2014, Intel released a demo showing a computer generated [[asteroid field]], in which DirectX 12 was claimed to be 50%-70% more efficient than DirectX 11 in rendering speed and CPU power consumption.<ref>{{cite web|last1=Yeung|first1=Andrew|title=DirectX 12 - High Performance and High Power Savings|url=http://blogs.msdn.com/b/directx/archive/2014/08/13/directx-12-high-performance-and-high-power-savings.aspx|website=DirectX Developer Blog|publisher=[[Microsoft]]|date=13 August 2014}}</ref><ref>{{cite web|last1=Lauritze|first1=Andrew|title=SIGGRAPH 2014: DirectX 12 on Intel|url=https://software.intel.com/en-us/blogs/2014/08/11/siggraph-2014-directx-12-on-intel|website=Developer Zone|publisher=[[Intel]]|date=11 August 2014}}</ref>

''[[Ashes of the Singularity]]'' was the first publically available game to utilise DirectX 12. Testing by ''[[Ars Technica]]'' in August 2015 revealed slight performance regressions in DirectX 12 over DirectX 11 mode for the [[GeForce 900 series|Nvidia GeForce 980 Ti]], whereas the [[AMD Radeon Rx 200 series|AMD Radeon R9 290x]] achieved consistent performance improvements of up to 70% under DirectX 12, in some scenarios the AMD outperformed the more powerful Nvidia under DirectX 12. The performance discrepancies may be due to poor Nvidia driver optimisations for DirectX 12, or even hardware limitations of the card which was optimised for DirectX 11 serial execution, however the exact cause remains unclear.<ref name="arsuk-dx12bench">{{cite web |url=http://arstechnica.co.uk/gaming/2015/08/directx-12-tested-an-early-win-for-amd-and-disappointment-for-nvidia/ |title=DirectX 12 tested: An early win for AMD, and disappointment for Nvidia |work=Ars Technica UK |author=Walton, Mark |date=August 19, 2015 |accessdate=August 19, 2015}}</ref>

===Release history===
{| class="wikitable" style="margin:auto; width:auto; font-size:90%; text-align:left;"
|+ Table of DirectX versions
|-
! style="text-align:center;" | DirectX version
! Version number
! Release date
! Supported operating system(s)/platforms
|-
|style="text-align:center;" |1.0 || 4.02.0095 || September 30, 1995 ||  
|-
|style="text-align:center;" |2.0 ||   || 1996 || ''Was shipped only with a few 3rd party applications''
|-
|style="text-align:center;" |2.0a || 4.03.00.1096 || June 5, 1996 || [[Windows 95]] OSR2 and [[Windows NT 4.0]]
|-
|rowspan="2" style="text-align:center;" | 3.0 || 4.04.00.0068 || September 15, 1996 || &nbsp;
|-
|4.04.00.0069 || 1996 || ''Later package of DirectX 3.0 included Direct3D 4.04.00.0069''
|-
|style="text-align:center;" |3.0a || 4.04.00.0070 || December 1996 || Windows NT 4.0 SP3 (and above)<br />''last supported version of DirectX for Windows NT 4.0''
|-
|style="text-align:center;" |3.0b || 4.04.00.0070 || December 1996 || ''This was a very minor update to 3.0a that fixed a cosmetic problem with the Japanese version of Windows 95''
|-
|style="text-align:center;" |4.0  || colspan=3 |  Never launched
|-
|style="text-align:center;" |5.0 || 4.05.00.0155 (RC55) || August 4, 1997 || ''Available as a beta for Windows 2000 that would install on Windows NT 4.0''
|-
|rowspan="2" style="text-align:center;" |5.2 || 4.05.01.1600 (RC00) || May 5, 1998 || ''DirectX 5.2 release for [[Windows 95]]''
|-
|4.05.01.1998 (RC0) || June 25, 1998 || [[Windows 98]] exclusive
|-
|style="text-align:center;" |6.0 || 4.06.00.0318 (RC3) || August 7, 1998 || [[Windows CE]] as implemented on [[Dreamcast]]
|-
|style="text-align:center;" |6.1 || 4.06.02.0436 (RC0) || February 3, 1999 || 
|-
|style="text-align:center;" |6.1a || 4.06.03.0518 (RC0) || May 5, 1999 || [[Windows 98 SE]] exclusive
|-
|rowspan="2" style="text-align:center;" |7.0 || 4.07.00.0700 (RC1) || September 22, 1999 || 
|-
|4.07.00.0700 || February 17, 2000 || [[Windows 2000]]
|-
|rowspan="2" style="text-align:center;" |7.0a || 4.07.00.0716 (RC0) || March 8, 2000 || 
|-
|4.07.00.0716 (RC1) || 2000 || 
|-
|style="text-align:center;" |7.1 || 4.07.01.3000 (RC1) || September 14, 2000 || [[Windows Me]] exclusive
|-
|style="text-align:center;" |8.0 || 4.08.00.0400 (RC10) || November 12, 2000 || 
|-
|style="text-align:center;" |8.0a || 4.08.00.0400 (RC14) || February 5, 2001 || ''Last supported version for Windows 95 and last version to have software rendering support''<ref>{{cite web|url=http://ueu.co/3d-graphics-accelerators/|title=3D Graphics Accelerators|work=ueu.co}}</ref>
|-
|rowspan="2" style="text-align:center;" |8.1 || 4.08.01.0810 || October 25, 2001 || [[Windows XP]], Windows XP SP1, [[Windows Server 2003]] and [[Xbox (console)|Xbox]] exclusive
|-
|4.08.01.0881 (RC7) || November 8, 2001 || ''This version is for the down level operating systems<br />(Windows 98, Windows Me and Windows 2000)''
|-
|style="text-align:center;" |8.1a || 4.08.01.0901 (RC?) || 2002 || ''This release includes an update to Direct3D (D3d8.dll)''
|-
|style="text-align:center;" |8.1b || 4.08.01.0901 (RC7) || June 25, 2002 || ''This update includes a fix to DirectShow on Windows 2000 (Quartz.dll)''
|-
|style="text-align:center;" |8.2 || 4.08.02.0134 (RC0) || 2002 || ''Same as the DirectX 8.1b but includes DirectPlay 8.2''
|-
|style="text-align:center;" |9.0 || 4.09.00.0900 (RC4) || December 19, 2002 || 
|-
|style="text-align:center;" |9.0a || 4.09.00.0901 (RC6) || March 26, 2003 || 
|-
|style="text-align:center;" |9.0b || 4.09.00.0902 (RC2) || August 13, 2003 || 
|-
|rowspan="3" style="text-align:center;" |9.0c<ref>{{cite web|url=http://www.microsoft.com/downloads/details.aspx?FamilyID=2da43d38-db71-4c1b-bc6a-9b6652cd92a3|title=Download DirectX End-User Runtime Web Installer from Official Microsoft Download Center|publisher=Microsoft|work=microsoft.com}}</ref> || 4.09.00.0903 || || Windows XP SP2 exclusive
|-
|4.09.00.0904 (RC0) || August 4, 2004 || 
|-
|4.09.00.0904 || August 6, 2004 / April 21, 2008* || [[Xbox 360]], Windows XP SP2, SP3*, Windows Server 2003 SP1 and Windows Server 2003 R2
|-
|style="text-align:center;" |10 || 6.00.6000.16386 || November 30, 2006 || [[Windows Vista]] exclusive
|-
|rowspan="2" style="text-align:center;" |10.1 || 6.00.6001.18000 || February 4, 2008 || [[Windows Vista SP1]], [[Windows Server 2008]]<br />''includes Direct3D 10.1''
|-
|6.00.6002.18005 || April 28, 2009 || [[Windows Vista SP2]], [[Windows Server 2008#Service Pack 2|Windows Server 2008 SP2]]<br />''includes Direct3D 10.1''
|-
|rowspan="3" style="text-align:center;" |11 || 6.01.7600.16385 || October 22, 2009 || [[Windows 7]], [[Windows Server 2008 R2]]
|-
|| 6.00.6002.18107 || October 27, 2009 || Windows Vista SP2 and Windows Server 2008 SP2, through the [http://support.microsoft.com/kb/971644/ Platform Update for Windows Vista and Windows Server 2008]<ref>{{cite web|url=http://www.pcgameshardware.com/aid,695119/Microsoft-upgrades-Windows-Vista-with-DirectX-11/News/|title=Microsoft upgrades Windows Vista with DirectX 11|work=pcgameshardware.com}}</ref>
|-
|6.01.7601.17514 || February 16, 2011 || [[Windows 7 SP1]], [[Windows Server 2008 R2#Service Pack 1|Windows Server 2008 R2 SP1]]
|-
|style="text-align:center;" |11.1 || 6.02.9200.16384 || August 1, 2012 || [[Windows 8]], [[Windows RT]], [[Windows Server 2012]]
|-
|style="text-align:center;" |11.2 || 6.03.9600.16384 || October 18, 2013 || [[Windows 8.1]], [[Windows RT]], [[Windows Server 2012 R2]]
|-
|style="text-align:center;" |12.0 ||10.00.10240.16384 || July 29, 2015 || [[Windows 10]], [[Xbox One]]
|-
! DirectX version
! Version number
! Release date
! Supported operating system(s)/platforms
|}

;Notes:

# DirectX 4 was never released. Raymond Chen of Microsoft explained in his book, ''The Old New Thing'', that after DirectX 3 was released, Microsoft began developing versions 4 and 5 at the same time. Version 4 was to be a shorter-term release with small features, whereas version 5 would be a more substantial release. The lack of interest from game developers in the features stated for DirectX 4 resulted in it being shelved, and the corpus of documents that already distinguished the two new versions resulted in Microsoft choosing to not re-use version 4 to describe features intended for version 5.<ref>{{cite book
| title = The Old New Thing
| edition = 1st
| chapter = Etymology and History
| page = 330
| last = Chen
| first = Raymond
| authorlink =
| year = 2006
| publisher = Pearson Education
| isbn = 0-321-44030-7
}}</ref><ref>{{cite web|url=http://blogs.msdn.com/b/oldnewthing/archive/2004/01/22/61647.aspx |title=What happened to DirectX 4? - The Old New Thing - Site Home - MSDN Blogs |publisher=Blogs.msdn.com |date=2004-01-22 |accessdate=2012-12-30}}</ref>
# The version number as reported by Microsoft's [[DxDiag]] tool (version 4.09.0000.0900 and higher) use the x.xx.xxxx.xxxx format for version numbers. However, the DirectX and Windows XP [[Microsoft Developer Network|MSDN]] page claims that the registry always has been in the x.xx.xx.xxxx format. Put another way, when the above table lists a version as '4.09.00.0904' Microsoft's [[DxDiag]] tool may have it as '4.09.0000.0904'.<ref>[http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/directx9_c_Dec_2004/directx/directxsdk/dxandxp.asp DirectX and Windows XP]</ref>
# Periodic updates  were released for DirectX 9, starting from 4.09.00.0904 (RC0 for DX 9.0c) in October 2004, released bimonthly until August 2007, and quarterly thereafter. The last periodic update was released in June 2010<ref>{{cite web|url=http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=3b170b25-abab-4bc3-ae91-50ceb6d8fa8d|title=Download DirectX End-User Runtimes (June 2010) from Official Microsoft Download Center|publisher=Microsoft|work=microsoft.com}}</ref>
::''The February 9, 2005 release is the first 64-bit capable build.''<ref>[http://download.microsoft.com/download/6/3/e/63e8f5ff-02d8-4baf-93b7-4d6f96b9610e/directx_9c_Dec04sdk_redist.exe Direct link to] [http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=2c40a7a5-7742-44d2-9f5c-420815448ea4 last '''pure 32-bit''' DirectX 9.0c from December 13, 2004] & [http://download.microsoft.com/download/1/e/5/1e5135a7-552b-42a6-a7ff-7646522f9277/directx_9c_Feb05sdk_redist.exe Direct link to] [http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=03c30962-4b78-4e59-8c70-32998dceffe5 first '''64-bit capable''' DirectX 9.0c from February 9, 2005]</ref> ''The last build for Windows 98SE/Me is the redistributable from December 13, 2006.''<ref>{{cite web|title=DirectX End-User Runtimes – December 2006|url=http://www.microsoft.com/en-us/download/details.aspx?id=353|website=Download Center|publisher=[[Microsoft]]|accessdate=7 February 2015|date=13 December 2006}}</ref><ref>{{cite web|title=DirectX End-User Runtimes – February 2007|url=http://www.microsoft.com/en-us/download/details.aspx?id=7087|website=Download Center|publisher=[[Microsoft]]|accessdate=7 February 2015|date=13 February 2007}}</ref> The last build for Windows 2000 is the redistributable from February 5, 2010.<ref>{{cite web|url=http://www.microsoft.com/downloads/details.aspx?familyid=0CEF8180-E94A-4F56-B157-5AB8109CB4F5&displaylang=en|title=Download DirectX End-User Runtimes (February 2010) from Official Microsoft Download Center|publisher=Microsoft|work=microsoft.com}}</ref> April 2006 is the first official support to Windows Vista<ref>{{cite web|title=DirectX End-User Runtimes (April 2006) Full Download|url=http://www.microsoft.com/en-us/download/details.aspx?id=15478|website=Download Center|publisher=[[Microsoft]]|accessdate=7 February 2015|date=6 April 2006}}</ref> and August 2009 is the first official support to Windows 7 and DX11 update<ref>{{cite web|url=http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=0cf368e5-5ce1-4032-a207-c693d210f616|title=Download DirectX End-User Runtimes (March 2009) from Official Microsoft Download Center|publisher=Microsoft|work=microsoft.com}}</ref>

==Compatibility==
Various releases of Windows have included and supported various versions of DirectX, allowing newer versions of the operating system to continue running applications designed for earlier versions of DirectX until those versions can be gradually phased out in favor of newer APIs, drivers, and hardware.

APIs such as Direct3D and DirectSound need to interact with hardware, and they do this through a [[device driver]].  Hardware manufacturers have to write these drivers for a particular DirectX version's device driver interface (or DDI), and test each individual piece of hardware to make them DirectX compatible. Some hardware devices have only DirectX compatible drivers (in other words, one must install DirectX in order to use that hardware). Early versions of DirectX included an up-to-date library of all of the DirectX compatible drivers currently available. This practice was stopped however, in favor of the web-based [[Windows Update]] driver-update system, which allowed users to download only the drivers relevant to their hardware, rather than the entire library.

Prior to DirectX 10, DirectX runtime was designed to be ''backward compatible'' with older drivers, meaning that newer versions of the APIs were designed to interoperate with older drivers written against a previous version's DDI. The application programmer had to query the available hardware capabilities using a complex system of "cap bits" each tied to a particular hardware feature. Direct3D 7 and earlier would work on any version of the DDI, Direct3D 8 requires a minimum DDI level of 6 and Direct3D 9 requires a minimum DDI level of 7.<ref name=MSDN>{{cite web|last=MSN|title=Minimum DDI requirements|url=https://msdn.microsoft.com/en-us/library/windows/desktop/bb219840(v=vs.85).aspx|publisher=Microsoft|accessdate=2 August 2012}}</ref>
However, the Direct3D 10 runtime in Windows Vista cannot run on older hardware drivers due to the significantly updated DDI, which requires a unified feature set and abandons the use of "cap bits".

[[Direct3D 10.1]] introduces "[[Direct3D#Feature levels|feature levels]]" 10_0 and 10_1, which allow use of only the hardware features defined in the specified version of Direct3D API. [[Direct3D 11]] adds level 11_0 and "10 Level 9" - a subset of the Direct3D 10 API designed to run on Direct3D 9 hardware, which has three feature levels (9_1, 9_2 and 9_3) grouped by common capabilities of "low", "med" and "high-end" video cards; the runtime directly uses Direct3D 9 DDI provided in all WDDM drivers. Feature level 11_1 has been introduced with [[Direct3D 11.1]].

===.NET Framework===
In 2002, Microsoft released a version of DirectX compatible with the Microsoft [[.NET Framework]], thus allowing programmers to take advantage of DirectX functionality from within .NET applications using compatible languages such as managed C++ or the use of the [[C Sharp (programming language)|C#]] programming language. This API was known as "[[Managed DirectX]]" (or MDX for short), and claimed to operate at 98% of performance of the underlying native DirectX APIs. In December 2005, February 2006, April 2006, and August 2006, Microsoft released successive updates to this library, culminating in a beta version called Managed DirectX 2.0. While Managed DirectX 2.0 consolidated functionality that had previously been scattered over multiple assemblies into a single assembly, thus simplifying dependencies on it for software developers, development on this version has subsequently been discontinued, and it is no longer supported. The Managed DirectX 2.0 library expired on October 5, 2006.

During the [[Game Developers Conference|GDC]] 2006, Microsoft presented the [[Microsoft XNA|XNA Framework]], a new managed version of DirectX (similar but not identical to Managed DirectX) that is intended to assist development of games by making it easier to integrate DirectX, [[High Level Shader Language]] (HLSL) and other tools in one package. It also supports the execution of managed code on the Xbox 360. The [[Microsoft XNA#XNA Game Studio|XNA Game Studio Express RTM]] was made available on December 11, 2006, as a free download for Windows XP. Unlike the DirectX runtime, [[Managed DirectX]], [[Microsoft XNA|XNA Framework]] or the [[Xbox 360]] APIs (XInput, XACT etc.) have not shipped as part of Windows. Developers are expected to redistribute the runtime components along with their games or applications.

No Microsoft product including the latest XNA releases provides DirectX 10 support for the .NET Framework.

The other approach for DirectX in managed languages is to use third-party libraries like:

* [[SlimDX]], an open source library for DirectX programming on the .NET Framework
* [[SharpDX]],<ref>{{cite web|url=http://sharpdx.org/|title=SharpDX - Managed DirectX|publisher=|accessdate=30 September 2014}}</ref><ref>{{cite web|url=https://github.com/sharpdx/SharpDX|title=sharpdx/SharpDX|work=GitHub|accessdate=30 September 2014}}</ref> which is an open source project delivering the full DirectX API for .NET on all Windows platforms, allowing the development of high performance game, 2D and 3D graphics rendering as well as real-time sound applications 
* [http://sourceforge.net/projects/directshownet DirectShow.NET] for the DirectShow subset
* [http://code.msdn.microsoft.com/WindowsAPICodePack Windows API CodePack for .NET Framework], which is an open source library from Microsoft.

==Alternatives==
There are alternatives to the DirectX family of [[API]]s, with [[OpenGL]] and [[Mantle (API)|Mantle]] having the most features comparable to [[Direct3D]]. Examples of other APIs include [[Simple DirectMedia Layer|SDL]], [[Allegro library|Allegro]], [[OpenMAX]], [[OpenML]], [[OpenAL]], [[OpenCL]], [[FMOD]], [[SFML]] etc. Many of these libraries are cross-platform or have open codebases. There are also alternative implementations that aim to provide the same API, such as the one in [[Wine (software)|Wine]]. Furthermore, the developers of [[ReactOS]] are trying to reimplement DirectX under the name "ReactX".

==See also==
{{Portal|Microsoft}}
* [[Vulkan (API)]]
* [[Simple DirectMedia Layer]]
* [[Comparison of OpenGL and Direct3D]]
* [[Graphics Device Interface]] (GDI)
* [[Graphics pipeline]]
* [[DirectX plugin]]
* [[ActiveX]]
* [[List of games with DirectX 10 support]]
* [[List of games with DirectX 11 support]]
* [[List of games with DirectX 12 support]]

==References==
{{reflist|30em}}

==External links==
* [http://msdn.microsoft.com/directx Microsoft's DirectX developer site]
* {{dmoz|Computers/Programming/Libraries/DirectX/}}
* [http://hothardware.com/Articles/The-State-of-DirectX-10--Image-Quality--Performance/ The State of DirectX 10 - Image Quality & Performance]
* [http://www.pcper.com/comments.php?nid=7640 AMD talks about technical changes in DX11]

{{Windows Components}}
{{MS DevTools|close}}
{{Microsoft APIs|close}}

{{DEFAULTSORT:Directx}}
[[Category:1995 software]]
[[Category:Application programming interfaces]]
[[Category:DirectX]]
[[Category:Microsoft application programming interfaces]]
[[Category:Virtual reality]]