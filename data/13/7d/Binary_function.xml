<article title='Binary_function'><paragraph><template><target>distinguish</target><arg>Boolean function</arg><arg>Indicator function</arg></template><template><target>unreferenced</target><arg name="date">June 2009</arg><arg name="bot">yes</arg></template>In<space/><link><target>mathematics</target></link>, a<space/><bold>binary function</bold>, or<space/><bold>function of two variables</bold>, is a<space/><link><target>function (mathematics)</target><part>function</part></link><space/>which takes two inputs.</paragraph><paragraph>Precisely stated, a function<space/><extension extension_name='math'>f</extension><space/>is binary if there exists<space/><link><target>Set (mathematics)</target><part>set</part><trail>s</trail></link><space/><extension extension_name='math'>X, Y, Z</extension><space/>such that</paragraph><list type='ident'><listitem><extension extension_name='math'>\,f \colon X \times Y \rightarrow Z</extension></listitem></list><paragraph>where<space/><extension extension_name='math'>X \times Y</extension><space/>is the<space/><link><target>Cartesian product</target></link><space/>of<space/><extension extension_name='math'>X</extension><space/>and<space/><extension extension_name='math'>Y.</extension></paragraph><heading level='2'>Alternative definitions</heading><paragraph><link><target>Naive set theory</target><part>Set-theoretically</part></link>, one may represent a binary function as a<space/><link><target>subset</target></link><space/>of the<space/><link><target>Cartesian product</target></link><space/><italics>X</italics><space/><italics>Y</italics><space/><italics>Z</italics>, where (<italics>x</italics>,<italics>y</italics>,<italics>z</italics>) belongs to the subset<space/><link><target>if and only if</target></link><space/><italics>f</italics>(<italics>x</italics>,<italics>y</italics>) =<space/><italics>z</italics>.Conversely, a subset<space/><italics>R</italics><space/>defines a binary function if and only if<space/><link><target>universal quantification</target><part>for any</part></link><space/><italics>x</italics><space/>in<space/><italics>X</italics><space/>and<space/><italics>y</italics><space/>in<space/><italics>Y</italics>,<space/><link><target>existential quantification</target><part>there exists</part></link><space/>a<space/><link><target>uniqueness quantification</target><part>unique</part></link><space/><italics>z</italics><space/>in<space/><italics>Z</italics><space/>such that (<italics>x</italics>,<italics>y</italics>,<italics>z</italics>) belongs to<space/><italics>R</italics>.We then define<space/><italics>f</italics>(<italics>x</italics>,<italics>y</italics>) to be this<space/><italics>z</italics>.</paragraph><paragraph>Alternatively, a binary function may be interpreted as simply a<space/><link><target>function (mathematics)</target><part>function</part></link><space/>from<space/><italics>X</italics><space/><italics>Y</italics><space/>to<space/><italics>Z</italics>.Even when thought of this way, however, one generally writes<space/><italics>f</italics><space/>(<italics>x</italics>,<italics>y</italics>) instead of<space/><italics>f</italics>((<italics>x</italics>,<italics>y</italics>)).(That is, the same pair of parentheses is used to indicate both<space/><link><target>function application</target></link><space/>and the formation of an<space/><link><target>ordered pair</target></link>.)</paragraph><heading level='2'>Example division</heading><paragraph>Division of<space/><link><target>Integer</target><part>whole numbers</part></link><space/>can be thought of as a function; if<space/><bold>Z</bold><space/>is the set of<space/><link><target>integer</target><trail>s</trail></link>,<space/><bold>N</bold><xhtml:sup>+</xhtml:sup><space/>is the set of<space/><link><target>natural number</target><trail>s</trail></link><space/>(except for zero), and<space/><bold>Q</bold><space/>is the set of<space/><link><target>rational number</target><trail>s</trail></link>, then<space/><link><target>division (mathematics)</target><part>division</part></link><space/>is a binary function from<space/><bold>Z</bold><space/>and<space/><bold>N</bold><xhtml:sup>+</xhtml:sup><space/>to<space/><bold>Q</bold>.</paragraph><heading level='2'>Restrictions to ordinary functions</heading><paragraph>In turn, one can also derive ordinary functions of one variable from a binary function.Given any element<space/><italics>x</italics><space/>of<space/><italics>X</italics>, there is a function<space/><italics>f</italics><space/><xhtml:sup><italics>x</italics></xhtml:sup>, or<space/><italics>f</italics><space/>(<italics>x</italics>,), from<space/><italics>Y</italics><space/>to<space/><italics>Z</italics>, given by<space/><italics>f</italics><space/><xhtml:sup><italics>x</italics></xhtml:sup>(<italics>y</italics>) :=<space/><italics>f</italics><space/>(<italics>x</italics>,<italics>y</italics>).Similarly, given any element<space/><italics>y</italics><space/>of<space/><italics>Y</italics>, there is a function<space/><italics>f</italics><space/><xhtml:sub><italics>y</italics></xhtml:sub>, or<space/><italics>f</italics><space/>(,<italics>y</italics>), from<space/><italics>X</italics><space/>to<space/><italics>Z</italics>, given by<space/><italics>f</italics><space/><xhtml:sub><italics>y</italics></xhtml:sub>(<italics>x</italics>) :=<space/><italics>f</italics><space/>(<italics>x</italics>,<italics>y</italics>). In computer science, this identification between a function from<space/><italics>X</italics><space/><italics>Y</italics><space/>to<space/><italics>Z</italics><space/>and a function from<space/><italics>X</italics><space/>to<space/><italics>Z</italics><xhtml:sup><italics>Y</italics></xhtml:sup>, where<space/><italics>Z</italics><xhtml:sup><italics>Y</italics></xhtml:sup><space/>is the set of all functions from<space/><italics>Y</italics><space/>to<space/><italics>Z</italics>, is called<space/><italics><link><target>currying</target></link></italics>.</paragraph><heading level='2'>Generalisations</heading><paragraph>The various concepts relating to functions can also be generalised to binary functions.For example, the division example above is<space/><italics><link><target>surjective function</target><part>surjective</part></link></italics><space/>(or<space/><italics>onto</italics>) because every rational number may be expressed as a quotient of an integer and a natural number.This example is<space/><italics><link><target>injective function</target><part>injective</part></link></italics><space/>in each input separately, because the functions<space/><italics>f</italics><space/><xhtml:sup><italics>x</italics></xhtml:sup><space/>and<space/><italics>f</italics><space/><xhtml:sub><italics>y</italics></xhtml:sub><space/>are always injective.However, it's not injective in both variables simultaneously, because (for example)<space/><italics>f</italics><space/>(2,4) =<space/><italics>f</italics><space/>(1,2).</paragraph><paragraph>One can also consider<space/><italics>partial</italics><space/>binary functions, which may be defined only for certain values of the inputs.For example, the division example above may also be interpreted as a partial binary function from<space/><bold>Z</bold><space/>and<space/><bold>N</bold><space/>to<space/><bold>Q</bold>, where<space/><bold>N</bold><space/>is the set of all natural numbers, including zero.But this function is undefined when the second input is zero.</paragraph><paragraph>A<space/><link><target>binary operation</target></link><space/>is a binary function where the sets<space/><italics>X</italics>,<space/><italics>Y</italics>, and<space/><italics>Z</italics><space/>are all equal; binary operations are often used to define<space/><link><target>algebraic structure</target><trail>s</trail></link>.</paragraph><paragraph>In<space/><link><target>linear algebra</target></link>, a<space/><link><target>bilinear operator</target><part>bilinear transformation</part></link><space/>is a binary function where the sets<space/><italics>X</italics>,<space/><italics>Y</italics>, and<space/><italics>Z</italics><space/>are all<space/><link><target>vector space</target><trail>s</trail></link><space/>and the derived functions<space/><italics>f</italics><space/><xhtml:sup><italics>x</italics></xhtml:sup><space/>and<space/><italics>f</italics><xhtml:sub><italics>y</italics></xhtml:sub><space/>are all<space/><link><target>linear transformation</target><trail>s</trail></link>.A bilinear transformation, like any binary function, can be interpreted as a function from<space/><italics>X</italics><space/><italics>Y</italics><space/>to<space/><italics>Z</italics>, but this function in general won't be linear.However, the bilinear transformation can also be interpreted as a single linear transformation from the<space/><link><target>tensor product</target></link><space/><extension extension_name='math'>X \otimes Y</extension><space/>to<space/><italics>Z</italics>.</paragraph><heading level='2'>Generalisations to ternary and other functions</heading><paragraph><template><target>see also</target><arg>Multivariate function</arg></template>The concept of binary function generalises to<space/><italics>ternary</italics><space/>(or<space/><italics>3-ary</italics>)<space/><italics>function</italics>,<space/><italics>quaternary</italics><space/>(or<space/><italics>4-ary</italics>)<space/><italics>function</italics>, or more generally to<space/><italics>n-ary function</italics><space/>for any<space/><link><target>natural number</target></link><space/><italics>n</italics>.A<space/><italics>0-ary function</italics><space/>to<space/><italics>Z</italics><space/>is simply given by an element of<space/><italics>Z</italics>.One can also define an<space/><italics>A-ary function</italics><space/>where<space/><italics>A</italics><space/>is any<space/><link><target>Set (mathematics)</target><part>set</part></link>; there is one input for each element of<space/><italics>A</italics>.</paragraph><heading level='2'>Category theory</heading><paragraph>In<space/><link><target>category theory</target></link>,<space/><italics>n</italics>-ary functions generalise to<space/><italics>n</italics>-ary morphisms in a<space/><link><target>multicategory</target></link>.The interpretation of an<space/><italics>n</italics>-ary morphism as an ordinary morphisms whose domain is some sort of product of the domains of the original<space/><italics>n</italics>-ary morphism will work in a<space/><link><target>monoidal category</target></link>.The construction of the derived morphisms of one variable will work in a<space/><link><target>closed monoidal category</target></link>.The category of sets is closed monoidal, but so is the category of vector spaces, giving the notion of bilinear transformation above.</paragraph><paragraph><template><target>DEFAULTSORT:Binary Function</target></template><link><target>Category:Types of functions</target></link></paragraph></article>