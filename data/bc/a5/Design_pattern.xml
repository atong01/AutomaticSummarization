<article title='Design_pattern'><paragraph><template><target>Redirect</target><arg>Design patterns</arg><arg>the book</arg><arg>Design Patterns</arg></template>A<space/><bold>design pattern</bold><space/>is the re-usable form of a solution to a design problem. The idea was introduced by the architect<space/><link><target>Christopher Alexander</target></link><extension extension_name='ref' name="Alexander, A Pattern Language"><link><target>#Alexander, A Pattern Language</target><part>Alexander, A Pattern Language</part></link></extension><space/>and has been adapted for various other disciplines, most notably<space/><link><target>computer science</target></link>.<extension extension_name='ref' name="Gang of Four"><link><target>#Gang of Four</target><part>Gamma ''et al.''</part></link>, 1994, Design Patterns (the &quot;<link><target>Design Patterns (book)</target><part>Gang of Four</part></link>&quot; book)</extension></paragraph><paragraph>An organized collection of design patterns that relate to a particular field is called a<space/><link><target>pattern language</target></link>. This language gives a common terminology for discussing the situations designers are faced with.</paragraph><paragraph><template><target>quote</target><arg name="The elements of this language are entities called patterns. Each pattern describes a problem that occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice. â€” Christopher Alexander<ref name">"Alexander, A Pattern Language"/></arg></template></paragraph><paragraph>Documenting a pattern requires explaining why a particular situation causes problems, and how the components of the pattern relate to each other to give the solution.<extension extension_name='ref'><template><target>cite web</target><arg name="accessdate"><space/>2011-03-21
</arg><arg name="author"><space/>James Maioriello
</arg><arg name="date"><space/>2002-10-02
</arg><arg name="title"><space/>What Are Design Patterns and Do I Need Them?
</arg><arg name="quote"><space/>The patterns are documented from a template that identifies the information needed to understand the software problem and the solution in terms of the relationships between the classes and objects necessary to implement the solution.
</arg><arg name="url"><space/>http://www.developer.com/design/article.php/1474561/What-Are-Design-Patterns-and-Do-I-Need-Them.htm</arg></template></extension><space/><link><target>Christopher Alexander</target></link><space/>describes common design problems as arising from &quot;conflicting forces&quot; such as the conflict between wanting a room to be sunny and wanting it not to overheat on summer afternoons. A pattern would not tell the designer how many windows to put in the room; instead, it would propose a set of values to guide the designer toward a decision that is best for their particular application. Alexander, for example, suggests that enough windows should be included to direct light all around the room. He considers this a good solution because he believes it increases the enjoyment of the room by its occupants. Other authors might come to different conclusions, if they place higher value on heating costs, or material costs. These values, used by the pattern's author to determine which solution is &quot;best&quot;, must also be documented within the pattern.</paragraph><paragraph>Pattern documentation should also explain when it is applicable. Since two houses may be very different from one another, a design pattern for houses must be broad enough to apply to both of them, but not so vague that it doesn't help the designer make decisions. The range of situations in which a pattern can be used is called its context. Some examples might be &quot;all houses&quot;, &quot;all two-story houses&quot;, or &quot;all places where people spend time&quot;.</paragraph><paragraph>For instance, in Christopher Alexander's work, bus stops and waiting rooms in a surgery center are both within the context for the pattern &quot;A PLACE TO WAIT&quot;.</paragraph><heading level='2'>Domain-specific articles</heading><list type='bullet'><listitem><link><target>Pattern (architecture)</target></link>, in architecture</listitem><listitem><link><target>Software design pattern</target></link>, in software design.<list type='bullet'><listitem><link><target>Architectural pattern</target></link>, for software architecture</listitem><listitem><link><target>Interaction design pattern</target></link>, used in interaction design / human-computer interaction</listitem></list></listitem><listitem><link><target>Pedagogical patterns</target></link>, in teaching.</listitem></list><heading level='2'>See also</heading><list type='bullet'><listitem><link><target>Design Patterns (book)</target></link></listitem><listitem><link><target>Style guide</target></link>, repeatable graphic design elements and styles.</listitem><listitem><link><target>Design paradigm</target></link></listitem><listitem><link><target>Anti-pattern</target></link><space/>a counterpart term, referring to a common situation that creates problems</listitem></list><heading level='2'>Further reading</heading><list type='bullet'><listitem><template><target>cite book</target><arg name="first">Christopher<space/></arg><arg name="last">Alexander
<space/></arg><arg name="authorlink">Christopher Alexander
<space/></arg><arg name="title">[[A Pattern Language|A Pattern Language: Towns, Buildings, Construction]]
<space/></arg><arg name="publisher">[[Oxford University Press]]
<space/></arg><arg name="year">1977
<space/></arg><arg name="isbn">0-19-501919-9
<space/></arg><arg name="ref">Alexander, A Pattern Language
</arg></template></listitem><listitem><template><target>cite book</target><arg name="author"><space/>[[Thomas Erl|Erl, Thomas]]<space/></arg><arg name="title">SOA Design Patterns<space/></arg><arg name="publisher">Prentice Hall/PearsonPTR<space/></arg><arg name="location">New York<space/></arg><arg name="year">2009<space/></arg><arg name="pages">864<space/></arg><arg name="isbn">0-13-613516-1<space/></arg><arg name="oclc"><space/></arg><arg name="doi"></arg></template></listitem><listitem>Frank Buschmann,<space/><link><target>Kevlin Henney</target></link>,<space/><link><target>Douglas C. Schmidt</target></link><space/><link type='external' href='http://media.wiley.com/product_data/excerpt/28/04700590/0470059028.pdf'>&quot;On Patterns and Pattern Languages&quot;</link></listitem><listitem><template><target>cite book</target><arg name="title">[[Design Patterns (book)|Design Patterns (the '''Gang of Four''' book)]]
<space/></arg><arg name="author">Gamma, Helm, Johnson & Vlissides
<space/></arg><arg name="publisher">Addison-Wesley
<space/></arg><arg name="year">1994
<space/></arg><arg name="isbn">0-201-63361-2
<space/></arg><arg name="ref">Gang of Four
</arg></template><space/></listitem></list><paragraph><extension extension_name='ref'><template><target>cite web</target><arg name="accessdate"><space/>2014-07-16
</arg><arg name="author"><space/>James Coplien
</arg><arg name="date"><space/>2014-07-11
</arg><arg name="title"><space/>Patterns: The Notion is Grounded in Alexander's Work
</arg><arg name="quote"><space/>The GoF claims to take its pattern inspiration from Christopher Alexander (as they say in the front matter of the book), who popularized the term in the broader field of design. To Alexander a pattern: is always an element of pattern language; contributes to deep human feeling; and is always geometric in nature. At least some of the GoF patterns fail on at least one of these points, and several fail on all three. 
</arg><arg name="url"><space/>http://stackoverflow.com/questions/12981021/are-there-any-patterns-in-gof/24664544#24664544</arg></template></extension>(Note: there is debate about whether the &quot;Gang of Four&quot; book actually contains any patterns in the Alexandrian's sense.)</paragraph><list type='bullet'><listitem>Jenifer Tidwell.<space/><italics>Designing Interfaces</italics></listitem><listitem><link><target>Wolfgang Pree</target></link>.<space/><italics>Design Patterns for Object-Oriented Software Development</italics></listitem><listitem>Leitner, Helmut (2015).<space/><italics>Pattern Theory: Introduction and Perspectives on the Tracks of Christopher Alexander</italics>, ISBN 1505637430.</listitem></list><heading level='2'>References</heading><paragraph><template><target>reflist</target></template></paragraph><heading level='2'>External links</heading><list type='bullet'><listitem><link type='external' href='http://javadesign-patterns.blogspot.com/'>Java Design Patterns</link><space/>Full Tutorial</listitem><listitem><link type='external' href='http://codingplayground.blogspot.it/2009/01/design-patterns-c-full-collection-of.html'>Full collection of design patterns (Creational, Structural, Behavioural) in C++</link><space/>by Antonio Gulli</listitem><listitem><link type='external' href='http://tcorral.github.io/Design-Patterns-in-Javascript/'>Design Patterns in Javascript</link><space/>by Toms Corral</listitem></list><preblock><preline></preline></preblock><paragraph><template><target>Design</target></template></paragraph><paragraph><template><target>DEFAULTSORT:Design Pattern</target></template></paragraph><preblock><preline><link><target>Category:Architectural design</target></link></preline></preblock><paragraph><link><target>Category:Software design patterns</target></link></paragraph><paragraph><link><target>ja:</target></link><link><target>pl:Wzorzec projektowy</target></link><link><target>tr:Tasarm rnts</target></link><link><target>vi:Mu thit k</target></link><link><target>zh:</target></link></paragraph></article>